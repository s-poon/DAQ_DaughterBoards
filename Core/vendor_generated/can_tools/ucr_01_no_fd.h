/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.1 Tue Oct  1 16:49:30 2024.
 */

#ifndef UCR_01_NO_FD_H
#define UCR_01_NO_FD_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define UCR_01_NO_FD_FRONT_ANALOG1_FRAME_ID (0x103u)
#define UCR_01_NO_FD_FRONT_ANALOG2_FRAME_ID (0x104u)
#define UCR_01_NO_FD_ENCODER_POSITIONS_FRAME_ID (0x1f4u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES1_FRAME_ID (0x60eu)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES2_FRAME_ID (0x60fu)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES3_FRAME_ID (0x610u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES4_FRAME_ID (0x611u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES5_FRAME_ID (0x612u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES6_FRAME_ID (0x613u)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES1_FRAME_ID (0x618u)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES2_FRAME_ID (0x619u)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES3_FRAME_ID (0x61au)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES4_FRAME_ID (0x61bu)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES5_FRAME_ID (0x61cu)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES6_FRAME_ID (0x61du)
#define UCR_01_NO_FD_GPS_BEST_POS_FRAME_ID (0x50u)
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_FRAME_ID (0x201u)
#define UCR_01_NO_FD_CELL_VOLTAGE1_FRAME_ID (0x64u)
#define UCR_01_NO_FD_CELL_VOLTAGE2_FRAME_ID (0x65u)
#define UCR_01_NO_FD_CELL_VOLTAGE3_FRAME_ID (0x66u)
#define UCR_01_NO_FD_CELL_VOLTAGE4_FRAME_ID (0x67u)
#define UCR_01_NO_FD_CELL_VOLTAGE5_FRAME_ID (0x68u)
#define UCR_01_NO_FD_CELL_VOLTAGE6_FRAME_ID (0x69u)
#define UCR_01_NO_FD_CELL_VOLTAGE7_FRAME_ID (0x6au)
#define UCR_01_NO_FD_CELL_VOLTAGE8_FRAME_ID (0x6bu)
#define UCR_01_NO_FD_CELL_VOLTAGE9_FRAME_ID (0x6cu)
#define UCR_01_NO_FD_CELL_VOLTAGE10_FRAME_ID (0x6du)
#define UCR_01_NO_FD_CELL_VOLTAGE11_FRAME_ID (0x6eu)
#define UCR_01_NO_FD_CELL_VOLTAGE12_FRAME_ID (0x6fu)
#define UCR_01_NO_FD_CELL_VOLTAGE13_FRAME_ID (0x70u)
#define UCR_01_NO_FD_CELL_VOLTAGE14_FRAME_ID (0x71u)
#define UCR_01_NO_FD_CELL_VOLTAGE15_FRAME_ID (0x72u)
#define UCR_01_NO_FD_CELL_VOLTAGE16_FRAME_ID (0x73u)
#define UCR_01_NO_FD_CELL_VOLTAGE17_FRAME_ID (0x74u)
#define UCR_01_NO_FD_CELL_VOLTAGE18_FRAME_ID (0x75u)
#define UCR_01_NO_FD_CELL_VOLTAGE19_FRAME_ID (0x76u)
#define UCR_01_NO_FD_CELL_VOLTAGE20_FRAME_ID (0x77u)
#define UCR_01_NO_FD_CELL_VOLTAGE21_FRAME_ID (0x78u)
#define UCR_01_NO_FD_CELL_VOLTAGE22_FRAME_ID (0x79u)
#define UCR_01_NO_FD_CELL_VOLTAGE23_FRAME_ID (0x7au)
#define UCR_01_NO_FD_CELL_VOLTAGE24_FRAME_ID (0x7bu)
#define UCR_01_NO_FD_CELL_VOLTAGE25_FRAME_ID (0x7cu)
#define UCR_01_NO_FD_CELL_VOLTAGE26_FRAME_ID (0x7du)
#define UCR_01_NO_FD_CELL_VOLTAGE27_FRAME_ID (0x7eu)
#define UCR_01_NO_FD_CELL_VOLTAGE28_FRAME_ID (0x7fu)
#define UCR_01_NO_FD_CELL_VOLTAGE29_FRAME_ID (0x80u)
#define UCR_01_NO_FD_CELL_VOLTAGE30_FRAME_ID (0x81u)
#define UCR_01_NO_FD_CELL_VOLTAGE31_FRAME_ID (0x82u)
#define UCR_01_NO_FD_CELL_VOLTAGE32_FRAME_ID (0x83u)
#define UCR_01_NO_FD_CELL_VOLTAGE33_FRAME_ID (0x84u)
#define UCR_01_NO_FD_CELL_VOLTAGE34_FRAME_ID (0x85u)
#define UCR_01_NO_FD_CELL_VOLTAGE35_FRAME_ID (0x86u)
#define UCR_01_NO_FD_CELL_VOLTAGE36_FRAME_ID (0x87u)
#define UCR_01_NO_FD_CELL_VOLTAGE37_FRAME_ID (0x88u)
#define UCR_01_NO_FD_CELL_VOLTAGE38_FRAME_ID (0x89u)
#define UCR_01_NO_FD_CELL_VOLTAGE39_FRAME_ID (0x8au)
#define UCR_01_NO_FD_CELL_VOLTAGE40_FRAME_ID (0x8bu)
#define UCR_01_NO_FD_CELL_VOLTAGE41_FRAME_ID (0x8cu)
#define UCR_01_NO_FD_CELL_VOLTAGE42_FRAME_ID (0x8du)
#define UCR_01_NO_FD_CELL_VOLTAGE43_FRAME_ID (0x8eu)
#define UCR_01_NO_FD_THERMISTOR1_FRAME_ID (0xc8u)
#define UCR_01_NO_FD_THERMISTOR2_FRAME_ID (0xc9u)
#define UCR_01_NO_FD_THERMISTOR3_FRAME_ID (0xcau)
#define UCR_01_NO_FD_THERMISTOR4_FRAME_ID (0xcbu)
#define UCR_01_NO_FD_THERMISTOR5_FRAME_ID (0xccu)
#define UCR_01_NO_FD_THERMISTOR6_FRAME_ID (0xcdu)
#define UCR_01_NO_FD_THERMISTOR7_FRAME_ID (0xceu)
#define UCR_01_NO_FD_THERMISTOR8_FRAME_ID (0xcfu)
#define UCR_01_NO_FD_THERMISTOR9_FRAME_ID (0xd0u)
#define UCR_01_NO_FD_THERMISTOR10_FRAME_ID (0xd1u)
#define UCR_01_NO_FD_THERMISTOR11_FRAME_ID (0xd2u)
#define UCR_01_NO_FD_THERMISTOR12_FRAME_ID (0xd3u)
#define UCR_01_NO_FD_THERMISTOR13_FRAME_ID (0xd4u)
#define UCR_01_NO_FD_THERMISTOR14_FRAME_ID (0xd5u)
#define UCR_01_NO_FD_THERMISTOR15_FRAME_ID (0xd6u)
#define UCR_01_NO_FD_THERMISTOR16_FRAME_ID (0xd7u)
#define UCR_01_NO_FD_THERMISTOR17_FRAME_ID (0xd8u)
#define UCR_01_NO_FD_THERMISTOR18_FRAME_ID (0xd9u)
#define UCR_01_NO_FD_THERMISTOR19_FRAME_ID (0xdau)
#define UCR_01_NO_FD_THERMISTOR20_FRAME_ID (0xdbu)
#define UCR_01_NO_FD_THERMISTOR21_FRAME_ID (0xdcu)
#define UCR_01_NO_FD_THERMISTOR22_FRAME_ID (0xddu)
#define UCR_01_NO_FD_THERMISTOR23_FRAME_ID (0xdeu)
#define UCR_01_NO_FD_THERMISTOR24_FRAME_ID (0xdfu)
#define UCR_01_NO_FD_THERMISTOR25_FRAME_ID (0xe0u)
#define UCR_01_NO_FD_THERMISTOR26_FRAME_ID (0xe1u)
#define UCR_01_NO_FD_THERMISTOR27_FRAME_ID (0xe2u)
#define UCR_01_NO_FD_THERMISTOR28_FRAME_ID (0xe3u)
#define UCR_01_NO_FD_THERMISTOR29_FRAME_ID (0xe4u)
#define UCR_01_NO_FD_THERMISTOR30_FRAME_ID (0xe5u)
#define UCR_01_NO_FD_THERMISTOR31_FRAME_ID (0xe6u)
#define UCR_01_NO_FD_THERMISTOR32_FRAME_ID (0xe7u)
#define UCR_01_NO_FD_THERMISTOR33_FRAME_ID (0xe8u)
#define UCR_01_NO_FD_THERMISTOR34_FRAME_ID (0xe9u)
#define UCR_01_NO_FD_THERMISTOR35_FRAME_ID (0xeau)
#define UCR_01_NO_FD_THERMISTOR36_FRAME_ID (0xebu)
#define UCR_01_NO_FD_THERMISTOR37_FRAME_ID (0xecu)
#define UCR_01_NO_FD_THERMISTOR38_FRAME_ID (0xedu)
#define UCR_01_NO_FD_THERMISTOR39_FRAME_ID (0xeeu)
#define UCR_01_NO_FD_THERMISTOR40_FRAME_ID (0xefu)
#define UCR_01_NO_FD_THERMISTOR41_FRAME_ID (0xf0u)
#define UCR_01_NO_FD_THERMISTOR42_FRAME_ID (0xf1u)
#define UCR_01_NO_FD_THERMISTOR43_FRAME_ID (0xf2u)
#define UCR_01_NO_FD_THERMISTOR44_FRAME_ID (0xf3u)
#define UCR_01_NO_FD_THERMISTOR45_FRAME_ID (0xf4u)
#define UCR_01_NO_FD_THERMISTOR46_FRAME_ID (0xf5u)
#define UCR_01_NO_FD_THERMISTOR47_FRAME_ID (0xf6u)
#define UCR_01_NO_FD_THERMISTOR48_FRAME_ID (0xf7u)
#define UCR_01_NO_FD_THERMISTOR49_FRAME_ID (0xf8u)
#define UCR_01_NO_FD_PACK_VOLTAGE_FRAME_ID (0x05u)
#define UCR_01_NO_FD_TCU1_FRAME_ID (0x06u)
#define UCR_01_NO_FD_ACULV_CAN2_1_FRAME_ID (0x08u)
#define UCR_01_NO_FD_ACULV_CAN2_2_FRAME_ID (0x09u)
#define UCR_01_NO_FD_ACULV_CAN2_3_FRAME_ID (0x0au)
#define UCR_01_NO_FD_ACULV_CAN2_4_FRAME_ID (0x0bu)
#define UCR_01_NO_FD_ACULV_CAN1_1_FRAME_ID (0x28u)
#define UCR_01_NO_FD_ACULV_CAN1_2_FRAME_ID (0x29u)
#define UCR_01_NO_FD_TCU2_FRAME_ID (0x5au)
#define UCR_01_NO_FD_FRONT_FREQUENCY1_FRAME_ID (0x14u)
#define UCR_01_NO_FD_FRONT_FREQUENCY2_FRAME_ID (0x15u)
#define UCR_01_NO_FD_BAMOCAR_TX_DATA_FRAME_ID (0x181u)
#define UCR_01_NO_FD_PDM1_FRAME_ID (0x10u)

/* Frame lengths in bytes. */
#define UCR_01_NO_FD_FRONT_ANALOG1_LENGTH (8u)
#define UCR_01_NO_FD_FRONT_ANALOG2_LENGTH (8u)
#define UCR_01_NO_FD_ENCODER_POSITIONS_LENGTH (4u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES1_LENGTH (8u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES2_LENGTH (8u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES3_LENGTH (8u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES4_LENGTH (8u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES5_LENGTH (8u)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES6_LENGTH (8u)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES1_LENGTH (8u)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES2_LENGTH (8u)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES3_LENGTH (8u)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES4_LENGTH (8u)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES5_LENGTH (8u)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES6_LENGTH (8u)
#define UCR_01_NO_FD_GPS_BEST_POS_LENGTH (64u)
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_LENGTH (6u)
#define UCR_01_NO_FD_CELL_VOLTAGE1_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE2_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE3_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE4_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE5_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE6_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE7_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE8_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE9_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE10_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE11_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE12_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE13_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE14_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE15_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE16_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE17_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE18_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE19_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE20_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE21_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE22_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE23_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE24_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE25_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE26_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE27_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE28_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE29_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE30_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE31_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE32_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE33_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE34_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE35_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE36_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE37_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE38_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE39_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE40_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE41_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE42_LENGTH (8u)
#define UCR_01_NO_FD_CELL_VOLTAGE43_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR1_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR2_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR3_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR4_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR5_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR6_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR7_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR8_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR9_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR10_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR11_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR12_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR13_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR14_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR15_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR16_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR17_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR18_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR19_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR20_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR21_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR22_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR23_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR24_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR25_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR26_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR27_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR28_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR29_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR30_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR31_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR32_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR33_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR34_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR35_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR36_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR37_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR38_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR39_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR40_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR41_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR42_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR43_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR44_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR45_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR46_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR47_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR48_LENGTH (8u)
#define UCR_01_NO_FD_THERMISTOR49_LENGTH (8u)
#define UCR_01_NO_FD_PACK_VOLTAGE_LENGTH (4u)
#define UCR_01_NO_FD_TCU1_LENGTH (7u)
#define UCR_01_NO_FD_ACULV_CAN2_1_LENGTH (6u)
#define UCR_01_NO_FD_ACULV_CAN2_2_LENGTH (8u)
#define UCR_01_NO_FD_ACULV_CAN2_3_LENGTH (4u)
#define UCR_01_NO_FD_ACULV_CAN2_4_LENGTH (5u)
#define UCR_01_NO_FD_ACULV_CAN1_1_LENGTH (8u)
#define UCR_01_NO_FD_ACULV_CAN1_2_LENGTH (1u)
#define UCR_01_NO_FD_TCU2_LENGTH (1u)
#define UCR_01_NO_FD_FRONT_FREQUENCY1_LENGTH (8u)
#define UCR_01_NO_FD_FRONT_FREQUENCY2_LENGTH (8u)
#define UCR_01_NO_FD_BAMOCAR_TX_DATA_LENGTH (4u)
#define UCR_01_NO_FD_PDM1_LENGTH (8u)

/* Extended or standard frame types. */
#define UCR_01_NO_FD_FRONT_ANALOG1_IS_EXTENDED (0)
#define UCR_01_NO_FD_FRONT_ANALOG2_IS_EXTENDED (0)
#define UCR_01_NO_FD_ENCODER_POSITIONS_IS_EXTENDED (0)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES1_IS_EXTENDED (0)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES2_IS_EXTENDED (0)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES3_IS_EXTENDED (0)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES4_IS_EXTENDED (0)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES5_IS_EXTENDED (0)
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES6_IS_EXTENDED (0)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES1_IS_EXTENDED (0)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES2_IS_EXTENDED (0)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES3_IS_EXTENDED (0)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES4_IS_EXTENDED (0)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES5_IS_EXTENDED (0)
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES6_IS_EXTENDED (0)
#define UCR_01_NO_FD_GPS_BEST_POS_IS_EXTENDED (0)
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE1_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE2_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE3_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE4_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE5_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE6_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE7_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE8_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE9_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE10_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE11_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE12_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE13_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE14_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE15_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE16_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE17_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE18_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE19_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE20_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE21_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE22_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE23_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE24_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE25_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE26_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE27_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE28_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE29_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE30_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE31_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE32_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE33_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE34_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE35_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE36_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE37_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE38_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE39_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE40_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE41_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE42_IS_EXTENDED (0)
#define UCR_01_NO_FD_CELL_VOLTAGE43_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR1_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR2_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR3_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR4_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR5_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR6_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR7_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR8_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR9_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR10_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR11_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR12_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR13_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR14_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR15_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR16_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR17_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR18_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR19_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR20_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR21_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR22_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR23_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR24_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR25_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR26_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR27_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR28_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR29_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR30_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR31_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR32_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR33_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR34_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR35_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR36_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR37_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR38_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR39_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR40_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR41_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR42_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR43_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR44_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR45_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR46_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR47_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR48_IS_EXTENDED (0)
#define UCR_01_NO_FD_THERMISTOR49_IS_EXTENDED (0)
#define UCR_01_NO_FD_PACK_VOLTAGE_IS_EXTENDED (0)
#define UCR_01_NO_FD_TCU1_IS_EXTENDED (0)
#define UCR_01_NO_FD_ACULV_CAN2_1_IS_EXTENDED (0)
#define UCR_01_NO_FD_ACULV_CAN2_2_IS_EXTENDED (0)
#define UCR_01_NO_FD_ACULV_CAN2_3_IS_EXTENDED (0)
#define UCR_01_NO_FD_ACULV_CAN2_4_IS_EXTENDED (0)
#define UCR_01_NO_FD_ACULV_CAN1_1_IS_EXTENDED (0)
#define UCR_01_NO_FD_ACULV_CAN1_2_IS_EXTENDED (0)
#define UCR_01_NO_FD_TCU2_IS_EXTENDED (0)
#define UCR_01_NO_FD_FRONT_FREQUENCY1_IS_EXTENDED (0)
#define UCR_01_NO_FD_FRONT_FREQUENCY2_IS_EXTENDED (0)
#define UCR_01_NO_FD_BAMOCAR_TX_DATA_IS_EXTENDED (0)
#define UCR_01_NO_FD_PDM1_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define UCR_01_NO_FD_FRONT_ANALOG1_NAME "FrontAnalog1"
#define UCR_01_NO_FD_FRONT_ANALOG2_NAME "FrontAnalog2"
#define UCR_01_NO_FD_ENCODER_POSITIONS_NAME "EncoderPositions"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES1_NAME "FrontStrainGauges1"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES2_NAME "FrontStrainGauges2"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES3_NAME "FrontStrainGauges3"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES4_NAME "FrontStrainGauges4"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES5_NAME "FrontStrainGauges5"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES6_NAME "FrontStrainGauges6"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES1_NAME "RearStrainGauges1"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES2_NAME "RearStrainGauges2"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES3_NAME "RearStrainGauges3"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES4_NAME "RearStrainGauges4"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES5_NAME "RearStrainGauges5"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES6_NAME "RearStrainGauges6"
#define UCR_01_NO_FD_GPS_BEST_POS_NAME "GPSBestPos"
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_NAME "BamocarRxData"
#define UCR_01_NO_FD_CELL_VOLTAGE1_NAME "CellVoltage1"
#define UCR_01_NO_FD_CELL_VOLTAGE2_NAME "CellVoltage2"
#define UCR_01_NO_FD_CELL_VOLTAGE3_NAME "CellVoltage3"
#define UCR_01_NO_FD_CELL_VOLTAGE4_NAME "CellVoltage4"
#define UCR_01_NO_FD_CELL_VOLTAGE5_NAME "CellVoltage5"
#define UCR_01_NO_FD_CELL_VOLTAGE6_NAME "CellVoltage6"
#define UCR_01_NO_FD_CELL_VOLTAGE7_NAME "CellVoltage7"
#define UCR_01_NO_FD_CELL_VOLTAGE8_NAME "CellVoltage8"
#define UCR_01_NO_FD_CELL_VOLTAGE9_NAME "CellVoltage9"
#define UCR_01_NO_FD_CELL_VOLTAGE10_NAME "CellVoltage10"
#define UCR_01_NO_FD_CELL_VOLTAGE11_NAME "CellVoltage11"
#define UCR_01_NO_FD_CELL_VOLTAGE12_NAME "CellVoltage12"
#define UCR_01_NO_FD_CELL_VOLTAGE13_NAME "CellVoltage13"
#define UCR_01_NO_FD_CELL_VOLTAGE14_NAME "CellVoltage14"
#define UCR_01_NO_FD_CELL_VOLTAGE15_NAME "CellVoltage15"
#define UCR_01_NO_FD_CELL_VOLTAGE16_NAME "CellVoltage16"
#define UCR_01_NO_FD_CELL_VOLTAGE17_NAME "CellVoltage17"
#define UCR_01_NO_FD_CELL_VOLTAGE18_NAME "CellVoltage18"
#define UCR_01_NO_FD_CELL_VOLTAGE19_NAME "CellVoltage19"
#define UCR_01_NO_FD_CELL_VOLTAGE20_NAME "CellVoltage20"
#define UCR_01_NO_FD_CELL_VOLTAGE21_NAME "CellVoltage21"
#define UCR_01_NO_FD_CELL_VOLTAGE22_NAME "CellVoltage22"
#define UCR_01_NO_FD_CELL_VOLTAGE23_NAME "CellVoltage23"
#define UCR_01_NO_FD_CELL_VOLTAGE24_NAME "CellVoltage24"
#define UCR_01_NO_FD_CELL_VOLTAGE25_NAME "CellVoltage25"
#define UCR_01_NO_FD_CELL_VOLTAGE26_NAME "CellVoltage26"
#define UCR_01_NO_FD_CELL_VOLTAGE27_NAME "CellVoltage27"
#define UCR_01_NO_FD_CELL_VOLTAGE28_NAME "CellVoltage28"
#define UCR_01_NO_FD_CELL_VOLTAGE29_NAME "CellVoltage29"
#define UCR_01_NO_FD_CELL_VOLTAGE30_NAME "CellVoltage30"
#define UCR_01_NO_FD_CELL_VOLTAGE31_NAME "CellVoltage31"
#define UCR_01_NO_FD_CELL_VOLTAGE32_NAME "CellVoltage32"
#define UCR_01_NO_FD_CELL_VOLTAGE33_NAME "CellVoltage33"
#define UCR_01_NO_FD_CELL_VOLTAGE34_NAME "CellVoltage34"
#define UCR_01_NO_FD_CELL_VOLTAGE35_NAME "CellVoltage35"
#define UCR_01_NO_FD_CELL_VOLTAGE36_NAME "CellVoltage36"
#define UCR_01_NO_FD_CELL_VOLTAGE37_NAME "CellVoltage37"
#define UCR_01_NO_FD_CELL_VOLTAGE38_NAME "CellVoltage38"
#define UCR_01_NO_FD_CELL_VOLTAGE39_NAME "CellVoltage39"
#define UCR_01_NO_FD_CELL_VOLTAGE40_NAME "CellVoltage40"
#define UCR_01_NO_FD_CELL_VOLTAGE41_NAME "CellVoltage41"
#define UCR_01_NO_FD_CELL_VOLTAGE42_NAME "CellVoltage42"
#define UCR_01_NO_FD_CELL_VOLTAGE43_NAME "CellVoltage43"
#define UCR_01_NO_FD_THERMISTOR1_NAME "Thermistor1"
#define UCR_01_NO_FD_THERMISTOR2_NAME "Thermistor2"
#define UCR_01_NO_FD_THERMISTOR3_NAME "Thermistor3"
#define UCR_01_NO_FD_THERMISTOR4_NAME "Thermistor4"
#define UCR_01_NO_FD_THERMISTOR5_NAME "Thermistor5"
#define UCR_01_NO_FD_THERMISTOR6_NAME "Thermistor6"
#define UCR_01_NO_FD_THERMISTOR7_NAME "Thermistor7"
#define UCR_01_NO_FD_THERMISTOR8_NAME "Thermistor8"
#define UCR_01_NO_FD_THERMISTOR9_NAME "Thermistor9"
#define UCR_01_NO_FD_THERMISTOR10_NAME "Thermistor10"
#define UCR_01_NO_FD_THERMISTOR11_NAME "Thermistor11"
#define UCR_01_NO_FD_THERMISTOR12_NAME "Thermistor12"
#define UCR_01_NO_FD_THERMISTOR13_NAME "Thermistor13"
#define UCR_01_NO_FD_THERMISTOR14_NAME "Thermistor14"
#define UCR_01_NO_FD_THERMISTOR15_NAME "Thermistor15"
#define UCR_01_NO_FD_THERMISTOR16_NAME "Thermistor16"
#define UCR_01_NO_FD_THERMISTOR17_NAME "Thermistor17"
#define UCR_01_NO_FD_THERMISTOR18_NAME "Thermistor18"
#define UCR_01_NO_FD_THERMISTOR19_NAME "Thermistor19"
#define UCR_01_NO_FD_THERMISTOR20_NAME "Thermistor20"
#define UCR_01_NO_FD_THERMISTOR21_NAME "Thermistor21"
#define UCR_01_NO_FD_THERMISTOR22_NAME "Thermistor22"
#define UCR_01_NO_FD_THERMISTOR23_NAME "Thermistor23"
#define UCR_01_NO_FD_THERMISTOR24_NAME "Thermistor24"
#define UCR_01_NO_FD_THERMISTOR25_NAME "Thermistor25"
#define UCR_01_NO_FD_THERMISTOR26_NAME "Thermistor26"
#define UCR_01_NO_FD_THERMISTOR27_NAME "Thermistor27"
#define UCR_01_NO_FD_THERMISTOR28_NAME "Thermistor28"
#define UCR_01_NO_FD_THERMISTOR29_NAME "Thermistor29"
#define UCR_01_NO_FD_THERMISTOR30_NAME "Thermistor30"
#define UCR_01_NO_FD_THERMISTOR31_NAME "Thermistor31"
#define UCR_01_NO_FD_THERMISTOR32_NAME "Thermistor32"
#define UCR_01_NO_FD_THERMISTOR33_NAME "Thermistor33"
#define UCR_01_NO_FD_THERMISTOR34_NAME "Thermistor34"
#define UCR_01_NO_FD_THERMISTOR35_NAME "Thermistor35"
#define UCR_01_NO_FD_THERMISTOR36_NAME "Thermistor36"
#define UCR_01_NO_FD_THERMISTOR37_NAME "Thermistor37"
#define UCR_01_NO_FD_THERMISTOR38_NAME "Thermistor38"
#define UCR_01_NO_FD_THERMISTOR39_NAME "Thermistor39"
#define UCR_01_NO_FD_THERMISTOR40_NAME "Thermistor40"
#define UCR_01_NO_FD_THERMISTOR41_NAME "Thermistor41"
#define UCR_01_NO_FD_THERMISTOR42_NAME "Thermistor42"
#define UCR_01_NO_FD_THERMISTOR43_NAME "Thermistor43"
#define UCR_01_NO_FD_THERMISTOR44_NAME "Thermistor44"
#define UCR_01_NO_FD_THERMISTOR45_NAME "Thermistor45"
#define UCR_01_NO_FD_THERMISTOR46_NAME "Thermistor46"
#define UCR_01_NO_FD_THERMISTOR47_NAME "Thermistor47"
#define UCR_01_NO_FD_THERMISTOR48_NAME "Thermistor48"
#define UCR_01_NO_FD_THERMISTOR49_NAME "Thermistor49"
#define UCR_01_NO_FD_PACK_VOLTAGE_NAME "PackVoltage"
#define UCR_01_NO_FD_TCU1_NAME "TCU1"
#define UCR_01_NO_FD_ACULV_CAN2_1_NAME "ACULV_CAN2_1"
#define UCR_01_NO_FD_ACULV_CAN2_2_NAME "ACULV_CAN2_2"
#define UCR_01_NO_FD_ACULV_CAN2_3_NAME "ACULV_CAN2_3"
#define UCR_01_NO_FD_ACULV_CAN2_4_NAME "ACULV_CAN2_4"
#define UCR_01_NO_FD_ACULV_CAN1_1_NAME "ACULV_CAN1_1"
#define UCR_01_NO_FD_ACULV_CAN1_2_NAME "ACULV_CAN1_2"
#define UCR_01_NO_FD_TCU2_NAME "TCU2"
#define UCR_01_NO_FD_FRONT_FREQUENCY1_NAME "FrontFrequency1"
#define UCR_01_NO_FD_FRONT_FREQUENCY2_NAME "FrontFrequency2"
#define UCR_01_NO_FD_BAMOCAR_TX_DATA_NAME "BamocarTxData"
#define UCR_01_NO_FD_PDM1_NAME "PDM1"

/* Signal Names. */
#define UCR_01_NO_FD_FRONT_ANALOG1_ANALOG1_NAME "Analog1"
#define UCR_01_NO_FD_FRONT_ANALOG1_ANALOG2_NAME "Analog2"
#define UCR_01_NO_FD_FRONT_ANALOG1_ANALOG3_NAME "Analog3"
#define UCR_01_NO_FD_FRONT_ANALOG1_ANALOG4_NAME "Analog4"
#define UCR_01_NO_FD_FRONT_ANALOG2_ANALOG5_NAME "Analog5"
#define UCR_01_NO_FD_FRONT_ANALOG2_ANALOG6_NAME "Analog6"
#define UCR_01_NO_FD_FRONT_ANALOG2_ANALOG7_NAME "Analog7"
#define UCR_01_NO_FD_FRONT_ANALOG2_ANALOG8_NAME "Analog8"
#define UCR_01_NO_FD_ENCODER_POSITIONS_ENCODER1_NAME "Encoder1"
#define UCR_01_NO_FD_ENCODER_POSITIONS_ENCODER2_NAME "Encoder2"
#define UCR_01_NO_FD_ENCODER_POSITIONS_ENCODER3_NAME "Encoder3"
#define UCR_01_NO_FD_ENCODER_POSITIONS_ENCODER4_NAME "Encoder4"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES1_GAUGE1_NAME "Gauge1"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES1_GAUGE2_NAME "Gauge2"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES2_GAUGE3_NAME "Gauge3"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES2_GAUGE4_NAME "Gauge4"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES3_GAUGE5_NAME "Gauge5"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES3_GAUGE6_NAME "Gauge6"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES4_GAUGE7_NAME "Gauge7"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES4_GAUGE8_NAME "Gauge8"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES5_GAUGE9_NAME "Gauge9"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES5_GAUGE10_NAME "Gauge10"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES6_GAUGE11_NAME "Gauge11"
#define UCR_01_NO_FD_FRONT_STRAIN_GAUGES6_GAUGE12_NAME "Gauge12"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES1_GAUGE1_NAME "Gauge1"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES1_GAUGE2_NAME "Gauge2"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES2_GAUGE3_NAME "Gauge3"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES2_GAUGE4_NAME "Gauge4"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES3_GAUGE5_NAME "Gauge5"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES3_GAUGE6_NAME "Gauge6"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES4_GAUGE7_NAME "Gauge7"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES4_GAUGE8_NAME "Gauge8"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES5_GAUGE9_NAME "Gauge9"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES5_GAUGE10_NAME "Gauge10"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES6_GAUGE11_NAME "Gauge11"
#define UCR_01_NO_FD_REAR_STRAIN_GAUGES6_GAUGE12_NAME "Gauge12"
#define UCR_01_NO_FD_GPS_BEST_POS_LATITUDE_NAME "Latitude"
#define UCR_01_NO_FD_GPS_BEST_POS_LONGITUDE_NAME "Longitude"
#define UCR_01_NO_FD_GPS_BEST_POS_ALTITUDE_NAME "Altitude"
#define UCR_01_NO_FD_GPS_BEST_POS_STD_LATITUDE_NAME "stdLatitude"
#define UCR_01_NO_FD_GPS_BEST_POS_STD_LONGITUDE_NAME "stdLongitude"
#define UCR_01_NO_FD_GPS_BEST_POS_STD_ALTITUDE_NAME "stdAltitude"
#define UCR_01_NO_FD_GPS_BEST_POS_GPS_STATUS_NAME "gpsStatus"
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_REGID_NAME "REGID"
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_BYTE1_NAME "Byte1"
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_BYTE2_NAME "Byte2"
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_BYTE3_NAME "Byte3"
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_BYTE4_NAME "Byte4"
#define UCR_01_NO_FD_BAMOCAR_RX_DATA_BYTE5_NAME "Byte5"
#define UCR_01_NO_FD_CELL_VOLTAGE1_CELL1_NAME "Cell1"
#define UCR_01_NO_FD_CELL_VOLTAGE1_CELL2_NAME "Cell2"
#define UCR_01_NO_FD_CELL_VOLTAGE1_CELL3_NAME "Cell3"
#define UCR_01_NO_FD_CELL_VOLTAGE1_CELL4_NAME "Cell4"
#define UCR_01_NO_FD_CELL_VOLTAGE2_CELL5_NAME "Cell5"
#define UCR_01_NO_FD_CELL_VOLTAGE2_CELL6_NAME "Cell6"
#define UCR_01_NO_FD_CELL_VOLTAGE2_CELL7_NAME "Cell7"
#define UCR_01_NO_FD_CELL_VOLTAGE2_CELL8_NAME "Cell8"
#define UCR_01_NO_FD_CELL_VOLTAGE3_CELL9_NAME "Cell9"
#define UCR_01_NO_FD_CELL_VOLTAGE3_CELL10_NAME "Cell10"
#define UCR_01_NO_FD_CELL_VOLTAGE3_CELL11_NAME "Cell11"
#define UCR_01_NO_FD_CELL_VOLTAGE3_CELL12_NAME "Cell12"
#define UCR_01_NO_FD_CELL_VOLTAGE4_CELL13_NAME "Cell13"
#define UCR_01_NO_FD_CELL_VOLTAGE4_CELL14_NAME "Cell14"
#define UCR_01_NO_FD_CELL_VOLTAGE4_CELL15_NAME "Cell15"
#define UCR_01_NO_FD_CELL_VOLTAGE4_CELL16_NAME "Cell16"
#define UCR_01_NO_FD_CELL_VOLTAGE5_CELL17_NAME "Cell17"
#define UCR_01_NO_FD_CELL_VOLTAGE5_CELL18_NAME "Cell18"
#define UCR_01_NO_FD_CELL_VOLTAGE5_CELL19_NAME "Cell19"
#define UCR_01_NO_FD_CELL_VOLTAGE5_CELL20_NAME "Cell20"
#define UCR_01_NO_FD_CELL_VOLTAGE6_CELL21_NAME "Cell21"
#define UCR_01_NO_FD_CELL_VOLTAGE6_CELL22_NAME "Cell22"
#define UCR_01_NO_FD_CELL_VOLTAGE6_CELL23_NAME "Cell23"
#define UCR_01_NO_FD_CELL_VOLTAGE6_CELL24_NAME "Cell24"
#define UCR_01_NO_FD_CELL_VOLTAGE7_CELL25_NAME "Cell25"
#define UCR_01_NO_FD_CELL_VOLTAGE7_CELL26_NAME "Cell26"
#define UCR_01_NO_FD_CELL_VOLTAGE7_CELL27_NAME "Cell27"
#define UCR_01_NO_FD_CELL_VOLTAGE7_CELL28_NAME "Cell28"
#define UCR_01_NO_FD_CELL_VOLTAGE8_CELL29_NAME "Cell29"
#define UCR_01_NO_FD_CELL_VOLTAGE8_CELL30_NAME "Cell30"
#define UCR_01_NO_FD_CELL_VOLTAGE8_CELL31_NAME "Cell31"
#define UCR_01_NO_FD_CELL_VOLTAGE8_CELL32_NAME "Cell32"
#define UCR_01_NO_FD_CELL_VOLTAGE9_CELL33_NAME "Cell33"
#define UCR_01_NO_FD_CELL_VOLTAGE9_CELL34_NAME "Cell34"
#define UCR_01_NO_FD_CELL_VOLTAGE9_CELL35_NAME "Cell35"
#define UCR_01_NO_FD_CELL_VOLTAGE9_CELL36_NAME "Cell36"
#define UCR_01_NO_FD_CELL_VOLTAGE10_CELL37_NAME "Cell37"
#define UCR_01_NO_FD_CELL_VOLTAGE10_CELL38_NAME "Cell38"
#define UCR_01_NO_FD_CELL_VOLTAGE10_CELL39_NAME "Cell39"
#define UCR_01_NO_FD_CELL_VOLTAGE10_CELL40_NAME "Cell40"
#define UCR_01_NO_FD_CELL_VOLTAGE11_CELL1_NAME "Cell1"
#define UCR_01_NO_FD_CELL_VOLTAGE11_CELL2_NAME "Cell2"
#define UCR_01_NO_FD_CELL_VOLTAGE11_CELL3_NAME "Cell3"
#define UCR_01_NO_FD_CELL_VOLTAGE11_CELL4_NAME "Cell4"
#define UCR_01_NO_FD_CELL_VOLTAGE12_CELL5_NAME "Cell5"
#define UCR_01_NO_FD_CELL_VOLTAGE12_CELL6_NAME "Cell6"
#define UCR_01_NO_FD_CELL_VOLTAGE12_CELL7_NAME "Cell7"
#define UCR_01_NO_FD_CELL_VOLTAGE12_CELL8_NAME "Cell8"
#define UCR_01_NO_FD_CELL_VOLTAGE13_CELL9_NAME "Cell9"
#define UCR_01_NO_FD_CELL_VOLTAGE13_CELL10_NAME "Cell10"
#define UCR_01_NO_FD_CELL_VOLTAGE13_CELL11_NAME "Cell11"
#define UCR_01_NO_FD_CELL_VOLTAGE13_CELL12_NAME "Cell12"
#define UCR_01_NO_FD_CELL_VOLTAGE14_CELL13_NAME "Cell13"
#define UCR_01_NO_FD_CELL_VOLTAGE14_CELL14_NAME "Cell14"
#define UCR_01_NO_FD_CELL_VOLTAGE14_CELL15_NAME "Cell15"
#define UCR_01_NO_FD_CELL_VOLTAGE14_CELL16_NAME "Cell16"
#define UCR_01_NO_FD_CELL_VOLTAGE15_CELL17_NAME "Cell17"
#define UCR_01_NO_FD_CELL_VOLTAGE15_CELL18_NAME "Cell18"
#define UCR_01_NO_FD_CELL_VOLTAGE15_CELL19_NAME "Cell19"
#define UCR_01_NO_FD_CELL_VOLTAGE15_CELL20_NAME "Cell20"
#define UCR_01_NO_FD_CELL_VOLTAGE16_CELL21_NAME "Cell21"
#define UCR_01_NO_FD_CELL_VOLTAGE16_CELL22_NAME "Cell22"
#define UCR_01_NO_FD_CELL_VOLTAGE16_CELL23_NAME "Cell23"
#define UCR_01_NO_FD_CELL_VOLTAGE16_CELL24_NAME "Cell24"
#define UCR_01_NO_FD_CELL_VOLTAGE17_CELL25_NAME "Cell25"
#define UCR_01_NO_FD_CELL_VOLTAGE17_CELL26_NAME "Cell26"
#define UCR_01_NO_FD_CELL_VOLTAGE17_CELL27_NAME "Cell27"
#define UCR_01_NO_FD_CELL_VOLTAGE17_CELL28_NAME "Cell28"
#define UCR_01_NO_FD_CELL_VOLTAGE18_CELL29_NAME "Cell29"
#define UCR_01_NO_FD_CELL_VOLTAGE18_CELL30_NAME "Cell30"
#define UCR_01_NO_FD_CELL_VOLTAGE18_CELL31_NAME "Cell31"
#define UCR_01_NO_FD_CELL_VOLTAGE18_CELL32_NAME "Cell32"
#define UCR_01_NO_FD_CELL_VOLTAGE19_CELL33_NAME "Cell33"
#define UCR_01_NO_FD_CELL_VOLTAGE19_CELL34_NAME "Cell34"
#define UCR_01_NO_FD_CELL_VOLTAGE19_CELL35_NAME "Cell35"
#define UCR_01_NO_FD_CELL_VOLTAGE19_CELL36_NAME "Cell36"
#define UCR_01_NO_FD_CELL_VOLTAGE20_CELL37_NAME "Cell37"
#define UCR_01_NO_FD_CELL_VOLTAGE20_CELL38_NAME "Cell38"
#define UCR_01_NO_FD_CELL_VOLTAGE20_CELL39_NAME "Cell39"
#define UCR_01_NO_FD_CELL_VOLTAGE20_CELL40_NAME "Cell40"
#define UCR_01_NO_FD_CELL_VOLTAGE21_CELL41_NAME "Cell41"
#define UCR_01_NO_FD_CELL_VOLTAGE21_CELL42_NAME "Cell42"
#define UCR_01_NO_FD_CELL_VOLTAGE21_CELL43_NAME "Cell43"
#define UCR_01_NO_FD_CELL_VOLTAGE21_CELL44_NAME "Cell44"
#define UCR_01_NO_FD_CELL_VOLTAGE22_CELL45_NAME "Cell45"
#define UCR_01_NO_FD_CELL_VOLTAGE22_CELL46_NAME "Cell46"
#define UCR_01_NO_FD_CELL_VOLTAGE22_CELL47_NAME "Cell47"
#define UCR_01_NO_FD_CELL_VOLTAGE22_CELL48_NAME "Cell48"
#define UCR_01_NO_FD_CELL_VOLTAGE23_CELL49_NAME "Cell49"
#define UCR_01_NO_FD_CELL_VOLTAGE23_CELL50_NAME "Cell50"
#define UCR_01_NO_FD_CELL_VOLTAGE23_CELL51_NAME "Cell51"
#define UCR_01_NO_FD_CELL_VOLTAGE23_CELL52_NAME "Cell52"
#define UCR_01_NO_FD_CELL_VOLTAGE24_CELL53_NAME "Cell53"
#define UCR_01_NO_FD_CELL_VOLTAGE24_CELL54_NAME "Cell54"
#define UCR_01_NO_FD_CELL_VOLTAGE24_CELL55_NAME "Cell55"
#define UCR_01_NO_FD_CELL_VOLTAGE24_CELL56_NAME "Cell56"
#define UCR_01_NO_FD_CELL_VOLTAGE25_CELL57_NAME "Cell57"
#define UCR_01_NO_FD_CELL_VOLTAGE25_CELL58_NAME "Cell58"
#define UCR_01_NO_FD_CELL_VOLTAGE25_CELL59_NAME "Cell59"
#define UCR_01_NO_FD_CELL_VOLTAGE25_CELL60_NAME "Cell60"
#define UCR_01_NO_FD_CELL_VOLTAGE26_CELL61_NAME "Cell61"
#define UCR_01_NO_FD_CELL_VOLTAGE26_CELL62_NAME "Cell62"
#define UCR_01_NO_FD_CELL_VOLTAGE26_CELL63_NAME "Cell63"
#define UCR_01_NO_FD_CELL_VOLTAGE26_CELL64_NAME "Cell64"
#define UCR_01_NO_FD_CELL_VOLTAGE27_CELL65_NAME "Cell65"
#define UCR_01_NO_FD_CELL_VOLTAGE27_CELL66_NAME "Cell66"
#define UCR_01_NO_FD_CELL_VOLTAGE27_CELL67_NAME "Cell67"
#define UCR_01_NO_FD_CELL_VOLTAGE27_CELL68_NAME "Cell68"
#define UCR_01_NO_FD_CELL_VOLTAGE28_CELL69_NAME "Cell69"
#define UCR_01_NO_FD_CELL_VOLTAGE28_CELL70_NAME "Cell70"
#define UCR_01_NO_FD_CELL_VOLTAGE28_CELL71_NAME "Cell71"
#define UCR_01_NO_FD_CELL_VOLTAGE28_CELL72_NAME "Cell72"
#define UCR_01_NO_FD_CELL_VOLTAGE29_CELL73_NAME "Cell73"
#define UCR_01_NO_FD_CELL_VOLTAGE29_CELL74_NAME "Cell74"
#define UCR_01_NO_FD_CELL_VOLTAGE29_CELL75_NAME "Cell75"
#define UCR_01_NO_FD_CELL_VOLTAGE29_CELL76_NAME "Cell76"
#define UCR_01_NO_FD_CELL_VOLTAGE30_CELL77_NAME "Cell77"
#define UCR_01_NO_FD_CELL_VOLTAGE30_CELL78_NAME "Cell78"
#define UCR_01_NO_FD_CELL_VOLTAGE30_CELL79_NAME "Cell79"
#define UCR_01_NO_FD_CELL_VOLTAGE30_CELL80_NAME "Cell80"
#define UCR_01_NO_FD_CELL_VOLTAGE31_CELL81_NAME "Cell81"
#define UCR_01_NO_FD_CELL_VOLTAGE31_CELL82_NAME "Cell82"
#define UCR_01_NO_FD_CELL_VOLTAGE31_CELL83_NAME "Cell83"
#define UCR_01_NO_FD_CELL_VOLTAGE31_CELL84_NAME "Cell84"
#define UCR_01_NO_FD_CELL_VOLTAGE32_CELL85_NAME "Cell85"
#define UCR_01_NO_FD_CELL_VOLTAGE32_CELL86_NAME "Cell86"
#define UCR_01_NO_FD_CELL_VOLTAGE32_CELL87_NAME "Cell87"
#define UCR_01_NO_FD_CELL_VOLTAGE32_CELL88_NAME "Cell88"
#define UCR_01_NO_FD_CELL_VOLTAGE33_CELL89_NAME "Cell89"
#define UCR_01_NO_FD_CELL_VOLTAGE33_CELL90_NAME "Cell90"
#define UCR_01_NO_FD_CELL_VOLTAGE33_CELL91_NAME "Cell91"
#define UCR_01_NO_FD_CELL_VOLTAGE33_CELL92_NAME "Cell92"
#define UCR_01_NO_FD_CELL_VOLTAGE34_CELL93_NAME "Cell93"
#define UCR_01_NO_FD_CELL_VOLTAGE34_CELL94_NAME "Cell94"
#define UCR_01_NO_FD_CELL_VOLTAGE34_CELL95_NAME "Cell95"
#define UCR_01_NO_FD_CELL_VOLTAGE34_CELL96_NAME "Cell96"
#define UCR_01_NO_FD_CELL_VOLTAGE35_CELL97_NAME "Cell97"
#define UCR_01_NO_FD_CELL_VOLTAGE35_CELL98_NAME "Cell98"
#define UCR_01_NO_FD_CELL_VOLTAGE35_CELL99_NAME "Cell99"
#define UCR_01_NO_FD_CELL_VOLTAGE35_CELL100_NAME "Cell100"
#define UCR_01_NO_FD_CELL_VOLTAGE36_CELL101_NAME "Cell101"
#define UCR_01_NO_FD_CELL_VOLTAGE36_CELL102_NAME "Cell102"
#define UCR_01_NO_FD_CELL_VOLTAGE36_CELL103_NAME "Cell103"
#define UCR_01_NO_FD_CELL_VOLTAGE36_CELL104_NAME "Cell104"
#define UCR_01_NO_FD_CELL_VOLTAGE37_CELL105_NAME "Cell105"
#define UCR_01_NO_FD_CELL_VOLTAGE37_CELL106_NAME "Cell106"
#define UCR_01_NO_FD_CELL_VOLTAGE37_CELL107_NAME "Cell107"
#define UCR_01_NO_FD_CELL_VOLTAGE37_CELL108_NAME "Cell108"
#define UCR_01_NO_FD_CELL_VOLTAGE38_CELL109_NAME "Cell109"
#define UCR_01_NO_FD_CELL_VOLTAGE38_CELL110_NAME "Cell110"
#define UCR_01_NO_FD_CELL_VOLTAGE38_CELL111_NAME "Cell111"
#define UCR_01_NO_FD_CELL_VOLTAGE38_CELL112_NAME "Cell112"
#define UCR_01_NO_FD_CELL_VOLTAGE39_CELL113_NAME "Cell113"
#define UCR_01_NO_FD_CELL_VOLTAGE39_CELL114_NAME "Cell114"
#define UCR_01_NO_FD_CELL_VOLTAGE39_CELL115_NAME "Cell115"
#define UCR_01_NO_FD_CELL_VOLTAGE39_CELL116_NAME "Cell116"
#define UCR_01_NO_FD_CELL_VOLTAGE40_CELL117_NAME "Cell117"
#define UCR_01_NO_FD_CELL_VOLTAGE40_CELL118_NAME "Cell118"
#define UCR_01_NO_FD_CELL_VOLTAGE40_CELL119_NAME "Cell119"
#define UCR_01_NO_FD_CELL_VOLTAGE40_CELL120_NAME "Cell120"
#define UCR_01_NO_FD_CELL_VOLTAGE41_CELL121_NAME "Cell121"
#define UCR_01_NO_FD_CELL_VOLTAGE41_CELL122_NAME "Cell122"
#define UCR_01_NO_FD_CELL_VOLTAGE41_CELL123_NAME "Cell123"
#define UCR_01_NO_FD_CELL_VOLTAGE41_CELL124_NAME "Cell124"
#define UCR_01_NO_FD_CELL_VOLTAGE42_CELL125_NAME "Cell125"
#define UCR_01_NO_FD_CELL_VOLTAGE42_CELL126_NAME "Cell126"
#define UCR_01_NO_FD_CELL_VOLTAGE42_CELL127_NAME "Cell127"
#define UCR_01_NO_FD_CELL_VOLTAGE42_CELL128_NAME "Cell128"
#define UCR_01_NO_FD_CELL_VOLTAGE43_CELL129_NAME "Cell129"
#define UCR_01_NO_FD_CELL_VOLTAGE43_CELL130_NAME "Cell130"
#define UCR_01_NO_FD_CELL_VOLTAGE43_CELL131_NAME "Cell131"
#define UCR_01_NO_FD_CELL_VOLTAGE43_CELL132_NAME "Cell132"
#define UCR_01_NO_FD_THERMISTOR1_THERM1_NAME "Therm1"
#define UCR_01_NO_FD_THERMISTOR1_THERM2_NAME "Therm2"
#define UCR_01_NO_FD_THERMISTOR1_THERM3_NAME "Therm3"
#define UCR_01_NO_FD_THERMISTOR1_THERM4_NAME "Therm4"
#define UCR_01_NO_FD_THERMISTOR2_THERM5_NAME "Therm5"
#define UCR_01_NO_FD_THERMISTOR2_THERM6_NAME "Therm6"
#define UCR_01_NO_FD_THERMISTOR2_THERM7_NAME "Therm7"
#define UCR_01_NO_FD_THERMISTOR2_THERM8_NAME "Therm8"
#define UCR_01_NO_FD_THERMISTOR3_THERM9_NAME "Therm9"
#define UCR_01_NO_FD_THERMISTOR3_THERM10_NAME "Therm10"
#define UCR_01_NO_FD_THERMISTOR3_THERM11_NAME "Therm11"
#define UCR_01_NO_FD_THERMISTOR3_THERM12_NAME "Therm12"
#define UCR_01_NO_FD_THERMISTOR4_THERM13_NAME "Therm13"
#define UCR_01_NO_FD_THERMISTOR4_THERM14_NAME "Therm14"
#define UCR_01_NO_FD_THERMISTOR4_THERM15_NAME "Therm15"
#define UCR_01_NO_FD_THERMISTOR4_THERM16_NAME "Therm16"
#define UCR_01_NO_FD_THERMISTOR5_THERM17_NAME "Therm17"
#define UCR_01_NO_FD_THERMISTOR5_THERM18_NAME "Therm18"
#define UCR_01_NO_FD_THERMISTOR5_THERM19_NAME "Therm19"
#define UCR_01_NO_FD_THERMISTOR5_THERM20_NAME "Therm20"
#define UCR_01_NO_FD_THERMISTOR6_THERM21_NAME "Therm21"
#define UCR_01_NO_FD_THERMISTOR6_THERM22_NAME "Therm22"
#define UCR_01_NO_FD_THERMISTOR6_THERM23_NAME "Therm23"
#define UCR_01_NO_FD_THERMISTOR6_THERM24_NAME "Therm24"
#define UCR_01_NO_FD_THERMISTOR7_THERM25_NAME "Therm25"
#define UCR_01_NO_FD_THERMISTOR7_THERM26_NAME "Therm26"
#define UCR_01_NO_FD_THERMISTOR7_THERM27_NAME "Therm27"
#define UCR_01_NO_FD_THERMISTOR7_THERM28_NAME "Therm28"
#define UCR_01_NO_FD_THERMISTOR8_THERM29_NAME "Therm29"
#define UCR_01_NO_FD_THERMISTOR8_THERM30_NAME "Therm30"
#define UCR_01_NO_FD_THERMISTOR8_THERM31_NAME "Therm31"
#define UCR_01_NO_FD_THERMISTOR8_THERM32_NAME "Therm32"
#define UCR_01_NO_FD_THERMISTOR9_THERM33_NAME "Therm33"
#define UCR_01_NO_FD_THERMISTOR9_THERM34_NAME "Therm34"
#define UCR_01_NO_FD_THERMISTOR9_THERM35_NAME "Therm35"
#define UCR_01_NO_FD_THERMISTOR9_THERM36_NAME "Therm36"
#define UCR_01_NO_FD_THERMISTOR10_THERM37_NAME "Therm37"
#define UCR_01_NO_FD_THERMISTOR10_THERM38_NAME "Therm38"
#define UCR_01_NO_FD_THERMISTOR10_THERM39_NAME "Therm39"
#define UCR_01_NO_FD_THERMISTOR10_THERM40_NAME "Therm40"
#define UCR_01_NO_FD_THERMISTOR11_THERM41_NAME "Therm41"
#define UCR_01_NO_FD_THERMISTOR11_THERM42_NAME "Therm42"
#define UCR_01_NO_FD_THERMISTOR11_THERM43_NAME "Therm43"
#define UCR_01_NO_FD_THERMISTOR11_THERM44_NAME "Therm44"
#define UCR_01_NO_FD_THERMISTOR12_THERM45_NAME "Therm45"
#define UCR_01_NO_FD_THERMISTOR12_THERM46_NAME "Therm46"
#define UCR_01_NO_FD_THERMISTOR12_THERM47_NAME "Therm47"
#define UCR_01_NO_FD_THERMISTOR12_THERM48_NAME "Therm48"
#define UCR_01_NO_FD_THERMISTOR13_THERM49_NAME "Therm49"
#define UCR_01_NO_FD_THERMISTOR13_THERM50_NAME "Therm50"
#define UCR_01_NO_FD_THERMISTOR13_THERM51_NAME "Therm51"
#define UCR_01_NO_FD_THERMISTOR13_THERM52_NAME "Therm52"
#define UCR_01_NO_FD_THERMISTOR14_THERM53_NAME "Therm53"
#define UCR_01_NO_FD_THERMISTOR14_THERM54_NAME "Therm54"
#define UCR_01_NO_FD_THERMISTOR14_THERM55_NAME "Therm55"
#define UCR_01_NO_FD_THERMISTOR14_THERM56_NAME "Therm56"
#define UCR_01_NO_FD_THERMISTOR15_THERM57_NAME "Therm57"
#define UCR_01_NO_FD_THERMISTOR15_THERM58_NAME "Therm58"
#define UCR_01_NO_FD_THERMISTOR15_THERM59_NAME "Therm59"
#define UCR_01_NO_FD_THERMISTOR15_THERM60_NAME "Therm60"
#define UCR_01_NO_FD_THERMISTOR16_THERM61_NAME "Therm61"
#define UCR_01_NO_FD_THERMISTOR16_THERM62_NAME "Therm62"
#define UCR_01_NO_FD_THERMISTOR16_THERM63_NAME "Therm63"
#define UCR_01_NO_FD_THERMISTOR16_THERM64_NAME "Therm64"
#define UCR_01_NO_FD_THERMISTOR17_THERM65_NAME "Therm65"
#define UCR_01_NO_FD_THERMISTOR17_THERM66_NAME "Therm66"
#define UCR_01_NO_FD_THERMISTOR17_THERM67_NAME "Therm67"
#define UCR_01_NO_FD_THERMISTOR17_THERM68_NAME "Therm68"
#define UCR_01_NO_FD_THERMISTOR18_THERM69_NAME "Therm69"
#define UCR_01_NO_FD_THERMISTOR18_THERM70_NAME "Therm70"
#define UCR_01_NO_FD_THERMISTOR18_THERM71_NAME "Therm71"
#define UCR_01_NO_FD_THERMISTOR18_THERM72_NAME "Therm72"
#define UCR_01_NO_FD_THERMISTOR19_THERM73_NAME "Therm73"
#define UCR_01_NO_FD_THERMISTOR19_THERM74_NAME "Therm74"
#define UCR_01_NO_FD_THERMISTOR19_THERM75_NAME "Therm75"
#define UCR_01_NO_FD_THERMISTOR19_THERM76_NAME "Therm76"
#define UCR_01_NO_FD_THERMISTOR20_THERM77_NAME "Therm77"
#define UCR_01_NO_FD_THERMISTOR20_THERM78_NAME "Therm78"
#define UCR_01_NO_FD_THERMISTOR20_THERM79_NAME "Therm79"
#define UCR_01_NO_FD_THERMISTOR20_THERM80_NAME "Therm80"
#define UCR_01_NO_FD_THERMISTOR21_THERM81_NAME "Therm81"
#define UCR_01_NO_FD_THERMISTOR21_THERM82_NAME "Therm82"
#define UCR_01_NO_FD_THERMISTOR21_THERM83_NAME "Therm83"
#define UCR_01_NO_FD_THERMISTOR21_THERM84_NAME "Therm84"
#define UCR_01_NO_FD_THERMISTOR22_THERM85_NAME "Therm85"
#define UCR_01_NO_FD_THERMISTOR22_THERM86_NAME "Therm86"
#define UCR_01_NO_FD_THERMISTOR22_THERM87_NAME "Therm87"
#define UCR_01_NO_FD_THERMISTOR22_THERM88_NAME "Therm88"
#define UCR_01_NO_FD_THERMISTOR23_THERM89_NAME "Therm89"
#define UCR_01_NO_FD_THERMISTOR23_THERM90_NAME "Therm90"
#define UCR_01_NO_FD_THERMISTOR23_THERM91_NAME "Therm91"
#define UCR_01_NO_FD_THERMISTOR23_THERM92_NAME "Therm92"
#define UCR_01_NO_FD_THERMISTOR24_THERM93_NAME "Therm93"
#define UCR_01_NO_FD_THERMISTOR24_THERM94_NAME "Therm94"
#define UCR_01_NO_FD_THERMISTOR24_THERM95_NAME "Therm95"
#define UCR_01_NO_FD_THERMISTOR24_THERM96_NAME "Therm96"
#define UCR_01_NO_FD_THERMISTOR25_THERM97_NAME "Therm97"
#define UCR_01_NO_FD_THERMISTOR25_THERM98_NAME "Therm98"
#define UCR_01_NO_FD_THERMISTOR25_THERM99_NAME "Therm99"
#define UCR_01_NO_FD_THERMISTOR25_THERM100_NAME "Therm100"
#define UCR_01_NO_FD_THERMISTOR26_THERM101_NAME "Therm101"
#define UCR_01_NO_FD_THERMISTOR26_THERM102_NAME "Therm102"
#define UCR_01_NO_FD_THERMISTOR26_THERM103_NAME "Therm103"
#define UCR_01_NO_FD_THERMISTOR26_THERM104_NAME "Therm104"
#define UCR_01_NO_FD_THERMISTOR27_THERM105_NAME "Therm105"
#define UCR_01_NO_FD_THERMISTOR27_THERM106_NAME "Therm106"
#define UCR_01_NO_FD_THERMISTOR27_THERM107_NAME "Therm107"
#define UCR_01_NO_FD_THERMISTOR27_THERM108_NAME "Therm108"
#define UCR_01_NO_FD_THERMISTOR28_THERM109_NAME "Therm109"
#define UCR_01_NO_FD_THERMISTOR28_THERM110_NAME "Therm110"
#define UCR_01_NO_FD_THERMISTOR28_THERM111_NAME "Therm111"
#define UCR_01_NO_FD_THERMISTOR28_THERM112_NAME "Therm112"
#define UCR_01_NO_FD_THERMISTOR29_THERM113_NAME "Therm113"
#define UCR_01_NO_FD_THERMISTOR29_THERM114_NAME "Therm114"
#define UCR_01_NO_FD_THERMISTOR29_THERM115_NAME "Therm115"
#define UCR_01_NO_FD_THERMISTOR29_THERM116_NAME "Therm116"
#define UCR_01_NO_FD_THERMISTOR30_THERM117_NAME "Therm117"
#define UCR_01_NO_FD_THERMISTOR30_THERM118_NAME "Therm118"
#define UCR_01_NO_FD_THERMISTOR30_THERM119_NAME "Therm119"
#define UCR_01_NO_FD_THERMISTOR30_THERM120_NAME "Therm120"
#define UCR_01_NO_FD_THERMISTOR31_THERM121_NAME "Therm121"
#define UCR_01_NO_FD_THERMISTOR31_THERM122_NAME "Therm122"
#define UCR_01_NO_FD_THERMISTOR31_THERM123_NAME "Therm123"
#define UCR_01_NO_FD_THERMISTOR31_THERM124_NAME "Therm124"
#define UCR_01_NO_FD_THERMISTOR32_THERM125_NAME "Therm125"
#define UCR_01_NO_FD_THERMISTOR32_THERM126_NAME "Therm126"
#define UCR_01_NO_FD_THERMISTOR32_THERM127_NAME "Therm127"
#define UCR_01_NO_FD_THERMISTOR32_THERM128_NAME "Therm128"
#define UCR_01_NO_FD_THERMISTOR33_THERM129_NAME "Therm129"
#define UCR_01_NO_FD_THERMISTOR33_THERM130_NAME "Therm130"
#define UCR_01_NO_FD_THERMISTOR33_THERM131_NAME "Therm131"
#define UCR_01_NO_FD_THERMISTOR33_THERM132_NAME "Therm132"
#define UCR_01_NO_FD_THERMISTOR34_THERM133_NAME "Therm133"
#define UCR_01_NO_FD_THERMISTOR34_THERM134_NAME "Therm134"
#define UCR_01_NO_FD_THERMISTOR34_THERM135_NAME "Therm135"
#define UCR_01_NO_FD_THERMISTOR34_THERM136_NAME "Therm136"
#define UCR_01_NO_FD_THERMISTOR35_THERM137_NAME "Therm137"
#define UCR_01_NO_FD_THERMISTOR35_THERM138_NAME "Therm138"
#define UCR_01_NO_FD_THERMISTOR35_THERM139_NAME "Therm139"
#define UCR_01_NO_FD_THERMISTOR35_THERM140_NAME "Therm140"
#define UCR_01_NO_FD_THERMISTOR36_THERM141_NAME "Therm141"
#define UCR_01_NO_FD_THERMISTOR36_THERM142_NAME "Therm142"
#define UCR_01_NO_FD_THERMISTOR36_THERM143_NAME "Therm143"
#define UCR_01_NO_FD_THERMISTOR36_THERM144_NAME "Therm144"
#define UCR_01_NO_FD_THERMISTOR37_THERM145_NAME "Therm145"
#define UCR_01_NO_FD_THERMISTOR37_THERM146_NAME "Therm146"
#define UCR_01_NO_FD_THERMISTOR37_THERM147_NAME "Therm147"
#define UCR_01_NO_FD_THERMISTOR37_THERM148_NAME "Therm148"
#define UCR_01_NO_FD_THERMISTOR38_THERM149_NAME "Therm149"
#define UCR_01_NO_FD_THERMISTOR38_THERM150_NAME "Therm150"
#define UCR_01_NO_FD_THERMISTOR38_THERM151_NAME "Therm151"
#define UCR_01_NO_FD_THERMISTOR38_THERM152_NAME "Therm152"
#define UCR_01_NO_FD_THERMISTOR39_THERM153_NAME "Therm153"
#define UCR_01_NO_FD_THERMISTOR39_THERM154_NAME "Therm154"
#define UCR_01_NO_FD_THERMISTOR39_THERM155_NAME "Therm155"
#define UCR_01_NO_FD_THERMISTOR39_THERM156_NAME "Therm156"
#define UCR_01_NO_FD_THERMISTOR40_THERM157_NAME "Therm157"
#define UCR_01_NO_FD_THERMISTOR40_THERM158_NAME "Therm158"
#define UCR_01_NO_FD_THERMISTOR40_THERM159_NAME "Therm159"
#define UCR_01_NO_FD_THERMISTOR40_THERM160_NAME "Therm160"
#define UCR_01_NO_FD_THERMISTOR41_THERM161_NAME "Therm161"
#define UCR_01_NO_FD_THERMISTOR41_THERM162_NAME "Therm162"
#define UCR_01_NO_FD_THERMISTOR41_THERM163_NAME "Therm163"
#define UCR_01_NO_FD_THERMISTOR41_THERM164_NAME "Therm164"
#define UCR_01_NO_FD_THERMISTOR42_THERM165_NAME "Therm165"
#define UCR_01_NO_FD_THERMISTOR42_THERM166_NAME "Therm166"
#define UCR_01_NO_FD_THERMISTOR42_THERM167_NAME "Therm167"
#define UCR_01_NO_FD_THERMISTOR42_THERM168_NAME "Therm168"
#define UCR_01_NO_FD_THERMISTOR43_THERM169_NAME "Therm169"
#define UCR_01_NO_FD_THERMISTOR43_THERM170_NAME "Therm170"
#define UCR_01_NO_FD_THERMISTOR43_THERM171_NAME "Therm171"
#define UCR_01_NO_FD_THERMISTOR43_THERM172_NAME "Therm172"
#define UCR_01_NO_FD_THERMISTOR44_THERM173_NAME "Therm173"
#define UCR_01_NO_FD_THERMISTOR44_THERM174_NAME "Therm174"
#define UCR_01_NO_FD_THERMISTOR44_THERM175_NAME "Therm175"
#define UCR_01_NO_FD_THERMISTOR44_THERM176_NAME "Therm176"
#define UCR_01_NO_FD_THERMISTOR45_THERM177_NAME "Therm177"
#define UCR_01_NO_FD_THERMISTOR45_THERM178_NAME "Therm178"
#define UCR_01_NO_FD_THERMISTOR45_THERM179_NAME "Therm179"
#define UCR_01_NO_FD_THERMISTOR45_THERM180_NAME "Therm180"
#define UCR_01_NO_FD_THERMISTOR46_THERM181_NAME "Therm181"
#define UCR_01_NO_FD_THERMISTOR46_THERM182_NAME "Therm182"
#define UCR_01_NO_FD_THERMISTOR46_THERM183_NAME "Therm183"
#define UCR_01_NO_FD_THERMISTOR46_THERM184_NAME "Therm184"
#define UCR_01_NO_FD_THERMISTOR47_THERM185_NAME "Therm185"
#define UCR_01_NO_FD_THERMISTOR47_THERM186_NAME "Therm186"
#define UCR_01_NO_FD_THERMISTOR47_THERM187_NAME "Therm187"
#define UCR_01_NO_FD_THERMISTOR47_THERM188_NAME "Therm188"
#define UCR_01_NO_FD_THERMISTOR48_THERM189_NAME "Therm189"
#define UCR_01_NO_FD_THERMISTOR48_THERM190_NAME "Therm190"
#define UCR_01_NO_FD_THERMISTOR48_THERM191_NAME "Therm191"
#define UCR_01_NO_FD_THERMISTOR48_THERM192_NAME "Therm192"
#define UCR_01_NO_FD_THERMISTOR49_THERM193_NAME "Therm193"
#define UCR_01_NO_FD_THERMISTOR49_THERM194_NAME "Therm194"
#define UCR_01_NO_FD_THERMISTOR49_THERM195_NAME "Therm195"
#define UCR_01_NO_FD_THERMISTOR49_THERM196_NAME "Therm196"
#define UCR_01_NO_FD_PACK_VOLTAGE_PACK_VOLTAGE_NAME "PackVoltage"
#define UCR_01_NO_FD_TCU1_APPS1_NAME "APPS1"
#define UCR_01_NO_FD_TCU1_APPS2_NAME "APPS2"
#define UCR_01_NO_FD_TCU1_BSE_NAME "BSE"
#define UCR_01_NO_FD_TCU1_STATUS_NAME "Status"
#define UCR_01_NO_FD_ACULV_CAN2_1_AMS_STATUS_NAME "AMSStatus"
#define UCR_01_NO_FD_ACULV_CAN2_1_FLD_NAME "FLD"
#define UCR_01_NO_FD_ACULV_CAN2_1_STATE_OF_CHARGE_NAME "StateOfCharge"
#define UCR_01_NO_FD_ACULV_CAN2_2_ACCUMULATOR_VOLTAGE_NAME "AccumulatorVoltage"
#define UCR_01_NO_FD_ACULV_CAN2_2_TRACTIVE_VOLTAGE_NAME "TractiveVoltage"
#define UCR_01_NO_FD_ACULV_CAN2_3_CELL_CURRENT_NAME "CellCurrent"
#define UCR_01_NO_FD_ACULV_CAN2_4_ISOLATION_MONITORING_NAME "IsolationMonitoring"
#define UCR_01_NO_FD_ACULV_CAN2_4_ISOLATION_MONITORING1_NAME "IsolationMonitoring1"
#define UCR_01_NO_FD_ACULV_CAN1_1_CHARGE_STATUS1_NAME "ChargeStatus1"
#define UCR_01_NO_FD_ACULV_CAN1_1_CHARGE_STATUS2_NAME "ChargeStatus2"
#define UCR_01_NO_FD_ACULV_CAN1_2_CHARGE_REQUEST_NAME "ChargeRequest"
#define UCR_01_NO_FD_TCU2_BRAKE_LIGHT_NAME "BrakeLight"
#define UCR_01_NO_FD_TCU2_BAMOCAR_RFE_NAME "BamocarRFE"
#define UCR_01_NO_FD_TCU2_BAMOCAR_FRG_NAME "BamocarFRG"
#define UCR_01_NO_FD_FRONT_FREQUENCY1_FREQ1_NAME "Freq1"
#define UCR_01_NO_FD_FRONT_FREQUENCY1_FREQ2_NAME "Freq2"
#define UCR_01_NO_FD_FRONT_FREQUENCY2_FREQ3_NAME "Freq3"
#define UCR_01_NO_FD_FRONT_FREQUENCY2_FREQ4_NAME "Freq4"
#define UCR_01_NO_FD_BAMOCAR_TX_DATA_REGID_NAME "REGID"
#define UCR_01_NO_FD_BAMOCAR_TX_DATA_DATA_NAME "Data"
#define UCR_01_NO_FD_PDM1_COMPOUND_ID_NAME "CompoundID"
#define UCR_01_NO_FD_PDM1_PDM_INT_TEMP_NAME "PDMIntTemp"
#define UCR_01_NO_FD_PDM1_PDM_BATT_VOLTAGE_NAME "PDMBattVoltage"
#define UCR_01_NO_FD_PDM1_GLOBAL_ERROR_FLAG_NAME "GlobalErrorFlag"
#define UCR_01_NO_FD_PDM1_TOTAL_CURRENT_NAME "TotalCurrent"
#define UCR_01_NO_FD_PDM1_INTERNAL_RAIL_VOLTAGE_NAME "InternalRailVoltage"
#define UCR_01_NO_FD_PDM1_RESET_SOURCE_NAME "ResetSource"

/**
 * Signals in message FrontAnalog1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_analog1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog4;
};

/**
 * Signals in message FrontAnalog2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_analog2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog8;
};

/**
 * Signals in message EncoderPositions.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_encoder_positions_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t encoder1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t encoder2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t encoder3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t encoder4;
};

/**
 * Signals in message FrontStrainGauges1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_strain_gauges1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge2;
};

/**
 * Signals in message FrontStrainGauges2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_strain_gauges2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge4;
};

/**
 * Signals in message FrontStrainGauges3.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_strain_gauges3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge6;
};

/**
 * Signals in message FrontStrainGauges4.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_strain_gauges4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge8;
};

/**
 * Signals in message FrontStrainGauges5.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_strain_gauges5_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge10;
};

/**
 * Signals in message FrontStrainGauges6.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_strain_gauges6_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge12;
};

/**
 * Signals in message RearStrainGauges1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_rear_strain_gauges1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge2;
};

/**
 * Signals in message RearStrainGauges2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_rear_strain_gauges2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge4;
};

/**
 * Signals in message RearStrainGauges3.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_rear_strain_gauges3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge6;
};

/**
 * Signals in message RearStrainGauges4.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_rear_strain_gauges4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge8;
};

/**
 * Signals in message RearStrainGauges5.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_rear_strain_gauges5_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge10;
};

/**
 * Signals in message RearStrainGauges6.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_rear_strain_gauges6_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge12;
};

/**
 * Signals in message GPSBestPos.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_gps_best_pos_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int64_t latitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int64_t longitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int64_t altitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int64_t std_latitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int64_t std_longitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int64_t std_altitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_status;
};

/**
 * Signals in message BamocarRxData.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_bamocar_rx_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t regid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte5;
};

/**
 * Signals in message CellVoltage1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell4;
};

/**
 * Signals in message CellVoltage2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell8;
};

/**
 * Signals in message CellVoltage3.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell12;
};

/**
 * Signals in message CellVoltage4.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell16;
};

/**
 * Signals in message CellVoltage5.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage5_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell17;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell18;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell19;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell20;
};

/**
 * Signals in message CellVoltage6.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage6_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell21;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell22;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell23;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell24;
};

/**
 * Signals in message CellVoltage7.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage7_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell25;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell26;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell27;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell28;
};

/**
 * Signals in message CellVoltage8.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage8_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell29;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell30;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell31;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell32;
};

/**
 * Signals in message CellVoltage9.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage9_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell33;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell34;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell35;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell36;
};

/**
 * Signals in message CellVoltage10.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage10_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell37;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell38;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell39;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell40;
};

/**
 * Signals in message CellVoltage11.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage11_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell4;
};

/**
 * Signals in message CellVoltage12.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage12_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell8;
};

/**
 * Signals in message CellVoltage13.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage13_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell12;
};

/**
 * Signals in message CellVoltage14.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage14_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell16;
};

/**
 * Signals in message CellVoltage15.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage15_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell17;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell18;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell19;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell20;
};

/**
 * Signals in message CellVoltage16.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage16_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell21;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell22;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell23;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell24;
};

/**
 * Signals in message CellVoltage17.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage17_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell25;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell26;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell27;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell28;
};

/**
 * Signals in message CellVoltage18.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage18_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell29;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell30;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell31;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell32;
};

/**
 * Signals in message CellVoltage19.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage19_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell33;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell34;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell35;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell36;
};

/**
 * Signals in message CellVoltage20.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage20_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell37;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell38;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell39;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell40;
};

/**
 * Signals in message CellVoltage21.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage21_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell41;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell42;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell43;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell44;
};

/**
 * Signals in message CellVoltage22.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage22_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell45;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell46;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell47;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell48;
};

/**
 * Signals in message CellVoltage23.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage23_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell49;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell50;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell51;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell52;
};

/**
 * Signals in message CellVoltage24.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage24_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell53;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell54;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell55;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell56;
};

/**
 * Signals in message CellVoltage25.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage25_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell57;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell58;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell59;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell60;
};

/**
 * Signals in message CellVoltage26.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage26_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell61;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell62;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell63;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell64;
};

/**
 * Signals in message CellVoltage27.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage27_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell65;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell66;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell67;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell68;
};

/**
 * Signals in message CellVoltage28.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage28_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell69;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell70;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell71;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell72;
};

/**
 * Signals in message CellVoltage29.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage29_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell73;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell74;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell75;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell76;
};

/**
 * Signals in message CellVoltage30.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage30_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell77;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell78;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell79;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell80;
};

/**
 * Signals in message CellVoltage31.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage31_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell81;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell82;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell83;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell84;
};

/**
 * Signals in message CellVoltage32.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage32_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell85;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell86;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell87;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell88;
};

/**
 * Signals in message CellVoltage33.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage33_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell89;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell90;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell91;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell92;
};

/**
 * Signals in message CellVoltage34.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage34_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell93;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell94;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell95;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell96;
};

/**
 * Signals in message CellVoltage35.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage35_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell97;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell98;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell99;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell100;
};

/**
 * Signals in message CellVoltage36.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage36_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell101;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell102;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell103;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell104;
};

/**
 * Signals in message CellVoltage37.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage37_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell105;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell106;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell107;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell108;
};

/**
 * Signals in message CellVoltage38.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage38_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell109;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell110;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell111;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell112;
};

/**
 * Signals in message CellVoltage39.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage39_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell113;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell114;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell115;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell116;
};

/**
 * Signals in message CellVoltage40.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage40_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell117;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell118;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell119;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell120;
};

/**
 * Signals in message CellVoltage41.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage41_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell121;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell122;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell123;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell124;
};

/**
 * Signals in message CellVoltage42.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage42_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell125;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell126;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell127;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell128;
};

/**
 * Signals in message CellVoltage43.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_cell_voltage43_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell129;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell130;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell131;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cell132;
};

/**
 * Signals in message Thermistor1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm4;
};

/**
 * Signals in message Thermistor2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm8;
};

/**
 * Signals in message Thermistor3.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm12;
};

/**
 * Signals in message Thermistor4.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm16;
};

/**
 * Signals in message Thermistor5.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor5_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm17;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm18;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm19;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm20;
};

/**
 * Signals in message Thermistor6.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor6_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm21;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm22;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm23;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm24;
};

/**
 * Signals in message Thermistor7.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor7_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm25;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm26;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm27;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm28;
};

/**
 * Signals in message Thermistor8.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor8_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm29;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm30;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm31;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm32;
};

/**
 * Signals in message Thermistor9.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor9_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm33;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm34;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm35;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm36;
};

/**
 * Signals in message Thermistor10.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor10_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm37;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm38;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm39;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm40;
};

/**
 * Signals in message Thermistor11.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor11_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm41;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm42;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm43;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm44;
};

/**
 * Signals in message Thermistor12.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor12_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm45;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm46;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm47;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm48;
};

/**
 * Signals in message Thermistor13.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor13_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm49;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm50;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm51;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm52;
};

/**
 * Signals in message Thermistor14.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor14_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm53;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm54;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm55;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm56;
};

/**
 * Signals in message Thermistor15.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor15_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm57;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm58;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm59;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm60;
};

/**
 * Signals in message Thermistor16.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor16_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm61;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm62;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm63;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm64;
};

/**
 * Signals in message Thermistor17.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor17_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm65;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm66;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm67;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm68;
};

/**
 * Signals in message Thermistor18.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor18_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm69;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm70;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm71;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm72;
};

/**
 * Signals in message Thermistor19.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor19_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm73;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm74;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm75;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm76;
};

/**
 * Signals in message Thermistor20.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor20_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm77;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm78;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm79;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm80;
};

/**
 * Signals in message Thermistor21.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor21_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm81;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm82;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm83;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm84;
};

/**
 * Signals in message Thermistor22.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor22_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm85;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm86;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm87;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm88;
};

/**
 * Signals in message Thermistor23.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor23_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm89;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm90;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm91;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm92;
};

/**
 * Signals in message Thermistor24.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor24_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm93;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm94;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm95;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm96;
};

/**
 * Signals in message Thermistor25.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor25_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm97;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm98;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm99;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm100;
};

/**
 * Signals in message Thermistor26.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor26_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm101;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm102;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm103;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm104;
};

/**
 * Signals in message Thermistor27.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor27_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm105;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm106;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm107;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm108;
};

/**
 * Signals in message Thermistor28.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor28_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm109;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm110;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm111;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm112;
};

/**
 * Signals in message Thermistor29.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor29_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm113;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm114;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm115;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm116;
};

/**
 * Signals in message Thermistor30.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor30_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm117;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm118;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm119;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm120;
};

/**
 * Signals in message Thermistor31.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor31_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm121;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm122;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm123;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm124;
};

/**
 * Signals in message Thermistor32.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor32_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm125;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm126;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm127;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm128;
};

/**
 * Signals in message Thermistor33.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor33_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm129;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm130;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm131;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm132;
};

/**
 * Signals in message Thermistor34.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor34_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm133;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm134;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm135;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm136;
};

/**
 * Signals in message Thermistor35.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor35_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm137;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm138;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm139;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm140;
};

/**
 * Signals in message Thermistor36.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor36_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm141;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm142;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm143;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm144;
};

/**
 * Signals in message Thermistor37.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor37_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm145;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm146;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm147;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm148;
};

/**
 * Signals in message Thermistor38.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor38_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm149;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm150;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm151;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm152;
};

/**
 * Signals in message Thermistor39.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor39_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm153;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm154;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm155;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm156;
};

/**
 * Signals in message Thermistor40.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor40_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm157;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm158;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm159;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm160;
};

/**
 * Signals in message Thermistor41.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor41_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm161;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm162;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm163;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm164;
};

/**
 * Signals in message Thermistor42.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor42_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm165;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm166;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm167;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm168;
};

/**
 * Signals in message Thermistor43.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor43_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm169;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm170;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm171;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm172;
};

/**
 * Signals in message Thermistor44.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor44_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm173;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm174;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm175;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm176;
};

/**
 * Signals in message Thermistor45.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor45_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm177;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm178;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm179;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm180;
};

/**
 * Signals in message Thermistor46.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor46_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm181;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm182;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm183;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm184;
};

/**
 * Signals in message Thermistor47.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor47_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm185;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm186;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm187;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm188;
};

/**
 * Signals in message Thermistor48.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor48_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm189;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm190;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm191;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm192;
};

/**
 * Signals in message Thermistor49.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_thermistor49_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm193;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm194;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm195;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t therm196;
};

/**
 * Signals in message PackVoltage.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_pack_voltage_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float pack_voltage;
};

/**
 * Signals in message TCU1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_tcu1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t apps1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t apps2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bse;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status;
};

/**
 * Signals in message ACULV_CAN2_1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_aculv_can2_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fld;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float state_of_charge;
};

/**
 * Signals in message ACULV_CAN2_2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_aculv_can2_2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float accumulator_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float tractive_voltage;
};

/**
 * Signals in message ACULV_CAN2_3.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_aculv_can2_3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell_current;
};

/**
 * Signals in message ACULV_CAN2_4.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_aculv_can2_4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t isolation_monitoring;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float isolation_monitoring1;
};

/**
 * Signals in message ACULV_CAN1_1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_aculv_can1_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float charge_status1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float charge_status2;
};

/**
 * Signals in message ACULV_CAN1_2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_aculv_can1_2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_request;
};

/**
 * Signals in message TCU2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_tcu2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_light;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bamocar_rfe;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bamocar_frg;
};

/**
 * Signals in message FrontFrequency1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_frequency1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq2;
};

/**
 * Signals in message FrontFrequency2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_front_frequency2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq4;
};

/**
 * Signals in message BamocarTxData.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_bamocar_tx_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t regid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t data;
};

/**
 * Signals in message PDM1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_no_fd_pdm1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t compound_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_int_temp;

    /**
     * Range: -
     * Scale: 0.1216
     * Offset: 0
     */
    double pdm_batt_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t global_error_flag;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t total_current;

    /**
     * Range: -
     * Scale: 0.0615
     * Offset: 0
     */
    double internal_rail_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reset_source;
};

/**
 * Pack message FrontAnalog1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_analog1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_analog1_t *src_p,
    size_t size);

/**
 * Unpack message FrontAnalog1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_analog1_unpack(
    struct ucr_01_no_fd_front_analog1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontAnalog1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_analog1_init(struct ucr_01_no_fd_front_analog1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_front_analog1_analog1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_analog1_analog1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_analog1_analog1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_front_analog1_analog2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_analog1_analog2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_analog1_analog2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_front_analog1_analog3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_analog1_analog3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_analog1_analog3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_front_analog1_analog4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_analog1_analog4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_analog1_analog4_is_in_range(uint16_t value);

/**
 * Pack message FrontAnalog2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_analog2_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_analog2_t *src_p,
    size_t size);

/**
 * Unpack message FrontAnalog2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_analog2_unpack(
    struct ucr_01_no_fd_front_analog2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontAnalog2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_analog2_init(struct ucr_01_no_fd_front_analog2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_front_analog2_analog5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_analog2_analog5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_analog2_analog5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_front_analog2_analog6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_analog2_analog6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_analog2_analog6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_front_analog2_analog7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_analog2_analog7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_analog2_analog7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_front_analog2_analog8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_analog2_analog8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_analog2_analog8_is_in_range(uint16_t value);

/**
 * Pack message EncoderPositions.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_encoder_positions_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_encoder_positions_t *src_p,
    size_t size);

/**
 * Unpack message EncoderPositions.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_encoder_positions_unpack(
    struct ucr_01_no_fd_encoder_positions_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EncoderPositions.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_encoder_positions_init(struct ucr_01_no_fd_encoder_positions_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_encoder_positions_encoder1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_encoder_positions_encoder1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_encoder_positions_encoder1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_encoder_positions_encoder2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_encoder_positions_encoder2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_encoder_positions_encoder2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_encoder_positions_encoder3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_encoder_positions_encoder3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_encoder_positions_encoder3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_encoder_positions_encoder4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_encoder_positions_encoder4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_encoder_positions_encoder4_is_in_range(uint8_t value);

/**
 * Pack message FrontStrainGauges1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_strain_gauges1_t *src_p,
    size_t size);

/**
 * Unpack message FrontStrainGauges1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges1_unpack(
    struct ucr_01_no_fd_front_strain_gauges1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontStrainGauges1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_strain_gauges1_init(struct ucr_01_no_fd_front_strain_gauges1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges1_gauge1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges1_gauge1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges1_gauge1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges1_gauge2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges1_gauge2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges1_gauge2_is_in_range(uint32_t value);

/**
 * Pack message FrontStrainGauges2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges2_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_strain_gauges2_t *src_p,
    size_t size);

/**
 * Unpack message FrontStrainGauges2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges2_unpack(
    struct ucr_01_no_fd_front_strain_gauges2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontStrainGauges2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_strain_gauges2_init(struct ucr_01_no_fd_front_strain_gauges2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges2_gauge3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges2_gauge3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges2_gauge3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges2_gauge4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges2_gauge4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges2_gauge4_is_in_range(uint32_t value);

/**
 * Pack message FrontStrainGauges3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges3_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_strain_gauges3_t *src_p,
    size_t size);

/**
 * Unpack message FrontStrainGauges3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges3_unpack(
    struct ucr_01_no_fd_front_strain_gauges3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontStrainGauges3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_strain_gauges3_init(struct ucr_01_no_fd_front_strain_gauges3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges3_gauge5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges3_gauge5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges3_gauge5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges3_gauge6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges3_gauge6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges3_gauge6_is_in_range(uint32_t value);

/**
 * Pack message FrontStrainGauges4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges4_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_strain_gauges4_t *src_p,
    size_t size);

/**
 * Unpack message FrontStrainGauges4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges4_unpack(
    struct ucr_01_no_fd_front_strain_gauges4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontStrainGauges4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_strain_gauges4_init(struct ucr_01_no_fd_front_strain_gauges4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges4_gauge7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges4_gauge7_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges4_gauge7_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges4_gauge8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges4_gauge8_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges4_gauge8_is_in_range(uint32_t value);

/**
 * Pack message FrontStrainGauges5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges5_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_strain_gauges5_t *src_p,
    size_t size);

/**
 * Unpack message FrontStrainGauges5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges5_unpack(
    struct ucr_01_no_fd_front_strain_gauges5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontStrainGauges5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_strain_gauges5_init(struct ucr_01_no_fd_front_strain_gauges5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges5_gauge9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges5_gauge9_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges5_gauge9_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges5_gauge10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges5_gauge10_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges5_gauge10_is_in_range(uint32_t value);

/**
 * Pack message FrontStrainGauges6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges6_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_strain_gauges6_t *src_p,
    size_t size);

/**
 * Unpack message FrontStrainGauges6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_strain_gauges6_unpack(
    struct ucr_01_no_fd_front_strain_gauges6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontStrainGauges6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_strain_gauges6_init(struct ucr_01_no_fd_front_strain_gauges6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges6_gauge11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges6_gauge11_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges6_gauge11_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_front_strain_gauges6_gauge12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_strain_gauges6_gauge12_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_strain_gauges6_gauge12_is_in_range(uint32_t value);

/**
 * Pack message RearStrainGauges1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_rear_strain_gauges1_t *src_p,
    size_t size);

/**
 * Unpack message RearStrainGauges1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges1_unpack(
    struct ucr_01_no_fd_rear_strain_gauges1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearStrainGauges1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_rear_strain_gauges1_init(struct ucr_01_no_fd_rear_strain_gauges1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges1_gauge1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges1_gauge1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges1_gauge1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges1_gauge2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges1_gauge2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges1_gauge2_is_in_range(uint32_t value);

/**
 * Pack message RearStrainGauges2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges2_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_rear_strain_gauges2_t *src_p,
    size_t size);

/**
 * Unpack message RearStrainGauges2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges2_unpack(
    struct ucr_01_no_fd_rear_strain_gauges2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearStrainGauges2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_rear_strain_gauges2_init(struct ucr_01_no_fd_rear_strain_gauges2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges2_gauge3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges2_gauge3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges2_gauge3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges2_gauge4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges2_gauge4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges2_gauge4_is_in_range(uint32_t value);

/**
 * Pack message RearStrainGauges3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges3_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_rear_strain_gauges3_t *src_p,
    size_t size);

/**
 * Unpack message RearStrainGauges3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges3_unpack(
    struct ucr_01_no_fd_rear_strain_gauges3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearStrainGauges3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_rear_strain_gauges3_init(struct ucr_01_no_fd_rear_strain_gauges3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges3_gauge5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges3_gauge5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges3_gauge5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges3_gauge6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges3_gauge6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges3_gauge6_is_in_range(uint32_t value);

/**
 * Pack message RearStrainGauges4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges4_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_rear_strain_gauges4_t *src_p,
    size_t size);

/**
 * Unpack message RearStrainGauges4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges4_unpack(
    struct ucr_01_no_fd_rear_strain_gauges4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearStrainGauges4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_rear_strain_gauges4_init(struct ucr_01_no_fd_rear_strain_gauges4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges4_gauge7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges4_gauge7_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges4_gauge7_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges4_gauge8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges4_gauge8_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges4_gauge8_is_in_range(uint32_t value);

/**
 * Pack message RearStrainGauges5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges5_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_rear_strain_gauges5_t *src_p,
    size_t size);

/**
 * Unpack message RearStrainGauges5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges5_unpack(
    struct ucr_01_no_fd_rear_strain_gauges5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearStrainGauges5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_rear_strain_gauges5_init(struct ucr_01_no_fd_rear_strain_gauges5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges5_gauge9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges5_gauge9_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges5_gauge9_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges5_gauge10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges5_gauge10_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges5_gauge10_is_in_range(uint32_t value);

/**
 * Pack message RearStrainGauges6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges6_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_rear_strain_gauges6_t *src_p,
    size_t size);

/**
 * Unpack message RearStrainGauges6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_rear_strain_gauges6_unpack(
    struct ucr_01_no_fd_rear_strain_gauges6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearStrainGauges6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_rear_strain_gauges6_init(struct ucr_01_no_fd_rear_strain_gauges6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges6_gauge11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges6_gauge11_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges6_gauge11_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_rear_strain_gauges6_gauge12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_rear_strain_gauges6_gauge12_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_rear_strain_gauges6_gauge12_is_in_range(uint32_t value);

/**
 * Pack message GPSBestPos.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_gps_best_pos_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_gps_best_pos_t *src_p,
    size_t size);

/**
 * Unpack message GPSBestPos.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_gps_best_pos_unpack(
    struct ucr_01_no_fd_gps_best_pos_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GPSBestPos.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_gps_best_pos_init(struct ucr_01_no_fd_gps_best_pos_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t ucr_01_no_fd_gps_best_pos_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_gps_best_pos_latitude_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_gps_best_pos_latitude_is_in_range(int64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t ucr_01_no_fd_gps_best_pos_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_gps_best_pos_longitude_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_gps_best_pos_longitude_is_in_range(int64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t ucr_01_no_fd_gps_best_pos_altitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_gps_best_pos_altitude_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_gps_best_pos_altitude_is_in_range(int64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t ucr_01_no_fd_gps_best_pos_std_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_gps_best_pos_std_latitude_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_gps_best_pos_std_latitude_is_in_range(int64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t ucr_01_no_fd_gps_best_pos_std_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_gps_best_pos_std_longitude_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_gps_best_pos_std_longitude_is_in_range(int64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t ucr_01_no_fd_gps_best_pos_std_altitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_gps_best_pos_std_altitude_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_gps_best_pos_std_altitude_is_in_range(int64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_gps_best_pos_gps_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_gps_best_pos_gps_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_gps_best_pos_gps_status_is_in_range(uint8_t value);

/**
 * Pack message BamocarRxData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_bamocar_rx_data_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_bamocar_rx_data_t *src_p,
    size_t size);

/**
 * Unpack message BamocarRxData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_bamocar_rx_data_unpack(
    struct ucr_01_no_fd_bamocar_rx_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BamocarRxData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_bamocar_rx_data_init(struct ucr_01_no_fd_bamocar_rx_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ucr_01_no_fd_bamocar_rx_data_regid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_bamocar_rx_data_regid_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_bamocar_rx_data_regid_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_bamocar_rx_data_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_bamocar_rx_data_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_bamocar_rx_data_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_bamocar_rx_data_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_bamocar_rx_data_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_bamocar_rx_data_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_bamocar_rx_data_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_bamocar_rx_data_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_bamocar_rx_data_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_bamocar_rx_data_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_bamocar_rx_data_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_bamocar_rx_data_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_bamocar_rx_data_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_bamocar_rx_data_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_bamocar_rx_data_byte5_is_in_range(uint8_t value);

/**
 * Pack message CellVoltage1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage1_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage1_unpack(
    struct ucr_01_no_fd_cell_voltage1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage1_init(struct ucr_01_no_fd_cell_voltage1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage1_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage1_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage1_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage1_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage1_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage1_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage1_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage1_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage1_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage1_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage1_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage1_cell4_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage2_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage2_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage2_unpack(
    struct ucr_01_no_fd_cell_voltage2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage2_init(struct ucr_01_no_fd_cell_voltage2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage2_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage2_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage2_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage2_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage2_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage2_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage2_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage2_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage2_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage2_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage2_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage2_cell8_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage3_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage3_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage3_unpack(
    struct ucr_01_no_fd_cell_voltage3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage3_init(struct ucr_01_no_fd_cell_voltage3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage3_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage3_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage3_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage3_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage3_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage3_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage3_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage3_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage3_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage3_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage3_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage3_cell12_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage4_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage4_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage4_unpack(
    struct ucr_01_no_fd_cell_voltage4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage4_init(struct ucr_01_no_fd_cell_voltage4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage4_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage4_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage4_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage4_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage4_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage4_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage4_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage4_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage4_cell15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage4_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage4_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage4_cell16_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage5_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage5_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage5_unpack(
    struct ucr_01_no_fd_cell_voltage5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage5_init(struct ucr_01_no_fd_cell_voltage5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage5_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage5_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage5_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage5_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage5_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage5_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage5_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage5_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage5_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage5_cell20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage5_cell20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage5_cell20_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage6_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage6_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage6_unpack(
    struct ucr_01_no_fd_cell_voltage6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage6_init(struct ucr_01_no_fd_cell_voltage6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage6_cell21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage6_cell21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage6_cell21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage6_cell22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage6_cell22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage6_cell22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage6_cell23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage6_cell23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage6_cell23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage6_cell24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage6_cell24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage6_cell24_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage7_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage7_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage7_unpack(
    struct ucr_01_no_fd_cell_voltage7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage7_init(struct ucr_01_no_fd_cell_voltage7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage7_cell25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage7_cell25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage7_cell25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage7_cell26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage7_cell26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage7_cell26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage7_cell27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage7_cell27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage7_cell27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage7_cell28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage7_cell28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage7_cell28_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage8_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage8_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage8_unpack(
    struct ucr_01_no_fd_cell_voltage8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage8_init(struct ucr_01_no_fd_cell_voltage8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage8_cell29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage8_cell29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage8_cell29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage8_cell30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage8_cell30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage8_cell30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage8_cell31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage8_cell31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage8_cell31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage8_cell32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage8_cell32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage8_cell32_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage9_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage9_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage9_unpack(
    struct ucr_01_no_fd_cell_voltage9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage9_init(struct ucr_01_no_fd_cell_voltage9_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage9_cell33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage9_cell33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage9_cell33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage9_cell34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage9_cell34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage9_cell34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage9_cell35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage9_cell35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage9_cell35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage9_cell36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage9_cell36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage9_cell36_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage10_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage10_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage10_unpack(
    struct ucr_01_no_fd_cell_voltage10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage10.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage10_init(struct ucr_01_no_fd_cell_voltage10_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage10_cell37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage10_cell37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage10_cell37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage10_cell38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage10_cell38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage10_cell38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage10_cell39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage10_cell39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage10_cell39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage10_cell40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage10_cell40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage10_cell40_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage11_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage11_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage11_unpack(
    struct ucr_01_no_fd_cell_voltage11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage11.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage11_init(struct ucr_01_no_fd_cell_voltage11_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage11_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage11_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage11_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage11_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage11_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage11_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage11_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage11_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage11_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage11_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage11_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage11_cell4_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage12_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage12_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage12_unpack(
    struct ucr_01_no_fd_cell_voltage12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage12.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage12_init(struct ucr_01_no_fd_cell_voltage12_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage12_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage12_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage12_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage12_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage12_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage12_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage12_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage12_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage12_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage12_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage12_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage12_cell8_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage13_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage13_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage13_unpack(
    struct ucr_01_no_fd_cell_voltage13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage13.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage13_init(struct ucr_01_no_fd_cell_voltage13_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage13_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage13_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage13_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage13_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage13_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage13_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage13_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage13_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage13_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage13_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage13_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage13_cell12_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage14.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage14_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage14_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage14.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage14_unpack(
    struct ucr_01_no_fd_cell_voltage14_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage14.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage14_init(struct ucr_01_no_fd_cell_voltage14_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage14_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage14_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage14_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage14_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage14_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage14_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage14_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage14_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage14_cell15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage14_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage14_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage14_cell16_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage15_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage15_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage15_unpack(
    struct ucr_01_no_fd_cell_voltage15_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage15.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage15_init(struct ucr_01_no_fd_cell_voltage15_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage15_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage15_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage15_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage15_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage15_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage15_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage15_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage15_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage15_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage15_cell20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage15_cell20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage15_cell20_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage16.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage16_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage16_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage16.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage16_unpack(
    struct ucr_01_no_fd_cell_voltage16_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage16.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage16_init(struct ucr_01_no_fd_cell_voltage16_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage16_cell21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage16_cell21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage16_cell21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage16_cell22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage16_cell22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage16_cell22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage16_cell23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage16_cell23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage16_cell23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage16_cell24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage16_cell24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage16_cell24_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage17_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage17_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage17_unpack(
    struct ucr_01_no_fd_cell_voltage17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage17.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage17_init(struct ucr_01_no_fd_cell_voltage17_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage17_cell25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage17_cell25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage17_cell25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage17_cell26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage17_cell26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage17_cell26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage17_cell27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage17_cell27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage17_cell27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage17_cell28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage17_cell28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage17_cell28_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage18.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage18_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage18_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage18.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage18_unpack(
    struct ucr_01_no_fd_cell_voltage18_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage18.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage18_init(struct ucr_01_no_fd_cell_voltage18_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage18_cell29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage18_cell29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage18_cell29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage18_cell30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage18_cell30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage18_cell30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage18_cell31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage18_cell31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage18_cell31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage18_cell32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage18_cell32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage18_cell32_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage19.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage19_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage19_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage19.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage19_unpack(
    struct ucr_01_no_fd_cell_voltage19_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage19.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage19_init(struct ucr_01_no_fd_cell_voltage19_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage19_cell33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage19_cell33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage19_cell33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage19_cell34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage19_cell34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage19_cell34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage19_cell35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage19_cell35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage19_cell35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage19_cell36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage19_cell36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage19_cell36_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage20.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage20_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage20_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage20.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage20_unpack(
    struct ucr_01_no_fd_cell_voltage20_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage20.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage20_init(struct ucr_01_no_fd_cell_voltage20_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage20_cell37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage20_cell37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage20_cell37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage20_cell38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage20_cell38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage20_cell38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage20_cell39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage20_cell39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage20_cell39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage20_cell40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage20_cell40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage20_cell40_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage21_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage21_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage21_unpack(
    struct ucr_01_no_fd_cell_voltage21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage21.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage21_init(struct ucr_01_no_fd_cell_voltage21_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage21_cell41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage21_cell41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage21_cell41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage21_cell42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage21_cell42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage21_cell42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage21_cell43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage21_cell43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage21_cell43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage21_cell44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage21_cell44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage21_cell44_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage22.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage22_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage22_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage22.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage22_unpack(
    struct ucr_01_no_fd_cell_voltage22_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage22.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage22_init(struct ucr_01_no_fd_cell_voltage22_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage22_cell45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage22_cell45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage22_cell45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage22_cell46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage22_cell46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage22_cell46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage22_cell47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage22_cell47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage22_cell47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage22_cell48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage22_cell48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage22_cell48_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage23.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage23_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage23_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage23.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage23_unpack(
    struct ucr_01_no_fd_cell_voltage23_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage23.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage23_init(struct ucr_01_no_fd_cell_voltage23_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage23_cell49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage23_cell49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage23_cell49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage23_cell50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage23_cell50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage23_cell50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage23_cell51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage23_cell51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage23_cell51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage23_cell52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage23_cell52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage23_cell52_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage24.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage24_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage24_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage24.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage24_unpack(
    struct ucr_01_no_fd_cell_voltage24_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage24.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage24_init(struct ucr_01_no_fd_cell_voltage24_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage24_cell53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage24_cell53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage24_cell53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage24_cell54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage24_cell54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage24_cell54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage24_cell55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage24_cell55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage24_cell55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage24_cell56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage24_cell56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage24_cell56_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage25_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage25_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage25_unpack(
    struct ucr_01_no_fd_cell_voltage25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage25.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage25_init(struct ucr_01_no_fd_cell_voltage25_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage25_cell57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage25_cell57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage25_cell57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage25_cell58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage25_cell58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage25_cell58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage25_cell59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage25_cell59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage25_cell59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage25_cell60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage25_cell60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage25_cell60_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage26.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage26_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage26_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage26.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage26_unpack(
    struct ucr_01_no_fd_cell_voltage26_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage26.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage26_init(struct ucr_01_no_fd_cell_voltage26_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage26_cell61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage26_cell61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage26_cell61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage26_cell62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage26_cell62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage26_cell62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage26_cell63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage26_cell63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage26_cell63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage26_cell64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage26_cell64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage26_cell64_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage27.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage27_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage27_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage27.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage27_unpack(
    struct ucr_01_no_fd_cell_voltage27_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage27.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage27_init(struct ucr_01_no_fd_cell_voltage27_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage27_cell65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage27_cell65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage27_cell65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage27_cell66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage27_cell66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage27_cell66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage27_cell67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage27_cell67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage27_cell67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage27_cell68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage27_cell68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage27_cell68_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage28.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage28_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage28_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage28.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage28_unpack(
    struct ucr_01_no_fd_cell_voltage28_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage28.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage28_init(struct ucr_01_no_fd_cell_voltage28_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage28_cell69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage28_cell69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage28_cell69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage28_cell70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage28_cell70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage28_cell70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage28_cell71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage28_cell71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage28_cell71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage28_cell72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage28_cell72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage28_cell72_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage29_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage29_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage29_unpack(
    struct ucr_01_no_fd_cell_voltage29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage29.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage29_init(struct ucr_01_no_fd_cell_voltage29_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage29_cell73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage29_cell73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage29_cell73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage29_cell74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage29_cell74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage29_cell74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage29_cell75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage29_cell75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage29_cell75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage29_cell76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage29_cell76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage29_cell76_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage30.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage30_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage30_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage30.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage30_unpack(
    struct ucr_01_no_fd_cell_voltage30_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage30.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage30_init(struct ucr_01_no_fd_cell_voltage30_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage30_cell77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage30_cell77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage30_cell77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage30_cell78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage30_cell78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage30_cell78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage30_cell79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage30_cell79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage30_cell79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage30_cell80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage30_cell80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage30_cell80_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage31.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage31_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage31_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage31.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage31_unpack(
    struct ucr_01_no_fd_cell_voltage31_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage31.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage31_init(struct ucr_01_no_fd_cell_voltage31_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage31_cell81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage31_cell81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage31_cell81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage31_cell82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage31_cell82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage31_cell82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage31_cell83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage31_cell83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage31_cell83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage31_cell84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage31_cell84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage31_cell84_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage32.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage32_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage32_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage32.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage32_unpack(
    struct ucr_01_no_fd_cell_voltage32_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage32.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage32_init(struct ucr_01_no_fd_cell_voltage32_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage32_cell85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage32_cell85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage32_cell85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage32_cell86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage32_cell86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage32_cell86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage32_cell87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage32_cell87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage32_cell87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage32_cell88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage32_cell88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage32_cell88_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage33_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage33_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage33_unpack(
    struct ucr_01_no_fd_cell_voltage33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage33.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage33_init(struct ucr_01_no_fd_cell_voltage33_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage33_cell89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage33_cell89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage33_cell89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage33_cell90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage33_cell90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage33_cell90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage33_cell91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage33_cell91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage33_cell91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage33_cell92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage33_cell92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage33_cell92_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage34.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage34_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage34_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage34.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage34_unpack(
    struct ucr_01_no_fd_cell_voltage34_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage34.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage34_init(struct ucr_01_no_fd_cell_voltage34_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage34_cell93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage34_cell93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage34_cell93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage34_cell94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage34_cell94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage34_cell94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage34_cell95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage34_cell95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage34_cell95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage34_cell96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage34_cell96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage34_cell96_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage35.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage35_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage35_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage35.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage35_unpack(
    struct ucr_01_no_fd_cell_voltage35_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage35.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage35_init(struct ucr_01_no_fd_cell_voltage35_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage35_cell97_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage35_cell97_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage35_cell97_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage35_cell98_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage35_cell98_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage35_cell98_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage35_cell99_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage35_cell99_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage35_cell99_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage35_cell100_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage35_cell100_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage35_cell100_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage36.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage36_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage36_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage36.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage36_unpack(
    struct ucr_01_no_fd_cell_voltage36_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage36.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage36_init(struct ucr_01_no_fd_cell_voltage36_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage36_cell101_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage36_cell101_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage36_cell101_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage36_cell102_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage36_cell102_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage36_cell102_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage36_cell103_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage36_cell103_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage36_cell103_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage36_cell104_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage36_cell104_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage36_cell104_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage37_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage37_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage37_unpack(
    struct ucr_01_no_fd_cell_voltage37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage37.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage37_init(struct ucr_01_no_fd_cell_voltage37_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage37_cell105_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage37_cell105_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage37_cell105_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage37_cell106_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage37_cell106_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage37_cell106_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage37_cell107_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage37_cell107_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage37_cell107_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage37_cell108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage37_cell108_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage37_cell108_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage38.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage38_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage38_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage38.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage38_unpack(
    struct ucr_01_no_fd_cell_voltage38_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage38.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage38_init(struct ucr_01_no_fd_cell_voltage38_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage38_cell109_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage38_cell109_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage38_cell109_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage38_cell110_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage38_cell110_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage38_cell110_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage38_cell111_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage38_cell111_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage38_cell111_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage38_cell112_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage38_cell112_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage38_cell112_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage39.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage39_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage39_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage39.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage39_unpack(
    struct ucr_01_no_fd_cell_voltage39_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage39.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage39_init(struct ucr_01_no_fd_cell_voltage39_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage39_cell113_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage39_cell113_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage39_cell113_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage39_cell114_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage39_cell114_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage39_cell114_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage39_cell115_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage39_cell115_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage39_cell115_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage39_cell116_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage39_cell116_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage39_cell116_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage40.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage40_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage40_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage40.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage40_unpack(
    struct ucr_01_no_fd_cell_voltage40_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage40.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage40_init(struct ucr_01_no_fd_cell_voltage40_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage40_cell117_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage40_cell117_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage40_cell117_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage40_cell118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage40_cell118_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage40_cell118_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage40_cell119_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage40_cell119_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage40_cell119_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage40_cell120_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage40_cell120_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage40_cell120_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage41_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage41_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage41_unpack(
    struct ucr_01_no_fd_cell_voltage41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage41.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage41_init(struct ucr_01_no_fd_cell_voltage41_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage41_cell121_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage41_cell121_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage41_cell121_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage41_cell122_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage41_cell122_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage41_cell122_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage41_cell123_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage41_cell123_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage41_cell123_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage41_cell124_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage41_cell124_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage41_cell124_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage42.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage42_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage42_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage42.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage42_unpack(
    struct ucr_01_no_fd_cell_voltage42_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage42.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage42_init(struct ucr_01_no_fd_cell_voltage42_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage42_cell125_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage42_cell125_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage42_cell125_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage42_cell126_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage42_cell126_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage42_cell126_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage42_cell127_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage42_cell127_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage42_cell127_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage42_cell128_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage42_cell128_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage42_cell128_is_in_range(uint16_t value);

/**
 * Pack message CellVoltage43.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_cell_voltage43_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_cell_voltage43_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage43.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_cell_voltage43_unpack(
    struct ucr_01_no_fd_cell_voltage43_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage43.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_cell_voltage43_init(struct ucr_01_no_fd_cell_voltage43_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage43_cell129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage43_cell129_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage43_cell129_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage43_cell130_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage43_cell130_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage43_cell130_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage43_cell131_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage43_cell131_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage43_cell131_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_cell_voltage43_cell132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_cell_voltage43_cell132_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_cell_voltage43_cell132_is_in_range(uint16_t value);

/**
 * Pack message Thermistor1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor1_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor1_unpack(
    struct ucr_01_no_fd_thermistor1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor1_init(struct ucr_01_no_fd_thermistor1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor1_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor1_therm1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor1_therm1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor1_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor1_therm2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor1_therm2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor1_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor1_therm3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor1_therm3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor1_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor1_therm4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor1_therm4_is_in_range(uint16_t value);

/**
 * Pack message Thermistor2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor2_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor2_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor2_unpack(
    struct ucr_01_no_fd_thermistor2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor2_init(struct ucr_01_no_fd_thermistor2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor2_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor2_therm5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor2_therm5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor2_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor2_therm6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor2_therm6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor2_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor2_therm7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor2_therm7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor2_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor2_therm8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor2_therm8_is_in_range(uint16_t value);

/**
 * Pack message Thermistor3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor3_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor3_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor3_unpack(
    struct ucr_01_no_fd_thermistor3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor3_init(struct ucr_01_no_fd_thermistor3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor3_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor3_therm9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor3_therm9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor3_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor3_therm10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor3_therm10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor3_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor3_therm11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor3_therm11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor3_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor3_therm12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor3_therm12_is_in_range(uint16_t value);

/**
 * Pack message Thermistor4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor4_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor4_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor4_unpack(
    struct ucr_01_no_fd_thermistor4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor4_init(struct ucr_01_no_fd_thermistor4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor4_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor4_therm13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor4_therm13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor4_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor4_therm14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor4_therm14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor4_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor4_therm15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor4_therm15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor4_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor4_therm16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor4_therm16_is_in_range(uint16_t value);

/**
 * Pack message Thermistor5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor5_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor5_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor5_unpack(
    struct ucr_01_no_fd_thermistor5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor5_init(struct ucr_01_no_fd_thermistor5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor5_therm17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor5_therm17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor5_therm17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor5_therm18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor5_therm18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor5_therm18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor5_therm19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor5_therm19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor5_therm19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor5_therm20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor5_therm20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor5_therm20_is_in_range(uint16_t value);

/**
 * Pack message Thermistor6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor6_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor6_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor6_unpack(
    struct ucr_01_no_fd_thermistor6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor6_init(struct ucr_01_no_fd_thermistor6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor6_therm21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor6_therm21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor6_therm21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor6_therm22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor6_therm22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor6_therm22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor6_therm23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor6_therm23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor6_therm23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor6_therm24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor6_therm24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor6_therm24_is_in_range(uint16_t value);

/**
 * Pack message Thermistor7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor7_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor7_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor7_unpack(
    struct ucr_01_no_fd_thermistor7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor7_init(struct ucr_01_no_fd_thermistor7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor7_therm25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor7_therm25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor7_therm25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor7_therm26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor7_therm26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor7_therm26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor7_therm27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor7_therm27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor7_therm27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor7_therm28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor7_therm28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor7_therm28_is_in_range(uint16_t value);

/**
 * Pack message Thermistor8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor8_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor8_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor8_unpack(
    struct ucr_01_no_fd_thermistor8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor8_init(struct ucr_01_no_fd_thermistor8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor8_therm29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor8_therm29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor8_therm29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor8_therm30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor8_therm30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor8_therm30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor8_therm31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor8_therm31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor8_therm31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor8_therm32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor8_therm32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor8_therm32_is_in_range(uint16_t value);

/**
 * Pack message Thermistor9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor9_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor9_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor9_unpack(
    struct ucr_01_no_fd_thermistor9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor9_init(struct ucr_01_no_fd_thermistor9_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor9_therm33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor9_therm33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor9_therm33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor9_therm34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor9_therm34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor9_therm34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor9_therm35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor9_therm35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor9_therm35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor9_therm36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor9_therm36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor9_therm36_is_in_range(uint16_t value);

/**
 * Pack message Thermistor10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor10_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor10_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor10_unpack(
    struct ucr_01_no_fd_thermistor10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor10.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor10_init(struct ucr_01_no_fd_thermistor10_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor10_therm37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor10_therm37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor10_therm37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor10_therm38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor10_therm38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor10_therm38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor10_therm39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor10_therm39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor10_therm39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor10_therm40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor10_therm40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor10_therm40_is_in_range(uint16_t value);

/**
 * Pack message Thermistor11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor11_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor11_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor11_unpack(
    struct ucr_01_no_fd_thermistor11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor11.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor11_init(struct ucr_01_no_fd_thermistor11_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor11_therm41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor11_therm41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor11_therm41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor11_therm42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor11_therm42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor11_therm42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor11_therm43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor11_therm43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor11_therm43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor11_therm44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor11_therm44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor11_therm44_is_in_range(uint16_t value);

/**
 * Pack message Thermistor12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor12_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor12_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor12_unpack(
    struct ucr_01_no_fd_thermistor12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor12.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor12_init(struct ucr_01_no_fd_thermistor12_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor12_therm45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor12_therm45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor12_therm45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor12_therm46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor12_therm46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor12_therm46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor12_therm47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor12_therm47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor12_therm47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor12_therm48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor12_therm48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor12_therm48_is_in_range(uint16_t value);

/**
 * Pack message Thermistor13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor13_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor13_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor13_unpack(
    struct ucr_01_no_fd_thermistor13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor13.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor13_init(struct ucr_01_no_fd_thermistor13_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor13_therm49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor13_therm49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor13_therm49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor13_therm50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor13_therm50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor13_therm50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor13_therm51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor13_therm51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor13_therm51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor13_therm52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor13_therm52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor13_therm52_is_in_range(uint16_t value);

/**
 * Pack message Thermistor14.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor14_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor14_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor14.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor14_unpack(
    struct ucr_01_no_fd_thermistor14_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor14.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor14_init(struct ucr_01_no_fd_thermistor14_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor14_therm53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor14_therm53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor14_therm53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor14_therm54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor14_therm54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor14_therm54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor14_therm55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor14_therm55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor14_therm55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor14_therm56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor14_therm56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor14_therm56_is_in_range(uint16_t value);

/**
 * Pack message Thermistor15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor15_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor15_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor15_unpack(
    struct ucr_01_no_fd_thermistor15_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor15.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor15_init(struct ucr_01_no_fd_thermistor15_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor15_therm57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor15_therm57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor15_therm57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor15_therm58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor15_therm58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor15_therm58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor15_therm59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor15_therm59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor15_therm59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor15_therm60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor15_therm60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor15_therm60_is_in_range(uint16_t value);

/**
 * Pack message Thermistor16.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor16_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor16_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor16.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor16_unpack(
    struct ucr_01_no_fd_thermistor16_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor16.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor16_init(struct ucr_01_no_fd_thermistor16_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor16_therm61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor16_therm61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor16_therm61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor16_therm62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor16_therm62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor16_therm62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor16_therm63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor16_therm63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor16_therm63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor16_therm64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor16_therm64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor16_therm64_is_in_range(uint16_t value);

/**
 * Pack message Thermistor17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor17_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor17_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor17_unpack(
    struct ucr_01_no_fd_thermistor17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor17.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor17_init(struct ucr_01_no_fd_thermistor17_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor17_therm65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor17_therm65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor17_therm65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor17_therm66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor17_therm66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor17_therm66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor17_therm67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor17_therm67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor17_therm67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor17_therm68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor17_therm68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor17_therm68_is_in_range(uint16_t value);

/**
 * Pack message Thermistor18.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor18_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor18_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor18.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor18_unpack(
    struct ucr_01_no_fd_thermistor18_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor18.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor18_init(struct ucr_01_no_fd_thermistor18_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor18_therm69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor18_therm69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor18_therm69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor18_therm70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor18_therm70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor18_therm70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor18_therm71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor18_therm71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor18_therm71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor18_therm72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor18_therm72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor18_therm72_is_in_range(uint16_t value);

/**
 * Pack message Thermistor19.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor19_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor19_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor19.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor19_unpack(
    struct ucr_01_no_fd_thermistor19_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor19.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor19_init(struct ucr_01_no_fd_thermistor19_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor19_therm73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor19_therm73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor19_therm73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor19_therm74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor19_therm74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor19_therm74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor19_therm75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor19_therm75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor19_therm75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor19_therm76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor19_therm76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor19_therm76_is_in_range(uint16_t value);

/**
 * Pack message Thermistor20.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor20_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor20_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor20.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor20_unpack(
    struct ucr_01_no_fd_thermistor20_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor20.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor20_init(struct ucr_01_no_fd_thermistor20_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor20_therm77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor20_therm77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor20_therm77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor20_therm78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor20_therm78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor20_therm78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor20_therm79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor20_therm79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor20_therm79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor20_therm80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor20_therm80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor20_therm80_is_in_range(uint16_t value);

/**
 * Pack message Thermistor21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor21_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor21_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor21_unpack(
    struct ucr_01_no_fd_thermistor21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor21.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor21_init(struct ucr_01_no_fd_thermistor21_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor21_therm81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor21_therm81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor21_therm81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor21_therm82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor21_therm82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor21_therm82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor21_therm83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor21_therm83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor21_therm83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor21_therm84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor21_therm84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor21_therm84_is_in_range(uint16_t value);

/**
 * Pack message Thermistor22.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor22_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor22_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor22.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor22_unpack(
    struct ucr_01_no_fd_thermistor22_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor22.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor22_init(struct ucr_01_no_fd_thermistor22_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor22_therm85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor22_therm85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor22_therm85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor22_therm86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor22_therm86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor22_therm86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor22_therm87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor22_therm87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor22_therm87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor22_therm88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor22_therm88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor22_therm88_is_in_range(uint16_t value);

/**
 * Pack message Thermistor23.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor23_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor23_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor23.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor23_unpack(
    struct ucr_01_no_fd_thermistor23_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor23.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor23_init(struct ucr_01_no_fd_thermistor23_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor23_therm89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor23_therm89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor23_therm89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor23_therm90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor23_therm90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor23_therm90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor23_therm91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor23_therm91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor23_therm91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor23_therm92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor23_therm92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor23_therm92_is_in_range(uint16_t value);

/**
 * Pack message Thermistor24.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor24_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor24_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor24.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor24_unpack(
    struct ucr_01_no_fd_thermistor24_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor24.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor24_init(struct ucr_01_no_fd_thermistor24_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor24_therm93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor24_therm93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor24_therm93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor24_therm94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor24_therm94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor24_therm94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor24_therm95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor24_therm95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor24_therm95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor24_therm96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor24_therm96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor24_therm96_is_in_range(uint16_t value);

/**
 * Pack message Thermistor25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor25_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor25_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor25_unpack(
    struct ucr_01_no_fd_thermistor25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor25.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor25_init(struct ucr_01_no_fd_thermistor25_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor25_therm97_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor25_therm97_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor25_therm97_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor25_therm98_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor25_therm98_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor25_therm98_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor25_therm99_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor25_therm99_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor25_therm99_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor25_therm100_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor25_therm100_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor25_therm100_is_in_range(uint16_t value);

/**
 * Pack message Thermistor26.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor26_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor26_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor26.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor26_unpack(
    struct ucr_01_no_fd_thermistor26_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor26.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor26_init(struct ucr_01_no_fd_thermistor26_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor26_therm101_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor26_therm101_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor26_therm101_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor26_therm102_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor26_therm102_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor26_therm102_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor26_therm103_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor26_therm103_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor26_therm103_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor26_therm104_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor26_therm104_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor26_therm104_is_in_range(uint16_t value);

/**
 * Pack message Thermistor27.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor27_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor27_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor27.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor27_unpack(
    struct ucr_01_no_fd_thermistor27_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor27.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor27_init(struct ucr_01_no_fd_thermistor27_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor27_therm105_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor27_therm105_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor27_therm105_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor27_therm106_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor27_therm106_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor27_therm106_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor27_therm107_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor27_therm107_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor27_therm107_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor27_therm108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor27_therm108_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor27_therm108_is_in_range(uint16_t value);

/**
 * Pack message Thermistor28.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor28_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor28_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor28.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor28_unpack(
    struct ucr_01_no_fd_thermistor28_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor28.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor28_init(struct ucr_01_no_fd_thermistor28_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor28_therm109_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor28_therm109_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor28_therm109_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor28_therm110_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor28_therm110_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor28_therm110_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor28_therm111_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor28_therm111_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor28_therm111_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor28_therm112_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor28_therm112_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor28_therm112_is_in_range(uint16_t value);

/**
 * Pack message Thermistor29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor29_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor29_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor29_unpack(
    struct ucr_01_no_fd_thermistor29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor29.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor29_init(struct ucr_01_no_fd_thermistor29_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor29_therm113_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor29_therm113_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor29_therm113_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor29_therm114_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor29_therm114_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor29_therm114_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor29_therm115_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor29_therm115_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor29_therm115_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor29_therm116_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor29_therm116_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor29_therm116_is_in_range(uint16_t value);

/**
 * Pack message Thermistor30.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor30_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor30_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor30.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor30_unpack(
    struct ucr_01_no_fd_thermistor30_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor30.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor30_init(struct ucr_01_no_fd_thermistor30_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor30_therm117_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor30_therm117_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor30_therm117_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor30_therm118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor30_therm118_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor30_therm118_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor30_therm119_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor30_therm119_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor30_therm119_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor30_therm120_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor30_therm120_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor30_therm120_is_in_range(uint16_t value);

/**
 * Pack message Thermistor31.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor31_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor31_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor31.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor31_unpack(
    struct ucr_01_no_fd_thermistor31_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor31.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor31_init(struct ucr_01_no_fd_thermistor31_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor31_therm121_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor31_therm121_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor31_therm121_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor31_therm122_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor31_therm122_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor31_therm122_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor31_therm123_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor31_therm123_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor31_therm123_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor31_therm124_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor31_therm124_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor31_therm124_is_in_range(uint16_t value);

/**
 * Pack message Thermistor32.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor32_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor32_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor32.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor32_unpack(
    struct ucr_01_no_fd_thermistor32_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor32.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor32_init(struct ucr_01_no_fd_thermistor32_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor32_therm125_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor32_therm125_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor32_therm125_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor32_therm126_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor32_therm126_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor32_therm126_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor32_therm127_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor32_therm127_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor32_therm127_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor32_therm128_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor32_therm128_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor32_therm128_is_in_range(uint16_t value);

/**
 * Pack message Thermistor33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor33_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor33_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor33_unpack(
    struct ucr_01_no_fd_thermistor33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor33.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor33_init(struct ucr_01_no_fd_thermistor33_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor33_therm129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor33_therm129_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor33_therm129_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor33_therm130_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor33_therm130_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor33_therm130_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor33_therm131_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor33_therm131_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor33_therm131_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor33_therm132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor33_therm132_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor33_therm132_is_in_range(uint16_t value);

/**
 * Pack message Thermistor34.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor34_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor34_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor34.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor34_unpack(
    struct ucr_01_no_fd_thermistor34_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor34.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor34_init(struct ucr_01_no_fd_thermistor34_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor34_therm133_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor34_therm133_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor34_therm133_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor34_therm134_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor34_therm134_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor34_therm134_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor34_therm135_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor34_therm135_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor34_therm135_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor34_therm136_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor34_therm136_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor34_therm136_is_in_range(uint16_t value);

/**
 * Pack message Thermistor35.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor35_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor35_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor35.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor35_unpack(
    struct ucr_01_no_fd_thermistor35_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor35.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor35_init(struct ucr_01_no_fd_thermistor35_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor35_therm137_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor35_therm137_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor35_therm137_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor35_therm138_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor35_therm138_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor35_therm138_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor35_therm139_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor35_therm139_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor35_therm139_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor35_therm140_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor35_therm140_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor35_therm140_is_in_range(uint16_t value);

/**
 * Pack message Thermistor36.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor36_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor36_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor36.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor36_unpack(
    struct ucr_01_no_fd_thermistor36_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor36.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor36_init(struct ucr_01_no_fd_thermistor36_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor36_therm141_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor36_therm141_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor36_therm141_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor36_therm142_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor36_therm142_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor36_therm142_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor36_therm143_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor36_therm143_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor36_therm143_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor36_therm144_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor36_therm144_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor36_therm144_is_in_range(uint16_t value);

/**
 * Pack message Thermistor37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor37_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor37_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor37_unpack(
    struct ucr_01_no_fd_thermistor37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor37.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor37_init(struct ucr_01_no_fd_thermistor37_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor37_therm145_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor37_therm145_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor37_therm145_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor37_therm146_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor37_therm146_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor37_therm146_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor37_therm147_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor37_therm147_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor37_therm147_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor37_therm148_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor37_therm148_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor37_therm148_is_in_range(uint16_t value);

/**
 * Pack message Thermistor38.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor38_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor38_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor38.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor38_unpack(
    struct ucr_01_no_fd_thermistor38_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor38.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor38_init(struct ucr_01_no_fd_thermistor38_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor38_therm149_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor38_therm149_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor38_therm149_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor38_therm150_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor38_therm150_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor38_therm150_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor38_therm151_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor38_therm151_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor38_therm151_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor38_therm152_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor38_therm152_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor38_therm152_is_in_range(uint16_t value);

/**
 * Pack message Thermistor39.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor39_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor39_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor39.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor39_unpack(
    struct ucr_01_no_fd_thermistor39_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor39.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor39_init(struct ucr_01_no_fd_thermistor39_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor39_therm153_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor39_therm153_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor39_therm153_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor39_therm154_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor39_therm154_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor39_therm154_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor39_therm155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor39_therm155_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor39_therm155_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor39_therm156_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor39_therm156_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor39_therm156_is_in_range(uint16_t value);

/**
 * Pack message Thermistor40.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor40_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor40_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor40.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor40_unpack(
    struct ucr_01_no_fd_thermistor40_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor40.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor40_init(struct ucr_01_no_fd_thermistor40_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor40_therm157_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor40_therm157_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor40_therm157_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor40_therm158_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor40_therm158_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor40_therm158_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor40_therm159_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor40_therm159_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor40_therm159_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor40_therm160_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor40_therm160_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor40_therm160_is_in_range(uint16_t value);

/**
 * Pack message Thermistor41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor41_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor41_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor41_unpack(
    struct ucr_01_no_fd_thermistor41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor41.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor41_init(struct ucr_01_no_fd_thermistor41_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor41_therm161_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor41_therm161_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor41_therm161_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor41_therm162_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor41_therm162_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor41_therm162_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor41_therm163_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor41_therm163_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor41_therm163_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor41_therm164_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor41_therm164_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor41_therm164_is_in_range(uint16_t value);

/**
 * Pack message Thermistor42.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor42_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor42_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor42.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor42_unpack(
    struct ucr_01_no_fd_thermistor42_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor42.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor42_init(struct ucr_01_no_fd_thermistor42_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor42_therm165_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor42_therm165_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor42_therm165_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor42_therm166_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor42_therm166_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor42_therm166_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor42_therm167_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor42_therm167_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor42_therm167_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor42_therm168_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor42_therm168_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor42_therm168_is_in_range(uint16_t value);

/**
 * Pack message Thermistor43.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor43_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor43_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor43.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor43_unpack(
    struct ucr_01_no_fd_thermistor43_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor43.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor43_init(struct ucr_01_no_fd_thermistor43_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor43_therm169_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor43_therm169_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor43_therm169_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor43_therm170_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor43_therm170_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor43_therm170_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor43_therm171_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor43_therm171_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor43_therm171_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor43_therm172_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor43_therm172_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor43_therm172_is_in_range(uint16_t value);

/**
 * Pack message Thermistor44.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor44_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor44_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor44.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor44_unpack(
    struct ucr_01_no_fd_thermistor44_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor44.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor44_init(struct ucr_01_no_fd_thermistor44_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor44_therm173_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor44_therm173_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor44_therm173_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor44_therm174_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor44_therm174_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor44_therm174_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor44_therm175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor44_therm175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor44_therm175_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor44_therm176_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor44_therm176_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor44_therm176_is_in_range(uint16_t value);

/**
 * Pack message Thermistor45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor45_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor45_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor45_unpack(
    struct ucr_01_no_fd_thermistor45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor45.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor45_init(struct ucr_01_no_fd_thermistor45_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor45_therm177_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor45_therm177_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor45_therm177_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor45_therm178_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor45_therm178_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor45_therm178_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor45_therm179_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor45_therm179_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor45_therm179_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor45_therm180_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor45_therm180_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor45_therm180_is_in_range(uint16_t value);

/**
 * Pack message Thermistor46.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor46_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor46_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor46.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor46_unpack(
    struct ucr_01_no_fd_thermistor46_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor46.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor46_init(struct ucr_01_no_fd_thermistor46_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor46_therm181_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor46_therm181_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor46_therm181_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor46_therm182_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor46_therm182_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor46_therm182_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor46_therm183_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor46_therm183_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor46_therm183_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor46_therm184_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor46_therm184_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor46_therm184_is_in_range(uint16_t value);

/**
 * Pack message Thermistor47.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor47_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor47_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor47.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor47_unpack(
    struct ucr_01_no_fd_thermistor47_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor47.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor47_init(struct ucr_01_no_fd_thermistor47_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor47_therm185_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor47_therm185_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor47_therm185_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor47_therm186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor47_therm186_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor47_therm186_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor47_therm187_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor47_therm187_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor47_therm187_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor47_therm188_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor47_therm188_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor47_therm188_is_in_range(uint16_t value);

/**
 * Pack message Thermistor48.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor48_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor48_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor48.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor48_unpack(
    struct ucr_01_no_fd_thermistor48_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor48.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor48_init(struct ucr_01_no_fd_thermistor48_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor48_therm189_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor48_therm189_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor48_therm189_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor48_therm190_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor48_therm190_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor48_therm190_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor48_therm191_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor48_therm191_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor48_therm191_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor48_therm192_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor48_therm192_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor48_therm192_is_in_range(uint16_t value);

/**
 * Pack message Thermistor49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_thermistor49_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_thermistor49_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_thermistor49_unpack(
    struct ucr_01_no_fd_thermistor49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor49.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_thermistor49_init(struct ucr_01_no_fd_thermistor49_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor49_therm193_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor49_therm193_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor49_therm193_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor49_therm194_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor49_therm194_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor49_therm194_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor49_therm195_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor49_therm195_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor49_therm195_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_thermistor49_therm196_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_thermistor49_therm196_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_thermistor49_therm196_is_in_range(uint16_t value);

/**
 * Pack message PackVoltage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_pack_voltage_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_pack_voltage_t *src_p,
    size_t size);

/**
 * Unpack message PackVoltage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_pack_voltage_unpack(
    struct ucr_01_no_fd_pack_voltage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PackVoltage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_pack_voltage_init(struct ucr_01_no_fd_pack_voltage_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_pack_voltage_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_pack_voltage_pack_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_pack_voltage_pack_voltage_is_in_range(float value);

/**
 * Pack message TCU1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_tcu1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_tcu1_t *src_p,
    size_t size);

/**
 * Unpack message TCU1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_tcu1_unpack(
    struct ucr_01_no_fd_tcu1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TCU1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_tcu1_init(struct ucr_01_no_fd_tcu1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_tcu1_apps1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_tcu1_apps1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_tcu1_apps1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_tcu1_apps2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_tcu1_apps2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_tcu1_apps2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_no_fd_tcu1_bse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_tcu1_bse_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_tcu1_bse_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_tcu1_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_tcu1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_tcu1_status_is_in_range(uint8_t value);

/**
 * Pack message ACULV_CAN2_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_aculv_can2_1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_aculv_can2_1_t *src_p,
    size_t size);

/**
 * Unpack message ACULV_CAN2_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_aculv_can2_1_unpack(
    struct ucr_01_no_fd_aculv_can2_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV_CAN2_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_aculv_can2_1_init(struct ucr_01_no_fd_aculv_can2_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_aculv_can2_1_ams_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can2_1_ams_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can2_1_ams_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_aculv_can2_1_fld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can2_1_fld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can2_1_fld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_aculv_can2_1_state_of_charge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can2_1_state_of_charge_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can2_1_state_of_charge_is_in_range(float value);

/**
 * Pack message ACULV_CAN2_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_aculv_can2_2_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_aculv_can2_2_t *src_p,
    size_t size);

/**
 * Unpack message ACULV_CAN2_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_aculv_can2_2_unpack(
    struct ucr_01_no_fd_aculv_can2_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV_CAN2_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_aculv_can2_2_init(struct ucr_01_no_fd_aculv_can2_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_aculv_can2_2_accumulator_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can2_2_accumulator_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can2_2_accumulator_voltage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_aculv_can2_2_tractive_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can2_2_tractive_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can2_2_tractive_voltage_is_in_range(float value);

/**
 * Pack message ACULV_CAN2_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_aculv_can2_3_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_aculv_can2_3_t *src_p,
    size_t size);

/**
 * Unpack message ACULV_CAN2_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_aculv_can2_3_unpack(
    struct ucr_01_no_fd_aculv_can2_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV_CAN2_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_aculv_can2_3_init(struct ucr_01_no_fd_aculv_can2_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_aculv_can2_3_cell_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can2_3_cell_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can2_3_cell_current_is_in_range(float value);

/**
 * Pack message ACULV_CAN2_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_aculv_can2_4_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_aculv_can2_4_t *src_p,
    size_t size);

/**
 * Unpack message ACULV_CAN2_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_aculv_can2_4_unpack(
    struct ucr_01_no_fd_aculv_can2_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV_CAN2_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_aculv_can2_4_init(struct ucr_01_no_fd_aculv_can2_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_aculv_can2_4_isolation_monitoring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can2_4_isolation_monitoring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can2_4_isolation_monitoring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_aculv_can2_4_isolation_monitoring1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can2_4_isolation_monitoring1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can2_4_isolation_monitoring1_is_in_range(float value);

/**
 * Pack message ACULV_CAN1_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_aculv_can1_1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_aculv_can1_1_t *src_p,
    size_t size);

/**
 * Unpack message ACULV_CAN1_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_aculv_can1_1_unpack(
    struct ucr_01_no_fd_aculv_can1_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV_CAN1_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_aculv_can1_1_init(struct ucr_01_no_fd_aculv_can1_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_aculv_can1_1_charge_status1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can1_1_charge_status1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can1_1_charge_status1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_aculv_can1_1_charge_status2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can1_1_charge_status2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can1_1_charge_status2_is_in_range(float value);

/**
 * Pack message ACULV_CAN1_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_aculv_can1_2_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_aculv_can1_2_t *src_p,
    size_t size);

/**
 * Unpack message ACULV_CAN1_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_aculv_can1_2_unpack(
    struct ucr_01_no_fd_aculv_can1_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV_CAN1_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_aculv_can1_2_init(struct ucr_01_no_fd_aculv_can1_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_aculv_can1_2_charge_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_aculv_can1_2_charge_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_aculv_can1_2_charge_request_is_in_range(uint8_t value);

/**
 * Pack message TCU2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_tcu2_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_tcu2_t *src_p,
    size_t size);

/**
 * Unpack message TCU2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_tcu2_unpack(
    struct ucr_01_no_fd_tcu2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TCU2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_tcu2_init(struct ucr_01_no_fd_tcu2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_tcu2_brake_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_tcu2_brake_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_tcu2_brake_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_tcu2_bamocar_rfe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_tcu2_bamocar_rfe_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_tcu2_bamocar_rfe_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_tcu2_bamocar_frg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_tcu2_bamocar_frg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_tcu2_bamocar_frg_is_in_range(uint8_t value);

/**
 * Pack message FrontFrequency1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_frequency1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_frequency1_t *src_p,
    size_t size);

/**
 * Unpack message FrontFrequency1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_frequency1_unpack(
    struct ucr_01_no_fd_front_frequency1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontFrequency1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_frequency1_init(struct ucr_01_no_fd_front_frequency1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_front_frequency1_freq1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_frequency1_freq1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_frequency1_freq1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_front_frequency1_freq2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_frequency1_freq2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_frequency1_freq2_is_in_range(float value);

/**
 * Pack message FrontFrequency2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_front_frequency2_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_front_frequency2_t *src_p,
    size_t size);

/**
 * Unpack message FrontFrequency2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_front_frequency2_unpack(
    struct ucr_01_no_fd_front_frequency2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontFrequency2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_front_frequency2_init(struct ucr_01_no_fd_front_frequency2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_front_frequency2_freq3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_frequency2_freq3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_frequency2_freq3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_no_fd_front_frequency2_freq4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_front_frequency2_freq4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_front_frequency2_freq4_is_in_range(float value);

/**
 * Pack message BamocarTxData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_bamocar_tx_data_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_bamocar_tx_data_t *src_p,
    size_t size);

/**
 * Unpack message BamocarTxData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_bamocar_tx_data_unpack(
    struct ucr_01_no_fd_bamocar_tx_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BamocarTxData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_bamocar_tx_data_init(struct ucr_01_no_fd_bamocar_tx_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_bamocar_tx_data_regid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_bamocar_tx_data_regid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_bamocar_tx_data_regid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_no_fd_bamocar_tx_data_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_bamocar_tx_data_data_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_bamocar_tx_data_data_is_in_range(uint32_t value);

/**
 * Pack message PDM1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_no_fd_pdm1_pack(
    uint8_t *dst_p,
    const struct ucr_01_no_fd_pdm1_t *src_p,
    size_t size);

/**
 * Unpack message PDM1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_no_fd_pdm1_unpack(
    struct ucr_01_no_fd_pdm1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDM1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_no_fd_pdm1_init(struct ucr_01_no_fd_pdm1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_pdm1_compound_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_pdm1_compound_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_pdm1_compound_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_pdm1_pdm_int_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_pdm1_pdm_int_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_pdm1_pdm_int_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_no_fd_pdm1_pdm_batt_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_pdm1_pdm_batt_voltage_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_pdm1_pdm_batt_voltage_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_pdm1_global_error_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_pdm1_global_error_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_pdm1_global_error_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_pdm1_total_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_pdm1_total_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_pdm1_total_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_no_fd_pdm1_internal_rail_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_pdm1_internal_rail_voltage_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_pdm1_internal_rail_voltage_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_no_fd_pdm1_reset_source_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_no_fd_pdm1_reset_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_no_fd_pdm1_reset_source_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
