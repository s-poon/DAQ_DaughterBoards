
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a164  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800a344  0800a344  0001a344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a414  0800a414  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a41c  0800a41c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a41c  0800a41c  0001a41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a420  0800a420  0001a420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800a424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001098  20000010  0800a434  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a8  0800a434  000210a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f532  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000077c5  00000000  00000000  0004f5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021f0  00000000  00000000  00056d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000195a  00000000  00000000  00058f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031809  00000000  00000000  0005a8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000381d8  00000000  00000000  0008c0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00124984  00000000  00000000  000c42ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000841c  00000000  00000000  001e8c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f4  00000000  00000000  001f104c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a32c 	.word	0x0800a32c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800a32c 	.word	0x0800a32c

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	; (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	; (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	; (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	; (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	; (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20000a9c 	.word	0x20000a9c
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	0019f09f 	.word	0x0019f09f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	; (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	; (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	; (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	; (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	; (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20000b38 	.word	0x20000b38
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20000aa0 	.word	0x20000aa0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20000aa4 	.word	0x20000aa4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	200010a4 	.word	0x200010a4

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	; (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	; (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f009 fa57 	bl	80098ac <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f009 f9c4 	bl	8009790 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	; (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	; (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20000b44 	.word	0x20000b44
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	200010a4 	.word	0x200010a4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20000b48 	.word	0x20000b48
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20000bd4 	.word	0x20000bd4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20000bd8 	.word	0x20000bd8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20000bd0 	.word	0x20000bd0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20000bcc 	.word	0x20000bcc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20000b38 	.word	0x20000b38
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20000aa0 	.word	0x20000aa0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20000aa4 	.word	0x20000aa4
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_uldivmod>:
 8000458:	b953      	cbnz	r3, 8000470 <__aeabi_uldivmod+0x18>
 800045a:	b94a      	cbnz	r2, 8000470 <__aeabi_uldivmod+0x18>
 800045c:	2900      	cmp	r1, #0
 800045e:	bf08      	it	eq
 8000460:	2800      	cmpeq	r0, #0
 8000462:	bf1c      	itt	ne
 8000464:	f04f 31ff 	movne.w	r1, #4294967295
 8000468:	f04f 30ff 	movne.w	r0, #4294967295
 800046c:	f000 b970 	b.w	8000750 <__aeabi_idiv0>
 8000470:	f1ad 0c08 	sub.w	ip, sp, #8
 8000474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000478:	f000 f806 	bl	8000488 <__udivmoddi4>
 800047c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000484:	b004      	add	sp, #16
 8000486:	4770      	bx	lr

08000488 <__udivmoddi4>:
 8000488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800048c:	9e08      	ldr	r6, [sp, #32]
 800048e:	460d      	mov	r5, r1
 8000490:	4604      	mov	r4, r0
 8000492:	460f      	mov	r7, r1
 8000494:	2b00      	cmp	r3, #0
 8000496:	d14a      	bne.n	800052e <__udivmoddi4+0xa6>
 8000498:	428a      	cmp	r2, r1
 800049a:	4694      	mov	ip, r2
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0xe2>
 800049e:	fab2 f382 	clz	r3, r2
 80004a2:	b143      	cbz	r3, 80004b6 <__udivmoddi4+0x2e>
 80004a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a8:	f1c3 0220 	rsb	r2, r3, #32
 80004ac:	409f      	lsls	r7, r3
 80004ae:	fa20 f202 	lsr.w	r2, r0, r2
 80004b2:	4317      	orrs	r7, r2
 80004b4:	409c      	lsls	r4, r3
 80004b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ba:	fa1f f58c 	uxth.w	r5, ip
 80004be:	fbb7 f1fe 	udiv	r1, r7, lr
 80004c2:	0c22      	lsrs	r2, r4, #16
 80004c4:	fb0e 7711 	mls	r7, lr, r1, r7
 80004c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004cc:	fb01 f005 	mul.w	r0, r1, r5
 80004d0:	4290      	cmp	r0, r2
 80004d2:	d90a      	bls.n	80004ea <__udivmoddi4+0x62>
 80004d4:	eb1c 0202 	adds.w	r2, ip, r2
 80004d8:	f101 37ff 	add.w	r7, r1, #4294967295
 80004dc:	f080 811c 	bcs.w	8000718 <__udivmoddi4+0x290>
 80004e0:	4290      	cmp	r0, r2
 80004e2:	f240 8119 	bls.w	8000718 <__udivmoddi4+0x290>
 80004e6:	3902      	subs	r1, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a12      	subs	r2, r2, r0
 80004ec:	b2a4      	uxth	r4, r4
 80004ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80004f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80004f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004fa:	fb00 f505 	mul.w	r5, r0, r5
 80004fe:	42a5      	cmp	r5, r4
 8000500:	d90a      	bls.n	8000518 <__udivmoddi4+0x90>
 8000502:	eb1c 0404 	adds.w	r4, ip, r4
 8000506:	f100 32ff 	add.w	r2, r0, #4294967295
 800050a:	f080 8107 	bcs.w	800071c <__udivmoddi4+0x294>
 800050e:	42a5      	cmp	r5, r4
 8000510:	f240 8104 	bls.w	800071c <__udivmoddi4+0x294>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800051c:	1b64      	subs	r4, r4, r5
 800051e:	2100      	movs	r1, #0
 8000520:	b11e      	cbz	r6, 800052a <__udivmoddi4+0xa2>
 8000522:	40dc      	lsrs	r4, r3
 8000524:	2300      	movs	r3, #0
 8000526:	e9c6 4300 	strd	r4, r3, [r6]
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	428b      	cmp	r3, r1
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0xbc>
 8000532:	2e00      	cmp	r6, #0
 8000534:	f000 80ed 	beq.w	8000712 <__udivmoddi4+0x28a>
 8000538:	2100      	movs	r1, #0
 800053a:	e9c6 0500 	strd	r0, r5, [r6]
 800053e:	4608      	mov	r0, r1
 8000540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000544:	fab3 f183 	clz	r1, r3
 8000548:	2900      	cmp	r1, #0
 800054a:	d149      	bne.n	80005e0 <__udivmoddi4+0x158>
 800054c:	42ab      	cmp	r3, r5
 800054e:	d302      	bcc.n	8000556 <__udivmoddi4+0xce>
 8000550:	4282      	cmp	r2, r0
 8000552:	f200 80f8 	bhi.w	8000746 <__udivmoddi4+0x2be>
 8000556:	1a84      	subs	r4, r0, r2
 8000558:	eb65 0203 	sbc.w	r2, r5, r3
 800055c:	2001      	movs	r0, #1
 800055e:	4617      	mov	r7, r2
 8000560:	2e00      	cmp	r6, #0
 8000562:	d0e2      	beq.n	800052a <__udivmoddi4+0xa2>
 8000564:	e9c6 4700 	strd	r4, r7, [r6]
 8000568:	e7df      	b.n	800052a <__udivmoddi4+0xa2>
 800056a:	b902      	cbnz	r2, 800056e <__udivmoddi4+0xe6>
 800056c:	deff      	udf	#255	; 0xff
 800056e:	fab2 f382 	clz	r3, r2
 8000572:	2b00      	cmp	r3, #0
 8000574:	f040 8090 	bne.w	8000698 <__udivmoddi4+0x210>
 8000578:	1a8a      	subs	r2, r1, r2
 800057a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800057e:	fa1f fe8c 	uxth.w	lr, ip
 8000582:	2101      	movs	r1, #1
 8000584:	fbb2 f5f7 	udiv	r5, r2, r7
 8000588:	fb07 2015 	mls	r0, r7, r5, r2
 800058c:	0c22      	lsrs	r2, r4, #16
 800058e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000592:	fb0e f005 	mul.w	r0, lr, r5
 8000596:	4290      	cmp	r0, r2
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x124>
 800059a:	eb1c 0202 	adds.w	r2, ip, r2
 800059e:	f105 38ff 	add.w	r8, r5, #4294967295
 80005a2:	d202      	bcs.n	80005aa <__udivmoddi4+0x122>
 80005a4:	4290      	cmp	r0, r2
 80005a6:	f200 80cb 	bhi.w	8000740 <__udivmoddi4+0x2b8>
 80005aa:	4645      	mov	r5, r8
 80005ac:	1a12      	subs	r2, r2, r0
 80005ae:	b2a4      	uxth	r4, r4
 80005b0:	fbb2 f0f7 	udiv	r0, r2, r7
 80005b4:	fb07 2210 	mls	r2, r7, r0, r2
 80005b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005bc:	fb0e fe00 	mul.w	lr, lr, r0
 80005c0:	45a6      	cmp	lr, r4
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x14e>
 80005c4:	eb1c 0404 	adds.w	r4, ip, r4
 80005c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80005cc:	d202      	bcs.n	80005d4 <__udivmoddi4+0x14c>
 80005ce:	45a6      	cmp	lr, r4
 80005d0:	f200 80bb 	bhi.w	800074a <__udivmoddi4+0x2c2>
 80005d4:	4610      	mov	r0, r2
 80005d6:	eba4 040e 	sub.w	r4, r4, lr
 80005da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005de:	e79f      	b.n	8000520 <__udivmoddi4+0x98>
 80005e0:	f1c1 0720 	rsb	r7, r1, #32
 80005e4:	408b      	lsls	r3, r1
 80005e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ee:	fa05 f401 	lsl.w	r4, r5, r1
 80005f2:	fa20 f307 	lsr.w	r3, r0, r7
 80005f6:	40fd      	lsrs	r5, r7
 80005f8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005fc:	4323      	orrs	r3, r4
 80005fe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000602:	fa1f fe8c 	uxth.w	lr, ip
 8000606:	fb09 5518 	mls	r5, r9, r8, r5
 800060a:	0c1c      	lsrs	r4, r3, #16
 800060c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000610:	fb08 f50e 	mul.w	r5, r8, lr
 8000614:	42a5      	cmp	r5, r4
 8000616:	fa02 f201 	lsl.w	r2, r2, r1
 800061a:	fa00 f001 	lsl.w	r0, r0, r1
 800061e:	d90b      	bls.n	8000638 <__udivmoddi4+0x1b0>
 8000620:	eb1c 0404 	adds.w	r4, ip, r4
 8000624:	f108 3aff 	add.w	sl, r8, #4294967295
 8000628:	f080 8088 	bcs.w	800073c <__udivmoddi4+0x2b4>
 800062c:	42a5      	cmp	r5, r4
 800062e:	f240 8085 	bls.w	800073c <__udivmoddi4+0x2b4>
 8000632:	f1a8 0802 	sub.w	r8, r8, #2
 8000636:	4464      	add	r4, ip
 8000638:	1b64      	subs	r4, r4, r5
 800063a:	b29d      	uxth	r5, r3
 800063c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000640:	fb09 4413 	mls	r4, r9, r3, r4
 8000644:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000648:	fb03 fe0e 	mul.w	lr, r3, lr
 800064c:	45a6      	cmp	lr, r4
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x1da>
 8000650:	eb1c 0404 	adds.w	r4, ip, r4
 8000654:	f103 35ff 	add.w	r5, r3, #4294967295
 8000658:	d26c      	bcs.n	8000734 <__udivmoddi4+0x2ac>
 800065a:	45a6      	cmp	lr, r4
 800065c:	d96a      	bls.n	8000734 <__udivmoddi4+0x2ac>
 800065e:	3b02      	subs	r3, #2
 8000660:	4464      	add	r4, ip
 8000662:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000666:	fba3 9502 	umull	r9, r5, r3, r2
 800066a:	eba4 040e 	sub.w	r4, r4, lr
 800066e:	42ac      	cmp	r4, r5
 8000670:	46c8      	mov	r8, r9
 8000672:	46ae      	mov	lr, r5
 8000674:	d356      	bcc.n	8000724 <__udivmoddi4+0x29c>
 8000676:	d053      	beq.n	8000720 <__udivmoddi4+0x298>
 8000678:	b156      	cbz	r6, 8000690 <__udivmoddi4+0x208>
 800067a:	ebb0 0208 	subs.w	r2, r0, r8
 800067e:	eb64 040e 	sbc.w	r4, r4, lr
 8000682:	fa04 f707 	lsl.w	r7, r4, r7
 8000686:	40ca      	lsrs	r2, r1
 8000688:	40cc      	lsrs	r4, r1
 800068a:	4317      	orrs	r7, r2
 800068c:	e9c6 7400 	strd	r7, r4, [r6]
 8000690:	4618      	mov	r0, r3
 8000692:	2100      	movs	r1, #0
 8000694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000698:	f1c3 0120 	rsb	r1, r3, #32
 800069c:	fa02 fc03 	lsl.w	ip, r2, r3
 80006a0:	fa20 f201 	lsr.w	r2, r0, r1
 80006a4:	fa25 f101 	lsr.w	r1, r5, r1
 80006a8:	409d      	lsls	r5, r3
 80006aa:	432a      	orrs	r2, r5
 80006ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b0:	fa1f fe8c 	uxth.w	lr, ip
 80006b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80006b8:	fb07 1510 	mls	r5, r7, r0, r1
 80006bc:	0c11      	lsrs	r1, r2, #16
 80006be:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006c2:	fb00 f50e 	mul.w	r5, r0, lr
 80006c6:	428d      	cmp	r5, r1
 80006c8:	fa04 f403 	lsl.w	r4, r4, r3
 80006cc:	d908      	bls.n	80006e0 <__udivmoddi4+0x258>
 80006ce:	eb1c 0101 	adds.w	r1, ip, r1
 80006d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006d6:	d22f      	bcs.n	8000738 <__udivmoddi4+0x2b0>
 80006d8:	428d      	cmp	r5, r1
 80006da:	d92d      	bls.n	8000738 <__udivmoddi4+0x2b0>
 80006dc:	3802      	subs	r0, #2
 80006de:	4461      	add	r1, ip
 80006e0:	1b49      	subs	r1, r1, r5
 80006e2:	b292      	uxth	r2, r2
 80006e4:	fbb1 f5f7 	udiv	r5, r1, r7
 80006e8:	fb07 1115 	mls	r1, r7, r5, r1
 80006ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006f0:	fb05 f10e 	mul.w	r1, r5, lr
 80006f4:	4291      	cmp	r1, r2
 80006f6:	d908      	bls.n	800070a <__udivmoddi4+0x282>
 80006f8:	eb1c 0202 	adds.w	r2, ip, r2
 80006fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000700:	d216      	bcs.n	8000730 <__udivmoddi4+0x2a8>
 8000702:	4291      	cmp	r1, r2
 8000704:	d914      	bls.n	8000730 <__udivmoddi4+0x2a8>
 8000706:	3d02      	subs	r5, #2
 8000708:	4462      	add	r2, ip
 800070a:	1a52      	subs	r2, r2, r1
 800070c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000710:	e738      	b.n	8000584 <__udivmoddi4+0xfc>
 8000712:	4631      	mov	r1, r6
 8000714:	4630      	mov	r0, r6
 8000716:	e708      	b.n	800052a <__udivmoddi4+0xa2>
 8000718:	4639      	mov	r1, r7
 800071a:	e6e6      	b.n	80004ea <__udivmoddi4+0x62>
 800071c:	4610      	mov	r0, r2
 800071e:	e6fb      	b.n	8000518 <__udivmoddi4+0x90>
 8000720:	4548      	cmp	r0, r9
 8000722:	d2a9      	bcs.n	8000678 <__udivmoddi4+0x1f0>
 8000724:	ebb9 0802 	subs.w	r8, r9, r2
 8000728:	eb65 0e0c 	sbc.w	lr, r5, ip
 800072c:	3b01      	subs	r3, #1
 800072e:	e7a3      	b.n	8000678 <__udivmoddi4+0x1f0>
 8000730:	4645      	mov	r5, r8
 8000732:	e7ea      	b.n	800070a <__udivmoddi4+0x282>
 8000734:	462b      	mov	r3, r5
 8000736:	e794      	b.n	8000662 <__udivmoddi4+0x1da>
 8000738:	4640      	mov	r0, r8
 800073a:	e7d1      	b.n	80006e0 <__udivmoddi4+0x258>
 800073c:	46d0      	mov	r8, sl
 800073e:	e77b      	b.n	8000638 <__udivmoddi4+0x1b0>
 8000740:	3d02      	subs	r5, #2
 8000742:	4462      	add	r2, ip
 8000744:	e732      	b.n	80005ac <__udivmoddi4+0x124>
 8000746:	4608      	mov	r0, r1
 8000748:	e70a      	b.n	8000560 <__udivmoddi4+0xd8>
 800074a:	4464      	add	r4, ip
 800074c:	3802      	subs	r0, #2
 800074e:	e742      	b.n	80005d6 <__udivmoddi4+0x14e>

08000750 <__aeabi_idiv0>:
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop

08000754 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000760:	2334      	movs	r3, #52	; 0x34
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <tx_application_define+0x48>)
 800076a:	490d      	ldr	r1, [pc, #52]	; (80007a0 <tx_application_define+0x4c>)
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <tx_application_define+0x50>)
 800076e:	f009 fb47 	bl	8009e00 <_txe_byte_pool_create>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d10d      	bne.n	8000794 <tx_application_define+0x40>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <tx_application_define+0x50>)
 800077a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800077c:	68b8      	ldr	r0, [r7, #8]
 800077e:	f000 fa4b 	bl	8000c18 <App_ThreadX_Init>
 8000782:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d000      	beq.n	800078c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800078a:	e7fe      	b.n	800078a <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 800078c:	68b8      	ldr	r0, [r7, #8]
 800078e:	f001 fa0d 	bl	8001bac <ThreadX_Init>
 8000792:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	0800a344 	.word	0x0800a344
 80007a4:	2000042c 	.word	0x2000042c

080007a8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f009 fd87 	bl	800a2d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000802:	2201      	movs	r2, #1
 8000804:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000824:	2200      	movs	r2, #0
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC1_Init+0xe8>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000832:	f001 fd89 	bl	8002348 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800083c:	f000 fe98 	bl	8001570 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_ADC1_Init+0xe8>)
 800084c:	f003 f856 	bl	80038fc <HAL_ADCEx_MultiModeConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000856:	f000 fe8b 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_ADC1_Init+0xec>)
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2306      	movs	r3, #6
 8000860:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000866:	237f      	movs	r3, #127	; 0x7f
 8000868:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000878:	f002 fa7e 	bl	8002d78 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000882:	f000 fe75 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000460 	.word	0x20000460
 8000894:	10c00010 	.word	0x10c00010

08000898 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f009 fd15 	bl	800a2d4 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008aa:	4b5e      	ldr	r3, [pc, #376]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008ac:	4a5e      	ldr	r2, [pc, #376]	; (8000a28 <MX_ADC4_Init+0x190>)
 80008ae:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b0:	4b5c      	ldr	r3, [pc, #368]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b8:	4b5a      	ldr	r3, [pc, #360]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008be:	4b59      	ldr	r3, [pc, #356]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008c4:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ca:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008d0:	4b54      	ldr	r3, [pc, #336]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008d2:	2208      	movs	r2, #8
 80008d4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008d6:	4b53      	ldr	r3, [pc, #332]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008dc:	4b51      	ldr	r3, [pc, #324]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008e4:	2208      	movs	r2, #8
 80008e6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008e8:	4b4e      	ldr	r3, [pc, #312]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f0:	4b4c      	ldr	r3, [pc, #304]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f6:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008fc:	4b49      	ldr	r3, [pc, #292]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000904:	4b47      	ldr	r3, [pc, #284]	; (8000a24 <MX_ADC4_Init+0x18c>)
 8000906:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800090a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800090c:	4b45      	ldr	r3, [pc, #276]	; (8000a24 <MX_ADC4_Init+0x18c>)
 800090e:	2200      	movs	r2, #0
 8000910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000914:	4843      	ldr	r0, [pc, #268]	; (8000a24 <MX_ADC4_Init+0x18c>)
 8000916:	f001 fd17 	bl	8002348 <HAL_ADC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000920:	f000 fe26 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000924:	4b41      	ldr	r3, [pc, #260]	; (8000a2c <MX_ADC4_Init+0x194>)
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000928:	2306      	movs	r3, #6
 800092a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000930:	237f      	movs	r3, #127	; 0x7f
 8000932:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000934:	2304      	movs	r3, #4
 8000936:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4838      	ldr	r0, [pc, #224]	; (8000a24 <MX_ADC4_Init+0x18c>)
 8000942:	f002 fa19 	bl	8002d78 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 800094c:	f000 fe10 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000950:	4b37      	ldr	r3, [pc, #220]	; (8000a30 <MX_ADC4_Init+0x198>)
 8000952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000954:	230c      	movs	r3, #12
 8000956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4619      	mov	r1, r3
 800095c:	4831      	ldr	r0, [pc, #196]	; (8000a24 <MX_ADC4_Init+0x18c>)
 800095e:	f002 fa0b 	bl	8002d78 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000968:	f000 fe02 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800096c:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <MX_ADC4_Init+0x19c>)
 800096e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000970:	2312      	movs	r3, #18
 8000972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	482a      	ldr	r0, [pc, #168]	; (8000a24 <MX_ADC4_Init+0x18c>)
 800097a:	f002 f9fd 	bl	8002d78 <HAL_ADC_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 8000984:	f000 fdf4 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <MX_ADC4_Init+0x1a0>)
 800098a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800098c:	2318      	movs	r3, #24
 800098e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	4619      	mov	r1, r3
 8000994:	4823      	ldr	r0, [pc, #140]	; (8000a24 <MX_ADC4_Init+0x18c>)
 8000996:	f002 f9ef 	bl	8002d78 <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 80009a0:	f000 fde6 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <MX_ADC4_Init+0x1a4>)
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	481c      	ldr	r0, [pc, #112]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80009b4:	f002 f9e0 	bl	8002d78 <HAL_ADC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 80009be:	f000 fdd7 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_ADC4_Init+0x1a8>)
 80009c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009c6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80009ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	4814      	ldr	r0, [pc, #80]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80009d2:	f002 f9d1 	bl	8002d78 <HAL_ADC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 80009dc:	f000 fdc8 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_ADC4_Init+0x1ac>)
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009e4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80009e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_ADC4_Init+0x18c>)
 80009f0:	f002 f9c2 	bl	8002d78 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 80009fa:	f000 fdb9 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_ADC4_Init+0x1b0>)
 8000a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a02:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000a06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_ADC4_Init+0x18c>)
 8000a0e:	f002 f9b3 	bl	8002d78 <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000a18:	f000 fdaa 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200004cc 	.word	0x200004cc
 8000a28:	50000500 	.word	0x50000500
 8000a2c:	14f00020 	.word	0x14f00020
 8000a30:	32601000 	.word	0x32601000
 8000a34:	2a000400 	.word	0x2a000400
 8000a38:	2e300800 	.word	0x2e300800
 8000a3c:	36902000 	.word	0x36902000
 8000a40:	1d500080 	.word	0x1d500080
 8000a44:	21800100 	.word	0x21800100
 8000a48:	25b00200 	.word	0x25b00200

08000a4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0a2      	sub	sp, #136	; 0x88
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	2254      	movs	r2, #84	; 0x54
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f009 fc31 	bl	800a2d4 <memset>
  if(adcHandle->Instance==ADC1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7a:	d135      	bne.n	8000ae8 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a80:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a82:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a86:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f005 fddd 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a98:	f000 fd6a 	bl	8001570 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a9c:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000aa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa8:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b52      	ldr	r3, [pc, #328]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	4a51      	ldr	r2, [pc, #324]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac0:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000acc:	2308      	movs	r3, #8
 8000ace:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f003 febb 	bl	800485c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000ae6:	e086      	b.n	8000bf6 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a45      	ldr	r2, [pc, #276]	; (8000c04 <HAL_ADC_MspInit+0x1b8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	f040 8081 	bne.w	8000bf6 <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000afa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000afe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4618      	mov	r0, r3
 8000b06:	f005 fda1 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000b10:	f000 fd2e 	bl	8001570 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b14:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	4a39      	ldr	r2, [pc, #228]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b30:	4a33      	ldr	r2, [pc, #204]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b38:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b44:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <HAL_ADC_MspInit+0x1b4>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b60:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4825      	ldr	r0, [pc, #148]	; (8000c08 <HAL_ADC_MspInit+0x1bc>)
 8000b72:	f003 fe73 	bl	800485c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000b76:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8000b7a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4820      	ldr	r0, [pc, #128]	; (8000c0c <HAL_ADC_MspInit+0x1c0>)
 8000b8c:	f003 fe66 	bl	800485c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000b92:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <HAL_ADC_MspInit+0x1c8>)
 8000b94:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000b98:	2226      	movs	r2, #38	; 0x26
 8000b9a:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bbc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000bca:	4811      	ldr	r0, [pc, #68]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000bcc:	f003 f970 	bl	8003eb0 <HAL_DMA_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000bd6:	f000 fccb 	bl	8001570 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000bde:	655a      	str	r2, [r3, #84]	; 0x54
 8000be0:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <HAL_ADC_MspInit+0x1c4>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	203d      	movs	r0, #61	; 0x3d
 8000bec:	f003 f846 	bl	8003c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000bf0:	203d      	movs	r0, #61	; 0x3d
 8000bf2:	f003 f85d 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	3788      	adds	r7, #136	; 0x88
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	50000500 	.word	0x50000500
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	48000c00 	.word	0x48000c00
 8000c10:	20000538 	.word	0x20000538
 8000c14:	40020030 	.word	0x40020030

08000c18 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000c36:	f007 ffd1 	bl	8008bdc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <MX_CRC_Init+0x3c>)
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <MX_CRC_Init+0x40>)
 8000c48:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_CRC_Init+0x3c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_CRC_Init+0x3c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_CRC_Init+0x3c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_CRC_Init+0x3c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_CRC_Init+0x3c>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_CRC_Init+0x3c>)
 8000c6a:	f003 f82f 	bl	8003ccc <HAL_CRC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c74:	f000 fc7c 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000598 	.word	0x20000598
 8000c80:	40023000 	.word	0x40023000

08000c84 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_CRC_MspInit+0x38>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10b      	bne.n	8000cae <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_CRC_MspInit+0x3c>)
 8000c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <HAL_CRC_MspInit+0x3c>)
 8000c9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_CRC_MspInit+0x3c>)
 8000ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023000 	.word	0x40023000
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_DMA_Init+0x70>)
 8000ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cce:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <MX_DMA_Init+0x70>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6493      	str	r3, [r2, #72]	; 0x48
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_DMA_Init+0x70>)
 8000cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_DMA_Init+0x70>)
 8000ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <MX_DMA_Init+0x70>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6493      	str	r3, [r2, #72]	; 0x48
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_DMA_Init+0x70>)
 8000cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	200b      	movs	r0, #11
 8000d00:	f002 ffbc 	bl	8003c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d04:	200b      	movs	r0, #11
 8000d06:	f002 ffd3 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	200c      	movs	r0, #12
 8000d10:	f002 ffb4 	bl	8003c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d14:	200c      	movs	r0, #12
 8000d16:	f002 ffcb 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200d      	movs	r0, #13
 8000d20:	f002 ffac 	bl	8003c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d24:	200d      	movs	r0, #13
 8000d26:	f002 ffc3 	bl	8003cb0 <HAL_NVIC_EnableIRQ>

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d3e:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <MX_FDCAN1_Init+0x88>)
 8000d40:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d68:	2210      	movs	r2, #16
 8000d6a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_FDCAN1_Init+0x84>)
 8000daa:	f003 fb69 	bl	8004480 <HAL_FDCAN_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000db4:	f000 fbdc 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200005bc 	.word	0x200005bc
 8000dc0:	40006400 	.word	0x40006400

08000dc4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b09e      	sub	sp, #120	; 0x78
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2254      	movs	r2, #84	; 0x54
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f009 fa75 	bl	800a2d4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <HAL_FDCAN_MspInit+0xac>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d139      	bne.n	8000e68 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dfe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 fc21 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e10:	f000 fbae 	bl	8001570 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_FDCAN_MspInit+0xb0>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e18:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <HAL_FDCAN_MspInit+0xb0>)
 8000e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_FDCAN_MspInit+0xb0>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_FDCAN_MspInit+0xb0>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <HAL_FDCAN_MspInit+0xb0>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_FDCAN_MspInit+0xb0>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e48:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e56:	2309      	movs	r3, #9
 8000e58:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f003 fcfa 	bl	800485c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3778      	adds	r7, #120	; 0x78
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40006400 	.word	0x40006400
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2[4];
uint32_t difference[4];
double frequency[4];
uint8_t is_first_captured[4];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
    uint8_t hal_channel = 0u;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73bb      	strb	r3, [r7, #14]

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7f1b      	ldrb	r3, [r3, #28]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d104      	bne.n	8000e9a <HAL_TIM_IC_CaptureCallback+0x22>
        channel = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73bb      	strb	r3, [r7, #14]
 8000e98:	e019      	b.n	8000ece <HAL_TIM_IC_CaptureCallback+0x56>
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7f1b      	ldrb	r3, [r3, #28]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d104      	bne.n	8000eac <HAL_TIM_IC_CaptureCallback+0x34>
        channel = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_2;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	73bb      	strb	r3, [r7, #14]
 8000eaa:	e010      	b.n	8000ece <HAL_TIM_IC_CaptureCallback+0x56>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7f1b      	ldrb	r3, [r3, #28]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d104      	bne.n	8000ebe <HAL_TIM_IC_CaptureCallback+0x46>
        channel = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_3;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	73bb      	strb	r3, [r7, #14]
 8000ebc:	e007      	b.n	8000ece <HAL_TIM_IC_CaptureCallback+0x56>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7f1b      	ldrb	r3, [r3, #28]
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d103      	bne.n	8000ece <HAL_TIM_IC_CaptureCallback+0x56>
        channel = 3;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_4;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	73bb      	strb	r3, [r7, #14]
    }

    if (is_first_captured[channel] == 0) {  // check if first rising edge to begin capture
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000ed2:	5cd3      	ldrb	r3, [r2, r3]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10e      	bne.n	8000ef6 <HAL_TIM_IC_CaptureCallback+0x7e>
        IC_Val1[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	7bfc      	ldrb	r4, [r7, #15]
 8000edc:	4619      	mov	r1, r3
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f006 f9c8 	bl	8007274 <HAL_TIM_ReadCapturedValue>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ee8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        is_first_captured[channel] = 1; // set flag to indicate next value will be second rising edge
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	54d1      	strb	r1, [r2, r3]
//        float refClock = TIMCLOCK/(PRESCALAR);
//        frequency[channel] = refClock / difference[channel];
        is_first_captured[channel] = 0;
    }

}
 8000ef4:	e042      	b.n	8000f7c <HAL_TIM_IC_CaptureCallback+0x104>
    } else if (is_first_captured[channel] == 1) {   // second rising edge
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d13d      	bne.n	8000f7c <HAL_TIM_IC_CaptureCallback+0x104>
        IC_Val2[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 8000f00:	7bbb      	ldrb	r3, [r7, #14]
 8000f02:	7bfc      	ldrb	r4, [r7, #15]
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f006 f9b4 	bl	8007274 <HAL_TIM_ReadCapturedValue>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        if (IC_Val2[channel] > IC_Val1[channel]) {  // first capture before second
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	491a      	ldr	r1, [pc, #104]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d90d      	bls.n	8000f44 <HAL_TIM_IC_CaptureCallback+0xcc>
            difference[channel] = IC_Val2[channel] - IC_Val1[channel];
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	1a8a      	subs	r2, r1, r2
 8000f3c:	4914      	ldr	r1, [pc, #80]	; (8000f90 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000f42:	e017      	b.n	8000f74 <HAL_TIM_IC_CaptureCallback+0xfc>
        } else if (IC_Val2[channel] < IC_Val1[channel]) {   // first capture after second robust check
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d20d      	bcs.n	8000f74 <HAL_TIM_IC_CaptureCallback+0xfc>
            difference[channel] = ((100 - IC_Val1[channel]) + IC_Val2[channel]) + 1;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4909      	ldr	r1, [pc, #36]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f68:	1ad2      	subs	r2, r2, r3
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3265      	adds	r2, #101	; 0x65
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        is_first_captured[channel] = 0;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	54d1      	strb	r1, [r2, r3]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd90      	pop	{r4, r7, pc}
 8000f84:	20000650 	.word	0x20000650
 8000f88:	20000620 	.word	0x20000620
 8000f8c:	20000630 	.word	0x20000630
 8000f90:	20000640 	.word	0x20000640

08000f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000faa:	4b5b      	ldr	r3, [pc, #364]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a5a      	ldr	r2, [pc, #360]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b58      	ldr	r3, [pc, #352]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0320 	and.w	r3, r3, #32
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b55      	ldr	r3, [pc, #340]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a54      	ldr	r2, [pc, #336]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b52      	ldr	r3, [pc, #328]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b49      	ldr	r3, [pc, #292]	; (8001118 <MX_GPIO_Init+0x184>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a48      	ldr	r2, [pc, #288]	; (8001118 <MX_GPIO_Init+0x184>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b46      	ldr	r3, [pc, #280]	; (8001118 <MX_GPIO_Init+0x184>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	4b43      	ldr	r3, [pc, #268]	; (8001118 <MX_GPIO_Init+0x184>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a42      	ldr	r2, [pc, #264]	; (8001118 <MX_GPIO_Init+0x184>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b40      	ldr	r3, [pc, #256]	; (8001118 <MX_GPIO_Init+0x184>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <MX_GPIO_Init+0x184>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a3c      	ldr	r2, [pc, #240]	; (8001118 <MX_GPIO_Init+0x184>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <MX_GPIO_Init+0x184>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 800103a:	2200      	movs	r2, #0
 800103c:	f641 7130 	movw	r1, #7984	; 0x1f30
 8001040:	4836      	ldr	r0, [pc, #216]	; (800111c <MX_GPIO_Init+0x188>)
 8001042:	f003 fd8d 	bl	8004b60 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f246 0103 	movw	r1, #24579	; 0x6003
 800104c:	4834      	ldr	r0, [pc, #208]	; (8001120 <MX_GPIO_Init+0x18c>)
 800104e:	f003 fd87 	bl	8004b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8001058:	4832      	ldr	r0, [pc, #200]	; (8001124 <MX_GPIO_Init+0x190>)
 800105a:	f003 fd81 	bl	8004b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001064:	4830      	ldr	r0, [pc, #192]	; (8001128 <MX_GPIO_Init+0x194>)
 8001066:	f003 fd7b 	bl	8004b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f003 fd74 	bl	8004b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8001078:	f641 7330 	movw	r3, #7984	; 0x1f30
 800107c:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4822      	ldr	r0, [pc, #136]	; (800111c <MX_GPIO_Init+0x188>)
 8001092:	f003 fbe3 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 8001096:	f246 0303 	movw	r3, #24579	; 0x6003
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	481c      	ldr	r0, [pc, #112]	; (8001120 <MX_GPIO_Init+0x18c>)
 80010b0:	f003 fbd4 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin;
 80010b4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4815      	ldr	r0, [pc, #84]	; (8001124 <MX_GPIO_Init+0x190>)
 80010ce:	f003 fbc5 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 80010d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <MX_GPIO_Init+0x194>)
 80010ec:	f003 fbb6 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 80010f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110c:	f003 fba6 	bl	800485c <HAL_GPIO_Init>

}
 8001110:	bf00      	nop
 8001112:	3730      	adds	r7, #48	; 0x30
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000
 800111c:	48000800 	.word	0x48000800
 8001120:	48000400 	.word	0x48000400
 8001124:	48001000 	.word	0x48001000
 8001128:	48000c00 	.word	0x48000c00

0800112c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_I2C1_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <MX_I2C1_Init+0x7c>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_I2C1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001168:	f003 fd2c 	bl	8004bc4 <HAL_I2C_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001172:	f000 f9fd 	bl	8001570 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_I2C1_Init+0x74>)
 800117a:	f004 fbbc 	bl	80058f6 <HAL_I2CEx_ConfigAnalogFilter>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001184:	f000 f9f4 	bl	8001570 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_I2C1_Init+0x74>)
 800118c:	f004 fbfe 	bl	800598c <HAL_I2CEx_ConfigDigitalFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 f9eb 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000654 	.word	0x20000654
 80011a4:	40005400 	.word	0x40005400
 80011a8:	30a0a7fb 	.word	0x30a0a7fb

080011ac <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_I2C4_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_I2C4_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10802D9B;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_I2C4_Init+0x74>)
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_I2C4_Init+0x7c>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_I2C4_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_I2C4_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_I2C4_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_I2C4_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C4_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_I2C4_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C4_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_I2C4_Init+0x74>)
 80011e8:	f003 fcec 	bl	8004bc4 <HAL_I2C_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80011f2:	f000 f9bd 	bl	8001570 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <MX_I2C4_Init+0x74>)
 80011fa:	f004 fb7c 	bl	80058f6 <HAL_I2CEx_ConfigAnalogFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001204:	f000 f9b4 	bl	8001570 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2C4_Init+0x74>)
 800120c:	f004 fbbe 	bl	800598c <HAL_I2CEx_ConfigDigitalFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 f9ab 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200006a8 	.word	0x200006a8
 8001224:	40008400 	.word	0x40008400
 8001228:	10802d9b 	.word	0x10802d9b

0800122c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0a2      	sub	sp, #136	; 0x88
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	2254      	movs	r2, #84	; 0x54
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f009 f841 	bl	800a2d4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a80      	ldr	r2, [pc, #512]	; (8001458 <HAL_I2C_MspInit+0x22c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d158      	bne.n	800130e <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800125c:	2340      	movs	r3, #64	; 0x40
 800125e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001260:	2300      	movs	r3, #0
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f005 f9ef 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001274:	f000 f97c 	bl	8001570 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b78      	ldr	r3, [pc, #480]	; (800145c <HAL_I2C_MspInit+0x230>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a77      	ldr	r2, [pc, #476]	; (800145c <HAL_I2C_MspInit+0x230>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b75      	ldr	r3, [pc, #468]	; (800145c <HAL_I2C_MspInit+0x230>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b72      	ldr	r3, [pc, #456]	; (800145c <HAL_I2C_MspInit+0x230>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a71      	ldr	r2, [pc, #452]	; (800145c <HAL_I2C_MspInit+0x230>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b6f      	ldr	r3, [pc, #444]	; (800145c <HAL_I2C_MspInit+0x230>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f003 fac6 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e2:	2304      	movs	r3, #4
 80012e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012ec:	4619      	mov	r1, r3
 80012ee:	485c      	ldr	r0, [pc, #368]	; (8001460 <HAL_I2C_MspInit+0x234>)
 80012f0:	f003 fab4 	bl	800485c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f4:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_I2C_MspInit+0x230>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_I2C_MspInit+0x230>)
 80012fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001300:	4b56      	ldr	r3, [pc, #344]	; (800145c <HAL_I2C_MspInit+0x230>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800130c:	e0a0      	b.n	8001450 <HAL_I2C_MspInit+0x224>
  else if(i2cHandle->Instance==I2C4)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a54      	ldr	r2, [pc, #336]	; (8001464 <HAL_I2C_MspInit+0x238>)
 8001314:	4293      	cmp	r3, r2
 8001316:	f040 809b 	bne.w	8001450 <HAL_I2C_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800131a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800131e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001320:	2300      	movs	r3, #0
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	4618      	mov	r0, r3
 800132a:	f005 f98f 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_I2C_MspInit+0x10c>
      Error_Handler();
 8001334:	f000 f91c 	bl	8001570 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	4b48      	ldr	r3, [pc, #288]	; (800145c <HAL_I2C_MspInit+0x230>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	4a47      	ldr	r2, [pc, #284]	; (800145c <HAL_I2C_MspInit+0x230>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001344:	4b45      	ldr	r3, [pc, #276]	; (800145c <HAL_I2C_MspInit+0x230>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001350:	23c0      	movs	r3, #192	; 0xc0
 8001352:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001362:	2308      	movs	r3, #8
 8001364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800136c:	4619      	mov	r1, r3
 800136e:	483e      	ldr	r0, [pc, #248]	; (8001468 <HAL_I2C_MspInit+0x23c>)
 8001370:	f003 fa74 	bl	800485c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_I2C_MspInit+0x230>)
 8001376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001378:	4a38      	ldr	r2, [pc, #224]	; (800145c <HAL_I2C_MspInit+0x230>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_I2C_MspInit+0x230>)
 8001382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <HAL_I2C_MspInit+0x240>)
 800138e:	4a38      	ldr	r2, [pc, #224]	; (8001470 <HAL_I2C_MspInit+0x244>)
 8001390:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001392:	4b36      	ldr	r3, [pc, #216]	; (800146c <HAL_I2C_MspInit+0x240>)
 8001394:	2216      	movs	r2, #22
 8001396:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_I2C_MspInit+0x240>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800139e:	4b33      	ldr	r3, [pc, #204]	; (800146c <HAL_I2C_MspInit+0x240>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_I2C_MspInit+0x240>)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_I2C_MspInit+0x240>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_I2C_MspInit+0x240>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_I2C_MspInit+0x240>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_I2C_MspInit+0x240>)
 80013be:	2200      	movs	r2, #0
 80013c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 80013c2:	482a      	ldr	r0, [pc, #168]	; (800146c <HAL_I2C_MspInit+0x240>)
 80013c4:	f002 fd74 	bl	8003eb0 <HAL_DMA_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_I2C_MspInit+0x1a6>
      Error_Handler();
 80013ce:	f000 f8cf 	bl	8001570 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_I2C_MspInit+0x240>)
 80013d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013d8:	4a24      	ldr	r2, [pc, #144]	; (800146c <HAL_I2C_MspInit+0x240>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_I2C_MspInit+0x248>)
 80013e0:	4a25      	ldr	r2, [pc, #148]	; (8001478 <HAL_I2C_MspInit+0x24c>)
 80013e2:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 80013e4:	4b23      	ldr	r3, [pc, #140]	; (8001474 <HAL_I2C_MspInit+0x248>)
 80013e6:	2217      	movs	r2, #23
 80013e8:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_I2C_MspInit+0x248>)
 80013ec:	2210      	movs	r2, #16
 80013ee:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <HAL_I2C_MspInit+0x248>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <HAL_I2C_MspInit+0x248>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_I2C_MspInit+0x248>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <HAL_I2C_MspInit+0x248>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_I2C_MspInit+0x248>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_I2C_MspInit+0x248>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001414:	4817      	ldr	r0, [pc, #92]	; (8001474 <HAL_I2C_MspInit+0x248>)
 8001416:	f002 fd4b 	bl	8003eb0 <HAL_DMA_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_I2C_MspInit+0x1f8>
      Error_Handler();
 8001420:	f000 f8a6 	bl	8001570 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <HAL_I2C_MspInit+0x248>)
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_I2C_MspInit+0x248>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2052      	movs	r0, #82	; 0x52
 8001436:	f002 fc21 	bl	8003c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800143a:	2052      	movs	r0, #82	; 0x52
 800143c:	f002 fc38 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2053      	movs	r0, #83	; 0x53
 8001446:	f002 fc19 	bl	8003c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800144a:	2053      	movs	r0, #83	; 0x53
 800144c:	f002 fc30 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
}
 8001450:	bf00      	nop
 8001452:	3788      	adds	r7, #136	; 0x88
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40005400 	.word	0x40005400
 800145c:	40021000 	.word	0x40021000
 8001460:	48000400 	.word	0x48000400
 8001464:	40008400 	.word	0x40008400
 8001468:	48000800 	.word	0x48000800
 800146c:	200006fc 	.word	0x200006fc
 8001470:	40020008 	.word	0x40020008
 8001474:	2000075c 	.word	0x2000075c
 8001478:	4002001c 	.word	0x4002001c

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001480:	f000 fcc8 	bl	8001e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001484:	f000 f819 	bl	80014ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001488:	f7ff fd84 	bl	8000f94 <MX_GPIO_Init>
  MX_DMA_Init();
 800148c:	f7ff fc1a 	bl	8000cc4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001490:	f7ff fc52 	bl	8000d38 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001494:	f000 fa00 	bl	8001898 <MX_TIM2_Init>
  MX_CRC_Init();
 8001498:	f7ff fbd2 	bl	8000c40 <MX_CRC_Init>
  MX_ADC4_Init();
 800149c:	f7ff f9fc 	bl	8000898 <MX_ADC4_Init>
  MX_SPI4_Init();
 80014a0:	f000 f86c 	bl	800157c <MX_SPI4_Init>
  MX_ADC1_Init();
 80014a4:	f7ff f980 	bl	80007a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80014a8:	f7ff fe40 	bl	800112c <MX_I2C1_Init>
  MX_I2C4_Init();
 80014ac:	f7ff fe7e 	bl	80011ac <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 80014b0:	f000 fab0 	bl	8001a14 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80014b4:	f7ff fbbd 	bl	8000c32 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <main+0x3c>

080014ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b094      	sub	sp, #80	; 0x50
 80014be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	2238      	movs	r2, #56	; 0x38
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f008 ff03 	bl	800a2d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014dc:	2000      	movs	r0, #0
 80014de:	f004 faa1 	bl	8005a24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2302      	movs	r3, #2
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f0:	2303      	movs	r3, #3
 80014f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80014f4:	2306      	movs	r3, #6
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014f8:	2355      	movs	r3, #85	; 0x55
 80014fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001504:	2302      	movs	r3, #2
 8001506:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4618      	mov	r0, r3
 800150e:	f004 fb3d 	bl	8005b8c <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001518:	f000 f82a 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2303      	movs	r3, #3
 8001522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2104      	movs	r1, #4
 8001534:	4618      	mov	r0, r3
 8001536:	f004 fe3b 	bl	80061b0 <HAL_RCC_ClockConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001540:	f000 f816 	bl	8001570 <Error_Handler>
  }
}
 8001544:	bf00      	nop
 8001546:	3750      	adds	r7, #80	; 0x50
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155e:	f000 fc71 	bl	8001e44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40001000 	.word	0x40001000

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	e7fe      	b.n	8001578 <Error_Handler+0x8>
	...

0800157c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_SPI4_Init+0x74>)
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <MX_SPI4_Init+0x78>)
 8001584:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_SPI4_Init+0x74>)
 8001588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800158c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_SPI4_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_SPI4_Init+0x74>)
 8001596:	f44f 7240 	mov.w	r2, #768	; 0x300
 800159a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_SPI4_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ae:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015b2:	2210      	movs	r2, #16
 80015b4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015d6:	2208      	movs	r2, #8
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_SPI4_Init+0x74>)
 80015dc:	f005 fa84 	bl	8006ae8 <HAL_SPI_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80015e6:	f7ff ffc3 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200007bc 	.word	0x200007bc
 80015f4:	40013c00 	.word	0x40013c00

080015f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_SPI_MspInit+0x7c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d128      	bne.n	800166c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_SPI_MspInit+0x80>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	4a16      	ldr	r2, [pc, #88]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001624:	6613      	str	r3, [r2, #96]	; 0x60
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800164a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800165c:	2305      	movs	r3, #5
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <HAL_SPI_MspInit+0x84>)
 8001668:	f003 f8f8 	bl	800485c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40013c00 	.word	0x40013c00
 8001678:	40021000 	.word	0x40021000
 800167c:	48001000 	.word	0x48001000

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_MspInit+0x4c>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_MspInit+0x4c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6613      	str	r3, [r2, #96]	; 0x60
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_MspInit+0x4c>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_MspInit+0x4c>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6593      	str	r3, [r2, #88]	; 0x58
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_MspInit+0x4c>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80016b6:	f000 fbf7 	bl	8001ea8 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f000 fbe0 	bl	8001e80 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016c0:	f004 fa54 	bl	8005b6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_InitTick+0xc4>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <HAL_InitTick+0xc4>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6593      	str	r3, [r2, #88]	; 0x58
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_InitTick+0xc4>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016f8:	f107 020c 	add.w	r2, r7, #12
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f004 ff2a 	bl	800655c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001708:	f004 fefc 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 800170c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <HAL_InitTick+0xc8>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0c9b      	lsrs	r3, r3, #18
 8001718:	3b01      	subs	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_InitTick+0xcc>)
 800171e:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <HAL_InitTick+0xd0>)
 8001720:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_InitTick+0xcc>)
 8001724:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001728:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800172a:	4a1c      	ldr	r2, [pc, #112]	; (800179c <HAL_InitTick+0xcc>)
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_InitTick+0xcc>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_InitTick+0xcc>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800173c:	4817      	ldr	r0, [pc, #92]	; (800179c <HAL_InitTick+0xcc>)
 800173e:	f005 fa7e 	bl	8006c3e <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11b      	bne.n	8001788 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001750:	4812      	ldr	r0, [pc, #72]	; (800179c <HAL_InitTick+0xcc>)
 8001752:	f005 fad5 	bl	8006d00 <HAL_TIM_Base_Start_IT>
 8001756:	4603      	mov	r3, r0
 8001758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800175c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001760:	2b00      	cmp	r3, #0
 8001762:	d111      	bne.n	8001788 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001764:	2036      	movs	r0, #54	; 0x36
 8001766:	f002 faa3 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d808      	bhi.n	8001782 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	2036      	movs	r0, #54	; 0x36
 8001776:	f002 fa81 	bl	8003c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_InitTick+0xd4>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e002      	b.n	8001788 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001788:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800178c:	4618      	mov	r0, r3
 800178e:	3730      	adds	r7, #48	; 0x30
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	431bde83 	.word	0x431bde83
 800179c:	20000820 	.word	0x20000820
 80017a0:	40001000 	.word	0x40001000
 80017a4:	20000004 	.word	0x20000004

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <DMA1_Channel1_IRQHandler+0x10>)
 80017da:	f002 fcf3 	bl	80041c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200006fc 	.word	0x200006fc

080017e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <DMA1_Channel2_IRQHandler+0x10>)
 80017ee:	f002 fce9 	bl	80041c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000075c 	.word	0x2000075c

080017fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA1_Channel3_IRQHandler+0x10>)
 8001802:	f002 fcdf 	bl	80041c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000538 	.word	0x20000538

08001810 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM2_IRQHandler+0x10>)
 8001816:	f005 fb42 	bl	8006e9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000086c 	.word	0x2000086c

08001824 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM6_DAC_IRQHandler+0x10>)
 800182a:	f005 fb38 	bl	8006e9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000820 	.word	0x20000820

08001838 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <ADC4_IRQHandler+0x10>)
 800183e:	f001 f813 	bl	8002868 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200004cc 	.word	0x200004cc

0800184c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <I2C4_EV_IRQHandler+0x10>)
 8001852:	f003 fa52 	bl	8004cfa <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200006a8 	.word	0x200006a8

08001860 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <I2C4_ER_IRQHandler+0x10>)
 8001866:	f003 fa62 	bl	8004d2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200006a8 	.word	0x200006a8

08001874 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SystemInit+0x20>)
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <SystemInit+0x20>)
 8001880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018b6:	4b31      	ldr	r3, [pc, #196]	; (800197c <MX_TIM2_Init+0xe4>)
 80018b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <MX_TIM2_Init+0xe4>)
 80018c0:	22a9      	movs	r2, #169	; 0xa9
 80018c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <MX_TIM2_Init+0xe4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <MX_TIM2_Init+0xe4>)
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d2:	4b2a      	ldr	r3, [pc, #168]	; (800197c <MX_TIM2_Init+0xe4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d8:	4b28      	ldr	r3, [pc, #160]	; (800197c <MX_TIM2_Init+0xe4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80018de:	4827      	ldr	r0, [pc, #156]	; (800197c <MX_TIM2_Init+0xe4>)
 80018e0:	f005 fa86 	bl	8006df0 <HAL_TIM_IC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018ea:	f7ff fe41 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	481f      	ldr	r0, [pc, #124]	; (800197c <MX_TIM2_Init+0xe4>)
 80018fe:	f005 fef9 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001908:	f7ff fe32 	bl	8001570 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001910:	2301      	movs	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	4816      	ldr	r0, [pc, #88]	; (800197c <MX_TIM2_Init+0xe4>)
 8001924:	f005 fc0a 	bl	800713c <HAL_TIM_IC_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800192e:	f7ff fe1f 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2204      	movs	r2, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4810      	ldr	r0, [pc, #64]	; (800197c <MX_TIM2_Init+0xe4>)
 800193a:	f005 fbff 	bl	800713c <HAL_TIM_IC_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001944:	f7ff fe14 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2208      	movs	r2, #8
 800194c:	4619      	mov	r1, r3
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <MX_TIM2_Init+0xe4>)
 8001950:	f005 fbf4 	bl	800713c <HAL_TIM_IC_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800195a:	f7ff fe09 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	220c      	movs	r2, #12
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_TIM2_Init+0xe4>)
 8001966:	f005 fbe9 	bl	800713c <HAL_TIM_IC_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001970:	f7ff fdfe 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2000086c 	.word	0x2000086c

08001980 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a0:	d12f      	bne.n	8001a02 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_TIM_IC_MspInit+0x8c>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_TIM_IC_MspInit+0x8c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6593      	str	r3, [r2, #88]	; 0x58
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_TIM_IC_MspInit+0x8c>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_TIM_IC_MspInit+0x8c>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <HAL_TIM_IC_MspInit+0x8c>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_TIM_IC_MspInit+0x8c>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 80019d2:	23d8      	movs	r3, #216	; 0xd8
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80019e2:	2302      	movs	r3, #2
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4808      	ldr	r0, [pc, #32]	; (8001a10 <HAL_TIM_IC_MspInit+0x90>)
 80019ee:	f002 ff35 	bl	800485c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	201c      	movs	r0, #28
 80019f8:	f002 f940 	bl	8003c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019fc:	201c      	movs	r0, #28
 80019fe:	f002 f957 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	48000c00 	.word	0x48000c00

08001a14 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a18:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a1a:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <MX_LPUART1_UART_Init+0x8c>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a20:	4a20      	ldr	r2, [pc, #128]	; (8001aa4 <MX_LPUART1_UART_Init+0x90>)
 8001a22:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a38:	220c      	movs	r2, #12
 8001a3a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a54:	4811      	ldr	r0, [pc, #68]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a56:	f005 ff29 	bl	80078ac <HAL_UART_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001a60:	f7ff fd86 	bl	8001570 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a64:	2100      	movs	r1, #0
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a68:	f006 fcc4 	bl	80083f4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001a72:	f7ff fd7d 	bl	8001570 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a76:	2100      	movs	r1, #0
 8001a78:	4808      	ldr	r0, [pc, #32]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a7a:	f006 fcf9 	bl	8008470 <HAL_UARTEx_SetRxFifoThreshold>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001a84:	f7ff fd74 	bl	8001570 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <MX_LPUART1_UART_Init+0x88>)
 8001a8a:	f006 fc7a 	bl	8008382 <HAL_UARTEx_DisableFifoMode>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001a94:	f7ff fd6c 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200008b8 	.word	0x200008b8
 8001aa0:	40008000 	.word	0x40008000
 8001aa4:	00033324 	.word	0x00033324

08001aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09e      	sub	sp, #120	; 0x78
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	2254      	movs	r2, #84	; 0x54
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f008 fc03 	bl	800a2d4 <memset>
  if(uartHandle->Instance==LPUART1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_UART_MspInit+0xa4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d135      	bne.n	8001b44 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ad8:	2320      	movs	r3, #32
 8001ada:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fdb1 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001af0:	f7ff fd3e 	bl	8001570 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_UART_MspInit+0xa8>)
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_UART_MspInit+0xa8>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_UART_MspInit+0xa8>)
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_UART_MspInit+0xa8>)
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_UART_MspInit+0xa8>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_UART_MspInit+0xa8>)
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b24:	2303      	movs	r3, #3
 8001b26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b34:	2308      	movs	r3, #8
 8001b36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_UART_MspInit+0xac>)
 8001b40:	f002 fe8c 	bl	800485c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001b44:	bf00      	nop
 8001b46:	3778      	adds	r7, #120	; 0x78
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40008000 	.word	0x40008000
 8001b50:	40021000 	.word	0x40021000
 8001b54:	48000800 	.word	0x48000800

08001b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b5c:	f7ff fe8a 	bl	8001874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	; (8001b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <LoopForever+0xe>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	; (8001ba4 <LoopForever+0x16>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f008 fbad 	bl	800a2e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8a:	f7ff fc77 	bl	800147c <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
  ldr   r0, =_estack
 8001b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b9c:	0800a424 	.word	0x0800a424
  ldr r2, =_sbss
 8001ba0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ba4:	200010a8 	.word	0x200010a8

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <ThreadX_Init>:

uint32_t adcValues[8];
uint8_t analogRxData[16];


UINT ThreadX_Init(VOID *memory_ptr){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08e      	sub	sp, #56	; 0x38
 8001bb0:	af08      	add	r7, sp, #32
 8001bb2:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001bbc:	f107 010c 	add.w	r1, r7, #12
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc6:	6938      	ldr	r0, [r7, #16]
 8001bc8:	f008 f8a6 	bl	8009d18 <_txe_byte_allocate>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <ThreadX_Init+0x2a>
	  return TX_POOL_ERROR;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e09b      	b.n	8001d0e <ThreadX_Init+0x162>
	}

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001bd6:	f107 010c 	add.w	r1, r7, #12
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be0:	6938      	ldr	r0, [r7, #16]
 8001be2:	f008 f899 	bl	8009d18 <_txe_byte_allocate>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <ThreadX_Init+0x44>
	  return TX_POOL_ERROR;
 8001bec:	2302      	movs	r3, #2
 8001bee:	e08e      	b.n	8001d0e <ThreadX_Init+0x162>
	}

	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	22b0      	movs	r2, #176	; 0xb0
 8001bf4:	9206      	str	r2, [sp, #24]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	9205      	str	r2, [sp, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	9204      	str	r2, [sp, #16]
 8001bfe:	220a      	movs	r2, #10
 8001c00:	9203      	str	r2, [sp, #12]
 8001c02:	220a      	movs	r2, #10
 8001c04:	9202      	str	r2, [sp, #8]
 8001c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	4a41      	ldr	r2, [pc, #260]	; (8001d18 <ThreadX_Init+0x16c>)
 8001c12:	4942      	ldr	r1, [pc, #264]	; (8001d1c <ThreadX_Init+0x170>)
 8001c14:	4842      	ldr	r0, [pc, #264]	; (8001d20 <ThreadX_Init+0x174>)
 8001c16:	f008 fa6b 	bl	800a0f0 <_txe_thread_create>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <ThreadX_Init+0x78>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
	  return TX_THREAD_ERROR;
 8001c20:	230e      	movs	r3, #14
 8001c22:	e074      	b.n	8001d0e <ThreadX_Init+0x162>
	}

	if(tx_thread_create(&txMainThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	22b0      	movs	r2, #176	; 0xb0
 8001c28:	9206      	str	r2, [sp, #24]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	9205      	str	r2, [sp, #20]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	9204      	str	r2, [sp, #16]
 8001c32:	220a      	movs	r2, #10
 8001c34:	9203      	str	r2, [sp, #12]
 8001c36:	220a      	movs	r2, #10
 8001c38:	9202      	str	r2, [sp, #8]
 8001c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3e:	9201      	str	r2, [sp, #4]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2300      	movs	r3, #0
 8001c44:	4a37      	ldr	r2, [pc, #220]	; (8001d24 <ThreadX_Init+0x178>)
 8001c46:	4938      	ldr	r1, [pc, #224]	; (8001d28 <ThreadX_Init+0x17c>)
 8001c48:	4835      	ldr	r0, [pc, #212]	; (8001d20 <ThreadX_Init+0x174>)
 8001c4a:	f008 fa51 	bl	800a0f0 <_txe_thread_create>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <ThreadX_Init+0xac>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
	  return TX_THREAD_ERROR;
 8001c54:	230e      	movs	r3, #14
 8001c56:	e05a      	b.n	8001d0e <ThreadX_Init+0x162>
	}

	if(tx_thread_create(&txMainThread, "txAeroThread", txAeroThreadEntry, 0, pointer,
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	22b0      	movs	r2, #176	; 0xb0
 8001c5c:	9206      	str	r2, [sp, #24]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	9205      	str	r2, [sp, #20]
 8001c62:	2200      	movs	r2, #0
 8001c64:	9204      	str	r2, [sp, #16]
 8001c66:	220a      	movs	r2, #10
 8001c68:	9203      	str	r2, [sp, #12]
 8001c6a:	220a      	movs	r2, #10
 8001c6c:	9202      	str	r2, [sp, #8]
 8001c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c72:	9201      	str	r2, [sp, #4]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	4a2c      	ldr	r2, [pc, #176]	; (8001d2c <ThreadX_Init+0x180>)
 8001c7a:	492d      	ldr	r1, [pc, #180]	; (8001d30 <ThreadX_Init+0x184>)
 8001c7c:	4828      	ldr	r0, [pc, #160]	; (8001d20 <ThreadX_Init+0x174>)
 8001c7e:	f008 fa37 	bl	800a0f0 <_txe_thread_create>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <ThreadX_Init+0xe0>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 8001c88:	230e      	movs	r3, #14
 8001c8a:	e040      	b.n	8001d0e <ThreadX_Init+0x162>
	}
	if(tx_thread_create(&txMainThread, "txCAN500Hz", txCAN500HzThreadEntry, 0, pointer,
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	22b0      	movs	r2, #176	; 0xb0
 8001c90:	9206      	str	r2, [sp, #24]
 8001c92:	2201      	movs	r2, #1
 8001c94:	9205      	str	r2, [sp, #20]
 8001c96:	2200      	movs	r2, #0
 8001c98:	9204      	str	r2, [sp, #16]
 8001c9a:	220a      	movs	r2, #10
 8001c9c:	9203      	str	r2, [sp, #12]
 8001c9e:	220a      	movs	r2, #10
 8001ca0:	9202      	str	r2, [sp, #8]
 8001ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca6:	9201      	str	r2, [sp, #4]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2300      	movs	r3, #0
 8001cac:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <ThreadX_Init+0x188>)
 8001cae:	4922      	ldr	r1, [pc, #136]	; (8001d38 <ThreadX_Init+0x18c>)
 8001cb0:	481b      	ldr	r0, [pc, #108]	; (8001d20 <ThreadX_Init+0x174>)
 8001cb2:	f008 fa1d 	bl	800a0f0 <_txe_thread_create>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <ThreadX_Init+0x114>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 8001cbc:	230e      	movs	r3, #14
 8001cbe:	e026      	b.n	8001d0e <ThreadX_Init+0x162>
	}

	if(tx_thread_create(&txMainThread, "txCAN100Hz", txCAN100HzThreadEntry, 0, pointer,
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	22b0      	movs	r2, #176	; 0xb0
 8001cc4:	9206      	str	r2, [sp, #24]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	9205      	str	r2, [sp, #20]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	9204      	str	r2, [sp, #16]
 8001cce:	220a      	movs	r2, #10
 8001cd0:	9203      	str	r2, [sp, #12]
 8001cd2:	220a      	movs	r2, #10
 8001cd4:	9202      	str	r2, [sp, #8]
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	9201      	str	r2, [sp, #4]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <ThreadX_Init+0x190>)
 8001ce2:	4917      	ldr	r1, [pc, #92]	; (8001d40 <ThreadX_Init+0x194>)
 8001ce4:	480e      	ldr	r0, [pc, #56]	; (8001d20 <ThreadX_Init+0x174>)
 8001ce6:	f008 fa03 	bl	800a0f0 <_txe_thread_create>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <ThreadX_Init+0x148>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 8001cf0:	230e      	movs	r3, #14
 8001cf2:	e00c      	b.n	8001d0e <ThreadX_Init+0x162>
	}

	tx_semaphore_create(&analogSemaphore, "analogSemaphore", 0);
 8001cf4:	231c      	movs	r3, #28
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4912      	ldr	r1, [pc, #72]	; (8001d44 <ThreadX_Init+0x198>)
 8001cfa:	4813      	ldr	r0, [pc, #76]	; (8001d48 <ThreadX_Init+0x19c>)
 8001cfc:	f008 f920 	bl	8009f40 <_txe_semaphore_create>
	tx_semaphore_create(&aeroSemaphore, "aeroSemaphore", 0);
 8001d00:	231c      	movs	r3, #28
 8001d02:	2200      	movs	r2, #0
 8001d04:	4911      	ldr	r1, [pc, #68]	; (8001d4c <ThreadX_Init+0x1a0>)
 8001d06:	4812      	ldr	r0, [pc, #72]	; (8001d50 <ThreadX_Init+0x1a4>)
 8001d08:	f008 f91a 	bl	8009f40 <_txe_semaphore_create>
	/* USER CODE END App_ThreadX_Init */

	return ret;
 8001d0c:	697b      	ldr	r3, [r7, #20]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	08001d55 	.word	0x08001d55
 8001d1c:	0800a358 	.word	0x0800a358
 8001d20:	2000094c 	.word	0x2000094c
 8001d24:	08001d81 	.word	0x08001d81
 8001d28:	0800a368 	.word	0x0800a368
 8001d2c:	08001df1 	.word	0x08001df1
 8001d30:	0800a378 	.word	0x0800a378
 8001d34:	08001e01 	.word	0x08001e01
 8001d38:	0800a388 	.word	0x0800a388
 8001d3c:	08001e0b 	.word	0x08001e0b
 8001d40:	0800a394 	.word	0x0800a394
 8001d44:	0800a3a0 	.word	0x0800a3a0
 8001d48:	200009fc 	.word	0x200009fc
 8001d4c:	0800a3b0 	.word	0x0800a3b0
 8001d50:	20000a18 	.word	0x20000a18

08001d54 <txMainThreadEntry>:


void txMainThreadEntry(ULONG threadInput){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

    HAL_FDCAN_Start(&hfdcan1);
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <txMainThreadEntry+0x24>)
 8001d5e:	f002 fce9 	bl	8004734 <HAL_FDCAN_Start>
	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <txMainThreadEntry+0x28>)
 8001d68:	f002 ff12 	bl	8004b90 <HAL_GPIO_TogglePin>
	    tx_thread_sleep(1000);
 8001d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d70:	f007 fa3c 	bl	80091ec <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001d74:	e7f5      	b.n	8001d62 <txMainThreadEntry+0xe>
 8001d76:	bf00      	nop
 8001d78:	200005bc 	.word	0x200005bc
 8001d7c:	48000800 	.word	0x48000800

08001d80 <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

    while(1){
        HAL_ADC_Start_DMA(&hadc1, adcValues, NUM_ADC_CHANNELS);
 8001d88:	2208      	movs	r2, #8
 8001d8a:	4915      	ldr	r1, [pc, #84]	; (8001de0 <txAnalogThreadEntry+0x60>)
 8001d8c:	4815      	ldr	r0, [pc, #84]	; (8001de4 <txAnalogThreadEntry+0x64>)
 8001d8e:	f000 fc97 	bl	80026c0 <HAL_ADC_Start_DMA>
        tx_semaphore_get(&analogSemaphore, TX_WAIT_FOREVER);
 8001d92:	f04f 31ff 	mov.w	r1, #4294967295
 8001d96:	4814      	ldr	r0, [pc, #80]	; (8001de8 <txAnalogThreadEntry+0x68>)
 8001d98:	f008 f968 	bl	800a06c <_txe_semaphore_get>
//        data will be processed and sent over CAN here
        for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e016      	b.n	8001dd0 <txAnalogThreadEntry+0x50>
        	analogRxData[i * 2] = adcValues[i];
 8001da2:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <txAnalogThreadEntry+0x60>)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	b2d1      	uxtb	r1, r2
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <txAnalogThreadEntry+0x6c>)
 8001db2:	54d1      	strb	r1, [r2, r3]
        	analogRxData[i * 2 + 1] = adcValues[i] >> 8;
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <txAnalogThreadEntry+0x60>)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	0a1a      	lsrs	r2, r3, #8
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b2d1      	uxtb	r1, r2
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <txAnalogThreadEntry+0x6c>)
 8001dc8:	54d1      	strb	r1, [r2, r3]
        for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	d9e5      	bls.n	8001da2 <txAnalogThreadEntry+0x22>
        }

        tx_thread_sleep(2);
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f007 fa08 	bl	80091ec <_tx_thread_sleep>
        HAL_ADC_Start_DMA(&hadc1, adcValues, NUM_ADC_CHANNELS);
 8001ddc:	e7d4      	b.n	8001d88 <txAnalogThreadEntry+0x8>
 8001dde:	bf00      	nop
 8001de0:	20000a34 	.word	0x20000a34
 8001de4:	20000460 	.word	0x20000460
 8001de8:	200009fc 	.word	0x200009fc
 8001dec:	20000a54 	.word	0x20000a54

08001df0 <txAeroThreadEntry>:
    }
}

void txAeroThreadEntry(ULONG threadInput){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
//    	SetChannel(2);
//		ReadData();
//		SetChannel(3);
//		ReadData();

		tx_thread_sleep(10);
 8001df8:	200a      	movs	r0, #10
 8001dfa:	f007 f9f7 	bl	80091ec <_tx_thread_sleep>
 8001dfe:	e7fb      	b.n	8001df8 <txAeroThreadEntry+0x8>

08001e00 <txCAN500HzThreadEntry>:
    }
}

void txCAN500HzThreadEntry(ULONG threadInput){
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

    while(2){
 8001e08:	e7fe      	b.n	8001e08 <txCAN500HzThreadEntry+0x8>

08001e0a <txCAN100HzThreadEntry>:

    }
}

void txCAN100HzThreadEntry(ULONG threadInput){
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]

    while(10){
 8001e12:	e7fe      	b.n	8001e12 <txCAN100HzThreadEntry+0x8>

08001e14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f001 ff21 	bl	8003c66 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e24:	200f      	movs	r0, #15
 8001e26:	f7ff fc53 	bl	80016d0 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	71fb      	strb	r3, [r7, #7]
 8001e34:	e001      	b.n	8001e3a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e36:	f7ff fc23 	bl	8001680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e3a:	79fb      	ldrb	r3, [r7, #7]

}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x1c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x20>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a03      	ldr	r2, [pc, #12]	; (8001e60 <HAL_IncTick+0x1c>)
 8001e54:	6013      	str	r3, [r2, #0]
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	20000a64 	.word	0x20000a64
 8001e64:	20000008 	.word	0x20000008

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000a64 	.word	0x20000a64

08001e80 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 0202 	bic.w	r2, r3, #2
 8001e90:	4904      	ldr	r1, [pc, #16]	; (8001ea4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40010030 	.word	0x40010030

08001ea8 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010030 	.word	0x40010030

08001ec8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3360      	adds	r3, #96	; 0x60
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <LL_ADC_SetOffset+0x44>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	03fff000 	.word	0x03fff000

08001f78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3360      	adds	r3, #96	; 0x60
 8001f86:	461a      	mov	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3360      	adds	r3, #96	; 0x60
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fce:	bf00      	nop
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b087      	sub	sp, #28
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3360      	adds	r3, #96	; 0x60
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3360      	adds	r3, #96	; 0x60
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	615a      	str	r2, [r3, #20]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002092:	b480      	push	{r7}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3330      	adds	r3, #48	; 0x30
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	4413      	add	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	211f      	movs	r1, #31
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	401a      	ands	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	f003 011f 	and.w	r1, r3, #31
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3314      	adds	r3, #20
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0e5b      	lsrs	r3, r3, #25
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	0d1b      	lsrs	r3, r3, #20
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2107      	movs	r1, #7
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	401a      	ands	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	0d1b      	lsrs	r3, r3, #20
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	431a      	orrs	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0318 	and.w	r3, r3, #24
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800218c:	40d9      	lsrs	r1, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	400b      	ands	r3, r1
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	0007ffff 	.word	0x0007ffff

080021b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 031f 	and.w	r3, r3, #31
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6093      	str	r3, [r2, #8]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800221c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002220:	d101      	bne.n	8002226 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002248:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002270:	d101      	bne.n	8002276 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002294:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <LL_ADC_IsEnabled+0x18>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <LL_ADC_IsEnabled+0x1a>
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b04      	cmp	r3, #4
 800230c:	d101      	bne.n	8002312 <LL_ADC_REG_IsConversionOngoing+0x18>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b08      	cmp	r3, #8
 8002332:	d101      	bne.n	8002338 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1a9      	b.n	80026b6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fe fb6b 	bl	8000a4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff3f 	bl	800220c <LL_ADC_IsDeepPowerDownEnabled>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff25 	bl	80021e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff5a 	bl	800225c <LL_ADC_IsInternalRegulatorEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff3e 	bl	8002234 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b8:	4b9c      	ldr	r3, [pc, #624]	; (800262c <HAL_ADC_Init+0x2e4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	4a9c      	ldr	r2, [pc, #624]	; (8002630 <HAL_ADC_Init+0x2e8>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff3c 	bl	800225c <LL_ADC_IsInternalRegulatorEnabled>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	f043 0210 	orr.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fa:	f043 0201 	orr.w	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff75 	bl	80022fa <LL_ADC_REG_IsConversionOngoing>
 8002410:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 8142 	bne.w	80026a4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 813e 	bne.w	80026a4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002430:	f043 0202 	orr.w	r2, r3, #2
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff35 	bl	80022ac <LL_ADC_IsEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d141      	bne.n	80024cc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002450:	d004      	beq.n	800245c <HAL_ADC_Init+0x114>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a77      	ldr	r2, [pc, #476]	; (8002634 <HAL_ADC_Init+0x2ec>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10f      	bne.n	800247c <HAL_ADC_Init+0x134>
 800245c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002460:	f7ff ff24 	bl	80022ac <LL_ADC_IsEnabled>
 8002464:	4604      	mov	r4, r0
 8002466:	4873      	ldr	r0, [pc, #460]	; (8002634 <HAL_ADC_Init+0x2ec>)
 8002468:	f7ff ff20 	bl	80022ac <LL_ADC_IsEnabled>
 800246c:	4603      	mov	r3, r0
 800246e:	4323      	orrs	r3, r4
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	e012      	b.n	80024a2 <HAL_ADC_Init+0x15a>
 800247c:	486e      	ldr	r0, [pc, #440]	; (8002638 <HAL_ADC_Init+0x2f0>)
 800247e:	f7ff ff15 	bl	80022ac <LL_ADC_IsEnabled>
 8002482:	4604      	mov	r4, r0
 8002484:	486d      	ldr	r0, [pc, #436]	; (800263c <HAL_ADC_Init+0x2f4>)
 8002486:	f7ff ff11 	bl	80022ac <LL_ADC_IsEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	431c      	orrs	r4, r3
 800248e:	486c      	ldr	r0, [pc, #432]	; (8002640 <HAL_ADC_Init+0x2f8>)
 8002490:	f7ff ff0c 	bl	80022ac <LL_ADC_IsEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	4323      	orrs	r3, r4
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ae:	d004      	beq.n	80024ba <HAL_ADC_Init+0x172>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a5f      	ldr	r2, [pc, #380]	; (8002634 <HAL_ADC_Init+0x2ec>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Init+0x176>
 80024ba:	4a62      	ldr	r2, [pc, #392]	; (8002644 <HAL_ADC_Init+0x2fc>)
 80024bc:	e000      	b.n	80024c0 <HAL_ADC_Init+0x178>
 80024be:	4a62      	ldr	r2, [pc, #392]	; (8002648 <HAL_ADC_Init+0x300>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f7ff fcfe 	bl	8001ec8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7f5b      	ldrb	r3, [r3, #29]
 80024d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d106      	bne.n	8002508 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	045b      	lsls	r3, r3, #17
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	4b48      	ldr	r3, [pc, #288]	; (800264c <HAL_ADC_Init+0x304>)
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	430b      	orrs	r3, r1
 8002536:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fee4 	bl	8002320 <LL_ADC_INJ_IsConversionOngoing>
 8002558:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d17f      	bne.n	8002660 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d17c      	bne.n	8002660 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800256a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002572:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002582:	f023 0302 	bic.w	r3, r3, #2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	430b      	orrs	r3, r1
 800258e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d017      	beq.n	80025c8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6911      	ldr	r1, [r2, #16]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80025c6:	e013      	b.n	80025f0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d12a      	bne.n	8002650 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002616:	4311      	orrs	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800261c:	430a      	orrs	r2, r1
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	e019      	b.n	8002660 <HAL_ADC_Init+0x318>
 800262c:	20000000 	.word	0x20000000
 8002630:	053e2d63 	.word	0x053e2d63
 8002634:	50000100 	.word	0x50000100
 8002638:	50000400 	.word	0x50000400
 800263c:	50000500 	.word	0x50000500
 8002640:	50000600 	.word	0x50000600
 8002644:	50000300 	.word	0x50000300
 8002648:	50000700 	.word	0x50000700
 800264c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d10c      	bne.n	8002682 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f023 010f 	bic.w	r1, r3, #15
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	1e5a      	subs	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
 8002680:	e007      	b.n	8002692 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 020f 	bic.w	r2, r2, #15
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80026a2:	e007      	b.n	80026b4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	f043 0210 	orr.w	r2, r3, #16
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd90      	pop	{r4, r7, pc}
 80026be:	bf00      	nop

080026c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d4:	d004      	beq.n	80026e0 <HAL_ADC_Start_DMA+0x20>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a5a      	ldr	r2, [pc, #360]	; (8002844 <HAL_ADC_Start_DMA+0x184>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_Start_DMA+0x24>
 80026e0:	4b59      	ldr	r3, [pc, #356]	; (8002848 <HAL_ADC_Start_DMA+0x188>)
 80026e2:	e000      	b.n	80026e6 <HAL_ADC_Start_DMA+0x26>
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_ADC_Start_DMA+0x18c>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fd62 	bl	80021b0 <LL_ADC_GetMultimode>
 80026ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fe01 	bl	80022fa <LL_ADC_REG_IsConversionOngoing>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 809b 	bne.w	8002836 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_ADC_Start_DMA+0x4e>
 800270a:	2302      	movs	r3, #2
 800270c:	e096      	b.n	800283c <HAL_ADC_Start_DMA+0x17c>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a4d      	ldr	r2, [pc, #308]	; (8002850 <HAL_ADC_Start_DMA+0x190>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d008      	beq.n	8002732 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d002      	beq.n	8002732 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b09      	cmp	r3, #9
 8002730:	d17a      	bne.n	8002828 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 ff60 	bl	80035f8 <ADC_Enable>
 8002738:	4603      	mov	r3, r0
 800273a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d16d      	bne.n	800281e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3a      	ldr	r2, [pc, #232]	; (8002844 <HAL_ADC_Start_DMA+0x184>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_ADC_Start_DMA+0xb4>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <HAL_ADC_Start_DMA+0x194>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d002      	beq.n	8002770 <HAL_ADC_Start_DMA+0xb0>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	e003      	b.n	8002778 <HAL_ADC_Start_DMA+0xb8>
 8002770:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_ADC_Start_DMA+0x198>)
 8002772:	e001      	b.n	8002778 <HAL_ADC_Start_DMA+0xb8>
 8002774:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	4293      	cmp	r3, r2
 800277e:	d002      	beq.n	8002786 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	f023 0206 	bic.w	r2, r3, #6
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	661a      	str	r2, [r3, #96]	; 0x60
 80027aa:	e002      	b.n	80027b2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_ADC_Start_DMA+0x19c>)
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	4a28      	ldr	r2, [pc, #160]	; (8002860 <HAL_ADC_Start_DMA+0x1a0>)
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	4a27      	ldr	r2, [pc, #156]	; (8002864 <HAL_ADC_Start_DMA+0x1a4>)
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	221c      	movs	r2, #28
 80027d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0210 	orr.w	r2, r2, #16
 80027e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3340      	adds	r3, #64	; 0x40
 8002804:	4619      	mov	r1, r3
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f001 fbf9 	bl	8004000 <HAL_DMA_Start_IT>
 800280e:	4603      	mov	r3, r0
 8002810:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fd5b 	bl	80022d2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800281c:	e00d      	b.n	800283a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002826:	e008      	b.n	800283a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002834:	e001      	b.n	800283a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	50000100 	.word	0x50000100
 8002848:	50000300 	.word	0x50000300
 800284c:	50000700 	.word	0x50000700
 8002850:	50000600 	.word	0x50000600
 8002854:	50000500 	.word	0x50000500
 8002858:	50000400 	.word	0x50000400
 800285c:	08003725 	.word	0x08003725
 8002860:	080037fd 	.word	0x080037fd
 8002864:	08003819 	.word	0x08003819

08002868 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800288c:	d004      	beq.n	8002898 <HAL_ADC_IRQHandler+0x30>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a8e      	ldr	r2, [pc, #568]	; (8002acc <HAL_ADC_IRQHandler+0x264>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_ADC_IRQHandler+0x34>
 8002898:	4b8d      	ldr	r3, [pc, #564]	; (8002ad0 <HAL_ADC_IRQHandler+0x268>)
 800289a:	e000      	b.n	800289e <HAL_ADC_IRQHandler+0x36>
 800289c:	4b8d      	ldr	r3, [pc, #564]	; (8002ad4 <HAL_ADC_IRQHandler+0x26c>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fc86 	bl	80021b0 <LL_ADC_GetMultimode>
 80028a4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x78>
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d012      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f001 f808 	bl	80038e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2202      	movs	r2, #2
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x8c>
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8094 	beq.w	8002a28 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 808e 	beq.w	8002a28 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fb9f 	bl	800206c <LL_ADC_REG_IsTriggerSourceSWStart>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d072      	beq.n	8002a1a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a64      	ldr	r2, [pc, #400]	; (8002acc <HAL_ADC_IRQHandler+0x264>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_ADC_IRQHandler+0xea>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a65      	ldr	r2, [pc, #404]	; (8002ad8 <HAL_ADC_IRQHandler+0x270>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d002      	beq.n	800294e <HAL_ADC_IRQHandler+0xe6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	e003      	b.n	8002956 <HAL_ADC_IRQHandler+0xee>
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_ADC_IRQHandler+0x274>)
 8002950:	e001      	b.n	8002956 <HAL_ADC_IRQHandler+0xee>
 8002952:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	4293      	cmp	r3, r2
 800295c:	d008      	beq.n	8002970 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b05      	cmp	r3, #5
 8002968:	d002      	beq.n	8002970 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b09      	cmp	r3, #9
 800296e:	d104      	bne.n	800297a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	623b      	str	r3, [r7, #32]
 8002978:	e014      	b.n	80029a4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a53      	ldr	r2, [pc, #332]	; (8002acc <HAL_ADC_IRQHandler+0x264>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d009      	beq.n	8002998 <HAL_ADC_IRQHandler+0x130>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a53      	ldr	r2, [pc, #332]	; (8002ad8 <HAL_ADC_IRQHandler+0x270>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d002      	beq.n	8002994 <HAL_ADC_IRQHandler+0x12c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	e003      	b.n	800299c <HAL_ADC_IRQHandler+0x134>
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <HAL_ADC_IRQHandler+0x274>)
 8002996:	e001      	b.n	800299c <HAL_ADC_IRQHandler+0x134>
 8002998:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800299c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d135      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d12e      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fc9a 	bl	80022fa <LL_ADC_REG_IsConversionOngoing>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11a      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 020c 	bic.w	r2, r2, #12
 80029da:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d112      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a00:	e00b      	b.n	8002a1a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f984 	bl	8002d28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	220c      	movs	r2, #12
 8002a26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x1d4>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80b3 	beq.w	8002bae <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80ad 	beq.w	8002bae <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fb3a 	bl	80020ea <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a76:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff faf5 	bl	800206c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a82:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_ADC_IRQHandler+0x264>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_ADC_IRQHandler+0x23a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <HAL_ADC_IRQHandler+0x270>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d002      	beq.n	8002a9e <HAL_ADC_IRQHandler+0x236>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e003      	b.n	8002aa6 <HAL_ADC_IRQHandler+0x23e>
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_ADC_IRQHandler+0x274>)
 8002aa0:	e001      	b.n	8002aa6 <HAL_ADC_IRQHandler+0x23e>
 8002aa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d008      	beq.n	8002ac0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d002      	beq.n	8002ac0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b07      	cmp	r3, #7
 8002abe:	d10f      	bne.n	8002ae0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	623b      	str	r3, [r7, #32]
 8002ac8:	e01f      	b.n	8002b0a <HAL_ADC_IRQHandler+0x2a2>
 8002aca:	bf00      	nop
 8002acc:	50000100 	.word	0x50000100
 8002ad0:	50000300 	.word	0x50000300
 8002ad4:	50000700 	.word	0x50000700
 8002ad8:	50000500 	.word	0x50000500
 8002adc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a8b      	ldr	r2, [pc, #556]	; (8002d14 <HAL_ADC_IRQHandler+0x4ac>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d009      	beq.n	8002afe <HAL_ADC_IRQHandler+0x296>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a8a      	ldr	r2, [pc, #552]	; (8002d18 <HAL_ADC_IRQHandler+0x4b0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d002      	beq.n	8002afa <HAL_ADC_IRQHandler+0x292>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	e003      	b.n	8002b02 <HAL_ADC_IRQHandler+0x29a>
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_ADC_IRQHandler+0x4b4>)
 8002afc:	e001      	b.n	8002b02 <HAL_ADC_IRQHandler+0x29a>
 8002afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b02:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d047      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x2c2>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d03f      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d13a      	bne.n	8002ba0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d133      	bne.n	8002ba0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d12e      	bne.n	8002ba0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fbea 	bl	8002320 <LL_ADC_INJ_IsConversionOngoing>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11a      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b60:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d112      	bne.n	8002ba0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	f043 0201 	orr.w	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b86:	e00b      	b.n	8002ba0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	f043 0210 	orr.w	r2, r3, #16
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fe79 	bl	8003898 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2260      	movs	r2, #96	; 0x60
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d011      	beq.n	8002bdc <HAL_ADC_IRQHandler+0x374>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8be 	bl	8002d50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d012      	beq.n	8002c0c <HAL_ADC_IRQHandler+0x3a4>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00d      	beq.n	8002c0c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fe5f 	bl	80038c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x3d4>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fe51 	bl	80038d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d043      	beq.n	8002cce <HAL_ADC_IRQHandler+0x466>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d03e      	beq.n	8002cce <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	e021      	b.n	8002ca2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c6c:	d004      	beq.n	8002c78 <HAL_ADC_IRQHandler+0x410>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <HAL_ADC_IRQHandler+0x4ac>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x414>
 8002c78:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_ADC_IRQHandler+0x4b8>)
 8002c7a:	e000      	b.n	8002c7e <HAL_ADC_IRQHandler+0x416>
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_ADC_IRQHandler+0x4bc>)
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff faa4 	bl	80021cc <LL_ADC_GetMultiDMATransfer>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	e008      	b.n	8002ca2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	f043 0202 	orr.w	r2, r3, #2
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f84f 	bl	8002d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2210      	movs	r2, #16
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d018      	beq.n	8002d0a <HAL_ADC_IRQHandler+0x4a2>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d013      	beq.n	8002d0a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	f043 0208 	orr.w	r2, r3, #8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d02:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fdd1 	bl	80038ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d0a:	bf00      	nop
 8002d0c:	3728      	adds	r7, #40	; 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	50000100 	.word	0x50000100
 8002d18:	50000500 	.word	0x50000500
 8002d1c:	50000400 	.word	0x50000400
 8002d20:	50000300 	.word	0x50000300
 8002d24:	50000700 	.word	0x50000700

08002d28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b0b6      	sub	sp, #216	; 0xd8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x24>
 8002d96:	2302      	movs	r3, #2
 8002d98:	f000 bc13 	b.w	80035c2 <HAL_ADC_ConfigChannel+0x84a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff faa6 	bl	80022fa <LL_ADC_REG_IsConversionOngoing>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 83f3 	bne.w	800359c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f7ff f965 	bl	8002092 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fa94 	bl	80022fa <LL_ADC_REG_IsConversionOngoing>
 8002dd2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff faa0 	bl	8002320 <LL_ADC_INJ_IsConversionOngoing>
 8002de0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 81d9 	bne.w	80031a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 81d4 	bne.w	80031a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e00:	d10f      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f7ff f97f 	bl	8002110 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff f913 	bl	8002046 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e20:	e00e      	b.n	8002e40 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f7ff f96e 	bl	8002110 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f903 	bl	8002046 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	08db      	lsrs	r3, r3, #3
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d022      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6919      	ldr	r1, [r3, #16]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e72:	f7ff f85d 	bl	8001f30 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6919      	ldr	r1, [r3, #16]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f7ff f8a9 	bl	8001fda <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d102      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x126>
 8002e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9c:	e000      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x128>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f7ff f8b5 	bl	8002010 <LL_ADC_SetOffsetSaturation>
 8002ea6:	e17b      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff f862 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x15c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f857 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	0e9b      	lsrs	r3, r3, #26
 8002ece:	f003 021f 	and.w	r2, r3, #31
 8002ed2:	e01e      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x19a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f84c 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ef2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f02:	2320      	movs	r3, #32
 8002f04:	e004      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x1b2>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0e9b      	lsrs	r3, r3, #26
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	e018      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x1e4>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	e004      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d106      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff f81b 	bl	8001fa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe ffff 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x222>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fff4 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	0e9b      	lsrs	r3, r3, #26
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	e01e      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x260>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe ffe9 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002fb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e004      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d105      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x278>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	e018      	b.n	8003022 <HAL_ADC_ConfigChannel+0x2aa>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800300c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e004      	b.n	8003022 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003022:	429a      	cmp	r2, r3
 8003024:	d106      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe ffb8 	bl	8001fa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2102      	movs	r1, #2
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe ff9c 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x2e8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2102      	movs	r1, #2
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe ff91 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	0e9b      	lsrs	r3, r3, #26
 800305a:	f003 021f 	and.w	r2, r3, #31
 800305e:	e01e      	b.n	800309e <HAL_ADC_ConfigChannel+0x326>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2102      	movs	r1, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe ff86 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 800306c:	4603      	mov	r3, r0
 800306e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800307e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e004      	b.n	800309c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x33e>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	e016      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x36c>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80030c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80030ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80030d6:	2320      	movs	r3, #32
 80030d8:	e004      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80030da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d106      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe ff57 	bl	8001fa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2103      	movs	r1, #3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe ff3b 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x3aa>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2103      	movs	r1, #3
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe ff30 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8003118:	4603      	mov	r3, r0
 800311a:	0e9b      	lsrs	r3, r3, #26
 800311c:	f003 021f 	and.w	r2, r3, #31
 8003120:	e017      	b.n	8003152 <HAL_ADC_ConfigChannel+0x3da>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2103      	movs	r1, #3
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe ff25 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 800312e:	4603      	mov	r3, r0
 8003130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800313a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800313c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800313e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003144:	2320      	movs	r3, #32
 8003146:	e003      	b.n	8003150 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_ConfigChannel+0x3f2>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	e011      	b.n	800318e <HAL_ADC_ConfigChannel+0x416>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800317c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e003      	b.n	800318e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800318e:	429a      	cmp	r2, r3
 8003190:	d106      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	2103      	movs	r1, #3
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe ff02 	bl	8001fa4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f881 	bl	80022ac <LL_ADC_IsEnabled>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 813d 	bne.w	800342c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f7fe ffd2 	bl	8002168 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4aa2      	ldr	r2, [pc, #648]	; (8003454 <HAL_ADC_ConfigChannel+0x6dc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	f040 812e 	bne.w	800342c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x480>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	3301      	adds	r3, #1
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	bf94      	ite	ls
 80031f0:	2301      	movls	r3, #1
 80031f2:	2300      	movhi	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e019      	b.n	800322c <HAL_ADC_ConfigChannel+0x4b4>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003208:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800320a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e003      	b.n	800321c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3301      	adds	r3, #1
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2b09      	cmp	r3, #9
 8003224:	bf94      	ite	ls
 8003226:	2301      	movls	r3, #1
 8003228:	2300      	movhi	r3, #0
 800322a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800322c:	2b00      	cmp	r3, #0
 800322e:	d079      	beq.n	8003324 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003238:	2b00      	cmp	r3, #0
 800323a:	d107      	bne.n	800324c <HAL_ADC_ConfigChannel+0x4d4>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	0e9b      	lsrs	r3, r3, #26
 8003242:	3301      	adds	r3, #1
 8003244:	069b      	lsls	r3, r3, #26
 8003246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800324a:	e015      	b.n	8003278 <HAL_ADC_ConfigChannel+0x500>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800325a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800325e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003264:	2320      	movs	r3, #32
 8003266:	e003      	b.n	8003270 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	3301      	adds	r3, #1
 8003272:	069b      	lsls	r3, r3, #26
 8003274:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x520>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	0e9b      	lsrs	r3, r3, #26
 800328a:	3301      	adds	r3, #1
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2101      	movs	r1, #1
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	e017      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x550>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80032a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80032aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80032b0:	2320      	movs	r3, #32
 80032b2:	e003      	b.n	80032bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80032b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	ea42 0103 	orr.w	r1, r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x576>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0e9b      	lsrs	r3, r3, #26
 80032de:	3301      	adds	r3, #1
 80032e0:	f003 021f 	and.w	r2, r3, #31
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	051b      	lsls	r3, r3, #20
 80032ec:	e018      	b.n	8003320 <HAL_ADC_ConfigChannel+0x5a8>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e003      	b.n	8003312 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003320:	430b      	orrs	r3, r1
 8003322:	e07e      	b.n	8003422 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x5c8>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	3301      	adds	r3, #1
 8003338:	069b      	lsls	r3, r3, #26
 800333a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800333e:	e015      	b.n	800336c <HAL_ADC_ConfigChannel+0x5f4>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e003      	b.n	8003364 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	069b      	lsls	r3, r3, #26
 8003368:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_ADC_ConfigChannel+0x614>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	3301      	adds	r3, #1
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	e017      	b.n	80033bc <HAL_ADC_ConfigChannel+0x644>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	61fb      	str	r3, [r7, #28]
  return result;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e003      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	ea42 0103 	orr.w	r1, r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x670>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	3301      	adds	r3, #1
 80033d4:	f003 021f 	and.w	r2, r3, #31
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	3b1e      	subs	r3, #30
 80033e0:	051b      	lsls	r3, r3, #20
 80033e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033e6:	e01b      	b.n	8003420 <HAL_ADC_ConfigChannel+0x6a8>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	613b      	str	r3, [r7, #16]
  return result;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e003      	b.n	800340c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	f003 021f 	and.w	r2, r3, #31
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	3b1e      	subs	r3, #30
 800341a:	051b      	lsls	r3, r3, #20
 800341c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003420:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003426:	4619      	mov	r1, r3
 8003428:	f7fe fe72 	bl	8002110 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_ADC_ConfigChannel+0x6e0>)
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80be 	beq.w	80035b6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003442:	d004      	beq.n	800344e <HAL_ADC_ConfigChannel+0x6d6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <HAL_ADC_ConfigChannel+0x6e4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10a      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x6ec>
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <HAL_ADC_ConfigChannel+0x6e8>)
 8003450:	e009      	b.n	8003466 <HAL_ADC_ConfigChannel+0x6ee>
 8003452:	bf00      	nop
 8003454:	407f0000 	.word	0x407f0000
 8003458:	80080000 	.word	0x80080000
 800345c:	50000100 	.word	0x50000100
 8003460:	50000300 	.word	0x50000300
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_ADC_ConfigChannel+0x854>)
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fd54 	bl	8001f14 <LL_ADC_GetCommonPathInternalCh>
 800346c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a56      	ldr	r2, [pc, #344]	; (80035d0 <HAL_ADC_ConfigChannel+0x858>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_ADC_ConfigChannel+0x70c>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a55      	ldr	r2, [pc, #340]	; (80035d4 <HAL_ADC_ConfigChannel+0x85c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d13a      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d134      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003498:	d005      	beq.n	80034a6 <HAL_ADC_ConfigChannel+0x72e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a4e      	ldr	r2, [pc, #312]	; (80035d8 <HAL_ADC_ConfigChannel+0x860>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	f040 8085 	bne.w	80035b0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ae:	d004      	beq.n	80034ba <HAL_ADC_ConfigChannel+0x742>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a49      	ldr	r2, [pc, #292]	; (80035dc <HAL_ADC_ConfigChannel+0x864>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x746>
 80034ba:	4a49      	ldr	r2, [pc, #292]	; (80035e0 <HAL_ADC_ConfigChannel+0x868>)
 80034bc:	e000      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x748>
 80034be:	4a43      	ldr	r2, [pc, #268]	; (80035cc <HAL_ADC_ConfigChannel+0x854>)
 80034c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f7fe fd0f 	bl	8001eee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d0:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_ADC_ConfigChannel+0x86c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	4a44      	ldr	r2, [pc, #272]	; (80035e8 <HAL_ADC_ConfigChannel+0x870>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034ea:	e002      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f9      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034f8:	e05a      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <HAL_ADC_ConfigChannel+0x874>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d125      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d11f      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a31      	ldr	r2, [pc, #196]	; (80035dc <HAL_ADC_ConfigChannel+0x864>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d104      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x7ac>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a34      	ldr	r2, [pc, #208]	; (80035f0 <HAL_ADC_ConfigChannel+0x878>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d047      	beq.n	80035b4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800352c:	d004      	beq.n	8003538 <HAL_ADC_ConfigChannel+0x7c0>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <HAL_ADC_ConfigChannel+0x864>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x7c4>
 8003538:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <HAL_ADC_ConfigChannel+0x868>)
 800353a:	e000      	b.n	800353e <HAL_ADC_ConfigChannel+0x7c6>
 800353c:	4a23      	ldr	r2, [pc, #140]	; (80035cc <HAL_ADC_ConfigChannel+0x854>)
 800353e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003546:	4619      	mov	r1, r3
 8003548:	4610      	mov	r0, r2
 800354a:	f7fe fcd0 	bl	8001eee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800354e:	e031      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <HAL_ADC_ConfigChannel+0x87c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12d      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800355a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d127      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <HAL_ADC_ConfigChannel+0x864>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d022      	beq.n	80035b6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003578:	d004      	beq.n	8003584 <HAL_ADC_ConfigChannel+0x80c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a17      	ldr	r2, [pc, #92]	; (80035dc <HAL_ADC_ConfigChannel+0x864>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x810>
 8003584:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <HAL_ADC_ConfigChannel+0x868>)
 8003586:	e000      	b.n	800358a <HAL_ADC_ConfigChannel+0x812>
 8003588:	4a10      	ldr	r2, [pc, #64]	; (80035cc <HAL_ADC_ConfigChannel+0x854>)
 800358a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800358e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f7fe fcaa 	bl	8001eee <LL_ADC_SetCommonPathInternalCh>
 800359a:	e00c      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80035ae:	e002      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80035be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	37d8      	adds	r7, #216	; 0xd8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	50000700 	.word	0x50000700
 80035d0:	c3210000 	.word	0xc3210000
 80035d4:	90c00010 	.word	0x90c00010
 80035d8:	50000600 	.word	0x50000600
 80035dc:	50000100 	.word	0x50000100
 80035e0:	50000300 	.word	0x50000300
 80035e4:	20000000 	.word	0x20000000
 80035e8:	053e2d63 	.word	0x053e2d63
 80035ec:	c7520000 	.word	0xc7520000
 80035f0:	50000500 	.word	0x50000500
 80035f4:	cb840000 	.word	0xcb840000

080035f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fe fe4f 	bl	80022ac <LL_ADC_IsEnabled>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d176      	bne.n	8003702 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	4b3c      	ldr	r3, [pc, #240]	; (800370c <ADC_Enable+0x114>)
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	f043 0210 	orr.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e062      	b.n	8003704 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe fe1e 	bl	8002284 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003650:	d004      	beq.n	800365c <ADC_Enable+0x64>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2e      	ldr	r2, [pc, #184]	; (8003710 <ADC_Enable+0x118>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d101      	bne.n	8003660 <ADC_Enable+0x68>
 800365c:	4b2d      	ldr	r3, [pc, #180]	; (8003714 <ADC_Enable+0x11c>)
 800365e:	e000      	b.n	8003662 <ADC_Enable+0x6a>
 8003660:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <ADC_Enable+0x120>)
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fc56 	bl	8001f14 <LL_ADC_GetCommonPathInternalCh>
 8003668:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800366a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800366e:	2b00      	cmp	r3, #0
 8003670:	d013      	beq.n	800369a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <ADC_Enable+0x124>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	099b      	lsrs	r3, r3, #6
 8003678:	4a29      	ldr	r2, [pc, #164]	; (8003720 <ADC_Enable+0x128>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800368c:	e002      	b.n	8003694 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f9      	bne.n	800368e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800369a:	f7fe fbe5 	bl	8001e68 <HAL_GetTick>
 800369e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036a0:	e028      	b.n	80036f4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fe00 	bl	80022ac <LL_ADC_IsEnabled>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fde4 	bl	8002284 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036bc:	f7fe fbd4 	bl	8001e68 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d914      	bls.n	80036f4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d00d      	beq.n	80036f4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	f043 0210 	orr.w	r2, r3, #16
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	f043 0201 	orr.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e007      	b.n	8003704 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d1cf      	bne.n	80036a2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	8000003f 	.word	0x8000003f
 8003710:	50000100 	.word	0x50000100
 8003714:	50000300 	.word	0x50000300
 8003718:	50000700 	.word	0x50000700
 800371c:	20000000 	.word	0x20000000
 8003720:	053e2d63 	.word	0x053e2d63

08003724 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800373a:	2b00      	cmp	r3, #0
 800373c:	d14b      	bne.n	80037d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d021      	beq.n	800379c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe fc85 	bl	800206c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d032      	beq.n	80037ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d12b      	bne.n	80037ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d11f      	bne.n	80037ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	65da      	str	r2, [r3, #92]	; 0x5c
 800379a:	e018      	b.n	80037ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d111      	bne.n	80037ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff faaa 	bl	8002d28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037d4:	e00e      	b.n	80037f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff fabe 	bl	8002d64 <HAL_ADC_ErrorCallback>
}
 80037e8:	e004      	b.n	80037f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff fa96 	bl	8002d3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003836:	f043 0204 	orr.w	r2, r3, #4
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff fa90 	bl	8002d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <LL_ADC_IsEnabled>:
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <LL_ADC_IsEnabled+0x18>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <LL_ADC_IsEnabled+0x1a>
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <LL_ADC_REG_IsConversionOngoing>:
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d101      	bne.n	800388a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b0a1      	sub	sp, #132	; 0x84
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003916:	2302      	movs	r3, #2
 8003918:	e0e7      	b.n	8003aea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003922:	2300      	movs	r3, #0
 8003924:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003926:	2300      	movs	r3, #0
 8003928:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003932:	d102      	bne.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003934:	4b6f      	ldr	r3, [pc, #444]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	e009      	b.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6e      	ldr	r2, [pc, #440]	; (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d102      	bne.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003944:	4b6d      	ldr	r3, [pc, #436]	; (8003afc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	e001      	b.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0be      	b.n	8003aea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ff7f 	bl	8003872 <LL_ADC_REG_IsConversionOngoing>
 8003974:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff79 	bl	8003872 <LL_ADC_REG_IsConversionOngoing>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 80a0 	bne.w	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 809c 	bne.w	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003998:	d004      	beq.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a55      	ldr	r2, [pc, #340]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d101      	bne.n	80039a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80039a4:	4b56      	ldr	r3, [pc, #344]	; (8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80039a6:	e000      	b.n	80039aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80039a8:	4b56      	ldr	r3, [pc, #344]	; (8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80039aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d04b      	beq.n	8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80039b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039c6:	035b      	lsls	r3, r3, #13
 80039c8:	430b      	orrs	r3, r1
 80039ca:	431a      	orrs	r2, r3
 80039cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d8:	d004      	beq.n	80039e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a45      	ldr	r2, [pc, #276]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d10f      	bne.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80039e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039e8:	f7ff ff30 	bl	800384c <LL_ADC_IsEnabled>
 80039ec:	4604      	mov	r4, r0
 80039ee:	4841      	ldr	r0, [pc, #260]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039f0:	f7ff ff2c 	bl	800384c <LL_ADC_IsEnabled>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4323      	orrs	r3, r4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e012      	b.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a04:	483c      	ldr	r0, [pc, #240]	; (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a06:	f7ff ff21 	bl	800384c <LL_ADC_IsEnabled>
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	483b      	ldr	r0, [pc, #236]	; (8003afc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a0e:	f7ff ff1d 	bl	800384c <LL_ADC_IsEnabled>
 8003a12:	4603      	mov	r3, r0
 8003a14:	431c      	orrs	r4, r3
 8003a16:	483c      	ldr	r0, [pc, #240]	; (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a18:	f7ff ff18 	bl	800384c <LL_ADC_IsEnabled>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4323      	orrs	r3, r4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d056      	beq.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a36:	f023 030f 	bic.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	6811      	ldr	r1, [r2, #0]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	6892      	ldr	r2, [r2, #8]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	431a      	orrs	r2, r3
 8003a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a48:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a4a:	e047      	b.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a56:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a60:	d004      	beq.n	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10f      	bne.n	8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003a6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a70:	f7ff feec 	bl	800384c <LL_ADC_IsEnabled>
 8003a74:	4604      	mov	r4, r0
 8003a76:	481f      	ldr	r0, [pc, #124]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a78:	f7ff fee8 	bl	800384c <LL_ADC_IsEnabled>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4323      	orrs	r3, r4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e012      	b.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a8c:	481a      	ldr	r0, [pc, #104]	; (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a8e:	f7ff fedd 	bl	800384c <LL_ADC_IsEnabled>
 8003a92:	4604      	mov	r4, r0
 8003a94:	4819      	ldr	r0, [pc, #100]	; (8003afc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a96:	f7ff fed9 	bl	800384c <LL_ADC_IsEnabled>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	431c      	orrs	r4, r3
 8003a9e:	481a      	ldr	r0, [pc, #104]	; (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003aa0:	f7ff fed4 	bl	800384c <LL_ADC_IsEnabled>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4323      	orrs	r3, r4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d012      	beq.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003abe:	f023 030f 	bic.w	r3, r3, #15
 8003ac2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ac4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac6:	e009      	b.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	f043 0220 	orr.w	r2, r3, #32
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ada:	e000      	b.n	8003ade <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003adc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ae6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3784      	adds	r7, #132	; 0x84
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}
 8003af2:	bf00      	nop
 8003af4:	50000100 	.word	0x50000100
 8003af8:	50000400 	.word	0x50000400
 8003afc:	50000500 	.word	0x50000500
 8003b00:	50000300 	.word	0x50000300
 8003b04:	50000700 	.word	0x50000700
 8003b08:	50000600 	.word	0x50000600

08003b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3e:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	60d3      	str	r3, [r2, #12]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <__NVIC_GetPriorityGrouping+0x18>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	f003 0307 	and.w	r3, r3, #7
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	db0b      	blt.n	8003b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	4907      	ldr	r1, [pc, #28]	; (8003ba8 <__NVIC_EnableIRQ+0x38>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2001      	movs	r0, #1
 8003b92:	fa00 f202 	lsl.w	r2, r0, r2
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	e000e100 	.word	0xe000e100

08003bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	db0a      	blt.n	8003bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	490c      	ldr	r1, [pc, #48]	; (8003bf8 <__NVIC_SetPriority+0x4c>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	0112      	lsls	r2, r2, #4
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bd4:	e00a      	b.n	8003bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4908      	ldr	r1, [pc, #32]	; (8003bfc <__NVIC_SetPriority+0x50>)
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	3b04      	subs	r3, #4
 8003be4:	0112      	lsls	r2, r2, #4
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	440b      	add	r3, r1
 8003bea:	761a      	strb	r2, [r3, #24]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000e100 	.word	0xe000e100
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b089      	sub	sp, #36	; 0x24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f1c3 0307 	rsb	r3, r3, #7
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	bf28      	it	cs
 8003c1e:	2304      	movcs	r3, #4
 8003c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3304      	adds	r3, #4
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d902      	bls.n	8003c30 <NVIC_EncodePriority+0x30>
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3b03      	subs	r3, #3
 8003c2e:	e000      	b.n	8003c32 <NVIC_EncodePriority+0x32>
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	401a      	ands	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c48:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43d9      	mvns	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c58:	4313      	orrs	r3, r2
         );
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3724      	adds	r7, #36	; 0x24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff4c 	bl	8003b0c <__NVIC_SetPriorityGrouping>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c8a:	f7ff ff63 	bl	8003b54 <__NVIC_GetPriorityGrouping>
 8003c8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	6978      	ldr	r0, [r7, #20]
 8003c96:	f7ff ffb3 	bl	8003c00 <NVIC_EncodePriority>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff ff82 	bl	8003bac <__NVIC_SetPriority>
}
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff56 	bl	8003b70 <__NVIC_EnableIRQ>
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e054      	b.n	8003d88 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7f5b      	ldrb	r3, [r3, #29]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc ffc8 	bl	8000c84 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	791b      	ldrb	r3, [r3, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10c      	bne.n	8003d1c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <HAL_CRC_Init+0xc4>)
 8003d08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0218 	bic.w	r2, r2, #24
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	e00c      	b.n	8003d36 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6899      	ldr	r1, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	461a      	mov	r2, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f834 	bl	8003d94 <HAL_CRCEx_Polynomial_Set>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e028      	b.n	8003d88 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	795b      	ldrb	r3, [r3, #5]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d105      	bne.n	8003d4a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f04f 32ff 	mov.w	r2, #4294967295
 8003d46:	611a      	str	r2, [r3, #16]
 8003d48:	e004      	b.n	8003d54 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6912      	ldr	r2, [r2, #16]
 8003d52:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	04c11db7 	.word	0x04c11db7

08003d94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003da4:	231f      	movs	r3, #31
 8003da6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
 8003db6:	e063      	b.n	8003e80 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003db8:	bf00      	nop
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	613a      	str	r2, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <HAL_CRCEx_Polynomial_Set+0x44>
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b18      	cmp	r3, #24
 8003ddc:	d846      	bhi.n	8003e6c <HAL_CRCEx_Polynomial_Set+0xd8>
 8003dde:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003e73 	.word	0x08003e73
 8003de8:	08003e6d 	.word	0x08003e6d
 8003dec:	08003e6d 	.word	0x08003e6d
 8003df0:	08003e6d 	.word	0x08003e6d
 8003df4:	08003e6d 	.word	0x08003e6d
 8003df8:	08003e6d 	.word	0x08003e6d
 8003dfc:	08003e6d 	.word	0x08003e6d
 8003e00:	08003e6d 	.word	0x08003e6d
 8003e04:	08003e61 	.word	0x08003e61
 8003e08:	08003e6d 	.word	0x08003e6d
 8003e0c:	08003e6d 	.word	0x08003e6d
 8003e10:	08003e6d 	.word	0x08003e6d
 8003e14:	08003e6d 	.word	0x08003e6d
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	08003e6d 	.word	0x08003e6d
 8003e24:	08003e55 	.word	0x08003e55
 8003e28:	08003e6d 	.word	0x08003e6d
 8003e2c:	08003e6d 	.word	0x08003e6d
 8003e30:	08003e6d 	.word	0x08003e6d
 8003e34:	08003e6d 	.word	0x08003e6d
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003e6d 	.word	0x08003e6d
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e49 	.word	0x08003e49
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	d913      	bls.n	8003e76 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e52:	e010      	b.n	8003e76 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b07      	cmp	r3, #7
 8003e58:	d90f      	bls.n	8003e7a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e5e:	e00c      	b.n	8003e7a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b0f      	cmp	r3, #15
 8003e64:	d90b      	bls.n	8003e7e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e6a:	e008      	b.n	8003e7e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
        break;
 8003e70:	e006      	b.n	8003e80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e7e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10d      	bne.n	8003ea2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 0118 	bic.w	r1, r3, #24
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e08d      	b.n	8003fde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <HAL_DMA_Init+0x138>)
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d80f      	bhi.n	8003eee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b45      	ldr	r3, [pc, #276]	; (8003fec <HAL_DMA_Init+0x13c>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	4a45      	ldr	r2, [pc, #276]	; (8003ff0 <HAL_DMA_Init+0x140>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	009a      	lsls	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a42      	ldr	r2, [pc, #264]	; (8003ff4 <HAL_DMA_Init+0x144>)
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
 8003eec:	e00e      	b.n	8003f0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <HAL_DMA_Init+0x148>)
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4a3d      	ldr	r2, [pc, #244]	; (8003ff0 <HAL_DMA_Init+0x140>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a3c      	ldr	r2, [pc, #240]	; (8003ffc <HAL_DMA_Init+0x14c>)
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa2c 	bl	80043bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f6c:	d102      	bne.n	8003f74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <HAL_DMA_Init+0x104>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d80c      	bhi.n	8003fb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa4c 	bl	8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	e008      	b.n	8003fc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40020407 	.word	0x40020407
 8003fec:	bffdfff8 	.word	0xbffdfff8
 8003ff0:	cccccccd 	.word	0xcccccccd
 8003ff4:	40020000 	.word	0x40020000
 8003ff8:	bffdfbf8 	.word	0xbffdfbf8
 8003ffc:	40020400 	.word	0x40020400

08004000 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_DMA_Start_IT+0x20>
 800401c:	2302      	movs	r3, #2
 800401e:	e066      	b.n	80040ee <HAL_DMA_Start_IT+0xee>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d155      	bne.n	80040e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f970 	bl	800433e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 020e 	orr.w	r2, r2, #14
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e00f      	b.n	8004098 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 020a 	orr.w	r2, r2, #10
 8004096:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e005      	b.n	80040ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
 80040ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d00d      	beq.n	800412a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2204      	movs	r2, #4
 8004112:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e047      	b.n	80041ba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 020e 	bic.w	r2, r2, #14
 8004138:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004158:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f003 021f 	and.w	r2, r3, #31
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2101      	movs	r1, #1
 8004168:	fa01 f202 	lsl.w	r2, r1, r2
 800416c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004176:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00c      	beq.n	800419a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800418e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004198:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
    }
  }
  return status;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2204      	movs	r2, #4
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d026      	beq.n	800423e <HAL_DMA_IRQHandler+0x7a>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d021      	beq.n	800423e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d107      	bne.n	8004218 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0204 	bic.w	r2, r2, #4
 8004216:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	f003 021f 	and.w	r2, r3, #31
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2104      	movs	r1, #4
 8004226:	fa01 f202 	lsl.w	r2, r1, r2
 800422a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	2b00      	cmp	r3, #0
 8004232:	d071      	beq.n	8004318 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800423c:	e06c      	b.n	8004318 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2202      	movs	r2, #2
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d02e      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d029      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 020a 	bic.w	r2, r2, #10
 8004278:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f003 021f 	and.w	r2, r3, #31
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2102      	movs	r1, #2
 8004290:	fa01 f202 	lsl.w	r2, r1, r2
 8004294:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d038      	beq.n	8004318 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042ae:	e033      	b.n	8004318 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2208      	movs	r2, #8
 80042ba:	409a      	lsls	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02a      	beq.n	800431a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d025      	beq.n	800431a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 020e 	bic.w	r2, r2, #14
 80042dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f003 021f 	and.w	r2, r3, #31
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004318:	bf00      	nop
 800431a:	bf00      	nop
}
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004330:	b2db      	uxtb	r3, r3
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800433e:	b480      	push	{r7}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004354:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004366:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	f003 021f 	and.w	r2, r3, #31
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f202 	lsl.w	r2, r1, r2
 800437a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b10      	cmp	r3, #16
 800438a:	d108      	bne.n	800439e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800439c:	e007      	b.n	80043ae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	60da      	str	r2, [r3, #12]
}
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d802      	bhi.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e001      	b.n	80043da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80043d6:	4b15      	ldr	r3, [pc, #84]	; (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043d8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	3b08      	subs	r3, #8
 80043e6:	4a12      	ldr	r2, [pc, #72]	; (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	009a      	lsls	r2, r3, #2
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4413      	add	r3, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004406:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2201      	movs	r2, #1
 8004410:	409a      	lsls	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40020407 	.word	0x40020407
 8004428:	40020800 	.word	0x40020800
 800442c:	40020820 	.word	0x40020820
 8004430:	cccccccd 	.word	0xcccccccd
 8004434:	40020880 	.word	0x40020880

08004438 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	461a      	mov	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a08      	ldr	r2, [pc, #32]	; (800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800445a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3b01      	subs	r3, #1
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2201      	movs	r2, #1
 8004466:	409a      	lsls	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	1000823f 	.word	0x1000823f
 800447c:	40020940 	.word	0x40020940

08004480 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e147      	b.n	8004722 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc fc8c 	bl	8000dc4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0210 	bic.w	r2, r2, #16
 80044ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044bc:	f7fd fcd4 	bl	8001e68 <HAL_GetTick>
 80044c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044c2:	e012      	b.n	80044ea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044c4:	f7fd fcd0 	bl	8001e68 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b0a      	cmp	r3, #10
 80044d0:	d90b      	bls.n	80044ea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d6:	f043 0201 	orr.w	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2203      	movs	r2, #3
 80044e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e11b      	b.n	8004722 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d0e5      	beq.n	80044c4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004508:	f7fd fcae 	bl	8001e68 <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800450e:	e012      	b.n	8004536 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004510:	f7fd fcaa 	bl	8001e68 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b0a      	cmp	r3, #10
 800451c:	d90b      	bls.n	8004536 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	f043 0201 	orr.w	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2203      	movs	r2, #3
 800452e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e0f5      	b.n	8004722 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0e5      	beq.n	8004510 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0202 	orr.w	r2, r2, #2
 8004552:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a74      	ldr	r2, [pc, #464]	; (800472c <HAL_FDCAN_Init+0x2ac>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d103      	bne.n	8004566 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800455e:	4a74      	ldr	r2, [pc, #464]	; (8004730 <HAL_FDCAN_Init+0x2b0>)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7c1b      	ldrb	r3, [r3, #16]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d108      	bne.n	8004580 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699a      	ldr	r2, [r3, #24]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800457c:	619a      	str	r2, [r3, #24]
 800457e:	e007      	b.n	8004590 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800458e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7c5b      	ldrb	r3, [r3, #17]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d108      	bne.n	80045aa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045a6:	619a      	str	r2, [r3, #24]
 80045a8:	e007      	b.n	80045ba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699a      	ldr	r2, [r3, #24]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	7c9b      	ldrb	r3, [r3, #18]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d108      	bne.n	80045d4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045d0:	619a      	str	r2, [r3, #24]
 80045d2:	e007      	b.n	80045e4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699a      	ldr	r2, [r3, #24]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004608:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0210 	bic.w	r2, r2, #16
 8004618:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d108      	bne.n	8004634 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0204 	orr.w	r2, r2, #4
 8004630:	619a      	str	r2, [r3, #24]
 8004632:	e02c      	b.n	800468e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d028      	beq.n	800468e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d01c      	beq.n	800467e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004652:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0210 	orr.w	r2, r2, #16
 8004662:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d110      	bne.n	800468e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0220 	orr.w	r2, r2, #32
 800467a:	619a      	str	r2, [r3, #24]
 800467c:	e007      	b.n	800468e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0220 	orr.w	r2, r2, #32
 800468c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	3b01      	subs	r3, #1
 8004694:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	3b01      	subs	r3, #1
 800469c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800469e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046a6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046b6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046b8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c2:	d115      	bne.n	80046f0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	3b01      	subs	r3, #1
 80046d0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046d2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	3b01      	subs	r3, #1
 80046da:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046dc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	3b01      	subs	r3, #1
 80046e6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046ec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046ee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f83c 	bl	8004784 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40006400 	.word	0x40006400
 8004730:	40006500 	.word	0x40006500

08004734 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d110      	bne.n	800476a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e006      	b.n	8004778 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	f043 0204 	orr.w	r2, r3, #4
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800478c:	4b30      	ldr	r3, [pc, #192]	; (8004850 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800478e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d103      	bne.n	80047a2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80047a0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d103      	bne.n	80047b4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80047b2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	041a      	lsls	r2, r3, #16
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	061a      	lsls	r2, r3, #24
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e005      	b.n	8004836 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3304      	adds	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3f3      	bcc.n	800482a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	4000a400 	.word	0x4000a400
 8004854:	40006800 	.word	0x40006800
 8004858:	40006c00 	.word	0x40006c00

0800485c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800486a:	e15a      	b.n	8004b22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	2101      	movs	r1, #1
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	fa01 f303 	lsl.w	r3, r1, r3
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 814c 	beq.w	8004b1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b01      	cmp	r3, #1
 800488e:	d005      	beq.n	800489c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004898:	2b02      	cmp	r3, #2
 800489a:	d130      	bne.n	80048fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	2203      	movs	r2, #3
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d2:	2201      	movs	r2, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0201 	and.w	r2, r3, #1
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b03      	cmp	r3, #3
 8004908:	d017      	beq.n	800493a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	2203      	movs	r2, #3
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d123      	bne.n	800498e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	08da      	lsrs	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3208      	adds	r2, #8
 800494e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	220f      	movs	r2, #15
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4013      	ands	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	08da      	lsrs	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3208      	adds	r2, #8
 8004988:	6939      	ldr	r1, [r7, #16]
 800498a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	2203      	movs	r2, #3
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4013      	ands	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0203 	and.w	r2, r3, #3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80a6 	beq.w	8004b1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d0:	4b5b      	ldr	r3, [pc, #364]	; (8004b40 <HAL_GPIO_Init+0x2e4>)
 80049d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d4:	4a5a      	ldr	r2, [pc, #360]	; (8004b40 <HAL_GPIO_Init+0x2e4>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6613      	str	r3, [r2, #96]	; 0x60
 80049dc:	4b58      	ldr	r3, [pc, #352]	; (8004b40 <HAL_GPIO_Init+0x2e4>)
 80049de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049e8:	4a56      	ldr	r2, [pc, #344]	; (8004b44 <HAL_GPIO_Init+0x2e8>)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	3302      	adds	r3, #2
 80049f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	220f      	movs	r2, #15
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a12:	d01f      	beq.n	8004a54 <HAL_GPIO_Init+0x1f8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a4c      	ldr	r2, [pc, #304]	; (8004b48 <HAL_GPIO_Init+0x2ec>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d019      	beq.n	8004a50 <HAL_GPIO_Init+0x1f4>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a4b      	ldr	r2, [pc, #300]	; (8004b4c <HAL_GPIO_Init+0x2f0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d013      	beq.n	8004a4c <HAL_GPIO_Init+0x1f0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a4a      	ldr	r2, [pc, #296]	; (8004b50 <HAL_GPIO_Init+0x2f4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00d      	beq.n	8004a48 <HAL_GPIO_Init+0x1ec>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a49      	ldr	r2, [pc, #292]	; (8004b54 <HAL_GPIO_Init+0x2f8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d007      	beq.n	8004a44 <HAL_GPIO_Init+0x1e8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a48      	ldr	r2, [pc, #288]	; (8004b58 <HAL_GPIO_Init+0x2fc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <HAL_GPIO_Init+0x1e4>
 8004a3c:	2305      	movs	r3, #5
 8004a3e:	e00a      	b.n	8004a56 <HAL_GPIO_Init+0x1fa>
 8004a40:	2306      	movs	r3, #6
 8004a42:	e008      	b.n	8004a56 <HAL_GPIO_Init+0x1fa>
 8004a44:	2304      	movs	r3, #4
 8004a46:	e006      	b.n	8004a56 <HAL_GPIO_Init+0x1fa>
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e004      	b.n	8004a56 <HAL_GPIO_Init+0x1fa>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e002      	b.n	8004a56 <HAL_GPIO_Init+0x1fa>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <HAL_GPIO_Init+0x1fa>
 8004a54:	2300      	movs	r3, #0
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	f002 0203 	and.w	r2, r2, #3
 8004a5c:	0092      	lsls	r2, r2, #2
 8004a5e:	4093      	lsls	r3, r2
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a66:	4937      	ldr	r1, [pc, #220]	; (8004b44 <HAL_GPIO_Init+0x2e8>)
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a74:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <HAL_GPIO_Init+0x300>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4013      	ands	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a98:	4a30      	ldr	r2, [pc, #192]	; (8004b5c <HAL_GPIO_Init+0x300>)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a9e:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <HAL_GPIO_Init+0x300>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ac2:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <HAL_GPIO_Init+0x300>)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ac8:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <HAL_GPIO_Init+0x300>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <HAL_GPIO_Init+0x300>)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004af2:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <HAL_GPIO_Init+0x300>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b16:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <HAL_GPIO_Init+0x300>)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f47f ae9d 	bne.w	800486c <HAL_GPIO_Init+0x10>
  }
}
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40010000 	.word	0x40010000
 8004b48:	48000400 	.word	0x48000400
 8004b4c:	48000800 	.word	0x48000800
 8004b50:	48000c00 	.word	0x48000c00
 8004b54:	48001000 	.word	0x48001000
 8004b58:	48001400 	.word	0x48001400
 8004b5c:	40010400 	.word	0x40010400

08004b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b70:	787b      	ldrb	r3, [r7, #1]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b76:	887a      	ldrh	r2, [r7, #2]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b7c:	e002      	b.n	8004b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b7e:	887a      	ldrh	r2, [r7, #2]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	041a      	lsls	r2, r3, #16
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	43d9      	mvns	r1, r3
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	400b      	ands	r3, r1
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	619a      	str	r2, [r3, #24]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e08d      	b.n	8004cf2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc fb1e 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	; 0x24
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	e006      	b.n	8004c4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d108      	bne.n	8004c66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	e007      	b.n	8004c76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69d9      	ldr	r1, [r3, #28]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	68f9      	ldr	r1, [r7, #12]
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
  }
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00f      	beq.n	8004d70 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	f043 0201 	orr.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d6e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00f      	beq.n	8004d9a <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	f043 0208 	orr.w	r2, r3, #8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d98:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00f      	beq.n	8004dc4 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	f043 0202 	orr.w	r2, r3, #2
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 030b 	and.w	r3, r3, #11
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004dd4:	68f9      	ldr	r1, [r7, #12]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fbd6 	bl	8005588 <I2C_ITError>
  }
}
 8004ddc:	bf00      	nop
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	70fb      	strb	r3, [r7, #3]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <I2C_Slave_ISR_IT+0x24>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e0e2      	b.n	800504e <I2C_Slave_ISR_IT+0x1ea>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004ea4:	6939      	ldr	r1, [r7, #16]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f9b6 	bl	8005218 <I2C_ITSlaveCplt>
 8004eac:	e0ca      	b.n	8005044 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d04b      	beq.n	8004f50 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d046      	beq.n	8004f50 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d128      	bne.n	8004f1e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b28      	cmp	r3, #40	; 0x28
 8004ed6:	d108      	bne.n	8004eea <I2C_Slave_ISR_IT+0x86>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ede:	d104      	bne.n	8004eea <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ee0:	6939      	ldr	r1, [r7, #16]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fafc 	bl	80054e0 <I2C_ITListenCplt>
 8004ee8:	e031      	b.n	8004f4e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b29      	cmp	r3, #41	; 0x29
 8004ef4:	d10e      	bne.n	8004f14 <I2C_Slave_ISR_IT+0xb0>
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004efc:	d00a      	beq.n	8004f14 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2210      	movs	r2, #16
 8004f04:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fc55 	bl	80057b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f926 	bl	800515e <I2C_ITSlaveSeqCplt>
 8004f12:	e01c      	b.n	8004f4e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2210      	movs	r2, #16
 8004f1a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004f1c:	e08f      	b.n	800503e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2210      	movs	r2, #16
 8004f24:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2a:	f043 0204 	orr.w	r2, r3, #4
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <I2C_Slave_ISR_IT+0xdc>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f3e:	d17e      	bne.n	800503e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	4619      	mov	r1, r3
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fb1e 	bl	8005588 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004f4c:	e077      	b.n	800503e <I2C_Slave_ISR_IT+0x1da>
 8004f4e:	e076      	b.n	800503e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d02f      	beq.n	8004fba <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02a      	beq.n	8004fba <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d018      	beq.n	8004fa0 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d14b      	bne.n	8005042 <I2C_Slave_ISR_IT+0x1de>
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fb0:	d047      	beq.n	8005042 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f8d3 	bl	800515e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004fb8:	e043      	b.n	8005042 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d009      	beq.n	8004fd8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004fce:	6939      	ldr	r1, [r7, #16]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f840 	bl	8005056 <I2C_ITAddrCplt>
 8004fd6:	e035      	b.n	8005044 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d030      	beq.n	8005044 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d02b      	beq.n	8005044 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d018      	beq.n	8005028 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	781a      	ldrb	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	851a      	strh	r2, [r3, #40]	; 0x28
 8005026:	e00d      	b.n	8005044 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800502e:	d002      	beq.n	8005036 <I2C_Slave_ISR_IT+0x1d2>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f891 	bl	800515e <I2C_ITSlaveSeqCplt>
 800503c:	e002      	b.n	8005044 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005042:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800506c:	2b28      	cmp	r3, #40	; 0x28
 800506e:	d16a      	bne.n	8005146 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	b29b      	uxth	r3, r3
 800508a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800508e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800509c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80050aa:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d138      	bne.n	8005126 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80050b4:	897b      	ldrh	r3, [r7, #10]
 80050b6:	09db      	lsrs	r3, r3, #7
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	89bb      	ldrh	r3, [r7, #12]
 80050bc:	4053      	eors	r3, r2
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f003 0306 	and.w	r3, r3, #6
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d11c      	bne.n	8005102 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80050c8:	897b      	ldrh	r3, [r7, #10]
 80050ca:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d13b      	bne.n	8005156 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2208      	movs	r2, #8
 80050ea:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050f4:	89ba      	ldrh	r2, [r7, #12]
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fe86 	bl	8004e0c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005100:	e029      	b.n	8005156 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005102:	893b      	ldrh	r3, [r7, #8]
 8005104:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fb95 	bl	800583a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005118:	89ba      	ldrh	r2, [r7, #12]
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	4619      	mov	r1, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff fe74 	bl	8004e0c <HAL_I2C_AddrCallback>
}
 8005124:	e017      	b.n	8005156 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fb85 	bl	800583a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005138:	89ba      	ldrh	r2, [r7, #12]
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fe64 	bl	8004e0c <HAL_I2C_AddrCallback>
}
 8005144:	e007      	b.n	8005156 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2208      	movs	r2, #8
 800514c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e00c      	b.n	80051ac <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051aa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b29      	cmp	r3, #41	; 0x29
 80051b6:	d112      	bne.n	80051de <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2228      	movs	r2, #40	; 0x28
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2221      	movs	r2, #33	; 0x21
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051c6:	2101      	movs	r1, #1
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fb36 	bl	800583a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fe04 	bl	8004de4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80051dc:	e017      	b.n	800520e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b2a      	cmp	r3, #42	; 0x2a
 80051e8:	d111      	bne.n	800520e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2228      	movs	r2, #40	; 0x28
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2222      	movs	r2, #34	; 0x22
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80051f8:	2102      	movs	r1, #2
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fb1d 	bl	800583a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fdf5 	bl	8004df8 <HAL_I2C_SlaveRxCpltCallback>
}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800523a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2220      	movs	r2, #32
 8005242:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005244:	7afb      	ldrb	r3, [r7, #11]
 8005246:	2b21      	cmp	r3, #33	; 0x21
 8005248:	d002      	beq.n	8005250 <I2C_ITSlaveCplt+0x38>
 800524a:	7afb      	ldrb	r3, [r7, #11]
 800524c:	2b29      	cmp	r3, #41	; 0x29
 800524e:	d108      	bne.n	8005262 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005250:	f248 0101 	movw	r1, #32769	; 0x8001
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 faf0 	bl	800583a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2221      	movs	r2, #33	; 0x21
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
 8005260:	e019      	b.n	8005296 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005262:	7afb      	ldrb	r3, [r7, #11]
 8005264:	2b22      	cmp	r3, #34	; 0x22
 8005266:	d002      	beq.n	800526e <I2C_ITSlaveCplt+0x56>
 8005268:	7afb      	ldrb	r3, [r7, #11]
 800526a:	2b2a      	cmp	r3, #42	; 0x2a
 800526c:	d108      	bne.n	8005280 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800526e:	f248 0102 	movw	r1, #32770	; 0x8002
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fae1 	bl	800583a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2222      	movs	r2, #34	; 0x22
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
 800527e:	e00a      	b.n	8005296 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005280:	7afb      	ldrb	r3, [r7, #11]
 8005282:	2b28      	cmp	r3, #40	; 0x28
 8005284:	d107      	bne.n	8005296 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005286:	f248 0103 	movw	r1, #32771	; 0x8003
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fad5 	bl	800583a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052a4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b89      	ldr	r3, [pc, #548]	; (80054d8 <I2C_ITSlaveCplt+0x2c0>)
 80052b2:	400b      	ands	r3, r1
 80052b4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa7d 	bl	80057b6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d013      	beq.n	80052ee <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01f      	beq.n	800531e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052ec:	e017      	b.n	800531e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d012      	beq.n	800531e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005306:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d020      	beq.n	800536a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005378:	f043 0204 	orr.w	r2, r3, #4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	d049      	beq.n	800541e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005390:	2b00      	cmp	r3, #0
 8005392:	d044      	beq.n	800541e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d128      	bne.n	80053f0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b28      	cmp	r3, #40	; 0x28
 80053a8:	d108      	bne.n	80053bc <I2C_ITSlaveCplt+0x1a4>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053b0:	d104      	bne.n	80053bc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f893 	bl	80054e0 <I2C_ITListenCplt>
 80053ba:	e030      	b.n	800541e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b29      	cmp	r3, #41	; 0x29
 80053c6:	d10e      	bne.n	80053e6 <I2C_ITSlaveCplt+0x1ce>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ce:	d00a      	beq.n	80053e6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2210      	movs	r2, #16
 80053d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f9ec 	bl	80057b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff febd 	bl	800515e <I2C_ITSlaveSeqCplt>
 80053e4:	e01b      	b.n	800541e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2210      	movs	r2, #16
 80053ec:	61da      	str	r2, [r3, #28]
 80053ee:	e016      	b.n	800541e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2210      	movs	r2, #16
 80053f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fc:	f043 0204 	orr.w	r2, r3, #4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <I2C_ITSlaveCplt+0x1fa>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005410:	d105      	bne.n	800541e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	4619      	mov	r1, r3
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f8b5 	bl	8005588 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8a4 	bl	8005588 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b28      	cmp	r3, #40	; 0x28
 800544a:	d141      	bne.n	80054d0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800544c:	6979      	ldr	r1, [r7, #20]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f846 	bl	80054e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005454:	e03c      	b.n	80054d0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800545e:	d014      	beq.n	800548a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fe7c 	bl	800515e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1c      	ldr	r2, [pc, #112]	; (80054dc <I2C_ITSlaveCplt+0x2c4>)
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fcd0 	bl	8004e28 <HAL_I2C_ListenCpltCallback>
}
 8005488:	e022      	b.n	80054d0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b22      	cmp	r3, #34	; 0x22
 8005494:	d10e      	bne.n	80054b4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fca3 	bl	8004df8 <HAL_I2C_SlaveRxCpltCallback>
}
 80054b2:	e00d      	b.n	80054d0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fc8a 	bl	8004de4 <HAL_I2C_SlaveTxCpltCallback>
}
 80054d0:	bf00      	nop
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	fe00e800 	.word	0xfe00e800
 80054dc:	ffff0000 	.word	0xffff0000

080054e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a25      	ldr	r2, [pc, #148]	; (8005584 <I2C_ITListenCplt+0xa4>)
 80054ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d022      	beq.n	800555c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d012      	beq.n	800555c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005554:	f043 0204 	orr.w	r2, r3, #4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800555c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f96a 	bl	800583a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2210      	movs	r2, #16
 800556c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fc56 	bl	8004e28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	ffff0000 	.word	0xffff0000

08005588 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005598:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a6d      	ldr	r2, [pc, #436]	; (800575c <I2C_ITError+0x1d4>)
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b28      	cmp	r3, #40	; 0x28
 80055be:	d005      	beq.n	80055cc <I2C_ITError+0x44>
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b29      	cmp	r3, #41	; 0x29
 80055c4:	d002      	beq.n	80055cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b2a      	cmp	r3, #42	; 0x2a
 80055ca:	d10b      	bne.n	80055e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055cc:	2103      	movs	r1, #3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f933 	bl	800583a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2228      	movs	r2, #40	; 0x28
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a60      	ldr	r2, [pc, #384]	; (8005760 <I2C_ITError+0x1d8>)
 80055e0:	635a      	str	r2, [r3, #52]	; 0x34
 80055e2:	e030      	b.n	8005646 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055e4:	f248 0103 	movw	r1, #32771	; 0x8003
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f926 	bl	800583a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f8e1 	bl	80057b6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b60      	cmp	r3, #96	; 0x60
 80055fe:	d01f      	beq.n	8005640 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d114      	bne.n	8005640 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b10      	cmp	r3, #16
 8005622:	d109      	bne.n	8005638 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2210      	movs	r2, #16
 800562a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	f043 0204 	orr.w	r2, r3, #4
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2220      	movs	r2, #32
 800563e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d039      	beq.n	80056c8 <I2C_ITError+0x140>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b11      	cmp	r3, #17
 8005658:	d002      	beq.n	8005660 <I2C_ITError+0xd8>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b21      	cmp	r3, #33	; 0x21
 800565e:	d133      	bne.n	80056c8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566e:	d107      	bne.n	8005680 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800567e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe fe4c 	bl	8004322 <HAL_DMA_GetState>
 800568a:	4603      	mov	r3, r0
 800568c:	2b01      	cmp	r3, #1
 800568e:	d017      	beq.n	80056c0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	4a33      	ldr	r2, [pc, #204]	; (8005764 <I2C_ITError+0x1dc>)
 8005696:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fd26 	bl	80040f6 <HAL_DMA_Abort_IT>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d04d      	beq.n	800574c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056ba:	4610      	mov	r0, r2
 80056bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056be:	e045      	b.n	800574c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f851 	bl	8005768 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056c6:	e041      	b.n	800574c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d039      	beq.n	8005744 <I2C_ITError+0x1bc>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b12      	cmp	r3, #18
 80056d4:	d002      	beq.n	80056dc <I2C_ITError+0x154>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b22      	cmp	r3, #34	; 0x22
 80056da:	d133      	bne.n	8005744 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ea:	d107      	bne.n	80056fc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fe0e 	bl	8004322 <HAL_DMA_GetState>
 8005706:	4603      	mov	r3, r0
 8005708:	2b01      	cmp	r3, #1
 800570a:	d017      	beq.n	800573c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	4a14      	ldr	r2, [pc, #80]	; (8005764 <I2C_ITError+0x1dc>)
 8005712:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fce8 	bl	80040f6 <HAL_DMA_Abort_IT>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005736:	4610      	mov	r0, r2
 8005738:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800573a:	e009      	b.n	8005750 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f813 	bl	8005768 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005742:	e005      	b.n	8005750 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f80f 	bl	8005768 <I2C_TreatErrorCallback>
  }
}
 800574a:	e002      	b.n	8005752 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005750:	bf00      	nop
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	ffff0000 	.word	0xffff0000
 8005760:	08004e65 	.word	0x08004e65
 8005764:	080057ff 	.word	0x080057ff

08005768 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b60      	cmp	r3, #96	; 0x60
 800577a:	d10e      	bne.n	800579a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fb5c 	bl	8004e50 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005798:	e009      	b.n	80057ae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fb47 	bl	8004e3c <HAL_I2C_ErrorCallback>
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d103      	bne.n	80057d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2200      	movs	r2, #0
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d007      	beq.n	80057f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0201 	orr.w	r2, r2, #1
 80057f0:	619a      	str	r2, [r3, #24]
  }
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	2200      	movs	r2, #0
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	2200      	movs	r2, #0
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7ff ff9b 	bl	8005768 <I2C_TreatErrorCallback>
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800584a:	887b      	ldrh	r3, [r7, #2]
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00f      	beq.n	8005874 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800585a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005868:	2b28      	cmp	r3, #40	; 0x28
 800586a:	d003      	beq.n	8005874 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005872:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00f      	beq.n	800589e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005884:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005892:	2b28      	cmp	r3, #40	; 0x28
 8005894:	d003      	beq.n	800589e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800589c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800589e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da03      	bge.n	80058ae <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058ae:	887b      	ldrh	r3, [r7, #2]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d103      	bne.n	80058bc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80058ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058bc:	887b      	ldrh	r3, [r7, #2]
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d103      	bne.n	80058ca <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f043 0320 	orr.w	r3, r3, #32
 80058c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d103      	bne.n	80058d8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	43da      	mvns	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	400a      	ands	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b20      	cmp	r3, #32
 800590a:	d138      	bne.n	800597e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005916:	2302      	movs	r3, #2
 8005918:	e032      	b.n	8005980 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2224      	movs	r2, #36	; 0x24
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005948:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6819      	ldr	r1, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800597e:	2302      	movs	r3, #2
  }
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d139      	bne.n	8005a16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e033      	b.n	8005a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2224      	movs	r2, #36	; 0x24
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0201 	bic.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0201 	orr.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e000      	b.n	8005a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
  }
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d141      	bne.n	8005ab6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a32:	4b4b      	ldr	r3, [pc, #300]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3e:	d131      	bne.n	8005aa4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a40:	4b47      	ldr	r3, [pc, #284]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a46:	4a46      	ldr	r2, [pc, #280]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a50:	4b43      	ldr	r3, [pc, #268]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a58:	4a41      	ldr	r2, [pc, #260]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a60:	4b40      	ldr	r3, [pc, #256]	; (8005b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2232      	movs	r2, #50	; 0x32
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	4a3f      	ldr	r2, [pc, #252]	; (8005b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	0c9b      	lsrs	r3, r3, #18
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a76:	e002      	b.n	8005a7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a7e:	4b38      	ldr	r3, [pc, #224]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8a:	d102      	bne.n	8005a92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f2      	bne.n	8005a78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a92:	4b33      	ldr	r3, [pc, #204]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9e:	d158      	bne.n	8005b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e057      	b.n	8005b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005aa4:	4b2e      	ldr	r3, [pc, #184]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aaa:	4a2d      	ldr	r2, [pc, #180]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ab4:	e04d      	b.n	8005b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005abc:	d141      	bne.n	8005b42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005abe:	4b28      	ldr	r3, [pc, #160]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aca:	d131      	bne.n	8005b30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005acc:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ad2:	4a23      	ldr	r2, [pc, #140]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005adc:	4b20      	ldr	r3, [pc, #128]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ae4:	4a1e      	ldr	r2, [pc, #120]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aec:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2232      	movs	r2, #50	; 0x32
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	0c9b      	lsrs	r3, r3, #18
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b02:	e002      	b.n	8005b0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b0a:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b16:	d102      	bne.n	8005b1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f2      	bne.n	8005b04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b1e:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2a:	d112      	bne.n	8005b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e011      	b.n	8005b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b36:	4a0a      	ldr	r2, [pc, #40]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b40:	e007      	b.n	8005b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b42:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b4a:	4a05      	ldr	r2, [pc, #20]	; (8005b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	40007000 	.word	0x40007000
 8005b64:	20000000 	.word	0x20000000
 8005b68:	431bde83 	.word	0x431bde83

08005b6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4a04      	ldr	r2, [pc, #16]	; (8005b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b7a:	6093      	str	r3, [r2, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40007000 	.word	0x40007000

08005b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e2fe      	b.n	800619c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d075      	beq.n	8005c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005baa:	4b97      	ldr	r3, [pc, #604]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 030c 	and.w	r3, r3, #12
 8005bb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bb4:	4b94      	ldr	r3, [pc, #592]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	d102      	bne.n	8005bca <HAL_RCC_OscConfig+0x3e>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d002      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x44>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d10b      	bne.n	8005be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd0:	4b8d      	ldr	r3, [pc, #564]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d05b      	beq.n	8005c94 <HAL_RCC_OscConfig+0x108>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d157      	bne.n	8005c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e2d9      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf0:	d106      	bne.n	8005c00 <HAL_RCC_OscConfig+0x74>
 8005bf2:	4b85      	ldr	r3, [pc, #532]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a84      	ldr	r2, [pc, #528]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	e01d      	b.n	8005c3c <HAL_RCC_OscConfig+0xb0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCC_OscConfig+0x98>
 8005c0a:	4b7f      	ldr	r3, [pc, #508]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a7e      	ldr	r2, [pc, #504]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	4b7c      	ldr	r3, [pc, #496]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a7b      	ldr	r2, [pc, #492]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e00b      	b.n	8005c3c <HAL_RCC_OscConfig+0xb0>
 8005c24:	4b78      	ldr	r3, [pc, #480]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a77      	ldr	r2, [pc, #476]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	4b75      	ldr	r3, [pc, #468]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a74      	ldr	r2, [pc, #464]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d013      	beq.n	8005c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fc f910 	bl	8001e68 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c4c:	f7fc f90c 	bl	8001e68 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	; 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e29e      	b.n	800619c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c5e:	4b6a      	ldr	r3, [pc, #424]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0xc0>
 8005c6a:	e014      	b.n	8005c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fc f8fc 	bl	8001e68 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c74:	f7fc f8f8 	bl	8001e68 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b64      	cmp	r3, #100	; 0x64
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e28a      	b.n	800619c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c86:	4b60      	ldr	r3, [pc, #384]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0xe8>
 8005c92:	e000      	b.n	8005c96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d075      	beq.n	8005d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca2:	4b59      	ldr	r3, [pc, #356]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cac:	4b56      	ldr	r3, [pc, #344]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	2b0c      	cmp	r3, #12
 8005cba:	d102      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x136>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d002      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x13c>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d11f      	bne.n	8005d08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cc8:	4b4f      	ldr	r3, [pc, #316]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x154>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e25d      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce0:	4b49      	ldr	r3, [pc, #292]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	061b      	lsls	r3, r3, #24
 8005cee:	4946      	ldr	r1, [pc, #280]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005cf4:	4b45      	ldr	r3, [pc, #276]	; (8005e0c <HAL_RCC_OscConfig+0x280>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fb fce9 	bl	80016d0 <HAL_InitTick>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d043      	beq.n	8005d8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e249      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d023      	beq.n	8005d58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d10:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a3c      	ldr	r2, [pc, #240]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fc f8a4 	bl	8001e68 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d24:	f7fc f8a0 	bl	8001e68 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e232      	b.n	800619c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d36:	4b34      	ldr	r3, [pc, #208]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d42:	4b31      	ldr	r3, [pc, #196]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	061b      	lsls	r3, r3, #24
 8005d50:	492d      	ldr	r1, [pc, #180]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	604b      	str	r3, [r1, #4]
 8005d56:	e01a      	b.n	8005d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d58:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2a      	ldr	r2, [pc, #168]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fc f880 	bl	8001e68 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d6c:	f7fc f87c 	bl	8001e68 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e20e      	b.n	800619c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d7e:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f0      	bne.n	8005d6c <HAL_RCC_OscConfig+0x1e0>
 8005d8a:	e000      	b.n	8005d8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d041      	beq.n	8005e1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01c      	beq.n	8005ddc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005da2:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da8:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db2:	f7fc f859 	bl	8001e68 <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dba:	f7fc f855 	bl	8001e68 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e1e7      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dcc:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0ef      	beq.n	8005dba <HAL_RCC_OscConfig+0x22e>
 8005dda:	e020      	b.n	8005e1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de2:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005de4:	f023 0301 	bic.w	r3, r3, #1
 8005de8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dec:	f7fc f83c 	bl	8001e68 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005df2:	e00d      	b.n	8005e10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df4:	f7fc f838 	bl	8001e68 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d906      	bls.n	8005e10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e1ca      	b.n	800619c <HAL_RCC_OscConfig+0x610>
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e10:	4b8c      	ldr	r3, [pc, #560]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1ea      	bne.n	8005df4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 80a6 	beq.w	8005f78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e30:	4b84      	ldr	r3, [pc, #528]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_OscConfig+0x2b4>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <HAL_RCC_OscConfig+0x2b6>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00d      	beq.n	8005e62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e46:	4b7f      	ldr	r3, [pc, #508]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	4a7e      	ldr	r2, [pc, #504]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e50:	6593      	str	r3, [r2, #88]	; 0x58
 8005e52:	4b7c      	ldr	r3, [pc, #496]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e62:	4b79      	ldr	r3, [pc, #484]	; (8006048 <HAL_RCC_OscConfig+0x4bc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d118      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e6e:	4b76      	ldr	r3, [pc, #472]	; (8006048 <HAL_RCC_OscConfig+0x4bc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a75      	ldr	r2, [pc, #468]	; (8006048 <HAL_RCC_OscConfig+0x4bc>)
 8005e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e7a:	f7fb fff5 	bl	8001e68 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e82:	f7fb fff1 	bl	8001e68 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e183      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e94:	4b6c      	ldr	r3, [pc, #432]	; (8006048 <HAL_RCC_OscConfig+0x4bc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d108      	bne.n	8005eba <HAL_RCC_OscConfig+0x32e>
 8005ea8:	4b66      	ldr	r3, [pc, #408]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eae:	4a65      	ldr	r2, [pc, #404]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eb8:	e024      	b.n	8005f04 <HAL_RCC_OscConfig+0x378>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b05      	cmp	r3, #5
 8005ec0:	d110      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x358>
 8005ec2:	4b60      	ldr	r3, [pc, #384]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	4a5e      	ldr	r2, [pc, #376]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005eca:	f043 0304 	orr.w	r3, r3, #4
 8005ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ed2:	4b5c      	ldr	r3, [pc, #368]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed8:	4a5a      	ldr	r2, [pc, #360]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ee2:	e00f      	b.n	8005f04 <HAL_RCC_OscConfig+0x378>
 8005ee4:	4b57      	ldr	r3, [pc, #348]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eea:	4a56      	ldr	r2, [pc, #344]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005eec:	f023 0301 	bic.w	r3, r3, #1
 8005ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ef4:	4b53      	ldr	r3, [pc, #332]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efa:	4a52      	ldr	r2, [pc, #328]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005efc:	f023 0304 	bic.w	r3, r3, #4
 8005f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d016      	beq.n	8005f3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0c:	f7fb ffac 	bl	8001e68 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f12:	e00a      	b.n	8005f2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f14:	f7fb ffa8 	bl	8001e68 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e138      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f2a:	4b46      	ldr	r3, [pc, #280]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0ed      	beq.n	8005f14 <HAL_RCC_OscConfig+0x388>
 8005f38:	e015      	b.n	8005f66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3a:	f7fb ff95 	bl	8001e68 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f40:	e00a      	b.n	8005f58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f42:	f7fb ff91 	bl	8001e68 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e121      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f58:	4b3a      	ldr	r3, [pc, #232]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1ed      	bne.n	8005f42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f66:	7ffb      	ldrb	r3, [r7, #31]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d105      	bne.n	8005f78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f6c:	4b35      	ldr	r3, [pc, #212]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	4a34      	ldr	r2, [pc, #208]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d03c      	beq.n	8005ffe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01c      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f8c:	4b2d      	ldr	r3, [pc, #180]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f92:	4a2c      	ldr	r2, [pc, #176]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9c:	f7fb ff64 	bl	8001e68 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fa4:	f7fb ff60 	bl	8001e68 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e0f2      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fb6:	4b23      	ldr	r3, [pc, #140]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ef      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x418>
 8005fc4:	e01b      	b.n	8005ffe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fc6:	4b1f      	ldr	r3, [pc, #124]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd6:	f7fb ff47 	bl	8001e68 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fde:	f7fb ff43 	bl	8001e68 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e0d5      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ff0:	4b14      	ldr	r3, [pc, #80]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8005ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1ef      	bne.n	8005fde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80c9 	beq.w	800619a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006008:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 030c 	and.w	r3, r3, #12
 8006010:	2b0c      	cmp	r3, #12
 8006012:	f000 8083 	beq.w	800611c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d15e      	bne.n	80060dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a08      	ldr	r2, [pc, #32]	; (8006044 <HAL_RCC_OscConfig+0x4b8>)
 8006024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602a:	f7fb ff1d 	bl	8001e68 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006030:	e00c      	b.n	800604c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006032:	f7fb ff19 	bl	8001e68 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d905      	bls.n	800604c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0ab      	b.n	800619c <HAL_RCC_OscConfig+0x610>
 8006044:	40021000 	.word	0x40021000
 8006048:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800604c:	4b55      	ldr	r3, [pc, #340]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1ec      	bne.n	8006032 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006058:	4b52      	ldr	r3, [pc, #328]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	4b52      	ldr	r3, [pc, #328]	; (80061a8 <HAL_RCC_OscConfig+0x61c>)
 800605e:	4013      	ands	r3, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6a11      	ldr	r1, [r2, #32]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006068:	3a01      	subs	r2, #1
 800606a:	0112      	lsls	r2, r2, #4
 800606c:	4311      	orrs	r1, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006072:	0212      	lsls	r2, r2, #8
 8006074:	4311      	orrs	r1, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800607a:	0852      	lsrs	r2, r2, #1
 800607c:	3a01      	subs	r2, #1
 800607e:	0552      	lsls	r2, r2, #21
 8006080:	4311      	orrs	r1, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006086:	0852      	lsrs	r2, r2, #1
 8006088:	3a01      	subs	r2, #1
 800608a:	0652      	lsls	r2, r2, #25
 800608c:	4311      	orrs	r1, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006092:	06d2      	lsls	r2, r2, #27
 8006094:	430a      	orrs	r2, r1
 8006096:	4943      	ldr	r1, [pc, #268]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 8006098:	4313      	orrs	r3, r2
 800609a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800609c:	4b41      	ldr	r3, [pc, #260]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a40      	ldr	r2, [pc, #256]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 80060a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060a8:	4b3e      	ldr	r3, [pc, #248]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4a3d      	ldr	r2, [pc, #244]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 80060ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fb fed8 	bl	8001e68 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fb fed4 	bl	8001e68 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e066      	b.n	800619c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ce:	4b35      	ldr	r3, [pc, #212]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x530>
 80060da:	e05e      	b.n	800619a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060dc:	4b31      	ldr	r3, [pc, #196]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a30      	ldr	r2, [pc, #192]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 80060e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fb febe 	bl	8001e68 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f0:	f7fb feba 	bl	8001e68 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e04c      	b.n	800619c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006102:	4b28      	ldr	r3, [pc, #160]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800610e:	4b25      	ldr	r3, [pc, #148]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	4924      	ldr	r1, [pc, #144]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 8006114:	4b25      	ldr	r3, [pc, #148]	; (80061ac <HAL_RCC_OscConfig+0x620>)
 8006116:	4013      	ands	r3, r2
 8006118:	60cb      	str	r3, [r1, #12]
 800611a:	e03e      	b.n	800619a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e039      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006128:	4b1e      	ldr	r3, [pc, #120]	; (80061a4 <HAL_RCC_OscConfig+0x618>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f003 0203 	and.w	r2, r3, #3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	429a      	cmp	r2, r3
 800613a:	d12c      	bne.n	8006196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	3b01      	subs	r3, #1
 8006148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614a:	429a      	cmp	r2, r3
 800614c:	d123      	bne.n	8006196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800615a:	429a      	cmp	r2, r3
 800615c:	d11b      	bne.n	8006196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d113      	bne.n	8006196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	3b01      	subs	r3, #1
 800617c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800617e:	429a      	cmp	r2, r3
 8006180:	d109      	bne.n	8006196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	3b01      	subs	r3, #1
 8006190:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d001      	beq.n	800619a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000
 80061a8:	019f800c 	.word	0x019f800c
 80061ac:	feeefffc 	.word	0xfeeefffc

080061b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e11e      	b.n	8006406 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061c8:	4b91      	ldr	r3, [pc, #580]	; (8006410 <HAL_RCC_ClockConfig+0x260>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d910      	bls.n	80061f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d6:	4b8e      	ldr	r3, [pc, #568]	; (8006410 <HAL_RCC_ClockConfig+0x260>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f023 020f 	bic.w	r2, r3, #15
 80061de:	498c      	ldr	r1, [pc, #560]	; (8006410 <HAL_RCC_ClockConfig+0x260>)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e6:	4b8a      	ldr	r3, [pc, #552]	; (8006410 <HAL_RCC_ClockConfig+0x260>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d001      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e106      	b.n	8006406 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d073      	beq.n	80062ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d129      	bne.n	8006260 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800620c:	4b81      	ldr	r3, [pc, #516]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0f4      	b.n	8006406 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800621c:	f000 f9d0 	bl	80065c0 <RCC_GetSysClockFreqFromPLLSource>
 8006220:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	4a7c      	ldr	r2, [pc, #496]	; (8006418 <HAL_RCC_ClockConfig+0x268>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d93f      	bls.n	80062aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800622a:	4b7a      	ldr	r3, [pc, #488]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800623e:	2b00      	cmp	r3, #0
 8006240:	d033      	beq.n	80062aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006246:	2b00      	cmp	r3, #0
 8006248:	d12f      	bne.n	80062aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800624a:	4b72      	ldr	r3, [pc, #456]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006252:	4a70      	ldr	r2, [pc, #448]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 8006254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006258:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e024      	b.n	80062aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d107      	bne.n	8006278 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006268:	4b6a      	ldr	r3, [pc, #424]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d109      	bne.n	8006288 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0c6      	b.n	8006406 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006278:	4b66      	ldr	r3, [pc, #408]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e0be      	b.n	8006406 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006288:	f000 f8ce 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 800628c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	4a61      	ldr	r2, [pc, #388]	; (8006418 <HAL_RCC_ClockConfig+0x268>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d909      	bls.n	80062aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006296:	4b5f      	ldr	r3, [pc, #380]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800629e:	4a5d      	ldr	r2, [pc, #372]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062aa:	4b5a      	ldr	r3, [pc, #360]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f023 0203 	bic.w	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	4957      	ldr	r1, [pc, #348]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062bc:	f7fb fdd4 	bl	8001e68 <HAL_GetTick>
 80062c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c2:	e00a      	b.n	80062da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c4:	f7fb fdd0 	bl	8001e68 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e095      	b.n	8006406 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062da:	4b4e      	ldr	r3, [pc, #312]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 020c 	and.w	r2, r3, #12
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d1eb      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d023      	beq.n	8006340 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006304:	4b43      	ldr	r3, [pc, #268]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	4a42      	ldr	r2, [pc, #264]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800630a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800630e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800631c:	4b3d      	ldr	r3, [pc, #244]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006324:	4a3b      	ldr	r2, [pc, #236]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 8006326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800632a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800632c:	4b39      	ldr	r3, [pc, #228]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4936      	ldr	r1, [pc, #216]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800633a:	4313      	orrs	r3, r2
 800633c:	608b      	str	r3, [r1, #8]
 800633e:	e008      	b.n	8006352 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2b80      	cmp	r3, #128	; 0x80
 8006344:	d105      	bne.n	8006352 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006346:	4b33      	ldr	r3, [pc, #204]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	4a32      	ldr	r2, [pc, #200]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 800634c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006350:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006352:	4b2f      	ldr	r3, [pc, #188]	; (8006410 <HAL_RCC_ClockConfig+0x260>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d21d      	bcs.n	800639c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006360:	4b2b      	ldr	r3, [pc, #172]	; (8006410 <HAL_RCC_ClockConfig+0x260>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 020f 	bic.w	r2, r3, #15
 8006368:	4929      	ldr	r1, [pc, #164]	; (8006410 <HAL_RCC_ClockConfig+0x260>)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	4313      	orrs	r3, r2
 800636e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006370:	f7fb fd7a 	bl	8001e68 <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006376:	e00a      	b.n	800638e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006378:	f7fb fd76 	bl	8001e68 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f241 3288 	movw	r2, #5000	; 0x1388
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e03b      	b.n	8006406 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638e:	4b20      	ldr	r3, [pc, #128]	; (8006410 <HAL_RCC_ClockConfig+0x260>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d1ed      	bne.n	8006378 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063a8:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4917      	ldr	r1, [pc, #92]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063c6:	4b13      	ldr	r3, [pc, #76]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	490f      	ldr	r1, [pc, #60]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063da:	f000 f825 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 80063de:	4602      	mov	r2, r0
 80063e0:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <HAL_RCC_ClockConfig+0x264>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	091b      	lsrs	r3, r3, #4
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	490c      	ldr	r1, [pc, #48]	; (800641c <HAL_RCC_ClockConfig+0x26c>)
 80063ec:	5ccb      	ldrb	r3, [r1, r3]
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <HAL_RCC_ClockConfig+0x270>)
 80063f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80063fa:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <HAL_RCC_ClockConfig+0x274>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fb f966 	bl	80016d0 <HAL_InitTick>
 8006404:	4603      	mov	r3, r0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40022000 	.word	0x40022000
 8006414:	40021000 	.word	0x40021000
 8006418:	04c4b400 	.word	0x04c4b400
 800641c:	0800a3d4 	.word	0x0800a3d4
 8006420:	20000000 	.word	0x20000000
 8006424:	20000004 	.word	0x20000004

08006428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800642e:	4b2c      	ldr	r3, [pc, #176]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 030c 	and.w	r3, r3, #12
 8006436:	2b04      	cmp	r3, #4
 8006438:	d102      	bne.n	8006440 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800643a:	4b2a      	ldr	r3, [pc, #168]	; (80064e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	e047      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006440:	4b27      	ldr	r3, [pc, #156]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b08      	cmp	r3, #8
 800644a:	d102      	bne.n	8006452 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800644c:	4b26      	ldr	r3, [pc, #152]	; (80064e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	e03e      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006452:	4b23      	ldr	r3, [pc, #140]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 030c 	and.w	r3, r3, #12
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d136      	bne.n	80064cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800645e:	4b20      	ldr	r3, [pc, #128]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006468:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	091b      	lsrs	r3, r3, #4
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	3301      	adds	r3, #1
 8006474:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b03      	cmp	r3, #3
 800647a:	d10c      	bne.n	8006496 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800647c:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	4a16      	ldr	r2, [pc, #88]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006486:	68d2      	ldr	r2, [r2, #12]
 8006488:	0a12      	lsrs	r2, r2, #8
 800648a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800648e:	fb02 f303 	mul.w	r3, r2, r3
 8006492:	617b      	str	r3, [r7, #20]
      break;
 8006494:	e00c      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006496:	4a13      	ldr	r2, [pc, #76]	; (80064e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	4a10      	ldr	r2, [pc, #64]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064a0:	68d2      	ldr	r2, [r2, #12]
 80064a2:	0a12      	lsrs	r2, r2, #8
 80064a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064a8:	fb02 f303 	mul.w	r3, r2, r3
 80064ac:	617b      	str	r3, [r7, #20]
      break;
 80064ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	0e5b      	lsrs	r3, r3, #25
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	3301      	adds	r3, #1
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e001      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80064d0:	693b      	ldr	r3, [r7, #16]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40021000 	.word	0x40021000
 80064e4:	00f42400 	.word	0x00f42400
 80064e8:	016e3600 	.word	0x016e3600

080064ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f0:	4b03      	ldr	r3, [pc, #12]	; (8006500 <HAL_RCC_GetHCLKFreq+0x14>)
 80064f2:	681b      	ldr	r3, [r3, #0]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000000 	.word	0x20000000

08006504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006508:	f7ff fff0 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 800650c:	4602      	mov	r2, r0
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	4904      	ldr	r1, [pc, #16]	; (800652c <HAL_RCC_GetPCLK1Freq+0x28>)
 800651a:	5ccb      	ldrb	r3, [r1, r3]
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40021000 	.word	0x40021000
 800652c:	0800a3e4 	.word	0x0800a3e4

08006530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006534:	f7ff ffda 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 8006538:	4602      	mov	r2, r0
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	0adb      	lsrs	r3, r3, #11
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	4904      	ldr	r1, [pc, #16]	; (8006558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006546:	5ccb      	ldrb	r3, [r1, r3]
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006550:	4618      	mov	r0, r3
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40021000 	.word	0x40021000
 8006558:	0800a3e4 	.word	0x0800a3e4

0800655c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	220f      	movs	r2, #15
 800656a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800656c:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <HAL_RCC_GetClockConfig+0x5c>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0203 	and.w	r2, r3, #3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <HAL_RCC_GetClockConfig+0x5c>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	08db      	lsrs	r3, r3, #3
 8006596:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800659e:	4b07      	ldr	r3, [pc, #28]	; (80065bc <HAL_RCC_GetClockConfig+0x60>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 020f 	and.w	r2, r3, #15
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	601a      	str	r2, [r3, #0]
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
 80065bc:	40022000 	.word	0x40022000

080065c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065c6:	4b1e      	ldr	r3, [pc, #120]	; (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065d0:	4b1b      	ldr	r3, [pc, #108]	; (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	3301      	adds	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d10c      	bne.n	80065fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065e4:	4a17      	ldr	r2, [pc, #92]	; (8006644 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	4a14      	ldr	r2, [pc, #80]	; (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065ee:	68d2      	ldr	r2, [r2, #12]
 80065f0:	0a12      	lsrs	r2, r2, #8
 80065f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	617b      	str	r3, [r7, #20]
    break;
 80065fc:	e00c      	b.n	8006618 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065fe:	4a12      	ldr	r2, [pc, #72]	; (8006648 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	4a0e      	ldr	r2, [pc, #56]	; (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006608:	68d2      	ldr	r2, [r2, #12]
 800660a:	0a12      	lsrs	r2, r2, #8
 800660c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006610:	fb02 f303 	mul.w	r3, r2, r3
 8006614:	617b      	str	r3, [r7, #20]
    break;
 8006616:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	0e5b      	lsrs	r3, r3, #25
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	3301      	adds	r3, #1
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006630:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006632:	687b      	ldr	r3, [r7, #4]
}
 8006634:	4618      	mov	r0, r3
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40021000 	.word	0x40021000
 8006644:	016e3600 	.word	0x016e3600
 8006648:	00f42400 	.word	0x00f42400

0800664c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006654:	2300      	movs	r3, #0
 8006656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006658:	2300      	movs	r3, #0
 800665a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 8098 	beq.w	800679a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800666a:	2300      	movs	r3, #0
 800666c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800666e:	4b43      	ldr	r3, [pc, #268]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800667a:	4b40      	ldr	r3, [pc, #256]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800667c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667e:	4a3f      	ldr	r2, [pc, #252]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006684:	6593      	str	r3, [r2, #88]	; 0x58
 8006686:	4b3d      	ldr	r3, [pc, #244]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006692:	2301      	movs	r3, #1
 8006694:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006696:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a39      	ldr	r2, [pc, #228]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066a2:	f7fb fbe1 	bl	8001e68 <HAL_GetTick>
 80066a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066a8:	e009      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066aa:	f7fb fbdd 	bl	8001e68 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d902      	bls.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	74fb      	strb	r3, [r7, #19]
        break;
 80066bc:	e005      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066be:	4b30      	ldr	r3, [pc, #192]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0ef      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80066ca:	7cfb      	ldrb	r3, [r7, #19]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d159      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066d0:	4b2a      	ldr	r3, [pc, #168]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01e      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d019      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066ec:	4b23      	ldr	r3, [pc, #140]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066f8:	4b20      	ldr	r3, [pc, #128]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fe:	4a1f      	ldr	r2, [pc, #124]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800670a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670e:	4a1b      	ldr	r2, [pc, #108]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006718:	4a18      	ldr	r2, [pc, #96]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fb fb9d 	bl	8001e68 <HAL_GetTick>
 800672e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006730:	e00b      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fb fb99 	bl	8001e68 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006740:	4293      	cmp	r3, r2
 8006742:	d902      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	74fb      	strb	r3, [r7, #19]
            break;
 8006748:	e006      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800674a:	4b0c      	ldr	r3, [pc, #48]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800674c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0ec      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006758:	7cfb      	ldrb	r3, [r7, #19]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800675e:	4b07      	ldr	r3, [pc, #28]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676c:	4903      	ldr	r1, [pc, #12]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006774:	e008      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006776:	7cfb      	ldrb	r3, [r7, #19]
 8006778:	74bb      	strb	r3, [r7, #18]
 800677a:	e005      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800677c:	40021000 	.word	0x40021000
 8006780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006784:	7cfb      	ldrb	r3, [r7, #19]
 8006786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006788:	7c7b      	ldrb	r3, [r7, #17]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800678e:	4ba7      	ldr	r3, [pc, #668]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006792:	4aa6      	ldr	r2, [pc, #664]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006798:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067a6:	4ba1      	ldr	r3, [pc, #644]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f023 0203 	bic.w	r2, r3, #3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	499d      	ldr	r1, [pc, #628]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067c8:	4b98      	ldr	r3, [pc, #608]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ce:	f023 020c 	bic.w	r2, r3, #12
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	4995      	ldr	r1, [pc, #596]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067ea:	4b90      	ldr	r3, [pc, #576]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	498c      	ldr	r1, [pc, #560]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800680c:	4b87      	ldr	r3, [pc, #540]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	4984      	ldr	r1, [pc, #528]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800682e:	4b7f      	ldr	r3, [pc, #508]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	497b      	ldr	r1, [pc, #492]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006850:	4b76      	ldr	r3, [pc, #472]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	4973      	ldr	r1, [pc, #460]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006872:	4b6e      	ldr	r3, [pc, #440]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	496a      	ldr	r1, [pc, #424]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006894:	4b65      	ldr	r3, [pc, #404]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	4962      	ldr	r1, [pc, #392]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068b6:	4b5d      	ldr	r3, [pc, #372]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	4959      	ldr	r1, [pc, #356]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068d8:	4b54      	ldr	r3, [pc, #336]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068de:	f023 0203 	bic.w	r2, r3, #3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	4951      	ldr	r1, [pc, #324]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068fa:	4b4c      	ldr	r3, [pc, #304]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006900:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	4948      	ldr	r1, [pc, #288]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006918:	2b00      	cmp	r3, #0
 800691a:	d015      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800691c:	4b43      	ldr	r3, [pc, #268]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	4940      	ldr	r1, [pc, #256]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693a:	d105      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800693c:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a3a      	ldr	r2, [pc, #232]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006946:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006950:	2b00      	cmp	r3, #0
 8006952:	d015      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006954:	4b35      	ldr	r3, [pc, #212]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006962:	4932      	ldr	r1, [pc, #200]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006972:	d105      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006974:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a2c      	ldr	r2, [pc, #176]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800697e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d015      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800698c:	4b27      	ldr	r3, [pc, #156]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800698e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006992:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	4924      	ldr	r1, [pc, #144]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069aa:	d105      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ac:	4b1f      	ldr	r3, [pc, #124]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	4a1e      	ldr	r2, [pc, #120]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d015      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069c4:	4b19      	ldr	r3, [pc, #100]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	4916      	ldr	r1, [pc, #88]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e2:	d105      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069e4:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d019      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069fc:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	4908      	ldr	r1, [pc, #32]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a1a:	d109      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a1c:	4b03      	ldr	r3, [pc, #12]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4a02      	ldr	r2, [pc, #8]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a26:	60d3      	str	r3, [r2, #12]
 8006a28:	e002      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a2a:	bf00      	nop
 8006a2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d015      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a3c:	4b29      	ldr	r3, [pc, #164]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4a:	4926      	ldr	r1, [pc, #152]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a5c:	4b21      	ldr	r3, [pc, #132]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	4a20      	ldr	r2, [pc, #128]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d015      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006a74:	4b1b      	ldr	r3, [pc, #108]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a82:	4918      	ldr	r1, [pc, #96]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a92:	d105      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a94:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	4a12      	ldr	r2, [pc, #72]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d015      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006aac:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aba:	490a      	ldr	r1, [pc, #40]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aca:	d105      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006acc:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4a04      	ldr	r2, [pc, #16]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ad6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ad8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40021000 	.word	0x40021000

08006ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e09d      	b.n	8006c36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d108      	bne.n	8006b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b0a:	d009      	beq.n	8006b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	61da      	str	r2, [r3, #28]
 8006b12:	e005      	b.n	8006b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fa fd5c 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b60:	d902      	bls.n	8006b68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	e002      	b.n	8006b6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006b76:	d007      	beq.n	8006b88 <HAL_SPI_Init+0xa0>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b80:	d002      	beq.n	8006b88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bca:	ea42 0103 	orr.w	r1, r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	0c1b      	lsrs	r3, r3, #16
 8006be4:	f003 0204 	and.w	r2, r3, #4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c04:	ea42 0103 	orr.w	r1, r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e049      	b.n	8006ce4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f841 	bl	8006cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f000 fb5b 	bl	8007338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d001      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e054      	b.n	8006dc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a26      	ldr	r2, [pc, #152]	; (8006dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d022      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d42:	d01d      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a22      	ldr	r2, [pc, #136]	; (8006dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d018      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a21      	ldr	r2, [pc, #132]	; (8006dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d013      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1f      	ldr	r2, [pc, #124]	; (8006ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00e      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1e      	ldr	r2, [pc, #120]	; (8006de0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d009      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1b      	ldr	r2, [pc, #108]	; (8006de8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d115      	bne.n	8006dac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	4b19      	ldr	r3, [pc, #100]	; (8006dec <HAL_TIM_Base_Start_IT+0xec>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b06      	cmp	r3, #6
 8006d90:	d015      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0xbe>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d98:	d011      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0201 	orr.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006daa:	e008      	b.n	8006dbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e000      	b.n	8006dc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40000800 	.word	0x40000800
 8006ddc:	40000c00 	.word	0x40000c00
 8006de0:	40013400 	.word	0x40013400
 8006de4:	40014000 	.word	0x40014000
 8006de8:	40015000 	.word	0x40015000
 8006dec:	00010007 	.word	0x00010007

08006df0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e049      	b.n	8006e96 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fa fdb2 	bl	8001980 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	f000 fa82 	bl	8007338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d020      	beq.n	8006f02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d01b      	beq.n	8006f02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f06f 0202 	mvn.w	r2, #2
 8006ed2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	f003 0303 	and.w	r3, r3, #3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7f9 ffc5 	bl	8000e78 <HAL_TIM_IC_CaptureCallback>
 8006eee:	e005      	b.n	8006efc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fa03 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa0a 	bl	8007310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d020      	beq.n	8006f4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01b      	beq.n	8006f4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f06f 0204 	mvn.w	r2, #4
 8006f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7f9 ff9f 	bl	8000e78 <HAL_TIM_IC_CaptureCallback>
 8006f3a:	e005      	b.n	8006f48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9dd 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f9e4 	bl	8007310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d020      	beq.n	8006f9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01b      	beq.n	8006f9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f06f 0208 	mvn.w	r2, #8
 8006f6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7f9 ff79 	bl	8000e78 <HAL_TIM_IC_CaptureCallback>
 8006f86:	e005      	b.n	8006f94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f9b7 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f9be 	bl	8007310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d020      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01b      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f06f 0210 	mvn.w	r2, #16
 8006fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2208      	movs	r2, #8
 8006fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7f9 ff53 	bl	8000e78 <HAL_TIM_IC_CaptureCallback>
 8006fd2:	e005      	b.n	8006fe0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f991 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f998 	bl	8007310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00c      	beq.n	800700a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f06f 0201 	mvn.w	r2, #1
 8007002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fa faa1 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00c      	beq.n	8007038 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fbfe 	bl	8007834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00c      	beq.n	800705c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fbf6 	bl	8007848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00c      	beq.n	8007080 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f952 	bl	8007324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00c      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0220 	mvn.w	r2, #32
 800709c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fbbe 	bl	8007820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fbca 	bl	800785c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00c      	beq.n	80070ec <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80070e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fbc2 	bl	8007870 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fbba 	bl	8007884 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00c      	beq.n	8007134 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d007      	beq.n	8007134 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800712c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fbb2 	bl	8007898 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007156:	2302      	movs	r3, #2
 8007158:	e088      	b.n	800726c <HAL_TIM_IC_ConfigChannel+0x130>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d11b      	bne.n	80071a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007178:	f000 f992 	bl	80074a0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 020c 	bic.w	r2, r2, #12
 800718a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6999      	ldr	r1, [r3, #24]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	619a      	str	r2, [r3, #24]
 800719e:	e060      	b.n	8007262 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d11c      	bne.n	80071e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80071b6:	f000 f9e7 	bl	8007588 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699a      	ldr	r2, [r3, #24]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6999      	ldr	r1, [r3, #24]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	021a      	lsls	r2, r3, #8
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	619a      	str	r2, [r3, #24]
 80071de:	e040      	b.n	8007262 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d11b      	bne.n	800721e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80071f6:	f000 fa04 	bl	8007602 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 020c 	bic.w	r2, r2, #12
 8007208:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69d9      	ldr	r1, [r3, #28]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	61da      	str	r2, [r3, #28]
 800721c:	e021      	b.n	8007262 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b0c      	cmp	r3, #12
 8007222:	d11c      	bne.n	800725e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007234:	f000 fa21 	bl	800767a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69da      	ldr	r2, [r3, #28]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007246:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69d9      	ldr	r1, [r3, #28]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	021a      	lsls	r2, r3, #8
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	61da      	str	r2, [r3, #28]
 800725c:	e001      	b.n	8007262 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b0c      	cmp	r3, #12
 8007286:	d831      	bhi.n	80072ec <HAL_TIM_ReadCapturedValue+0x78>
 8007288:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <HAL_TIM_ReadCapturedValue+0x1c>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072c5 	.word	0x080072c5
 8007294:	080072ed 	.word	0x080072ed
 8007298:	080072ed 	.word	0x080072ed
 800729c:	080072ed 	.word	0x080072ed
 80072a0:	080072cf 	.word	0x080072cf
 80072a4:	080072ed 	.word	0x080072ed
 80072a8:	080072ed 	.word	0x080072ed
 80072ac:	080072ed 	.word	0x080072ed
 80072b0:	080072d9 	.word	0x080072d9
 80072b4:	080072ed 	.word	0x080072ed
 80072b8:	080072ed 	.word	0x080072ed
 80072bc:	080072ed 	.word	0x080072ed
 80072c0:	080072e3 	.word	0x080072e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	60fb      	str	r3, [r7, #12]

      break;
 80072cc:	e00f      	b.n	80072ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	60fb      	str	r3, [r7, #12]

      break;
 80072d6:	e00a      	b.n	80072ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072de:	60fb      	str	r3, [r7, #12]

      break;
 80072e0:	e005      	b.n	80072ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	60fb      	str	r3, [r7, #12]

      break;
 80072ea:	e000      	b.n	80072ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80072ec:	bf00      	nop
  }

  return tmpreg;
 80072ee:	68fb      	ldr	r3, [r7, #12]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a4c      	ldr	r2, [pc, #304]	; (800747c <TIM_Base_SetConfig+0x144>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d017      	beq.n	8007380 <TIM_Base_SetConfig+0x48>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007356:	d013      	beq.n	8007380 <TIM_Base_SetConfig+0x48>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a49      	ldr	r2, [pc, #292]	; (8007480 <TIM_Base_SetConfig+0x148>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00f      	beq.n	8007380 <TIM_Base_SetConfig+0x48>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a48      	ldr	r2, [pc, #288]	; (8007484 <TIM_Base_SetConfig+0x14c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00b      	beq.n	8007380 <TIM_Base_SetConfig+0x48>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a47      	ldr	r2, [pc, #284]	; (8007488 <TIM_Base_SetConfig+0x150>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d007      	beq.n	8007380 <TIM_Base_SetConfig+0x48>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a46      	ldr	r2, [pc, #280]	; (800748c <TIM_Base_SetConfig+0x154>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_Base_SetConfig+0x48>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a45      	ldr	r2, [pc, #276]	; (8007490 <TIM_Base_SetConfig+0x158>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d108      	bne.n	8007392 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a39      	ldr	r2, [pc, #228]	; (800747c <TIM_Base_SetConfig+0x144>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d023      	beq.n	80073e2 <TIM_Base_SetConfig+0xaa>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a0:	d01f      	beq.n	80073e2 <TIM_Base_SetConfig+0xaa>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a36      	ldr	r2, [pc, #216]	; (8007480 <TIM_Base_SetConfig+0x148>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d01b      	beq.n	80073e2 <TIM_Base_SetConfig+0xaa>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a35      	ldr	r2, [pc, #212]	; (8007484 <TIM_Base_SetConfig+0x14c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d017      	beq.n	80073e2 <TIM_Base_SetConfig+0xaa>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a34      	ldr	r2, [pc, #208]	; (8007488 <TIM_Base_SetConfig+0x150>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d013      	beq.n	80073e2 <TIM_Base_SetConfig+0xaa>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a33      	ldr	r2, [pc, #204]	; (800748c <TIM_Base_SetConfig+0x154>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00f      	beq.n	80073e2 <TIM_Base_SetConfig+0xaa>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a33      	ldr	r2, [pc, #204]	; (8007494 <TIM_Base_SetConfig+0x15c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00b      	beq.n	80073e2 <TIM_Base_SetConfig+0xaa>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a32      	ldr	r2, [pc, #200]	; (8007498 <TIM_Base_SetConfig+0x160>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d007      	beq.n	80073e2 <TIM_Base_SetConfig+0xaa>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a31      	ldr	r2, [pc, #196]	; (800749c <TIM_Base_SetConfig+0x164>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d003      	beq.n	80073e2 <TIM_Base_SetConfig+0xaa>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a2c      	ldr	r2, [pc, #176]	; (8007490 <TIM_Base_SetConfig+0x158>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d108      	bne.n	80073f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a18      	ldr	r2, [pc, #96]	; (800747c <TIM_Base_SetConfig+0x144>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <TIM_Base_SetConfig+0x110>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a1a      	ldr	r2, [pc, #104]	; (800748c <TIM_Base_SetConfig+0x154>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00f      	beq.n	8007448 <TIM_Base_SetConfig+0x110>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1a      	ldr	r2, [pc, #104]	; (8007494 <TIM_Base_SetConfig+0x15c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d00b      	beq.n	8007448 <TIM_Base_SetConfig+0x110>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a19      	ldr	r2, [pc, #100]	; (8007498 <TIM_Base_SetConfig+0x160>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d007      	beq.n	8007448 <TIM_Base_SetConfig+0x110>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a18      	ldr	r2, [pc, #96]	; (800749c <TIM_Base_SetConfig+0x164>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d003      	beq.n	8007448 <TIM_Base_SetConfig+0x110>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a13      	ldr	r2, [pc, #76]	; (8007490 <TIM_Base_SetConfig+0x158>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d103      	bne.n	8007450 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b01      	cmp	r3, #1
 8007460:	d105      	bne.n	800746e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f023 0201 	bic.w	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	611a      	str	r2, [r3, #16]
  }
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40000400 	.word	0x40000400
 8007484:	40000800 	.word	0x40000800
 8007488:	40000c00 	.word	0x40000c00
 800748c:	40013400 	.word	0x40013400
 8007490:	40015000 	.word	0x40015000
 8007494:	40014000 	.word	0x40014000
 8007498:	40014400 	.word	0x40014400
 800749c:	40014800 	.word	0x40014800

080074a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f023 0201 	bic.w	r2, r3, #1
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a28      	ldr	r2, [pc, #160]	; (800756c <TIM_TI1_SetConfig+0xcc>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01b      	beq.n	8007506 <TIM_TI1_SetConfig+0x66>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d4:	d017      	beq.n	8007506 <TIM_TI1_SetConfig+0x66>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4a25      	ldr	r2, [pc, #148]	; (8007570 <TIM_TI1_SetConfig+0xd0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <TIM_TI1_SetConfig+0x66>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4a24      	ldr	r2, [pc, #144]	; (8007574 <TIM_TI1_SetConfig+0xd4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00f      	beq.n	8007506 <TIM_TI1_SetConfig+0x66>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4a23      	ldr	r2, [pc, #140]	; (8007578 <TIM_TI1_SetConfig+0xd8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00b      	beq.n	8007506 <TIM_TI1_SetConfig+0x66>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4a22      	ldr	r2, [pc, #136]	; (800757c <TIM_TI1_SetConfig+0xdc>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d007      	beq.n	8007506 <TIM_TI1_SetConfig+0x66>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4a21      	ldr	r2, [pc, #132]	; (8007580 <TIM_TI1_SetConfig+0xe0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d003      	beq.n	8007506 <TIM_TI1_SetConfig+0x66>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4a20      	ldr	r2, [pc, #128]	; (8007584 <TIM_TI1_SetConfig+0xe4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d101      	bne.n	800750a <TIM_TI1_SetConfig+0x6a>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <TIM_TI1_SetConfig+0x6c>
 800750a:	2300      	movs	r3, #0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d008      	beq.n	8007522 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	e003      	b.n	800752a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f043 0301 	orr.w	r3, r3, #1
 8007528:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	b2db      	uxtb	r3, r3
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	4313      	orrs	r3, r2
 800753c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f023 030a 	bic.w	r3, r3, #10
 8007544:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f003 030a 	and.w	r3, r3, #10
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	621a      	str	r2, [r3, #32]
}
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40012c00 	.word	0x40012c00
 8007570:	40000400 	.word	0x40000400
 8007574:	40000800 	.word	0x40000800
 8007578:	40000c00 	.word	0x40000c00
 800757c:	40013400 	.word	0x40013400
 8007580:	40014000 	.word	0x40014000
 8007584:	40015000 	.word	0x40015000

08007588 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	f023 0210 	bic.w	r2, r3, #16
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	021b      	lsls	r3, r3, #8
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	4313      	orrs	r3, r2
 80075be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	031b      	lsls	r3, r3, #12
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	621a      	str	r2, [r3, #32]
}
 80075f6:	bf00      	nop
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007602:	b480      	push	{r7}
 8007604:	b087      	sub	sp, #28
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4313      	orrs	r3, r2
 8007636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800763e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	b2db      	uxtb	r3, r3
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007652:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	621a      	str	r2, [r3, #32]
}
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800767a:	b480      	push	{r7}
 800767c:	b087      	sub	sp, #28
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	031b      	lsls	r3, r3, #12
 80076be:	b29b      	uxth	r3, r3
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80076cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	031b      	lsls	r3, r3, #12
 80076d2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	621a      	str	r2, [r3, #32]
}
 80076e8:	bf00      	nop
 80076ea:	371c      	adds	r7, #28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007708:	2302      	movs	r3, #2
 800770a:	e074      	b.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a34      	ldr	r2, [pc, #208]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d009      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a33      	ldr	r2, [pc, #204]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d004      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a31      	ldr	r2, [pc, #196]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d108      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007750:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a21      	ldr	r2, [pc, #132]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d022      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800778c:	d01d      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1f      	ldr	r2, [pc, #124]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d018      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1d      	ldr	r2, [pc, #116]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d013      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1c      	ldr	r2, [pc, #112]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00e      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a15      	ldr	r2, [pc, #84]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d009      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a18      	ldr	r2, [pc, #96]	; (800781c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a11      	ldr	r2, [pc, #68]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d10c      	bne.n	80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00
 8007808:	40013400 	.word	0x40013400
 800780c:	40015000 	.word	0x40015000
 8007810:	40000400 	.word	0x40000400
 8007814:	40000800 	.word	0x40000800
 8007818:	40000c00 	.word	0x40000c00
 800781c:	40014000 	.word	0x40014000

08007820 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e042      	b.n	8007944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d106      	bne.n	80078d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7fa f8e9 	bl	8001aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2224      	movs	r2, #36	; 0x24
 80078da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0201 	bic.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fb24 	bl	8007f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f825 	bl	800794c <UART_SetConfig>
 8007902:	4603      	mov	r3, r0
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e01b      	b.n	8007944 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800791a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800792a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fba3 	bl	8008088 <UART_CheckIdleState>
 8007942:	4603      	mov	r3, r0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800794c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007950:	b08c      	sub	sp, #48	; 0x30
 8007952:	af00      	add	r7, sp, #0
 8007954:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	431a      	orrs	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	431a      	orrs	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	4313      	orrs	r3, r2
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4baa      	ldr	r3, [pc, #680]	; (8007c24 <UART_SetConfig+0x2d8>)
 800797c:	4013      	ands	r3, r2
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007984:	430b      	orrs	r3, r1
 8007986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a9f      	ldr	r2, [pc, #636]	; (8007c28 <UART_SetConfig+0x2dc>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b4:	4313      	orrs	r3, r2
 80079b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80079c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079cc:	430b      	orrs	r3, r1
 80079ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	f023 010f 	bic.w	r1, r3, #15
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a90      	ldr	r2, [pc, #576]	; (8007c2c <UART_SetConfig+0x2e0>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d125      	bne.n	8007a3c <UART_SetConfig+0xf0>
 80079f0:	4b8f      	ldr	r3, [pc, #572]	; (8007c30 <UART_SetConfig+0x2e4>)
 80079f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d81a      	bhi.n	8007a34 <UART_SetConfig+0xe8>
 80079fe:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <UART_SetConfig+0xb8>)
 8007a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a04:	08007a15 	.word	0x08007a15
 8007a08:	08007a25 	.word	0x08007a25
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a2d 	.word	0x08007a2d
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1a:	e116      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a22:	e112      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007a24:	2304      	movs	r3, #4
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a2a:	e10e      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a32:	e10a      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007a34:	2310      	movs	r3, #16
 8007a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a3a:	e106      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a7c      	ldr	r2, [pc, #496]	; (8007c34 <UART_SetConfig+0x2e8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d138      	bne.n	8007ab8 <UART_SetConfig+0x16c>
 8007a46:	4b7a      	ldr	r3, [pc, #488]	; (8007c30 <UART_SetConfig+0x2e4>)
 8007a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a4c:	f003 030c 	and.w	r3, r3, #12
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	d82d      	bhi.n	8007ab0 <UART_SetConfig+0x164>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <UART_SetConfig+0x110>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a91 	.word	0x08007a91
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	08007ab1 	.word	0x08007ab1
 8007a68:	08007ab1 	.word	0x08007ab1
 8007a6c:	08007aa1 	.word	0x08007aa1
 8007a70:	08007ab1 	.word	0x08007ab1
 8007a74:	08007ab1 	.word	0x08007ab1
 8007a78:	08007ab1 	.word	0x08007ab1
 8007a7c:	08007a99 	.word	0x08007a99
 8007a80:	08007ab1 	.word	0x08007ab1
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	08007ab1 	.word	0x08007ab1
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a96:	e0d8      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a9e:	e0d4      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa6:	e0d0      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aae:	e0cc      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ab6:	e0c8      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a5e      	ldr	r2, [pc, #376]	; (8007c38 <UART_SetConfig+0x2ec>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d125      	bne.n	8007b0e <UART_SetConfig+0x1c2>
 8007ac2:	4b5b      	ldr	r3, [pc, #364]	; (8007c30 <UART_SetConfig+0x2e4>)
 8007ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007acc:	2b30      	cmp	r3, #48	; 0x30
 8007ace:	d016      	beq.n	8007afe <UART_SetConfig+0x1b2>
 8007ad0:	2b30      	cmp	r3, #48	; 0x30
 8007ad2:	d818      	bhi.n	8007b06 <UART_SetConfig+0x1ba>
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d00a      	beq.n	8007aee <UART_SetConfig+0x1a2>
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d814      	bhi.n	8007b06 <UART_SetConfig+0x1ba>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <UART_SetConfig+0x19a>
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	d008      	beq.n	8007af6 <UART_SetConfig+0x1aa>
 8007ae4:	e00f      	b.n	8007b06 <UART_SetConfig+0x1ba>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aec:	e0ad      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007aee:	2302      	movs	r3, #2
 8007af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af4:	e0a9      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007af6:	2304      	movs	r3, #4
 8007af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afc:	e0a5      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007afe:	2308      	movs	r3, #8
 8007b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b04:	e0a1      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007b06:	2310      	movs	r3, #16
 8007b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b0c:	e09d      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a4a      	ldr	r2, [pc, #296]	; (8007c3c <UART_SetConfig+0x2f0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d125      	bne.n	8007b64 <UART_SetConfig+0x218>
 8007b18:	4b45      	ldr	r3, [pc, #276]	; (8007c30 <UART_SetConfig+0x2e4>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b22:	2bc0      	cmp	r3, #192	; 0xc0
 8007b24:	d016      	beq.n	8007b54 <UART_SetConfig+0x208>
 8007b26:	2bc0      	cmp	r3, #192	; 0xc0
 8007b28:	d818      	bhi.n	8007b5c <UART_SetConfig+0x210>
 8007b2a:	2b80      	cmp	r3, #128	; 0x80
 8007b2c:	d00a      	beq.n	8007b44 <UART_SetConfig+0x1f8>
 8007b2e:	2b80      	cmp	r3, #128	; 0x80
 8007b30:	d814      	bhi.n	8007b5c <UART_SetConfig+0x210>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <UART_SetConfig+0x1f0>
 8007b36:	2b40      	cmp	r3, #64	; 0x40
 8007b38:	d008      	beq.n	8007b4c <UART_SetConfig+0x200>
 8007b3a:	e00f      	b.n	8007b5c <UART_SetConfig+0x210>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b42:	e082      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007b44:	2302      	movs	r3, #2
 8007b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b4a:	e07e      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b52:	e07a      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5a:	e076      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b62:	e072      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a35      	ldr	r2, [pc, #212]	; (8007c40 <UART_SetConfig+0x2f4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d12a      	bne.n	8007bc4 <UART_SetConfig+0x278>
 8007b6e:	4b30      	ldr	r3, [pc, #192]	; (8007c30 <UART_SetConfig+0x2e4>)
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b7c:	d01a      	beq.n	8007bb4 <UART_SetConfig+0x268>
 8007b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b82:	d81b      	bhi.n	8007bbc <UART_SetConfig+0x270>
 8007b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b88:	d00c      	beq.n	8007ba4 <UART_SetConfig+0x258>
 8007b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b8e:	d815      	bhi.n	8007bbc <UART_SetConfig+0x270>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <UART_SetConfig+0x250>
 8007b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b98:	d008      	beq.n	8007bac <UART_SetConfig+0x260>
 8007b9a:	e00f      	b.n	8007bbc <UART_SetConfig+0x270>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ba2:	e052      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007baa:	e04e      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007bac:	2304      	movs	r3, #4
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb2:	e04a      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007bb4:	2308      	movs	r3, #8
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bba:	e046      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc2:	e042      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <UART_SetConfig+0x2dc>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d13a      	bne.n	8007c44 <UART_SetConfig+0x2f8>
 8007bce:	4b18      	ldr	r3, [pc, #96]	; (8007c30 <UART_SetConfig+0x2e4>)
 8007bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bdc:	d01a      	beq.n	8007c14 <UART_SetConfig+0x2c8>
 8007bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007be2:	d81b      	bhi.n	8007c1c <UART_SetConfig+0x2d0>
 8007be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007be8:	d00c      	beq.n	8007c04 <UART_SetConfig+0x2b8>
 8007bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bee:	d815      	bhi.n	8007c1c <UART_SetConfig+0x2d0>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <UART_SetConfig+0x2b0>
 8007bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bf8:	d008      	beq.n	8007c0c <UART_SetConfig+0x2c0>
 8007bfa:	e00f      	b.n	8007c1c <UART_SetConfig+0x2d0>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c02:	e022      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007c04:	2302      	movs	r3, #2
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0a:	e01e      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c12:	e01a      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007c14:	2308      	movs	r3, #8
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1a:	e016      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c22:	e012      	b.n	8007c4a <UART_SetConfig+0x2fe>
 8007c24:	cfff69f3 	.word	0xcfff69f3
 8007c28:	40008000 	.word	0x40008000
 8007c2c:	40013800 	.word	0x40013800
 8007c30:	40021000 	.word	0x40021000
 8007c34:	40004400 	.word	0x40004400
 8007c38:	40004800 	.word	0x40004800
 8007c3c:	40004c00 	.word	0x40004c00
 8007c40:	40005000 	.word	0x40005000
 8007c44:	2310      	movs	r3, #16
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4aae      	ldr	r2, [pc, #696]	; (8007f08 <UART_SetConfig+0x5bc>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	f040 8097 	bne.w	8007d84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d823      	bhi.n	8007ca6 <UART_SetConfig+0x35a>
 8007c5e:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <UART_SetConfig+0x318>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007c89 	.word	0x08007c89
 8007c68:	08007ca7 	.word	0x08007ca7
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007ca7 	.word	0x08007ca7
 8007c74:	08007c97 	.word	0x08007c97
 8007c78:	08007ca7 	.word	0x08007ca7
 8007c7c:	08007ca7 	.word	0x08007ca7
 8007c80:	08007ca7 	.word	0x08007ca7
 8007c84:	08007c9f 	.word	0x08007c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c88:	f7fe fc3c 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 8007c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c8e:	e010      	b.n	8007cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c90:	4b9e      	ldr	r3, [pc, #632]	; (8007f0c <UART_SetConfig+0x5c0>)
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c94:	e00d      	b.n	8007cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c96:	f7fe fbc7 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8007c9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c9c:	e009      	b.n	8007cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ca4:	e005      	b.n	8007cb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007cb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 8130 	beq.w	8007f1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	4a94      	ldr	r2, [pc, #592]	; (8007f10 <UART_SetConfig+0x5c4>)
 8007cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	4413      	add	r3, r2
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d305      	bcc.n	8007cea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d903      	bls.n	8007cf2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007cf0:	e113      	b.n	8007f1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	60bb      	str	r3, [r7, #8]
 8007cf8:	60fa      	str	r2, [r7, #12]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	4a84      	ldr	r2, [pc, #528]	; (8007f10 <UART_SetConfig+0x5c4>)
 8007d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2200      	movs	r2, #0
 8007d08:	603b      	str	r3, [r7, #0]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d14:	f7f8 fba0 	bl	8000458 <__aeabi_uldivmod>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4619      	mov	r1, r3
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	020b      	lsls	r3, r1, #8
 8007d2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d2e:	0202      	lsls	r2, r0, #8
 8007d30:	6979      	ldr	r1, [r7, #20]
 8007d32:	6849      	ldr	r1, [r1, #4]
 8007d34:	0849      	lsrs	r1, r1, #1
 8007d36:	2000      	movs	r0, #0
 8007d38:	460c      	mov	r4, r1
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	eb12 0804 	adds.w	r8, r2, r4
 8007d40:	eb43 0905 	adc.w	r9, r3, r5
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	469a      	mov	sl, r3
 8007d4c:	4693      	mov	fp, r2
 8007d4e:	4652      	mov	r2, sl
 8007d50:	465b      	mov	r3, fp
 8007d52:	4640      	mov	r0, r8
 8007d54:	4649      	mov	r1, r9
 8007d56:	f7f8 fb7f 	bl	8000458 <__aeabi_uldivmod>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4613      	mov	r3, r2
 8007d60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d68:	d308      	bcc.n	8007d7c <UART_SetConfig+0x430>
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d70:	d204      	bcs.n	8007d7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6a3a      	ldr	r2, [r7, #32]
 8007d78:	60da      	str	r2, [r3, #12]
 8007d7a:	e0ce      	b.n	8007f1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d82:	e0ca      	b.n	8007f1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d8c:	d166      	bne.n	8007e5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d827      	bhi.n	8007de6 <UART_SetConfig+0x49a>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <UART_SetConfig+0x450>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007dc1 	.word	0x08007dc1
 8007da0:	08007dc9 	.word	0x08007dc9
 8007da4:	08007dd1 	.word	0x08007dd1
 8007da8:	08007de7 	.word	0x08007de7
 8007dac:	08007dd7 	.word	0x08007dd7
 8007db0:	08007de7 	.word	0x08007de7
 8007db4:	08007de7 	.word	0x08007de7
 8007db8:	08007de7 	.word	0x08007de7
 8007dbc:	08007ddf 	.word	0x08007ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc0:	f7fe fba0 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 8007dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dc6:	e014      	b.n	8007df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dc8:	f7fe fbb2 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 8007dcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dce:	e010      	b.n	8007df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dd0:	4b4e      	ldr	r3, [pc, #312]	; (8007f0c <UART_SetConfig+0x5c0>)
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dd4:	e00d      	b.n	8007df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dd6:	f7fe fb27 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8007dda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ddc:	e009      	b.n	8007df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007de4:	e005      	b.n	8007df2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8090 	beq.w	8007f1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	4a44      	ldr	r2, [pc, #272]	; (8007f10 <UART_SetConfig+0x5c4>)
 8007e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e04:	461a      	mov	r2, r3
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e0c:	005a      	lsls	r2, r3, #1
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	085b      	lsrs	r3, r3, #1
 8007e14:	441a      	add	r2, r3
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	d916      	bls.n	8007e54 <UART_SetConfig+0x508>
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2c:	d212      	bcs.n	8007e54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f023 030f 	bic.w	r3, r3, #15
 8007e36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	085b      	lsrs	r3, r3, #1
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	8bfb      	ldrh	r3, [r7, #30]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	8bfa      	ldrh	r2, [r7, #30]
 8007e50:	60da      	str	r2, [r3, #12]
 8007e52:	e062      	b.n	8007f1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e5a:	e05e      	b.n	8007f1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d828      	bhi.n	8007eb6 <UART_SetConfig+0x56a>
 8007e64:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <UART_SetConfig+0x520>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007e99 	.word	0x08007e99
 8007e74:	08007ea1 	.word	0x08007ea1
 8007e78:	08007eb7 	.word	0x08007eb7
 8007e7c:	08007ea7 	.word	0x08007ea7
 8007e80:	08007eb7 	.word	0x08007eb7
 8007e84:	08007eb7 	.word	0x08007eb7
 8007e88:	08007eb7 	.word	0x08007eb7
 8007e8c:	08007eaf 	.word	0x08007eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e90:	f7fe fb38 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 8007e94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e96:	e014      	b.n	8007ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e98:	f7fe fb4a 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 8007e9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e9e:	e010      	b.n	8007ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea0:	4b1a      	ldr	r3, [pc, #104]	; (8007f0c <UART_SetConfig+0x5c0>)
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ea4:	e00d      	b.n	8007ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ea6:	f7fe fabf 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8007eaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007eac:	e009      	b.n	8007ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007eb4:	e005      	b.n	8007ec2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ec0:	bf00      	nop
    }

    if (pclk != 0U)
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d028      	beq.n	8007f1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	4a10      	ldr	r2, [pc, #64]	; (8007f10 <UART_SetConfig+0x5c4>)
 8007ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	085b      	lsrs	r3, r3, #1
 8007ee0:	441a      	add	r2, r3
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	2b0f      	cmp	r3, #15
 8007ef0:	d910      	bls.n	8007f14 <UART_SetConfig+0x5c8>
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef8:	d20c      	bcs.n	8007f14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60da      	str	r2, [r3, #12]
 8007f04:	e009      	b.n	8007f1a <UART_SetConfig+0x5ce>
 8007f06:	bf00      	nop
 8007f08:	40008000 	.word	0x40008000
 8007f0c:	00f42400 	.word	0x00f42400
 8007f10:	0800a3ec 	.word	0x0800a3ec
      }
      else
      {
        ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2200      	movs	r2, #0
 8007f34:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3730      	adds	r7, #48	; 0x30
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01a      	beq.n	800805a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008042:	d10a      	bne.n	800805a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	605a      	str	r2, [r3, #4]
  }
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b098      	sub	sp, #96	; 0x60
 800808c:	af02      	add	r7, sp, #8
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008098:	f7f9 fee6 	bl	8001e68 <HAL_GetTick>
 800809c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0308 	and.w	r3, r3, #8
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d12f      	bne.n	800810c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b4:	2200      	movs	r2, #0
 80080b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f88e 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d022      	beq.n	800810c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080da:	653b      	str	r3, [r7, #80]	; 0x50
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e4:	647b      	str	r3, [r7, #68]	; 0x44
 80080e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e6      	bne.n	80080c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e063      	b.n	80081d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b04      	cmp	r3, #4
 8008118:	d149      	bne.n	80081ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800811a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008122:	2200      	movs	r2, #0
 8008124:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f857 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d03c      	beq.n	80081ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	623b      	str	r3, [r7, #32]
   return(result);
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008148:	64fb      	str	r3, [r7, #76]	; 0x4c
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008152:	633b      	str	r3, [r7, #48]	; 0x30
 8008154:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e6      	bne.n	8008134 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3308      	adds	r3, #8
 800816c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	60fb      	str	r3, [r7, #12]
   return(result);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f023 0301 	bic.w	r3, r3, #1
 800817c:	64bb      	str	r3, [r7, #72]	; 0x48
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3308      	adds	r3, #8
 8008184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008186:	61fa      	str	r2, [r7, #28]
 8008188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	69b9      	ldr	r1, [r7, #24]
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	617b      	str	r3, [r7, #20]
   return(result);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e5      	bne.n	8008166 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e012      	b.n	80081d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3758      	adds	r7, #88	; 0x58
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ec:	e04f      	b.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f4:	d04b      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f6:	f7f9 fe37 	bl	8001e68 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	429a      	cmp	r2, r3
 8008204:	d302      	bcc.n	800820c <UART_WaitOnFlagUntilTimeout+0x30>
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e04e      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d037      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b80      	cmp	r3, #128	; 0x80
 8008222:	d034      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b40      	cmp	r3, #64	; 0x40
 8008228:	d031      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b08      	cmp	r3, #8
 8008236:	d110      	bne.n	800825a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2208      	movs	r2, #8
 800823e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f838 	bl	80082b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2208      	movs	r2, #8
 800824a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e029      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008268:	d111      	bne.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f81e 	bl	80082b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e00f      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4013      	ands	r3, r2
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	bf0c      	ite	eq
 800829e:	2301      	moveq	r3, #1
 80082a0:	2300      	movne	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d0a0      	beq.n	80081ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b095      	sub	sp, #84	; 0x54
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082dc:	643b      	str	r3, [r7, #64]	; 0x40
 80082de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e6      	bne.n	80082be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008306:	f023 0301 	bic.w	r3, r3, #1
 800830a:	64bb      	str	r3, [r7, #72]	; 0x48
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3308      	adds	r3, #8
 8008312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800831a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800831c:	e841 2300 	strex	r3, r2, [r1]
 8008320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e3      	bne.n	80082f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d118      	bne.n	8008362 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	60bb      	str	r3, [r7, #8]
   return(result);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f023 0310 	bic.w	r3, r3, #16
 8008344:	647b      	str	r3, [r7, #68]	; 0x44
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800834e:	61bb      	str	r3, [r7, #24]
 8008350:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6979      	ldr	r1, [r7, #20]
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	613b      	str	r3, [r7, #16]
   return(result);
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e6      	bne.n	8008330 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008376:	bf00      	nop
 8008378:	3754      	adds	r7, #84	; 0x54
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008382:	b480      	push	{r7}
 8008384:	b085      	sub	sp, #20
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_UARTEx_DisableFifoMode+0x16>
 8008394:	2302      	movs	r3, #2
 8008396:	e027      	b.n	80083e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2224      	movs	r2, #36	; 0x24
 80083a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0201 	bic.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008408:	2302      	movs	r3, #2
 800840a:	e02d      	b.n	8008468 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2224      	movs	r2, #36	; 0x24
 8008418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0201 	bic.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f84f 	bl	80084ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008480:	2b01      	cmp	r3, #1
 8008482:	d101      	bne.n	8008488 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008484:	2302      	movs	r3, #2
 8008486:	e02d      	b.n	80084e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2224      	movs	r2, #36	; 0x24
 8008494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0201 	bic.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f811 	bl	80084ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d108      	bne.n	800850e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800850c:	e031      	b.n	8008572 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800850e:	2308      	movs	r3, #8
 8008510:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008512:	2308      	movs	r3, #8
 8008514:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	0e5b      	lsrs	r3, r3, #25
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 0307 	and.w	r3, r3, #7
 8008524:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	0f5b      	lsrs	r3, r3, #29
 800852e:	b2db      	uxtb	r3, r3
 8008530:	f003 0307 	and.w	r3, r3, #7
 8008534:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	7b3a      	ldrb	r2, [r7, #12]
 800853a:	4911      	ldr	r1, [pc, #68]	; (8008580 <UARTEx_SetNbDataToProcess+0x94>)
 800853c:	5c8a      	ldrb	r2, [r1, r2]
 800853e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008542:	7b3a      	ldrb	r2, [r7, #12]
 8008544:	490f      	ldr	r1, [pc, #60]	; (8008584 <UARTEx_SetNbDataToProcess+0x98>)
 8008546:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008548:	fb93 f3f2 	sdiv	r3, r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	7b7a      	ldrb	r2, [r7, #13]
 8008558:	4909      	ldr	r1, [pc, #36]	; (8008580 <UARTEx_SetNbDataToProcess+0x94>)
 800855a:	5c8a      	ldrb	r2, [r1, r2]
 800855c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008560:	7b7a      	ldrb	r2, [r7, #13]
 8008562:	4908      	ldr	r1, [pc, #32]	; (8008584 <UARTEx_SetNbDataToProcess+0x98>)
 8008564:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008566:	fb93 f3f2 	sdiv	r3, r3, r2
 800856a:	b29a      	uxth	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	0800a404 	.word	0x0800a404
 8008584:	0800a40c 	.word	0x0800a40c

08008588 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b096      	sub	sp, #88	; 0x58
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3303      	adds	r3, #3
 800859a:	f023 0303 	bic.w	r3, r3, #3
 800859e:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085a0:	f3ef 8310 	mrs	r3, PRIMASK
 80085a4:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80085a8:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80085aa:	b672      	cpsid	i
#endif
    return(int_posture);
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 80085ae:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80085b0:	4b55      	ldr	r3, [pc, #340]	; (8008708 <_tx_byte_allocate+0x180>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085be:	621a      	str	r2, [r3, #32]
 80085c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	f383 8810 	msr	PRIMASK, r3
}
 80085ca:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f9b2 	bl	8008938 <_tx_byte_pool_search>
 80085d4:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085d6:	f3ef 8310 	mrs	r3, PRIMASK
 80085da:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80085de:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80085e0:	b672      	cpsid	i
    return(int_posture);
 80085e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80085e4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80085e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80085ec:	2301      	movs	r3, #1
 80085ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085f0:	e006      	b.n	8008600 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d101      	bne.n	8008600 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80085fc:	2301      	movs	r3, #1
 80085fe:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8008600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0d9      	beq.n	80085ba <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800860a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800860c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <_tx_byte_allocate+0x9c>
 8008612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008614:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	f383 8810 	msr	PRIMASK, r3
}
 800861c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800861e:	2300      	movs	r3, #0
 8008620:	653b      	str	r3, [r7, #80]	; 0x50
 8008622:	e06c      	b.n	80086fe <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d061      	beq.n	80086ee <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800862a:	4b38      	ldr	r3, [pc, #224]	; (800870c <_tx_byte_allocate+0x184>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d007      	beq.n	8008642 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8008632:	2310      	movs	r3, #16
 8008634:	653b      	str	r3, [r7, #80]	; 0x50
 8008636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008638:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	f383 8810 	msr	PRIMASK, r3
}
 8008640:	e05d      	b.n	80086fe <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8008642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008644:	4a32      	ldr	r2, [pc, #200]	; (8008710 <_tx_byte_allocate+0x188>)
 8008646:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8008648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800864e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8008654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800865a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008664:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008682:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8008684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008688:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800868a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800868c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800868e:	675a      	str	r2, [r3, #116]	; 0x74
 8008690:	e011      	b.n	80086b6 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800869a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800869c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a2:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80086a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086a8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ae:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80086b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80086b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b8:	2209      	movs	r2, #9
 80086ba:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80086bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086be:	2201      	movs	r2, #1
 80086c0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80086c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80086c8:	4b10      	ldr	r3, [pc, #64]	; (800870c <_tx_byte_allocate+0x184>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	3301      	adds	r3, #1
 80086ce:	4a0f      	ldr	r2, [pc, #60]	; (800870c <_tx_byte_allocate+0x184>)
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f383 8810 	msr	PRIMASK, r3
}
 80086dc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80086de:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80086e0:	f000 ff3e 	bl	8009560 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80086e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ea:	653b      	str	r3, [r7, #80]	; 0x50
 80086ec:	e007      	b.n	80086fe <_tx_byte_allocate+0x176>
 80086ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f383 8810 	msr	PRIMASK, r3
}
 80086f8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80086fa:	2310      	movs	r3, #16
 80086fc:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80086fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8008700:	4618      	mov	r0, r3
 8008702:	3758      	adds	r7, #88	; 0x58
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20000aa0 	.word	0x20000aa0
 800870c:	20000b38 	.word	0x20000b38
 8008710:	08008715 	.word	0x08008715

08008714 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08e      	sub	sp, #56	; 0x38
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800871e:	f3ef 8310 	mrs	r3, PRIMASK
 8008722:	623b      	str	r3, [r7, #32]
    return(posture);
 8008724:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008726:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008728:	b672      	cpsid	i
    return(int_posture);
 800872a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800872c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008732:	4a33      	ldr	r2, [pc, #204]	; (8008800 <_tx_byte_pool_cleanup+0xec>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d158      	bne.n	80087ea <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	429a      	cmp	r2, r3
 8008742:	d152      	bne.n	80087ea <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008748:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	2b00      	cmp	r3, #0
 800874e:	d04c      	beq.n	80087ea <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a2b      	ldr	r2, [pc, #172]	; (8008804 <_tx_byte_pool_cleanup+0xf0>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d147      	bne.n	80087ea <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	2b00      	cmp	r3, #0
 8008760:	d043      	beq.n	80087ea <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876c:	1e5a      	subs	r2, r3, #1
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	2b00      	cmp	r3, #0
 800877c:	d103      	bne.n	8008786 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	2200      	movs	r2, #0
 8008782:	625a      	str	r2, [r3, #36]	; 0x24
 8008784:	e013      	b.n	80087ae <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008796:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800879c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d102      	bne.n	80087ae <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ac:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	2b09      	cmp	r3, #9
 80087b4:	d119      	bne.n	80087ea <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2210      	movs	r2, #16
 80087ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80087be:	4b12      	ldr	r3, [pc, #72]	; (8008808 <_tx_byte_pool_cleanup+0xf4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a10      	ldr	r2, [pc, #64]	; (8008808 <_tx_byte_pool_cleanup+0xf4>)
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f383 8810 	msr	PRIMASK, r3
}
 80087d2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fdc3 	bl	8009360 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087da:	f3ef 8310 	mrs	r3, PRIMASK
 80087de:	61bb      	str	r3, [r7, #24]
    return(posture);
 80087e0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80087e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80087e4:	b672      	cpsid	i
    return(int_posture);
 80087e6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80087e8:	637b      	str	r3, [r7, #52]	; 0x34
 80087ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f383 8810 	msr	PRIMASK, r3
}
 80087f4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80087f6:	bf00      	nop
 80087f8:	3738      	adds	r7, #56	; 0x38
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	08008715 	.word	0x08008715
 8008804:	42595445 	.word	0x42595445
 8008808:	20000b38 	.word	0x20000b38

0800880c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08e      	sub	sp, #56	; 0x38
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800881a:	2234      	movs	r2, #52	; 0x34
 800881c:	2100      	movs	r1, #0
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f001 fd58 	bl	800a2d4 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	f023 0303 	bic.w	r3, r3, #3
 800882a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	f1a3 0208 	sub.w	r2, r3, #8
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2202      	movs	r2, #2
 8008858:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800885e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	4413      	add	r3, r2
 8008864:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8008866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008868:	3b04      	subs	r3, #4
 800886a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008878:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887c:	3b04      	subs	r3, #4
 800887e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008896:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	3304      	adds	r3, #4
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80088a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	4a1f      	ldr	r2, [pc, #124]	; (8008928 <_tx_byte_pool_create+0x11c>)
 80088aa:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80088b2:	f3ef 8310 	mrs	r3, PRIMASK
 80088b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80088b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80088ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80088bc:	b672      	cpsid	i
    return(int_posture);
 80088be:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4a19      	ldr	r2, [pc, #100]	; (800892c <_tx_byte_pool_create+0x120>)
 80088c6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80088c8:	4b19      	ldr	r3, [pc, #100]	; (8008930 <_tx_byte_pool_create+0x124>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d109      	bne.n	80088e4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80088d0:	4a18      	ldr	r2, [pc, #96]	; (8008934 <_tx_byte_pool_create+0x128>)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	631a      	str	r2, [r3, #48]	; 0x30
 80088e2:	e011      	b.n	8008908 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80088e4:	4b13      	ldr	r3, [pc, #76]	; (8008934 <_tx_byte_pool_create+0x128>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a3a      	ldr	r2, [r7, #32]
 8008906:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8008908:	4b09      	ldr	r3, [pc, #36]	; (8008930 <_tx_byte_pool_create+0x124>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3301      	adds	r3, #1
 800890e:	4a08      	ldr	r2, [pc, #32]	; (8008930 <_tx_byte_pool_create+0x124>)
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f383 8810 	msr	PRIMASK, r3
}
 800891c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3738      	adds	r7, #56	; 0x38
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	ffffeeee 	.word	0xffffeeee
 800892c:	42595445 	.word	0x42595445
 8008930:	20000a94 	.word	0x20000a94
 8008934:	20000a90 	.word	0x20000a90

08008938 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8008938:	b480      	push	{r7}
 800893a:	b097      	sub	sp, #92	; 0x5c
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8008942:	2300      	movs	r3, #0
 8008944:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008946:	f3ef 8310 	mrs	r3, PRIMASK
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800894e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008950:	b672      	cpsid	i
    return(int_posture);
 8008952:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8008954:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	3b02      	subs	r3, #2
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	4413      	add	r3, r2
 8008964:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896a:	429a      	cmp	r2, r3
 800896c:	d308      	bcc.n	8008980 <_tx_byte_pool_search+0x48>
 800896e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008970:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	f383 8810 	msr	PRIMASK, r3
}
 8008978:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	653b      	str	r3, [r7, #80]	; 0x50
 800897e:	e0dd      	b.n	8008b3c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008980:	4b72      	ldr	r3, [pc, #456]	; (8008b4c <_tx_byte_pool_search+0x214>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800898a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800899a:	2300      	movs	r3, #0
 800899c:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800899e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a0:	3304      	adds	r3, #4
 80089a2:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80089a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a68      	ldr	r2, [pc, #416]	; (8008b50 <_tx_byte_pool_search+0x218>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d143      	bne.n	8008a3a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80089b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d104      	bne.n	80089c2 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089bc:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80089be:	2301      	movs	r3, #1
 80089c0:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80089c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c4:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80089cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80089d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d6:	3b08      	subs	r3, #8
 80089d8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80089da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d257      	bcs.n	8008a92 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80089e2:	2300      	movs	r3, #0
 80089e4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	3304      	adds	r3, #4
 80089ea:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80089f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a56      	ldr	r2, [pc, #344]	; (8008b50 <_tx_byte_pool_search+0x218>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d113      	bne.n	8008a22 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	1e5a      	subs	r2, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d114      	bne.n	8008a44 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a1e:	615a      	str	r2, [r3, #20]
 8008a20:	e010      	b.n	8008a44 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8008a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d008      	beq.n	8008a44 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8008a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a34:	3b01      	subs	r3, #1
 8008a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a38:	e004      	b.n	8008a44 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8008a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8008a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f383 8810 	msr	PRIMASK, r3
}
 8008a5a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a60:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008a62:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008a64:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a66:	b672      	cpsid	i
    return(int_posture);
 8008a68:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8008a6a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d009      	beq.n	8008a8a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a88:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8008a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d186      	bne.n	800899e <_tx_byte_pool_search+0x66>
 8008a90:	e000      	b.n	8008a94 <_tx_byte_pool_search+0x15c>
                    break;
 8008a92:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8008a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d048      	beq.n	8008b2c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8008a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b13      	cmp	r3, #19
 8008aa2:	d91e      	bls.n	8008ae2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aaa:	4413      	add	r3, r2
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ab4:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	4a21      	ldr	r2, [pc, #132]	; (8008b50 <_tx_byte_pool_search+0x218>)
 8008acc:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008adc:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	f1a3 0208 	sub.w	r2, r3, #8
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d105      	bne.n	8008b18 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b0e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	615a      	str	r2, [r3, #20]
 8008b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b1a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f383 8810 	msr	PRIMASK, r3
}
 8008b22:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b26:	3308      	adds	r3, #8
 8008b28:	653b      	str	r3, [r7, #80]	; 0x50
 8008b2a:	e007      	b.n	8008b3c <_tx_byte_pool_search+0x204>
 8008b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b2e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f383 8810 	msr	PRIMASK, r3
}
 8008b36:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8008b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	375c      	adds	r7, #92	; 0x5c
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000aa0 	.word	0x20000aa0
 8008b50:	ffffeeee 	.word	0xffffeeee

08008b54 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8008b58:	f000 fac0 	bl	80090dc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8008b5c:	f000 fec8 	bl	80098f0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8008b60:	4b12      	ldr	r3, [pc, #72]	; (8008bac <_tx_initialize_high_level+0x58>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	4b12      	ldr	r3, [pc, #72]	; (8008bb0 <_tx_initialize_high_level+0x5c>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8008b6c:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <_tx_initialize_high_level+0x60>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <_tx_initialize_high_level+0x64>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8008b78:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <_tx_initialize_high_level+0x68>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <_tx_initialize_high_level+0x6c>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8008b84:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <_tx_initialize_high_level+0x70>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	4b0f      	ldr	r3, [pc, #60]	; (8008bc8 <_tx_initialize_high_level+0x74>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8008b90:	4b0e      	ldr	r3, [pc, #56]	; (8008bcc <_tx_initialize_high_level+0x78>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <_tx_initialize_high_level+0x7c>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8008b9c:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <_tx_initialize_high_level+0x80>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <_tx_initialize_high_level+0x84>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
#endif
}
 8008ba8:	bf00      	nop
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20000a68 	.word	0x20000a68
 8008bb0:	20000a6c 	.word	0x20000a6c
 8008bb4:	20000a70 	.word	0x20000a70
 8008bb8:	20000a74 	.word	0x20000a74
 8008bbc:	20000a78 	.word	0x20000a78
 8008bc0:	20000a7c 	.word	0x20000a7c
 8008bc4:	20000a88 	.word	0x20000a88
 8008bc8:	20000a8c 	.word	0x20000a8c
 8008bcc:	20000a90 	.word	0x20000a90
 8008bd0:	20000a94 	.word	0x20000a94
 8008bd4:	20000a80 	.word	0x20000a80
 8008bd8:	20000a84 	.word	0x20000a84

08008bdc <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8008be0:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <_tx_initialize_kernel_enter+0x48>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8008be8:	d00c      	beq.n	8008c04 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8008bea:	4b0e      	ldr	r3, [pc, #56]	; (8008c24 <_tx_initialize_kernel_enter+0x48>)
 8008bec:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8008bf0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8008bf2:	f7f7 fb15 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8008bf6:	f7ff ffad 	bl	8008b54 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <_tx_initialize_kernel_enter+0x4c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	4a09      	ldr	r2, [pc, #36]	; (8008c28 <_tx_initialize_kernel_enter+0x4c>)
 8008c02:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8008c04:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <_tx_initialize_kernel_enter+0x48>)
 8008c06:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8008c0a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <_tx_initialize_kernel_enter+0x50>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7f7 fd9f 	bl	8000754 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8008c16:	4b03      	ldr	r3, [pc, #12]	; (8008c24 <_tx_initialize_kernel_enter+0x48>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8008c1c:	f7f7 fb40 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8008c20:	bf00      	nop
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	2000000c 	.word	0x2000000c
 8008c28:	20000b38 	.word	0x20000b38
 8008c2c:	20000a98 	.word	0x20000a98

08008c30 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08e      	sub	sp, #56	; 0x38
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3e:	623b      	str	r3, [r7, #32]
    return(posture);
 8008c40:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008c42:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c44:	b672      	cpsid	i
    return(int_posture);
 8008c46:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8008c48:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c4e:	4a33      	ldr	r2, [pc, #204]	; (8008d1c <_tx_semaphore_cleanup+0xec>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d158      	bne.n	8008d06 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d152      	bne.n	8008d06 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c64:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d04c      	beq.n	8008d06 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a2b      	ldr	r2, [pc, #172]	; (8008d20 <_tx_semaphore_cleanup+0xf0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d147      	bne.n	8008d06 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d043      	beq.n	8008d06 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	1e5a      	subs	r2, r3, #1
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d103      	bne.n	8008ca2 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	60da      	str	r2, [r3, #12]
 8008ca0:	e013      	b.n	8008cca <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d102      	bne.n	8008cca <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cc8:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cce:	2b06      	cmp	r3, #6
 8008cd0:	d119      	bne.n	8008d06 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	220d      	movs	r2, #13
 8008cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008cda:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <_tx_semaphore_cleanup+0xf4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	4a10      	ldr	r2, [pc, #64]	; (8008d24 <_tx_semaphore_cleanup+0xf4>)
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	f383 8810 	msr	PRIMASK, r3
}
 8008cee:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fb35 	bl	8009360 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8008cfa:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008cfc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008cfe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d00:	b672      	cpsid	i
    return(int_posture);
 8008d02:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
 8008d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d08:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f383 8810 	msr	PRIMASK, r3
}
 8008d10:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008d12:	bf00      	nop
 8008d14:	3738      	adds	r7, #56	; 0x38
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	08008c31 	.word	0x08008c31
 8008d20:	53454d41 	.word	0x53454d41
 8008d24:	20000b38 	.word	0x20000b38

08008d28 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	; 0x28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8008d34:	221c      	movs	r2, #28
 8008d36:	2100      	movs	r1, #0
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f001 facb 	bl	800a2d4 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d4e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008d50:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008d52:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d54:	b672      	cpsid	i
    return(int_posture);
 8008d56:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4a18      	ldr	r2, [pc, #96]	; (8008dc0 <_tx_semaphore_create+0x98>)
 8008d5e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8008d60:	4b18      	ldr	r3, [pc, #96]	; (8008dc4 <_tx_semaphore_create+0x9c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d109      	bne.n	8008d7c <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8008d68:	4a17      	ldr	r2, [pc, #92]	; (8008dc8 <_tx_semaphore_create+0xa0>)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	619a      	str	r2, [r3, #24]
 8008d7a:	e011      	b.n	8008da0 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8008d7c:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <_tx_semaphore_create+0xa0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a3a      	ldr	r2, [r7, #32]
 8008d9e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8008da0:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <_tx_semaphore_create+0x9c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3301      	adds	r3, #1
 8008da6:	4a07      	ldr	r2, [pc, #28]	; (8008dc4 <_tx_semaphore_create+0x9c>)
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f383 8810 	msr	PRIMASK, r3
}
 8008db4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3728      	adds	r7, #40	; 0x28
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	53454d41 	.word	0x53454d41
 8008dc4:	20000a6c 	.word	0x20000a6c
 8008dc8:	20000a68 	.word	0x20000a68

08008dcc <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08e      	sub	sp, #56	; 0x38
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008dda:	f3ef 8310 	mrs	r3, PRIMASK
 8008dde:	623b      	str	r3, [r7, #32]
    return(posture);
 8008de0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008de2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008de4:	b672      	cpsid	i
    return(int_posture);
 8008de6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8008de8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	1e5a      	subs	r2, r3, #1
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	609a      	str	r2, [r3, #8]
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f383 8810 	msr	PRIMASK, r3
}
 8008e06:	e068      	b.n	8008eda <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d05d      	beq.n	8008eca <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8008e0e:	4b35      	ldr	r3, [pc, #212]	; (8008ee4 <_tx_semaphore_get+0x118>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d008      	beq.n	8008e28 <_tx_semaphore_get+0x5c>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f383 8810 	msr	PRIMASK, r3
}
 8008e20:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8008e22:	230d      	movs	r3, #13
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
 8008e26:	e058      	b.n	8008eda <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008e28:	4b2f      	ldr	r3, [pc, #188]	; (8008ee8 <_tx_semaphore_get+0x11c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	4a2e      	ldr	r2, [pc, #184]	; (8008eec <_tx_semaphore_get+0x120>)
 8008e32:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d109      	bne.n	8008e64 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e54:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8008e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e5a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e60:	675a      	str	r2, [r3, #116]	; 0x74
 8008e62:	e011      	b.n	8008e88 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e6e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e74:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e80:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e86:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	2206      	movs	r2, #6
 8008e96:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008ea4:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <_tx_semaphore_get+0x118>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	4a0e      	ldr	r2, [pc, #56]	; (8008ee4 <_tx_semaphore_get+0x118>)
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f383 8810 	msr	PRIMASK, r3
}
 8008eb8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ebc:	f000 fb50 	bl	8009560 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec8:	e007      	b.n	8008eda <_tx_semaphore_get+0x10e>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f383 8810 	msr	PRIMASK, r3
}
 8008ed4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8008ed6:	230d      	movs	r3, #13
 8008ed8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8008eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3738      	adds	r7, #56	; 0x38
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000b38 	.word	0x20000b38
 8008ee8:	20000aa0 	.word	0x20000aa0
 8008eec:	08008c31 	.word	0x08008c31

08008ef0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b092      	sub	sp, #72	; 0x48
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8008efe:	2300      	movs	r3, #0
 8008f00:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8008f02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f04:	21ef      	movs	r1, #239	; 0xef
 8008f06:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008f08:	f001 f9e4 	bl	800a2d4 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8008f0c:	22b0      	movs	r2, #176	; 0xb0
 8008f0e:	2100      	movs	r1, #0
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f001 f9df 	bl	800a2d4 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f2c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f32:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f38:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f46:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f4c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8008f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8008f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f60:	4413      	add	r3, r2
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f68:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8008f6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d007      	beq.n	8008f82 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008f80:	e006      	b.n	8008f90 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f86:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2203      	movs	r2, #3
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4a48      	ldr	r2, [pc, #288]	; (80090bc <_tx_thread_create+0x1cc>)
 8008f9a:	655a      	str	r2, [r3, #84]	; 0x54
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8008fa2:	4947      	ldr	r1, [pc, #284]	; (80090c0 <_tx_thread_create+0x1d0>)
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7f7 f9db 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008faa:	f3ef 8310 	mrs	r3, PRIMASK
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8008fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008fb4:	b672      	cpsid	i
    return(int_posture);
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8008fb8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	4a41      	ldr	r2, [pc, #260]	; (80090c4 <_tx_thread_create+0x1d4>)
 8008fbe:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8008fc0:	4b41      	ldr	r3, [pc, #260]	; (80090c8 <_tx_thread_create+0x1d8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10b      	bne.n	8008fe0 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8008fc8:	4a40      	ldr	r2, [pc, #256]	; (80090cc <_tx_thread_create+0x1dc>)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008fde:	e016      	b.n	800900e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8008fe0:	4b3a      	ldr	r3, [pc, #232]	; (80090cc <_tx_thread_create+0x1dc>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8008fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fec:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8008fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800900a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800900e:	4b2e      	ldr	r3, [pc, #184]	; (80090c8 <_tx_thread_create+0x1d8>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	4a2c      	ldr	r2, [pc, #176]	; (80090c8 <_tx_thread_create+0x1d8>)
 8009016:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009018:	4b2d      	ldr	r3, [pc, #180]	; (80090d0 <_tx_thread_create+0x1e0>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3301      	adds	r3, #1
 800901e:	4a2c      	ldr	r2, [pc, #176]	; (80090d0 <_tx_thread_create+0x1e0>)
 8009020:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8009022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009024:	2b01      	cmp	r3, #1
 8009026:	d129      	bne.n	800907c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009028:	f3ef 8305 	mrs	r3, IPSR
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800902e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8009030:	4b28      	ldr	r3, [pc, #160]	; (80090d4 <_tx_thread_create+0x1e4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4313      	orrs	r3, r2
 8009036:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800903a:	d30d      	bcc.n	8009058 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800903c:	4b26      	ldr	r3, [pc, #152]	; (80090d8 <_tx_thread_create+0x1e8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8009042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009044:	2b00      	cmp	r3, #0
 8009046:	d009      	beq.n	800905c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8009048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800904e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009054:	63da      	str	r2, [r3, #60]	; 0x3c
 8009056:	e001      	b.n	800905c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8009058:	2300      	movs	r3, #0
 800905a:	647b      	str	r3, [r7, #68]	; 0x44
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	f383 8810 	msr	PRIMASK, r3
}
 8009066:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 f979 	bl	8009360 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800906e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01e      	beq.n	80090b2 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8009074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009078:	63da      	str	r2, [r3, #60]	; 0x3c
 800907a:	e01a      	b.n	80090b2 <_tx_thread_create+0x1c2>
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f383 8810 	msr	PRIMASK, r3
}
 8009086:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009088:	f3ef 8310 	mrs	r3, PRIMASK
 800908c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800908e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009090:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009092:	b672      	cpsid	i
    return(int_posture);
 8009094:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8009096:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <_tx_thread_create+0x1e0>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3b01      	subs	r3, #1
 800909e:	4a0c      	ldr	r2, [pc, #48]	; (80090d0 <_tx_thread_create+0x1e0>)
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f383 8810 	msr	PRIMASK, r3
}
 80090ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80090ae:	f000 f91d 	bl	80092ec <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3748      	adds	r7, #72	; 0x48
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	08009835 	.word	0x08009835
 80090c0:	08009155 	.word	0x08009155
 80090c4:	54485244 	.word	0x54485244
 80090c8:	20000aac 	.word	0x20000aac
 80090cc:	20000aa8 	.word	0x20000aa8
 80090d0:	20000b38 	.word	0x20000b38
 80090d4:	2000000c 	.word	0x2000000c
 80090d8:	20000aa4 	.word	0x20000aa4

080090dc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80090e0:	4b12      	ldr	r3, [pc, #72]	; (800912c <_tx_thread_initialize+0x50>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80090e6:	4b12      	ldr	r3, [pc, #72]	; (8009130 <_tx_thread_initialize+0x54>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	4b11      	ldr	r3, [pc, #68]	; (8009134 <_tx_thread_initialize+0x58>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80090f2:	4b11      	ldr	r3, [pc, #68]	; (8009138 <_tx_thread_initialize+0x5c>)
 80090f4:	2220      	movs	r2, #32
 80090f6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80090f8:	2280      	movs	r2, #128	; 0x80
 80090fa:	2100      	movs	r1, #0
 80090fc:	480f      	ldr	r0, [pc, #60]	; (800913c <_tx_thread_initialize+0x60>)
 80090fe:	f001 f8e9 	bl	800a2d4 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8009102:	4b0f      	ldr	r3, [pc, #60]	; (8009140 <_tx_thread_initialize+0x64>)
 8009104:	2200      	movs	r2, #0
 8009106:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8009108:	4b0e      	ldr	r3, [pc, #56]	; (8009144 <_tx_thread_initialize+0x68>)
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800910e:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <_tx_thread_initialize+0x6c>)
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8009114:	4b0d      	ldr	r3, [pc, #52]	; (800914c <_tx_thread_initialize+0x70>)
 8009116:	2200      	movs	r2, #0
 8009118:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800911a:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <_tx_thread_initialize+0x74>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8009122:	4a0b      	ldr	r2, [pc, #44]	; (8009150 <_tx_thread_initialize+0x74>)
 8009124:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8009126:	bf00      	nop
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20000aa0 	.word	0x20000aa0
 8009130:	20000aa4 	.word	0x20000aa4
 8009134:	20000ab0 	.word	0x20000ab0
 8009138:	20000ab4 	.word	0x20000ab4
 800913c:	20000ab8 	.word	0x20000ab8
 8009140:	20000aa8 	.word	0x20000aa8
 8009144:	20000aac 	.word	0x20000aac
 8009148:	20000b38 	.word	0x20000b38
 800914c:	20000b3c 	.word	0x20000b3c
 8009150:	20000b40 	.word	0x20000b40

08009154 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800915a:	4b21      	ldr	r3, [pc, #132]	; (80091e0 <_tx_thread_shell_entry+0x8c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009168:	4610      	mov	r0, r2
 800916a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800916c:	4b1d      	ldr	r3, [pc, #116]	; (80091e4 <_tx_thread_shell_entry+0x90>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8009174:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <_tx_thread_shell_entry+0x90>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69f8      	ldr	r0, [r7, #28]
 800917a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800917c:	f3ef 8310 	mrs	r3, PRIMASK
 8009180:	607b      	str	r3, [r7, #4]
    return(posture);
 8009182:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009184:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009186:	b672      	cpsid	i
    return(int_posture);
 8009188:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800918a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	2201      	movs	r2, #1
 8009190:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	2201      	movs	r2, #1
 8009196:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	2200      	movs	r2, #0
 800919c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800919e:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <_tx_thread_shell_entry+0x94>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3301      	adds	r3, #1
 80091a4:	4a10      	ldr	r2, [pc, #64]	; (80091e8 <_tx_thread_shell_entry+0x94>)
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f383 8810 	msr	PRIMASK, r3
}
 80091b2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80091b4:	f3ef 8314 	mrs	r3, CONTROL
 80091b8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80091ba:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80091bc:	617b      	str	r3, [r7, #20]
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f023 0304 	bic.w	r3, r3, #4
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f383 8814 	msr	CONTROL, r3
}
 80091d0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80091d2:	69f8      	ldr	r0, [r7, #28]
 80091d4:	f000 f9c4 	bl	8009560 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80091d8:	bf00      	nop
 80091da:	3720      	adds	r7, #32
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20000aa0 	.word	0x20000aa0
 80091e4:	20000b3c 	.word	0x20000b3c
 80091e8:	20000b38 	.word	0x20000b38

080091ec <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08e      	sub	sp, #56	; 0x38
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091f4:	f3ef 8310 	mrs	r3, PRIMASK
 80091f8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80091fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80091fe:	b672      	cpsid	i
    return(int_posture);
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8009202:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009204:	4b35      	ldr	r3, [pc, #212]	; (80092dc <_tx_thread_sleep+0xf0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	2b00      	cmp	r3, #0
 800920e:	d108      	bne.n	8009222 <_tx_thread_sleep+0x36>
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	f383 8810 	msr	PRIMASK, r3
}
 800921a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800921c:	2313      	movs	r3, #19
 800921e:	637b      	str	r3, [r7, #52]	; 0x34
 8009220:	e056      	b.n	80092d0 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009222:	f3ef 8305 	mrs	r3, IPSR
 8009226:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8009228:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800922a:	4b2d      	ldr	r3, [pc, #180]	; (80092e0 <_tx_thread_sleep+0xf4>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4313      	orrs	r3, r2
 8009230:	2b00      	cmp	r3, #0
 8009232:	d008      	beq.n	8009246 <_tx_thread_sleep+0x5a>
 8009234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009236:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	f383 8810 	msr	PRIMASK, r3
}
 800923e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009240:	2313      	movs	r3, #19
 8009242:	637b      	str	r3, [r7, #52]	; 0x34
 8009244:	e044      	b.n	80092d0 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	4a26      	ldr	r2, [pc, #152]	; (80092e4 <_tx_thread_sleep+0xf8>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d108      	bne.n	8009260 <_tx_thread_sleep+0x74>
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f383 8810 	msr	PRIMASK, r3
}
 8009258:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800925a:	2313      	movs	r3, #19
 800925c:	637b      	str	r3, [r7, #52]	; 0x34
 800925e:	e037      	b.n	80092d0 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d108      	bne.n	8009278 <_tx_thread_sleep+0x8c>
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f383 8810 	msr	PRIMASK, r3
}
 8009270:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8009272:	2300      	movs	r3, #0
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
 8009276:	e02b      	b.n	80092d0 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009278:	4b1b      	ldr	r3, [pc, #108]	; (80092e8 <_tx_thread_sleep+0xfc>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d008      	beq.n	8009292 <_tx_thread_sleep+0xa6>
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f383 8810 	msr	PRIMASK, r3
}
 800928a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800928c:	2313      	movs	r3, #19
 800928e:	637b      	str	r3, [r7, #52]	; 0x34
 8009290:	e01e      	b.n	80092d0 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	2204      	movs	r2, #4
 8009296:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	2201      	movs	r2, #1
 800929c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80092ac:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <_tx_thread_sleep+0xfc>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	4a0d      	ldr	r2, [pc, #52]	; (80092e8 <_tx_thread_sleep+0xfc>)
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f383 8810 	msr	PRIMASK, r3
}
 80092c0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80092c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092c4:	f000 f94c 	bl	8009560 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80092d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3738      	adds	r7, #56	; 0x38
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	20000aa0 	.word	0x20000aa0
 80092e0:	2000000c 	.word	0x2000000c
 80092e4:	20000be8 	.word	0x20000be8
 80092e8:	20000b38 	.word	0x20000b38

080092ec <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b089      	sub	sp, #36	; 0x24
 80092f0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80092f2:	4b17      	ldr	r3, [pc, #92]	; (8009350 <_tx_thread_system_preempt_check+0x64>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d121      	bne.n	8009342 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80092fe:	4b15      	ldr	r3, [pc, #84]	; (8009354 <_tx_thread_system_preempt_check+0x68>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8009304:	4b14      	ldr	r3, [pc, #80]	; (8009358 <_tx_thread_system_preempt_check+0x6c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	429a      	cmp	r2, r3
 8009310:	d017      	beq.n	8009342 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009312:	4b12      	ldr	r3, [pc, #72]	; (800935c <_tx_thread_system_preempt_check+0x70>)
 8009314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009318:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800931a:	f3ef 8305 	mrs	r3, IPSR
 800931e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009320:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10c      	bne.n	8009340 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009326:	f3ef 8310 	mrs	r3, PRIMASK
 800932a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800932c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800932e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009330:	b662      	cpsie	i
}
 8009332:	bf00      	nop
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f383 8810 	msr	PRIMASK, r3
}
 800933e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8009340:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8009342:	bf00      	nop
 8009344:	3724      	adds	r7, #36	; 0x24
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000b38 	.word	0x20000b38
 8009354:	20000aa0 	.word	0x20000aa0
 8009358:	20000aa4 	.word	0x20000aa4
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b096      	sub	sp, #88	; 0x58
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009368:	f3ef 8310 	mrs	r3, PRIMASK
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8009370:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8009372:	b672      	cpsid	i
    return(int_posture);
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8009376:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800937c:	2b00      	cmp	r3, #0
 800937e:	d005      	beq.n	800938c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	334c      	adds	r3, #76	; 0x4c
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fb91 	bl	8009aac <_tx_timer_system_deactivate>
 800938a:	e002      	b.n	8009392 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009392:	4b6c      	ldr	r3, [pc, #432]	; (8009544 <_tx_thread_system_resume+0x1e4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3b01      	subs	r3, #1
 8009398:	4a6a      	ldr	r2, [pc, #424]	; (8009544 <_tx_thread_system_resume+0x1e4>)
 800939a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f040 8083 	bne.w	80094ac <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 8097 	beq.w	80094de <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d172      	bne.n	800949e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c2:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80093c4:	4a60      	ldr	r2, [pc, #384]	; (8009548 <_tx_thread_system_resume+0x1e8>)
 80093c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093cc:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80093ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d154      	bne.n	800947e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80093d4:	495c      	ldr	r1, [pc, #368]	; (8009548 <_tx_thread_system_resume+0x1e8>)
 80093d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80093ea:	2201      	movs	r2, #1
 80093ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ee:	fa02 f303 	lsl.w	r3, r2, r3
 80093f2:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80093f4:	4b55      	ldr	r3, [pc, #340]	; (800954c <_tx_thread_system_resume+0x1ec>)
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093fa:	4313      	orrs	r3, r2
 80093fc:	4a53      	ldr	r2, [pc, #332]	; (800954c <_tx_thread_system_resume+0x1ec>)
 80093fe:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8009400:	4b53      	ldr	r3, [pc, #332]	; (8009550 <_tx_thread_system_resume+0x1f0>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009406:	429a      	cmp	r2, r3
 8009408:	d269      	bcs.n	80094de <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800940a:	4a51      	ldr	r2, [pc, #324]	; (8009550 <_tx_thread_system_resume+0x1f0>)
 800940c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800940e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8009410:	4b50      	ldr	r3, [pc, #320]	; (8009554 <_tx_thread_system_resume+0x1f4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8009416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009418:	2b00      	cmp	r3, #0
 800941a:	d103      	bne.n	8009424 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800941c:	4a4d      	ldr	r2, [pc, #308]	; (8009554 <_tx_thread_system_resume+0x1f4>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	e05c      	b.n	80094de <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8009424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009428:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800942a:	429a      	cmp	r2, r3
 800942c:	d257      	bcs.n	80094de <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800942e:	4a49      	ldr	r2, [pc, #292]	; (8009554 <_tx_thread_system_resume+0x1f4>)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6013      	str	r3, [r2, #0]
 8009434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009436:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943a:	f383 8810 	msr	PRIMASK, r3
}
 800943e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009440:	4b40      	ldr	r3, [pc, #256]	; (8009544 <_tx_thread_system_resume+0x1e4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8009446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009448:	2b00      	cmp	r3, #0
 800944a:	d174      	bne.n	8009536 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800944c:	4b42      	ldr	r3, [pc, #264]	; (8009558 <_tx_thread_system_resume+0x1f8>)
 800944e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009452:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009454:	f3ef 8305 	mrs	r3, IPSR
 8009458:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10c      	bne.n	800947a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009460:	f3ef 8310 	mrs	r3, PRIMASK
 8009464:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8009468:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800946a:	b662      	cpsie	i
}
 800946c:	bf00      	nop
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	f383 8810 	msr	PRIMASK, r3
}
 8009478:	bf00      	nop
}
 800947a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800947c:	e05b      	b.n	8009536 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800947e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8009484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800948a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009494:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800949a:	621a      	str	r2, [r3, #32]
 800949c:	e01f      	b.n	80094de <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2203      	movs	r2, #3
 80094a8:	631a      	str	r2, [r3, #48]	; 0x30
 80094aa:	e018      	b.n	80094de <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d014      	beq.n	80094de <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d010      	beq.n	80094de <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d106      	bne.n	80094d2 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	631a      	str	r2, [r3, #48]	; 0x30
 80094d0:	e005      	b.n	80094de <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2203      	movs	r2, #3
 80094dc:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80094de:	4b1f      	ldr	r3, [pc, #124]	; (800955c <_tx_thread_system_resume+0x1fc>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80094e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	f383 8810 	msr	PRIMASK, r3
}
 80094ee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80094f0:	4b18      	ldr	r3, [pc, #96]	; (8009554 <_tx_thread_system_resume+0x1f4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d020      	beq.n	800953c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80094fa:	4b12      	ldr	r3, [pc, #72]	; (8009544 <_tx_thread_system_resume+0x1e4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d11a      	bne.n	800953c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009506:	4b14      	ldr	r3, [pc, #80]	; (8009558 <_tx_thread_system_resume+0x1f8>)
 8009508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800950c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800950e:	f3ef 8305 	mrs	r3, IPSR
 8009512:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009514:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10f      	bne.n	800953a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800951a:	f3ef 8310 	mrs	r3, PRIMASK
 800951e:	613b      	str	r3, [r7, #16]
    return(posture);
 8009520:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8009522:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009524:	b662      	cpsie	i
}
 8009526:	bf00      	nop
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	f383 8810 	msr	PRIMASK, r3
}
 8009532:	bf00      	nop
}
 8009534:	e001      	b.n	800953a <_tx_thread_system_resume+0x1da>
                                return;
 8009536:	bf00      	nop
 8009538:	e000      	b.n	800953c <_tx_thread_system_resume+0x1dc>
 800953a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800953c:	3758      	adds	r7, #88	; 0x58
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000b38 	.word	0x20000b38
 8009548:	20000ab8 	.word	0x20000ab8
 800954c:	20000ab0 	.word	0x20000ab0
 8009550:	20000ab4 	.word	0x20000ab4
 8009554:	20000aa4 	.word	0x20000aa4
 8009558:	e000ed04 	.word	0xe000ed04
 800955c:	20000aa0 	.word	0x20000aa0

08009560 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b09e      	sub	sp, #120	; 0x78
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009568:	4b81      	ldr	r3, [pc, #516]	; (8009770 <_tx_thread_system_suspend+0x210>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800956e:	f3ef 8310 	mrs	r3, PRIMASK
 8009572:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8009574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8009576:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009578:	b672      	cpsid	i
    return(int_posture);
 800957a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800957c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009582:	429a      	cmp	r2, r3
 8009584:	d112      	bne.n	80095ac <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800958a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800958c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d008      	beq.n	80095a4 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8009592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009598:	d004      	beq.n	80095a4 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	334c      	adds	r3, #76	; 0x4c
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 fa22 	bl	80099e8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	4a72      	ldr	r2, [pc, #456]	; (8009774 <_tx_thread_system_suspend+0x214>)
 80095aa:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80095ac:	4b72      	ldr	r3, [pc, #456]	; (8009778 <_tx_thread_system_suspend+0x218>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	4a71      	ldr	r2, [pc, #452]	; (8009778 <_tx_thread_system_suspend+0x218>)
 80095b4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	f040 80a6 	bne.w	800970c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80095d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d015      	beq.n	8009606 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80095e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095e4:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80095e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095ea:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80095ec:	4a63      	ldr	r2, [pc, #396]	; (800977c <_tx_thread_system_suspend+0x21c>)
 80095ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d157      	bne.n	80096aa <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80095fa:	4960      	ldr	r1, [pc, #384]	; (800977c <_tx_thread_system_suspend+0x21c>)
 80095fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009604:	e051      	b.n	80096aa <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8009606:	4a5d      	ldr	r2, [pc, #372]	; (800977c <_tx_thread_system_suspend+0x21c>)
 8009608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800960a:	2100      	movs	r1, #0
 800960c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8009610:	2201      	movs	r2, #1
 8009612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009614:	fa02 f303 	lsl.w	r3, r2, r3
 8009618:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800961a:	4b59      	ldr	r3, [pc, #356]	; (8009780 <_tx_thread_system_suspend+0x220>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009620:	43db      	mvns	r3, r3
 8009622:	4013      	ands	r3, r2
 8009624:	4a56      	ldr	r2, [pc, #344]	; (8009780 <_tx_thread_system_suspend+0x220>)
 8009626:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8009628:	2300      	movs	r3, #0
 800962a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800962c:	4b54      	ldr	r3, [pc, #336]	; (8009780 <_tx_thread_system_suspend+0x220>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8009632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009634:	2b00      	cmp	r3, #0
 8009636:	d12b      	bne.n	8009690 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009638:	4b52      	ldr	r3, [pc, #328]	; (8009784 <_tx_thread_system_suspend+0x224>)
 800963a:	2220      	movs	r2, #32
 800963c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800963e:	4b52      	ldr	r3, [pc, #328]	; (8009788 <_tx_thread_system_suspend+0x228>)
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009646:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800964a:	f383 8810 	msr	PRIMASK, r3
}
 800964e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009650:	4b49      	ldr	r3, [pc, #292]	; (8009778 <_tx_thread_system_suspend+0x218>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8009656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009658:	2b00      	cmp	r3, #0
 800965a:	f040 8081 	bne.w	8009760 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800965e:	4b4b      	ldr	r3, [pc, #300]	; (800978c <_tx_thread_system_suspend+0x22c>)
 8009660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009664:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009666:	f3ef 8305 	mrs	r3, IPSR
 800966a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800966c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10c      	bne.n	800968c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009672:	f3ef 8310 	mrs	r3, PRIMASK
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8009678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800967a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800967c:	b662      	cpsie	i
}
 800967e:	bf00      	nop
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009686:	f383 8810 	msr	PRIMASK, r3
}
 800968a:	bf00      	nop
}
 800968c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800968e:	e067      	b.n	8009760 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8009690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009692:	fa93 f3a3 	rbit	r3, r3
 8009696:	65bb      	str	r3, [r7, #88]	; 0x58
 8009698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800969a:	fab3 f383 	clz	r3, r3
 800969e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80096a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096a4:	4413      	add	r3, r2
 80096a6:	4a37      	ldr	r2, [pc, #220]	; (8009784 <_tx_thread_system_suspend+0x224>)
 80096a8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80096aa:	4b37      	ldr	r3, [pc, #220]	; (8009788 <_tx_thread_system_suspend+0x228>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d12b      	bne.n	800970c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80096b4:	4b33      	ldr	r3, [pc, #204]	; (8009784 <_tx_thread_system_suspend+0x224>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a30      	ldr	r2, [pc, #192]	; (800977c <_tx_thread_system_suspend+0x21c>)
 80096ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096be:	4a32      	ldr	r2, [pc, #200]	; (8009788 <_tx_thread_system_suspend+0x228>)
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096c4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	f383 8810 	msr	PRIMASK, r3
}
 80096cc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80096ce:	4b2a      	ldr	r3, [pc, #168]	; (8009778 <_tx_thread_system_suspend+0x218>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80096d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d144      	bne.n	8009764 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80096da:	4b2c      	ldr	r3, [pc, #176]	; (800978c <_tx_thread_system_suspend+0x22c>)
 80096dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80096e2:	f3ef 8305 	mrs	r3, IPSR
 80096e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80096e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10c      	bne.n	8009708 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096ee:	f3ef 8310 	mrs	r3, PRIMASK
 80096f2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80096f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80096f6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80096f8:	b662      	cpsie	i
}
 80096fa:	bf00      	nop
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	f383 8810 	msr	PRIMASK, r3
}
 8009706:	bf00      	nop
}
 8009708:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800970a:	e02b      	b.n	8009764 <_tx_thread_system_suspend+0x204>
 800970c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800970e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	f383 8810 	msr	PRIMASK, r3
}
 8009716:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009718:	4b1b      	ldr	r3, [pc, #108]	; (8009788 <_tx_thread_system_suspend+0x228>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800971e:	429a      	cmp	r2, r3
 8009720:	d022      	beq.n	8009768 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009722:	4b15      	ldr	r3, [pc, #84]	; (8009778 <_tx_thread_system_suspend+0x218>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8009728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800972a:	2b00      	cmp	r3, #0
 800972c:	d11c      	bne.n	8009768 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800972e:	4b17      	ldr	r3, [pc, #92]	; (800978c <_tx_thread_system_suspend+0x22c>)
 8009730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009734:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009736:	f3ef 8305 	mrs	r3, IPSR
 800973a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800973c:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10c      	bne.n	800975c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009742:	f3ef 8310 	mrs	r3, PRIMASK
 8009746:	617b      	str	r3, [r7, #20]
    return(posture);
 8009748:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800974a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800974c:	b662      	cpsie	i
}
 800974e:	bf00      	nop
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f383 8810 	msr	PRIMASK, r3
}
 800975a:	bf00      	nop
}
 800975c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800975e:	e003      	b.n	8009768 <_tx_thread_system_suspend+0x208>
                return;
 8009760:	bf00      	nop
 8009762:	e002      	b.n	800976a <_tx_thread_system_suspend+0x20a>
            return;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <_tx_thread_system_suspend+0x20a>
    return;
 8009768:	bf00      	nop
}
 800976a:	3778      	adds	r7, #120	; 0x78
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20000aa0 	.word	0x20000aa0
 8009774:	200010a4 	.word	0x200010a4
 8009778:	20000b38 	.word	0x20000b38
 800977c:	20000ab8 	.word	0x20000ab8
 8009780:	20000ab0 	.word	0x20000ab0
 8009784:	20000ab4 	.word	0x20000ab4
 8009788:	20000aa4 	.word	0x20000aa4
 800978c:	e000ed04 	.word	0xe000ed04

08009790 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009796:	4b21      	ldr	r3, [pc, #132]	; (800981c <_tx_thread_time_slice+0x8c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800979c:	f3ef 8310 	mrs	r3, PRIMASK
 80097a0:	60fb      	str	r3, [r7, #12]
    return(posture);
 80097a2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80097a4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80097a6:	b672      	cpsid	i
    return(int_posture);
 80097a8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80097aa:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80097ac:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <_tx_thread_time_slice+0x90>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d024      	beq.n	8009802 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d120      	bne.n	8009802 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	69da      	ldr	r2, [r3, #28]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	4a15      	ldr	r2, [pc, #84]	; (8009824 <_tx_thread_time_slice+0x94>)
 80097ce:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d013      	beq.n	8009802 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d10d      	bne.n	8009802 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	6a12      	ldr	r2, [r2, #32]
 80097ee:	490e      	ldr	r1, [pc, #56]	; (8009828 <_tx_thread_time_slice+0x98>)
 80097f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80097f4:	4b0d      	ldr	r3, [pc, #52]	; (800982c <_tx_thread_time_slice+0x9c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a0b      	ldr	r2, [pc, #44]	; (8009828 <_tx_thread_time_slice+0x98>)
 80097fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097fe:	4a0c      	ldr	r2, [pc, #48]	; (8009830 <_tx_thread_time_slice+0xa0>)
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f383 8810 	msr	PRIMASK, r3
}
 800980c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800980e:	bf00      	nop
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20000aa0 	.word	0x20000aa0
 8009820:	20000b48 	.word	0x20000b48
 8009824:	200010a4 	.word	0x200010a4
 8009828:	20000ab8 	.word	0x20000ab8
 800982c:	20000ab4 	.word	0x20000ab4
 8009830:	20000aa4 	.word	0x20000aa4

08009834 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b08a      	sub	sp, #40	; 0x28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009840:	f3ef 8310 	mrs	r3, PRIMASK
 8009844:	617b      	str	r3, [r7, #20]
    return(posture);
 8009846:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009848:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800984a:	b672      	cpsid	i
    return(int_posture);
 800984c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800984e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009854:	2b04      	cmp	r3, #4
 8009856:	d10e      	bne.n	8009876 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8009858:	4b13      	ldr	r3, [pc, #76]	; (80098a8 <_tx_thread_timeout+0x74>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3301      	adds	r3, #1
 800985e:	4a12      	ldr	r2, [pc, #72]	; (80098a8 <_tx_thread_timeout+0x74>)
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f383 8810 	msr	PRIMASK, r3
}
 800986c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800986e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009870:	f7ff fd76 	bl	8009360 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8009874:	e013      	b.n	800989e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800987a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009882:	61bb      	str	r3, [r7, #24]
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f383 8810 	msr	PRIMASK, r3
}
 800988e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	69b9      	ldr	r1, [r7, #24]
 800989a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800989c:	4798      	blx	r3
}
 800989e:	bf00      	nop
 80098a0:	3728      	adds	r7, #40	; 0x28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000b38 	.word	0x20000b38

080098ac <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80098b2:	f3ef 8310 	mrs	r3, PRIMASK
 80098b6:	607b      	str	r3, [r7, #4]
    return(posture);
 80098b8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80098ba:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80098bc:	b672      	cpsid	i
    return(int_posture);
 80098be:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80098c0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80098c2:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <_tx_timer_expiration_process+0x3c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3301      	adds	r3, #1
 80098c8:	4a07      	ldr	r2, [pc, #28]	; (80098e8 <_tx_timer_expiration_process+0x3c>)
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f383 8810 	msr	PRIMASK, r3
}
 80098d6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80098d8:	4804      	ldr	r0, [pc, #16]	; (80098ec <_tx_timer_expiration_process+0x40>)
 80098da:	f7ff fd41 	bl	8009360 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80098de:	bf00      	nop
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20000b38 	.word	0x20000b38
 80098ec:	20000be8 	.word	0x20000be8

080098f0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80098f0:	b590      	push	{r4, r7, lr}
 80098f2:	b089      	sub	sp, #36	; 0x24
 80098f4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80098f6:	4b28      	ldr	r3, [pc, #160]	; (8009998 <_tx_timer_initialize+0xa8>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80098fc:	4b27      	ldr	r3, [pc, #156]	; (800999c <_tx_timer_initialize+0xac>)
 80098fe:	2200      	movs	r2, #0
 8009900:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009902:	4b27      	ldr	r3, [pc, #156]	; (80099a0 <_tx_timer_initialize+0xb0>)
 8009904:	2200      	movs	r2, #0
 8009906:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8009908:	4b26      	ldr	r3, [pc, #152]	; (80099a4 <_tx_timer_initialize+0xb4>)
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800990e:	4b26      	ldr	r3, [pc, #152]	; (80099a8 <_tx_timer_initialize+0xb8>)
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009914:	2280      	movs	r2, #128	; 0x80
 8009916:	2100      	movs	r1, #0
 8009918:	4824      	ldr	r0, [pc, #144]	; (80099ac <_tx_timer_initialize+0xbc>)
 800991a:	f000 fcdb 	bl	800a2d4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800991e:	4b24      	ldr	r3, [pc, #144]	; (80099b0 <_tx_timer_initialize+0xc0>)
 8009920:	4a22      	ldr	r2, [pc, #136]	; (80099ac <_tx_timer_initialize+0xbc>)
 8009922:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8009924:	4b23      	ldr	r3, [pc, #140]	; (80099b4 <_tx_timer_initialize+0xc4>)
 8009926:	4a21      	ldr	r2, [pc, #132]	; (80099ac <_tx_timer_initialize+0xbc>)
 8009928:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800992a:	4b23      	ldr	r3, [pc, #140]	; (80099b8 <_tx_timer_initialize+0xc8>)
 800992c:	4a23      	ldr	r2, [pc, #140]	; (80099bc <_tx_timer_initialize+0xcc>)
 800992e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8009930:	4b21      	ldr	r3, [pc, #132]	; (80099b8 <_tx_timer_initialize+0xc8>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3304      	adds	r3, #4
 8009936:	4a20      	ldr	r2, [pc, #128]	; (80099b8 <_tx_timer_initialize+0xc8>)
 8009938:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800993a:	4b21      	ldr	r3, [pc, #132]	; (80099c0 <_tx_timer_initialize+0xd0>)
 800993c:	4a21      	ldr	r2, [pc, #132]	; (80099c4 <_tx_timer_initialize+0xd4>)
 800993e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8009940:	4b21      	ldr	r3, [pc, #132]	; (80099c8 <_tx_timer_initialize+0xd8>)
 8009942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009946:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8009948:	4b20      	ldr	r3, [pc, #128]	; (80099cc <_tx_timer_initialize+0xdc>)
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800994e:	4b1c      	ldr	r3, [pc, #112]	; (80099c0 <_tx_timer_initialize+0xd0>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a1d      	ldr	r2, [pc, #116]	; (80099c8 <_tx_timer_initialize+0xd8>)
 8009954:	6812      	ldr	r2, [r2, #0]
 8009956:	491d      	ldr	r1, [pc, #116]	; (80099cc <_tx_timer_initialize+0xdc>)
 8009958:	6809      	ldr	r1, [r1, #0]
 800995a:	481c      	ldr	r0, [pc, #112]	; (80099cc <_tx_timer_initialize+0xdc>)
 800995c:	6800      	ldr	r0, [r0, #0]
 800995e:	2400      	movs	r4, #0
 8009960:	9405      	str	r4, [sp, #20]
 8009962:	2400      	movs	r4, #0
 8009964:	9404      	str	r4, [sp, #16]
 8009966:	9003      	str	r0, [sp, #12]
 8009968:	9102      	str	r1, [sp, #8]
 800996a:	9201      	str	r2, [sp, #4]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	4b18      	ldr	r3, [pc, #96]	; (80099d0 <_tx_timer_initialize+0xe0>)
 8009970:	4a18      	ldr	r2, [pc, #96]	; (80099d4 <_tx_timer_initialize+0xe4>)
 8009972:	4919      	ldr	r1, [pc, #100]	; (80099d8 <_tx_timer_initialize+0xe8>)
 8009974:	4819      	ldr	r0, [pc, #100]	; (80099dc <_tx_timer_initialize+0xec>)
 8009976:	f7ff fabb 	bl	8008ef0 <_tx_thread_create>
 800997a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e5      	bne.n	800994e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009982:	4b17      	ldr	r3, [pc, #92]	; (80099e0 <_tx_timer_initialize+0xf0>)
 8009984:	2200      	movs	r2, #0
 8009986:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8009988:	4b16      	ldr	r3, [pc, #88]	; (80099e4 <_tx_timer_initialize+0xf4>)
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800998e:	bf00      	nop
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	bd90      	pop	{r4, r7, pc}
 8009996:	bf00      	nop
 8009998:	20000b44 	.word	0x20000b44
 800999c:	200010a4 	.word	0x200010a4
 80099a0:	20000b48 	.word	0x20000b48
 80099a4:	20000bd8 	.word	0x20000bd8
 80099a8:	20000be4 	.word	0x20000be4
 80099ac:	20000b4c 	.word	0x20000b4c
 80099b0:	20000bcc 	.word	0x20000bcc
 80099b4:	20000bd4 	.word	0x20000bd4
 80099b8:	20000bd0 	.word	0x20000bd0
 80099bc:	20000bc8 	.word	0x20000bc8
 80099c0:	20000c98 	.word	0x20000c98
 80099c4:	20000ca4 	.word	0x20000ca4
 80099c8:	20000c9c 	.word	0x20000c9c
 80099cc:	20000ca0 	.word	0x20000ca0
 80099d0:	4154494d 	.word	0x4154494d
 80099d4:	08009b1d 	.word	0x08009b1d
 80099d8:	0800a3c0 	.word	0x0800a3c0
 80099dc:	20000be8 	.word	0x20000be8
 80099e0:	20000bdc 	.word	0x20000bdc
 80099e4:	20000be0 	.word	0x20000be0

080099e8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b089      	sub	sp, #36	; 0x24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d04a      	beq.n	8009a92 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a02:	d046      	beq.n	8009a92 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d142      	bne.n	8009a92 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	d902      	bls.n	8009a18 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8009a12:	231f      	movs	r3, #31
 8009a14:	61bb      	str	r3, [r7, #24]
 8009a16:	e002      	b.n	8009a1e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8009a1e:	4b20      	ldr	r3, [pc, #128]	; (8009aa0 <_tx_timer_system_activate+0xb8>)
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8009a2a:	4b1e      	ldr	r3, [pc, #120]	; (8009aa4 <_tx_timer_system_activate+0xbc>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d30b      	bcc.n	8009a4c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009a34:	4b1b      	ldr	r3, [pc, #108]	; (8009aa4 <_tx_timer_system_activate+0xbc>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	69fa      	ldr	r2, [r7, #28]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	109b      	asrs	r3, r3, #2
 8009a3e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009a40:	4b19      	ldr	r3, [pc, #100]	; (8009aa8 <_tx_timer_system_activate+0xc0>)
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d109      	bne.n	8009a68 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	e011      	b.n	8009a8c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8009a92:	bf00      	nop
 8009a94:	3724      	adds	r7, #36	; 0x24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	20000bd4 	.word	0x20000bd4
 8009aa4:	20000bd0 	.word	0x20000bd0
 8009aa8:	20000bcc 	.word	0x20000bcc

08009aac <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d026      	beq.n	8009b0e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d108      	bne.n	8009ae0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d117      	bne.n	8009b08 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	e013      	b.n	8009b08 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d105      	bne.n	8009b08 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	619a      	str	r2, [r3, #24]
    }
}
 8009b0e:	bf00      	nop
 8009b10:	371c      	adds	r7, #28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
	...

08009b1c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b098      	sub	sp, #96	; 0x60
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8009b24:	2300      	movs	r3, #0
 8009b26:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a73      	ldr	r2, [pc, #460]	; (8009cf8 <_tx_timer_thread_entry+0x1dc>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	f040 80de 	bne.w	8009cee <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b32:	f3ef 8310 	mrs	r3, PRIMASK
 8009b36:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8009b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b3c:	b672      	cpsid	i
    return(int_posture);
 8009b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8009b40:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8009b42:	4b6e      	ldr	r3, [pc, #440]	; (8009cfc <_tx_timer_thread_entry+0x1e0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f107 020c 	add.w	r2, r7, #12
 8009b56:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8009b58:	4b68      	ldr	r3, [pc, #416]	; (8009cfc <_tx_timer_thread_entry+0x1e0>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8009b60:	4b66      	ldr	r3, [pc, #408]	; (8009cfc <_tx_timer_thread_entry+0x1e0>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3304      	adds	r3, #4
 8009b66:	4a65      	ldr	r2, [pc, #404]	; (8009cfc <_tx_timer_thread_entry+0x1e0>)
 8009b68:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8009b6a:	4b64      	ldr	r3, [pc, #400]	; (8009cfc <_tx_timer_thread_entry+0x1e0>)
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	4b64      	ldr	r3, [pc, #400]	; (8009d00 <_tx_timer_thread_entry+0x1e4>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d103      	bne.n	8009b7e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8009b76:	4b63      	ldr	r3, [pc, #396]	; (8009d04 <_tx_timer_thread_entry+0x1e8>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a60      	ldr	r2, [pc, #384]	; (8009cfc <_tx_timer_thread_entry+0x1e0>)
 8009b7c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8009b7e:	4b62      	ldr	r3, [pc, #392]	; (8009d08 <_tx_timer_thread_entry+0x1ec>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b86:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	f383 8810 	msr	PRIMASK, r3
}
 8009b8e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b90:	f3ef 8310 	mrs	r3, PRIMASK
 8009b94:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8009b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8009b98:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b9a:	b672      	cpsid	i
    return(int_posture);
 8009b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8009b9e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8009ba0:	e07f      	b.n	8009ca2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8009bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d102      	bne.n	8009bbe <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e00e      	b.n	8009bdc <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8009bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bc8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bce:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8009bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bd2:	f107 020c 	add.w	r2, r7, #12
 8009bd6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8009bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bda:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b20      	cmp	r3, #32
 8009be2:	d911      	bls.n	8009c08 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8009be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8009bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bee:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf6:	f107 0208 	add.w	r2, r7, #8
 8009bfa:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8009bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c00:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8009c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c04:	60bb      	str	r3, [r7, #8]
 8009c06:	e01a      	b.n	8009c3e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8009c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8009c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8009c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8009c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d009      	beq.n	8009c38 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c26:	f107 0208 	add.w	r2, r7, #8
 8009c2a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8009c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c30:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8009c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c34:	60bb      	str	r3, [r7, #8]
 8009c36:	e002      	b.n	8009c3e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8009c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8009c3e:	4a33      	ldr	r2, [pc, #204]	; (8009d0c <_tx_timer_thread_entry+0x1f0>)
 8009c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	f383 8810 	msr	PRIMASK, r3
}
 8009c4e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8009c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8009c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009c5a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c60:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009c64:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c66:	b672      	cpsid	i
    return(int_posture);
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8009c6a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8009c6c:	4b27      	ldr	r3, [pc, #156]	; (8009d0c <_tx_timer_thread_entry+0x1f0>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d105      	bne.n	8009c86 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8009c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8009c80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c82:	f7ff feb1 	bl	80099e8 <_tx_timer_system_activate>
 8009c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c88:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	f383 8810 	msr	PRIMASK, r3
}
 8009c90:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c92:	f3ef 8310 	mrs	r3, PRIMASK
 8009c96:	623b      	str	r3, [r7, #32]
    return(posture);
 8009c98:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009c9a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c9c:	b672      	cpsid	i
    return(int_posture);
 8009c9e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8009ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f47f af7c 	bne.w	8009ba2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8009caa:	4b17      	ldr	r3, [pc, #92]	; (8009d08 <_tx_timer_thread_entry+0x1ec>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d116      	bne.n	8009ce0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8009cb2:	4b17      	ldr	r3, [pc, #92]	; (8009d10 <_tx_timer_thread_entry+0x1f4>)
 8009cb4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cb8:	2203      	movs	r2, #3
 8009cba:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8009cc2:	4b14      	ldr	r3, [pc, #80]	; (8009d14 <_tx_timer_thread_entry+0x1f8>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	4a12      	ldr	r2, [pc, #72]	; (8009d14 <_tx_timer_thread_entry+0x1f8>)
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cce:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f383 8810 	msr	PRIMASK, r3
}
 8009cd6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8009cd8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009cda:	f7ff fc41 	bl	8009560 <_tx_thread_system_suspend>
 8009cde:	e728      	b.n	8009b32 <_tx_timer_thread_entry+0x16>
 8009ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ce2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	f383 8810 	msr	PRIMASK, r3
}
 8009cea:	bf00      	nop
            TX_DISABLE
 8009cec:	e721      	b.n	8009b32 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8009cee:	bf00      	nop
 8009cf0:	3760      	adds	r7, #96	; 0x60
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	4154494d 	.word	0x4154494d
 8009cfc:	20000bd4 	.word	0x20000bd4
 8009d00:	20000bd0 	.word	0x20000bd0
 8009d04:	20000bcc 	.word	0x20000bcc
 8009d08:	20000bd8 	.word	0x20000bd8
 8009d0c:	20000be4 	.word	0x20000be4
 8009d10:	20000be8 	.word	0x20000be8
 8009d14:	20000b38 	.word	0x20000b38

08009d18 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08a      	sub	sp, #40	; 0x28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009d26:	2300      	movs	r3, #0
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d102      	bne.n	8009d36 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009d30:	2302      	movs	r3, #2
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
 8009d34:	e029      	b.n	8009d8a <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a2d      	ldr	r2, [pc, #180]	; (8009df0 <_txe_byte_allocate+0xd8>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d002      	beq.n	8009d46 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009d40:	2302      	movs	r3, #2
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
 8009d44:	e021      	b.n	8009d8a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d102      	bne.n	8009d52 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d50:	e01b      	b.n	8009d8a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8009d58:	2305      	movs	r3, #5
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d5c:	e015      	b.n	8009d8a <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d902      	bls.n	8009d6e <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8009d68:	2305      	movs	r3, #5
 8009d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d6c:	e00d      	b.n	8009d8a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009d74:	f3ef 8305 	mrs	r3, IPSR
 8009d78:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8009d7a:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009d7c:	4b1d      	ldr	r3, [pc, #116]	; (8009df4 <_txe_byte_allocate+0xdc>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8009d86:	2304      	movs	r3, #4
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d108      	bne.n	8009da2 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8009d90:	4b19      	ldr	r3, [pc, #100]	; (8009df8 <_txe_byte_allocate+0xe0>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	4a18      	ldr	r2, [pc, #96]	; (8009dfc <_txe_byte_allocate+0xe4>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d101      	bne.n	8009da2 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8009d9e:	2313      	movs	r3, #19
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d114      	bne.n	8009dd2 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009da8:	f3ef 8305 	mrs	r3, IPSR
 8009dac:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009dae:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009db0:	4b10      	ldr	r3, [pc, #64]	; (8009df4 <_txe_byte_allocate+0xdc>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00b      	beq.n	8009dd2 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009dba:	f3ef 8305 	mrs	r3, IPSR
 8009dbe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009dc0:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009dc2:	4b0c      	ldr	r3, [pc, #48]	; (8009df4 <_txe_byte_allocate+0xdc>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009dcc:	d201      	bcs.n	8009dd2 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009dce:	2313      	movs	r3, #19
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d106      	bne.n	8009de6 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f7fe fbd2 	bl	8008588 <_tx_byte_allocate>
 8009de4:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3728      	adds	r7, #40	; 0x28
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	42595445 	.word	0x42595445
 8009df4:	2000000c 	.word	0x2000000c
 8009df8:	20000aa0 	.word	0x20000aa0
 8009dfc:	20000be8 	.word	0x20000be8

08009e00 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b092      	sub	sp, #72	; 0x48
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e1c:	e075      	b.n	8009f0a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8009e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e20:	2b34      	cmp	r3, #52	; 0x34
 8009e22:	d002      	beq.n	8009e2a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009e24:	2302      	movs	r3, #2
 8009e26:	647b      	str	r3, [r7, #68]	; 0x44
 8009e28:	e06f      	b.n	8009f0a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8009e32:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e34:	b672      	cpsid	i
    return(int_posture);
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009e38:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009e3a:	4b3b      	ldr	r3, [pc, #236]	; (8009f28 <_txe_byte_pool_create+0x128>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	4a39      	ldr	r2, [pc, #228]	; (8009f28 <_txe_byte_pool_create+0x128>)
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e46:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4a:	f383 8810 	msr	PRIMASK, r3
}
 8009e4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8009e50:	4b36      	ldr	r3, [pc, #216]	; (8009f2c <_txe_byte_pool_create+0x12c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8009e56:	2300      	movs	r3, #0
 8009e58:	643b      	str	r3, [r7, #64]	; 0x40
 8009e5a:	e009      	b.n	8009e70 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d00b      	beq.n	8009e7c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8009e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8009e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e70:	4b2f      	ldr	r3, [pc, #188]	; (8009f30 <_txe_byte_pool_create+0x130>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d3f0      	bcc.n	8009e5c <_txe_byte_pool_create+0x5c>
 8009e7a:	e000      	b.n	8009e7e <_txe_byte_pool_create+0x7e>
                break;
 8009e7c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e82:	623b      	str	r3, [r7, #32]
    return(posture);
 8009e84:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009e86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e88:	b672      	cpsid	i
    return(int_posture);
 8009e8a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009e8c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8009e8e:	4b26      	ldr	r3, [pc, #152]	; (8009f28 <_txe_byte_pool_create+0x128>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	4a24      	ldr	r2, [pc, #144]	; (8009f28 <_txe_byte_pool_create+0x128>)
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	f383 8810 	msr	PRIMASK, r3
}
 8009ea2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009ea4:	f7ff fa22 	bl	80092ec <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d102      	bne.n	8009eb6 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8009eb4:	e029      	b.n	8009f0a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8009ec0:	e023      	b.n	8009f0a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b63      	cmp	r3, #99	; 0x63
 8009ec6:	d802      	bhi.n	8009ece <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8009ec8:	2305      	movs	r3, #5
 8009eca:	647b      	str	r3, [r7, #68]	; 0x44
 8009ecc:	e01d      	b.n	8009f0a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009ece:	4b19      	ldr	r3, [pc, #100]	; (8009f34 <_txe_byte_pool_create+0x134>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8009ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed6:	4a18      	ldr	r2, [pc, #96]	; (8009f38 <_txe_byte_pool_create+0x138>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d101      	bne.n	8009ee0 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009edc:	2313      	movs	r3, #19
 8009ede:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009ee0:	f3ef 8305 	mrs	r3, IPSR
 8009ee4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009ee6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009ee8:	4b14      	ldr	r3, [pc, #80]	; (8009f3c <_txe_byte_pool_create+0x13c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00b      	beq.n	8009f0a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009ef2:	f3ef 8305 	mrs	r3, IPSR
 8009ef6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009ef8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009efa:	4b10      	ldr	r3, [pc, #64]	; (8009f3c <_txe_byte_pool_create+0x13c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009f04:	d201      	bcs.n	8009f0a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8009f06:	2313      	movs	r3, #19
 8009f08:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d106      	bne.n	8009f1e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	68b9      	ldr	r1, [r7, #8]
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7fe fc78 	bl	800880c <_tx_byte_pool_create>
 8009f1c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8009f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3748      	adds	r7, #72	; 0x48
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	20000b38 	.word	0x20000b38
 8009f2c:	20000a90 	.word	0x20000a90
 8009f30:	20000a94 	.word	0x20000a94
 8009f34:	20000aa0 	.word	0x20000aa0
 8009f38:	20000be8 	.word	0x20000be8
 8009f3c:	2000000c 	.word	0x2000000c

08009f40 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b092      	sub	sp, #72	; 0x48
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009f58:	230c      	movs	r3, #12
 8009f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f5c:	e054      	b.n	800a008 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b1c      	cmp	r3, #28
 8009f62:	d002      	beq.n	8009f6a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009f64:	230c      	movs	r3, #12
 8009f66:	647b      	str	r3, [r7, #68]	; 0x44
 8009f68:	e04e      	b.n	800a008 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8009f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8009f72:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f74:	b672      	cpsid	i
    return(int_posture);
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009f78:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009f7a:	4b36      	ldr	r3, [pc, #216]	; (800a054 <_txe_semaphore_create+0x114>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	4a34      	ldr	r2, [pc, #208]	; (800a054 <_txe_semaphore_create+0x114>)
 8009f82:	6013      	str	r3, [r2, #0]
 8009f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f86:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8a:	f383 8810 	msr	PRIMASK, r3
}
 8009f8e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8009f90:	4b31      	ldr	r3, [pc, #196]	; (800a058 <_txe_semaphore_create+0x118>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8009f96:	2300      	movs	r3, #0
 8009f98:	643b      	str	r3, [r7, #64]	; 0x40
 8009f9a:	e009      	b.n	8009fb0 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d00b      	beq.n	8009fbc <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8009fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8009faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fac:	3301      	adds	r3, #1
 8009fae:	643b      	str	r3, [r7, #64]	; 0x40
 8009fb0:	4b2a      	ldr	r3, [pc, #168]	; (800a05c <_txe_semaphore_create+0x11c>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d3f0      	bcc.n	8009f9c <_txe_semaphore_create+0x5c>
 8009fba:	e000      	b.n	8009fbe <_txe_semaphore_create+0x7e>
                break;
 8009fbc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8009fc2:	623b      	str	r3, [r7, #32]
    return(posture);
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009fc6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009fc8:	b672      	cpsid	i
    return(int_posture);
 8009fca:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009fcc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8009fce:	4b21      	ldr	r3, [pc, #132]	; (800a054 <_txe_semaphore_create+0x114>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	4a1f      	ldr	r2, [pc, #124]	; (800a054 <_txe_semaphore_create+0x114>)
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	f383 8810 	msr	PRIMASK, r3
}
 8009fe2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009fe4:	f7ff f982 	bl	80092ec <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d102      	bne.n	8009ff6 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8009ff0:	230c      	movs	r3, #12
 8009ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8009ff4:	e008      	b.n	800a008 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009ff6:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <_txe_semaphore_create+0x120>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8009ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffe:	4a19      	ldr	r2, [pc, #100]	; (800a064 <_txe_semaphore_create+0x124>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d101      	bne.n	800a008 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a004:	2313      	movs	r3, #19
 800a006:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d114      	bne.n	800a038 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a00e:	f3ef 8305 	mrs	r3, IPSR
 800a012:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a014:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a016:	4b14      	ldr	r3, [pc, #80]	; (800a068 <_txe_semaphore_create+0x128>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a020:	f3ef 8305 	mrs	r3, IPSR
 800a024:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a026:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a028:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <_txe_semaphore_create+0x128>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a032:	d201      	bcs.n	800a038 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a034:	2313      	movs	r3, #19
 800a036:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d105      	bne.n	800a04a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	68b9      	ldr	r1, [r7, #8]
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f7fe fe70 	bl	8008d28 <_tx_semaphore_create>
 800a048:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3748      	adds	r7, #72	; 0x48
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20000b38 	.word	0x20000b38
 800a058:	20000a68 	.word	0x20000a68
 800a05c:	20000a6c 	.word	0x20000a6c
 800a060:	20000aa0 	.word	0x20000aa0
 800a064:	20000be8 	.word	0x20000be8
 800a068:	2000000c 	.word	0x2000000c

0800a06c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d102      	bne.n	800a086 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a080:	230c      	movs	r3, #12
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	e01f      	b.n	800a0c6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a15      	ldr	r2, [pc, #84]	; (800a0e0 <_txe_semaphore_get+0x74>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d002      	beq.n	800a096 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a090:	230c      	movs	r3, #12
 800a092:	617b      	str	r3, [r7, #20]
 800a094:	e017      	b.n	800a0c6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d014      	beq.n	800a0c6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a09c:	f3ef 8305 	mrs	r3, IPSR
 800a0a0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a0a2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a0a4:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <_txe_semaphore_get+0x78>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a0ae:	2304      	movs	r3, #4
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	e008      	b.n	800a0c6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800a0b4:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <_txe_semaphore_get+0x7c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	4a0b      	ldr	r2, [pc, #44]	; (800a0ec <_txe_semaphore_get+0x80>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d101      	bne.n	800a0c6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800a0c2:	2304      	movs	r3, #4
 800a0c4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d104      	bne.n	800a0d6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7fe fe7c 	bl	8008dcc <_tx_semaphore_get>
 800a0d4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800a0d6:	697b      	ldr	r3, [r7, #20]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	53454d41 	.word	0x53454d41
 800a0e4:	2000000c 	.word	0x2000000c
 800a0e8:	20000aa0 	.word	0x20000aa0
 800a0ec:	20000be8 	.word	0x20000be8

0800a0f0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b09a      	sub	sp, #104	; 0x68
 800a0f4:	af06      	add	r7, sp, #24
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
 800a0fc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a0fe:	2300      	movs	r3, #0
 800a100:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a108:	230e      	movs	r3, #14
 800a10a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a10c:	e0bb      	b.n	800a286 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800a10e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a110:	2bb0      	cmp	r3, #176	; 0xb0
 800a112:	d002      	beq.n	800a11a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a114:	230e      	movs	r3, #14
 800a116:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a118:	e0b5      	b.n	800a286 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a11a:	f3ef 8310 	mrs	r3, PRIMASK
 800a11e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a124:	b672      	cpsid	i
    return(int_posture);
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a128:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a12a:	4b64      	ldr	r3, [pc, #400]	; (800a2bc <_txe_thread_create+0x1cc>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3301      	adds	r3, #1
 800a130:	4a62      	ldr	r2, [pc, #392]	; (800a2bc <_txe_thread_create+0x1cc>)
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13a:	f383 8810 	msr	PRIMASK, r3
}
 800a13e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800a140:	2300      	movs	r3, #0
 800a142:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800a144:	4b5e      	ldr	r3, [pc, #376]	; (800a2c0 <_txe_thread_create+0x1d0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800a14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a14c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800a14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a150:	3b01      	subs	r3, #1
 800a152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a154:	4413      	add	r3, r2
 800a156:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a15c:	2300      	movs	r3, #0
 800a15e:	647b      	str	r3, [r7, #68]	; 0x44
 800a160:	e02b      	b.n	800a1ba <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a166:	429a      	cmp	r2, r3
 800a168:	d101      	bne.n	800a16e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800a16a:	2301      	movs	r3, #1
 800a16c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800a16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a170:	2b01      	cmp	r3, #1
 800a172:	d028      	beq.n	800a1c6 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800a174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d308      	bcc.n	800a190 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800a17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a184:	429a      	cmp	r2, r3
 800a186:	d203      	bcs.n	800a190 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a188:	2300      	movs	r3, #0
 800a18a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a18c:	2301      	movs	r3, #1
 800a18e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800a190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a196:	429a      	cmp	r2, r3
 800a198:	d308      	bcc.n	800a1ac <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800a19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d203      	bcs.n	800a1ac <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800a1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b2:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a1ba:	4b42      	ldr	r3, [pc, #264]	; (800a2c4 <_txe_thread_create+0x1d4>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d3ce      	bcc.n	800a162 <_txe_thread_create+0x72>
 800a1c4:	e000      	b.n	800a1c8 <_txe_thread_create+0xd8>
                break;
 800a1c6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1cc:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a1ce:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a1d0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1d2:	b672      	cpsid	i
    return(int_posture);
 800a1d4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a1d8:	4b38      	ldr	r3, [pc, #224]	; (800a2bc <_txe_thread_create+0x1cc>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	4a37      	ldr	r2, [pc, #220]	; (800a2bc <_txe_thread_create+0x1cc>)
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	f383 8810 	msr	PRIMASK, r3
}
 800a1ec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a1ee:	f7ff f87d 	bl	80092ec <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d102      	bne.n	800a200 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800a1fa:	230e      	movs	r3, #14
 800a1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1fe:	e042      	b.n	800a286 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800a200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a202:	2b00      	cmp	r3, #0
 800a204:	d102      	bne.n	800a20c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a206:	2303      	movs	r3, #3
 800a208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a20a:	e03c      	b.n	800a286 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d102      	bne.n	800a218 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a212:	2303      	movs	r3, #3
 800a214:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a216:	e036      	b.n	800a286 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800a218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a21a:	2bc7      	cmp	r3, #199	; 0xc7
 800a21c:	d802      	bhi.n	800a224 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800a21e:	2305      	movs	r3, #5
 800a220:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a222:	e030      	b.n	800a286 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800a224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a226:	2b1f      	cmp	r3, #31
 800a228:	d902      	bls.n	800a230 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800a22a:	230f      	movs	r3, #15
 800a22c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a22e:	e02a      	b.n	800a286 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800a230:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a234:	429a      	cmp	r2, r3
 800a236:	d902      	bls.n	800a23e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800a238:	2318      	movs	r3, #24
 800a23a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a23c:	e023      	b.n	800a286 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800a23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a240:	2b01      	cmp	r3, #1
 800a242:	d902      	bls.n	800a24a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800a244:	2310      	movs	r3, #16
 800a246:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a248:	e01d      	b.n	800a286 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800a24a:	4b1f      	ldr	r3, [pc, #124]	; (800a2c8 <_txe_thread_create+0x1d8>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800a250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a252:	4a1e      	ldr	r2, [pc, #120]	; (800a2cc <_txe_thread_create+0x1dc>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d101      	bne.n	800a25c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a258:	2313      	movs	r3, #19
 800a25a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a25c:	f3ef 8305 	mrs	r3, IPSR
 800a260:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a262:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a264:	4b1a      	ldr	r3, [pc, #104]	; (800a2d0 <_txe_thread_create+0x1e0>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4313      	orrs	r3, r2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00b      	beq.n	800a286 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a26e:	f3ef 8305 	mrs	r3, IPSR
 800a272:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a274:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a276:	4b16      	ldr	r3, [pc, #88]	; (800a2d0 <_txe_thread_create+0x1e0>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a280:	d201      	bcs.n	800a286 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a282:	2313      	movs	r3, #19
 800a284:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d112      	bne.n	800a2b2 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800a28c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a28e:	9305      	str	r3, [sp, #20]
 800a290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a292:	9304      	str	r3, [sp, #16]
 800a294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a296:	9303      	str	r3, [sp, #12]
 800a298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a29a:	9302      	str	r3, [sp, #8]
 800a29c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a29e:	9301      	str	r3, [sp, #4]
 800a2a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	68b9      	ldr	r1, [r7, #8]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7fe fe20 	bl	8008ef0 <_tx_thread_create>
 800a2b0:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800a2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3750      	adds	r7, #80	; 0x50
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20000b38 	.word	0x20000b38
 800a2c0:	20000aa8 	.word	0x20000aa8
 800a2c4:	20000aac 	.word	0x20000aac
 800a2c8:	20000aa0 	.word	0x20000aa0
 800a2cc:	20000be8 	.word	0x20000be8
 800a2d0:	2000000c 	.word	0x2000000c

0800a2d4 <memset>:
 800a2d4:	4402      	add	r2, r0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d100      	bne.n	800a2de <memset+0xa>
 800a2dc:	4770      	bx	lr
 800a2de:	f803 1b01 	strb.w	r1, [r3], #1
 800a2e2:	e7f9      	b.n	800a2d8 <memset+0x4>

0800a2e4 <__libc_init_array>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	4d0d      	ldr	r5, [pc, #52]	; (800a31c <__libc_init_array+0x38>)
 800a2e8:	4c0d      	ldr	r4, [pc, #52]	; (800a320 <__libc_init_array+0x3c>)
 800a2ea:	1b64      	subs	r4, r4, r5
 800a2ec:	10a4      	asrs	r4, r4, #2
 800a2ee:	2600      	movs	r6, #0
 800a2f0:	42a6      	cmp	r6, r4
 800a2f2:	d109      	bne.n	800a308 <__libc_init_array+0x24>
 800a2f4:	4d0b      	ldr	r5, [pc, #44]	; (800a324 <__libc_init_array+0x40>)
 800a2f6:	4c0c      	ldr	r4, [pc, #48]	; (800a328 <__libc_init_array+0x44>)
 800a2f8:	f000 f818 	bl	800a32c <_init>
 800a2fc:	1b64      	subs	r4, r4, r5
 800a2fe:	10a4      	asrs	r4, r4, #2
 800a300:	2600      	movs	r6, #0
 800a302:	42a6      	cmp	r6, r4
 800a304:	d105      	bne.n	800a312 <__libc_init_array+0x2e>
 800a306:	bd70      	pop	{r4, r5, r6, pc}
 800a308:	f855 3b04 	ldr.w	r3, [r5], #4
 800a30c:	4798      	blx	r3
 800a30e:	3601      	adds	r6, #1
 800a310:	e7ee      	b.n	800a2f0 <__libc_init_array+0xc>
 800a312:	f855 3b04 	ldr.w	r3, [r5], #4
 800a316:	4798      	blx	r3
 800a318:	3601      	adds	r6, #1
 800a31a:	e7f2      	b.n	800a302 <__libc_init_array+0x1e>
 800a31c:	0800a41c 	.word	0x0800a41c
 800a320:	0800a41c 	.word	0x0800a41c
 800a324:	0800a41c 	.word	0x0800a41c
 800a328:	0800a420 	.word	0x0800a420

0800a32c <_init>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	bf00      	nop
 800a330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a332:	bc08      	pop	{r3}
 800a334:	469e      	mov	lr, r3
 800a336:	4770      	bx	lr

0800a338 <_fini>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	bf00      	nop
 800a33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33e:	bc08      	pop	{r3}
 800a340:	469e      	mov	lr, r3
 800a342:	4770      	bx	lr
