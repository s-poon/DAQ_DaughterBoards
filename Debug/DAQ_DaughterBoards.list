
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb28  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800bd08  0800bd08  0000cd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beb4  0800beb4  0000d050  2**0
                  CONTENTS
  4 .ARM          00000008  0800beb4  0800beb4  0000ceb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bebc  0800bebc  0000d050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bebc  0800bebc  0000cebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bec0  0800bec0  0000cec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  0800bec4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010e44  20000050  0800bf14  0000d050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010e94  0800bf14  0000de94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b119  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b43  00000000  00000000  00058199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000059d0  00000000  00000000  00060ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000043fa  00000000  00000000  000666b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003522d  00000000  00000000  0006aaaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004ed0b  00000000  00000000  0009fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001408ee  00000000  00000000  000ee9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022f2d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00018258  00000000  00000000  0022f314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fd  00000000  00000000  0024756c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000050 	.word	0x20000050
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bcf0 	.word	0x0800bcf0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000054 	.word	0x20000054
 800021c:	0800bcf0 	.word	0x0800bcf0

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20010888 	.word	0x20010888
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20010924 	.word	0x20010924
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	2001088c 	.word	0x2001088c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20010890 	.word	0x20010890
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20010e90 	.word	0x20010e90

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f00a fdfd 	bl	800aff8 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f00a fc0a 	bl	800ac1c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20010930 	.word	0x20010930
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20010e90 	.word	0x20010e90
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20010934 	.word	0x20010934
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	200109c0 	.word	0x200109c0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	200109c4 	.word	0x200109c4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	200109bc 	.word	0x200109bc
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	200109b8 	.word	0x200109b8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20010924 	.word	0x20010924
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	2001088c 	.word	0x2001088c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20010890 	.word	0x20010890
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_uldivmod>:
 8000458:	b953      	cbnz	r3, 8000470 <__aeabi_uldivmod+0x18>
 800045a:	b94a      	cbnz	r2, 8000470 <__aeabi_uldivmod+0x18>
 800045c:	2900      	cmp	r1, #0
 800045e:	bf08      	it	eq
 8000460:	2800      	cmpeq	r0, #0
 8000462:	bf1c      	itt	ne
 8000464:	f04f 31ff 	movne.w	r1, #4294967295
 8000468:	f04f 30ff 	movne.w	r0, #4294967295
 800046c:	f000 b96a 	b.w	8000744 <__aeabi_idiv0>
 8000470:	f1ad 0c08 	sub.w	ip, sp, #8
 8000474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000478:	f000 f806 	bl	8000488 <__udivmoddi4>
 800047c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000484:	b004      	add	sp, #16
 8000486:	4770      	bx	lr

08000488 <__udivmoddi4>:
 8000488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800048c:	9d08      	ldr	r5, [sp, #32]
 800048e:	460c      	mov	r4, r1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d14e      	bne.n	8000532 <__udivmoddi4+0xaa>
 8000494:	4694      	mov	ip, r2
 8000496:	458c      	cmp	ip, r1
 8000498:	4686      	mov	lr, r0
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	d962      	bls.n	8000566 <__udivmoddi4+0xde>
 80004a0:	b14a      	cbz	r2, 80004b6 <__udivmoddi4+0x2e>
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	4091      	lsls	r1, r2
 80004a8:	fa20 f303 	lsr.w	r3, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	4319      	orrs	r1, r3
 80004b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ba:	fa1f f68c 	uxth.w	r6, ip
 80004be:	fbb1 f4f7 	udiv	r4, r1, r7
 80004c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004c6:	fb07 1114 	mls	r1, r7, r4, r1
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb04 f106 	mul.w	r1, r4, r6
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d90a      	bls.n	80004ec <__udivmoddi4+0x64>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f104 30ff 	add.w	r0, r4, #4294967295
 80004de:	f080 8112 	bcs.w	8000706 <__udivmoddi4+0x27e>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 810f 	bls.w	8000706 <__udivmoddi4+0x27e>
 80004e8:	3c02      	subs	r4, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a59      	subs	r1, r3, r1
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f6:	fb07 1110 	mls	r1, r7, r0, r1
 80004fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fe:	fb00 f606 	mul.w	r6, r0, r6
 8000502:	429e      	cmp	r6, r3
 8000504:	d90a      	bls.n	800051c <__udivmoddi4+0x94>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 31ff 	add.w	r1, r0, #4294967295
 800050e:	f080 80fc 	bcs.w	800070a <__udivmoddi4+0x282>
 8000512:	429e      	cmp	r6, r3
 8000514:	f240 80f9 	bls.w	800070a <__udivmoddi4+0x282>
 8000518:	4463      	add	r3, ip
 800051a:	3802      	subs	r0, #2
 800051c:	1b9b      	subs	r3, r3, r6
 800051e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000522:	2100      	movs	r1, #0
 8000524:	b11d      	cbz	r5, 800052e <__udivmoddi4+0xa6>
 8000526:	40d3      	lsrs	r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	e9c5 3200 	strd	r3, r2, [r5]
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	428b      	cmp	r3, r1
 8000534:	d905      	bls.n	8000542 <__udivmoddi4+0xba>
 8000536:	b10d      	cbz	r5, 800053c <__udivmoddi4+0xb4>
 8000538:	e9c5 0100 	strd	r0, r1, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	4608      	mov	r0, r1
 8000540:	e7f5      	b.n	800052e <__udivmoddi4+0xa6>
 8000542:	fab3 f183 	clz	r1, r3
 8000546:	2900      	cmp	r1, #0
 8000548:	d146      	bne.n	80005d8 <__udivmoddi4+0x150>
 800054a:	42a3      	cmp	r3, r4
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xcc>
 800054e:	4290      	cmp	r0, r2
 8000550:	f0c0 80f0 	bcc.w	8000734 <__udivmoddi4+0x2ac>
 8000554:	1a86      	subs	r6, r0, r2
 8000556:	eb64 0303 	sbc.w	r3, r4, r3
 800055a:	2001      	movs	r0, #1
 800055c:	2d00      	cmp	r5, #0
 800055e:	d0e6      	beq.n	800052e <__udivmoddi4+0xa6>
 8000560:	e9c5 6300 	strd	r6, r3, [r5]
 8000564:	e7e3      	b.n	800052e <__udivmoddi4+0xa6>
 8000566:	2a00      	cmp	r2, #0
 8000568:	f040 8090 	bne.w	800068c <__udivmoddi4+0x204>
 800056c:	eba1 040c 	sub.w	r4, r1, ip
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	fa1f f78c 	uxth.w	r7, ip
 8000578:	2101      	movs	r1, #1
 800057a:	fbb4 f6f8 	udiv	r6, r4, r8
 800057e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000582:	fb08 4416 	mls	r4, r8, r6, r4
 8000586:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800058a:	fb07 f006 	mul.w	r0, r7, r6
 800058e:	4298      	cmp	r0, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x11c>
 8000592:	eb1c 0303 	adds.w	r3, ip, r3
 8000596:	f106 34ff 	add.w	r4, r6, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x11a>
 800059c:	4298      	cmp	r0, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2b4>
 80005a2:	4626      	mov	r6, r4
 80005a4:	1a1c      	subs	r4, r3, r0
 80005a6:	fa1f f38e 	uxth.w	r3, lr
 80005aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80005ae:	fb08 4410 	mls	r4, r8, r0, r4
 80005b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b6:	fb00 f707 	mul.w	r7, r0, r7
 80005ba:	429f      	cmp	r7, r3
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x148>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c6:	d202      	bcs.n	80005ce <__udivmoddi4+0x146>
 80005c8:	429f      	cmp	r7, r3
 80005ca:	f200 80b0 	bhi.w	800072e <__udivmoddi4+0x2a6>
 80005ce:	4620      	mov	r0, r4
 80005d0:	1bdb      	subs	r3, r3, r7
 80005d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005d6:	e7a5      	b.n	8000524 <__udivmoddi4+0x9c>
 80005d8:	f1c1 0620 	rsb	r6, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 f706 	lsr.w	r7, r2, r6
 80005e2:	431f      	orrs	r7, r3
 80005e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e8:	fa04 f301 	lsl.w	r3, r4, r1
 80005ec:	ea43 030c 	orr.w	r3, r3, ip
 80005f0:	40f4      	lsrs	r4, r6
 80005f2:	fa00 f801 	lsl.w	r8, r0, r1
 80005f6:	0c38      	lsrs	r0, r7, #16
 80005f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000600:	fa1f fc87 	uxth.w	ip, r7
 8000604:	fb00 441e 	mls	r4, r0, lr, r4
 8000608:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800060c:	fb0e f90c 	mul.w	r9, lr, ip
 8000610:	45a1      	cmp	r9, r4
 8000612:	fa02 f201 	lsl.w	r2, r2, r1
 8000616:	d90a      	bls.n	800062e <__udivmoddi4+0x1a6>
 8000618:	193c      	adds	r4, r7, r4
 800061a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800061e:	f080 8084 	bcs.w	800072a <__udivmoddi4+0x2a2>
 8000622:	45a1      	cmp	r9, r4
 8000624:	f240 8081 	bls.w	800072a <__udivmoddi4+0x2a2>
 8000628:	f1ae 0e02 	sub.w	lr, lr, #2
 800062c:	443c      	add	r4, r7
 800062e:	eba4 0409 	sub.w	r4, r4, r9
 8000632:	fa1f f983 	uxth.w	r9, r3
 8000636:	fbb4 f3f0 	udiv	r3, r4, r0
 800063a:	fb00 4413 	mls	r4, r0, r3, r4
 800063e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000642:	fb03 fc0c 	mul.w	ip, r3, ip
 8000646:	45a4      	cmp	ip, r4
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x1d2>
 800064a:	193c      	adds	r4, r7, r4
 800064c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000650:	d267      	bcs.n	8000722 <__udivmoddi4+0x29a>
 8000652:	45a4      	cmp	ip, r4
 8000654:	d965      	bls.n	8000722 <__udivmoddi4+0x29a>
 8000656:	3b02      	subs	r3, #2
 8000658:	443c      	add	r4, r7
 800065a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800065e:	fba0 9302 	umull	r9, r3, r0, r2
 8000662:	eba4 040c 	sub.w	r4, r4, ip
 8000666:	429c      	cmp	r4, r3
 8000668:	46ce      	mov	lr, r9
 800066a:	469c      	mov	ip, r3
 800066c:	d351      	bcc.n	8000712 <__udivmoddi4+0x28a>
 800066e:	d04e      	beq.n	800070e <__udivmoddi4+0x286>
 8000670:	b155      	cbz	r5, 8000688 <__udivmoddi4+0x200>
 8000672:	ebb8 030e 	subs.w	r3, r8, lr
 8000676:	eb64 040c 	sbc.w	r4, r4, ip
 800067a:	fa04 f606 	lsl.w	r6, r4, r6
 800067e:	40cb      	lsrs	r3, r1
 8000680:	431e      	orrs	r6, r3
 8000682:	40cc      	lsrs	r4, r1
 8000684:	e9c5 6400 	strd	r6, r4, [r5]
 8000688:	2100      	movs	r1, #0
 800068a:	e750      	b.n	800052e <__udivmoddi4+0xa6>
 800068c:	f1c2 0320 	rsb	r3, r2, #32
 8000690:	fa20 f103 	lsr.w	r1, r0, r3
 8000694:	fa0c fc02 	lsl.w	ip, ip, r2
 8000698:	fa24 f303 	lsr.w	r3, r4, r3
 800069c:	4094      	lsls	r4, r2
 800069e:	430c      	orrs	r4, r1
 80006a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a8:	fa1f f78c 	uxth.w	r7, ip
 80006ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b0:	fb08 3110 	mls	r1, r8, r0, r3
 80006b4:	0c23      	lsrs	r3, r4, #16
 80006b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ba:	fb00 f107 	mul.w	r1, r0, r7
 80006be:	4299      	cmp	r1, r3
 80006c0:	d908      	bls.n	80006d4 <__udivmoddi4+0x24c>
 80006c2:	eb1c 0303 	adds.w	r3, ip, r3
 80006c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80006ca:	d22c      	bcs.n	8000726 <__udivmoddi4+0x29e>
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d92a      	bls.n	8000726 <__udivmoddi4+0x29e>
 80006d0:	3802      	subs	r0, #2
 80006d2:	4463      	add	r3, ip
 80006d4:	1a5b      	subs	r3, r3, r1
 80006d6:	b2a4      	uxth	r4, r4
 80006d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80006dc:	fb08 3311 	mls	r3, r8, r1, r3
 80006e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e4:	fb01 f307 	mul.w	r3, r1, r7
 80006e8:	42a3      	cmp	r3, r4
 80006ea:	d908      	bls.n	80006fe <__udivmoddi4+0x276>
 80006ec:	eb1c 0404 	adds.w	r4, ip, r4
 80006f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80006f4:	d213      	bcs.n	800071e <__udivmoddi4+0x296>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d911      	bls.n	800071e <__udivmoddi4+0x296>
 80006fa:	3902      	subs	r1, #2
 80006fc:	4464      	add	r4, ip
 80006fe:	1ae4      	subs	r4, r4, r3
 8000700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000704:	e739      	b.n	800057a <__udivmoddi4+0xf2>
 8000706:	4604      	mov	r4, r0
 8000708:	e6f0      	b.n	80004ec <__udivmoddi4+0x64>
 800070a:	4608      	mov	r0, r1
 800070c:	e706      	b.n	800051c <__udivmoddi4+0x94>
 800070e:	45c8      	cmp	r8, r9
 8000710:	d2ae      	bcs.n	8000670 <__udivmoddi4+0x1e8>
 8000712:	ebb9 0e02 	subs.w	lr, r9, r2
 8000716:	eb63 0c07 	sbc.w	ip, r3, r7
 800071a:	3801      	subs	r0, #1
 800071c:	e7a8      	b.n	8000670 <__udivmoddi4+0x1e8>
 800071e:	4631      	mov	r1, r6
 8000720:	e7ed      	b.n	80006fe <__udivmoddi4+0x276>
 8000722:	4603      	mov	r3, r0
 8000724:	e799      	b.n	800065a <__udivmoddi4+0x1d2>
 8000726:	4630      	mov	r0, r6
 8000728:	e7d4      	b.n	80006d4 <__udivmoddi4+0x24c>
 800072a:	46d6      	mov	lr, sl
 800072c:	e77f      	b.n	800062e <__udivmoddi4+0x1a6>
 800072e:	4463      	add	r3, ip
 8000730:	3802      	subs	r0, #2
 8000732:	e74d      	b.n	80005d0 <__udivmoddi4+0x148>
 8000734:	4606      	mov	r6, r0
 8000736:	4623      	mov	r3, r4
 8000738:	4608      	mov	r0, r1
 800073a:	e70f      	b.n	800055c <__udivmoddi4+0xd4>
 800073c:	3e02      	subs	r6, #2
 800073e:	4463      	add	r3, ip
 8000740:	e730      	b.n	80005a4 <__udivmoddi4+0x11c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000754:	2334      	movs	r3, #52	@ 0x34
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <tx_application_define+0x4c>)
 800075e:	490e      	ldr	r1, [pc, #56]	@ (8000798 <tx_application_define+0x50>)
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <tx_application_define+0x54>)
 8000762:	f00a fef3 	bl	800b54c <_txe_byte_pool_create>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10e      	bne.n	800078a <tx_application_define+0x42>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <tx_application_define+0x54>)
 800076e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f000 fa4d 	bl	8000c10 <App_ThreadX_Init>
 8000776:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f001 f9e6 	bl	8001b54 <ThreadX_Init>
 8000788:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000006c 	.word	0x2000006c
 8000798:	0800bd08 	.word	0x0800bd08
 800079c:	2001006c 	.word	0x2001006c

080007a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00b fa6d 	bl	800bc98 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800082a:	f002 fa87 	bl	8002d3c <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 fde0 	bl	80013f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000844:	f003 fd4a 	bl	80042dc <HAL_ADCEx_MultiModeConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800084e:	f000 fdd3 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_ADC1_Init+0xec>)
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000856:	2306      	movs	r3, #6
 8000858:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	237f      	movs	r3, #127	@ 0x7f
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000870:	f002 ff72 	bl	8003758 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087a:	f000 fdbd 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200100a0 	.word	0x200100a0
 800088c:	10c00010 	.word	0x10c00010

08000890 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f00b f9fb 	bl	800bc98 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008a4:	4a5e      	ldr	r2, [pc, #376]	@ (8000a20 <MX_ADC4_Init+0x190>)
 80008a6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ae:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b59      	ldr	r3, [pc, #356]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008bc:	4b57      	ldr	r3, [pc, #348]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c2:	4b56      	ldr	r3, [pc, #344]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008c8:	4b54      	ldr	r3, [pc, #336]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008d4:	4b51      	ldr	r3, [pc, #324]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008dc:	2208      	movs	r2, #8
 80008de:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e8:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008f4:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fc:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000902:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000904:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800090c:	4843      	ldr	r0, [pc, #268]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800090e:	f002 fa15 	bl	8002d3c <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 fd6e 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800091c:	4b41      	ldr	r3, [pc, #260]	@ (8000a24 <MX_ADC4_Init+0x194>)
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000920:	2306      	movs	r3, #6
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000928:	237f      	movs	r3, #127	@ 0x7f
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4838      	ldr	r0, [pc, #224]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800093a:	f002 ff0d 	bl	8003758 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000944:	f000 fd58 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <MX_ADC4_Init+0x198>)
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094c:	230c      	movs	r3, #12
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4831      	ldr	r0, [pc, #196]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000956:	f002 feff 	bl	8003758 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000960:	f000 fd4a 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b31      	ldr	r3, [pc, #196]	@ (8000a2c <MX_ADC4_Init+0x19c>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000968:	2312      	movs	r3, #18
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	482a      	ldr	r0, [pc, #168]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000972:	f002 fef1 	bl	8003758 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 800097c:	f000 fd3c 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_ADC4_Init+0x1a0>)
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000984:	2318      	movs	r3, #24
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800098e:	f002 fee3 	bl	8003758 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000998:	f000 fd2e 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_ADC4_Init+0x1a4>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ac:	f002 fed4 	bl	8003758 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 80009b6:	f000 fd1f 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_ADC4_Init+0x1a8>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009be:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ca:	f002 fec5 	bl	8003758 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 80009d4:	f000 fd10 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_ADC4_Init+0x1ac>)
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009dc:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009e8:	f002 feb6 	bl	8003758 <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 80009f2:	f000 fd01 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_ADC4_Init+0x1b0>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009fa:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000a06:	f002 fea7 	bl	8003758 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000a10:	f000 fcf2 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2001010c 	.word	0x2001010c
 8000a20:	50000500 	.word	0x50000500
 8000a24:	14f00020 	.word	0x14f00020
 8000a28:	32601000 	.word	0x32601000
 8000a2c:	2a000400 	.word	0x2a000400
 8000a30:	2e300800 	.word	0x2e300800
 8000a34:	36902000 	.word	0x36902000
 8000a38:	1d500080 	.word	0x1d500080
 8000a3c:	21800100 	.word	0x21800100
 8000a40:	25b00200 	.word	0x25b00200

08000a44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0a2      	sub	sp, #136	@ 0x88
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	2254      	movs	r2, #84	@ 0x54
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00b f917 	bl	800bc98 <memset>
  if(adcHandle->Instance==ADC1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a72:	d135      	bne.n	8000ae0 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	4618      	mov	r0, r3
 8000a86:	f006 fd43 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a90:	f000 fcb2 	bl	80013f8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a94:	4b58      	ldr	r3, [pc, #352]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	4a57      	ldr	r2, [pc, #348]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa0:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b52      	ldr	r3, [pc, #328]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab0:	4a51      	ldr	r2, [pc, #324]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f004 fe09 	bl	80056f0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000ade:	e086      	b.n	8000bee <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a45      	ldr	r2, [pc, #276]	@ (8000bfc <HAL_ADC_MspInit+0x1b8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 8081 	bne.w	8000bee <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000af2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 fd07 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000b08:	f000 fc76 	bl	80013f8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a39      	ldr	r2, [pc, #228]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	4a33      	ldr	r2, [pc, #204]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b58:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b66:	4619      	mov	r1, r3
 8000b68:	4825      	ldr	r0, [pc, #148]	@ (8000c00 <HAL_ADC_MspInit+0x1bc>)
 8000b6a:	f004 fdc1 	bl	80056f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000b6e:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000b72:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b80:	4619      	mov	r1, r3
 8000b82:	4820      	ldr	r0, [pc, #128]	@ (8000c04 <HAL_ADC_MspInit+0x1c0>)
 8000b84:	f004 fdb4 	bl	80056f0 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b8a:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_ADC_MspInit+0x1c8>)
 8000b8c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b90:	2226      	movs	r2, #38	@ 0x26
 8000b92:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb8:	2220      	movs	r2, #32
 8000bba:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000bc2:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bc4:	f003 fe64 	bl	8004890 <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000bce:	f000 fc13 	bl	80013f8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	203d      	movs	r0, #61	@ 0x3d
 8000be4:	f003 fd3a 	bl	800465c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000be8:	203d      	movs	r0, #61	@ 0x3d
 8000bea:	f003 fd51 	bl	8004690 <HAL_NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3788      	adds	r7, #136	@ 0x88
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000500 	.word	0x50000500
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	20010178 	.word	0x20010178
 8000c0c:	40020030 	.word	0x40020030

08000c10 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  ret = ThreadX_Init(memory_ptr);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 ff99 	bl	8001b54 <ThreadX_Init>
 8000c22:	60f8      	str	r0, [r7, #12]
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000c32:	f009 f9c1 	bl	8009fb8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <MX_CRC_Init+0x40>)
 8000c44:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c66:	f003 fd21 	bl	80046ac <HAL_CRC_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c70:	f000 fbc2 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200101d8 	.word	0x200101d8
 8000c7c:	40023000 	.word	0x40023000

08000c80 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_CRC_MspInit+0x38>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d10b      	bne.n	8000caa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c96:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023000 	.word	0x40023000
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cca:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	200d      	movs	r0, #13
 8000cfc:	f003 fcae 	bl	800465c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d00:	200d      	movs	r0, #13
 8000d02:	f003 fcc5 	bl	8004690 <HAL_NVIC_EnableIRQ>

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d1a:	4a20      	ldr	r2, [pc, #128]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d30:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d50:	221f      	movs	r2, #31
 8000d52:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d56:	2208      	movs	r2, #8
 8000d58:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d62:	2202      	movs	r2, #2
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 31;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d68:	221f      	movs	r2, #31
 8000d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 8;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d6e:	2208      	movs	r2, #8
 8000d70:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d78:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	@ (8000d98 <MX_FDCAN1_Init+0x84>)
 8000d86:	f004 f86b 	bl	8004e60 <HAL_FDCAN_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000d90:	f000 fb32 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200101fc 	.word	0x200101fc
 8000d9c:	40006400 	.word	0x40006400

08000da0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09e      	sub	sp, #120	@ 0x78
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	2254      	movs	r2, #84	@ 0x54
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f00a ff69 	bl	800bc98 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a28      	ldr	r2, [pc, #160]	@ (8000e6c <HAL_FDCAN_MspInit+0xcc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d149      	bne.n	8000e64 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dda:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4618      	mov	r0, r3
 8000de2:	f006 fb95 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000dec:	f000 fb04 	bl	80013f8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000df0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <HAL_FDCAN_MspInit+0xd0>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e70 <HAL_FDCAN_MspInit+0xd0>)
 8000df6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <HAL_FDCAN_MspInit+0xd0>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_FDCAN_MspInit+0xd0>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0c:	4a18      	ldr	r2, [pc, #96]	@ (8000e70 <HAL_FDCAN_MspInit+0xd0>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e14:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <HAL_FDCAN_MspInit+0xd0>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e20:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e24:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e32:	2309      	movs	r3, #9
 8000e34:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e40:	f004 fc56 	bl	80056f0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2015      	movs	r0, #21
 8000e4a:	f003 fc07 	bl	800465c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e4e:	2015      	movs	r0, #21
 8000e50:	f003 fc1e 	bl	8004690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2016      	movs	r0, #22
 8000e5a:	f003 fbff 	bl	800465c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e5e:	2016      	movs	r0, #22
 8000e60:	f003 fc16 	bl	8004690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e64:	bf00      	nop
 8000e66:	3778      	adds	r7, #120	@ 0x78
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40006400 	.word	0x40006400
 8000e70:	40021000 	.word	0x40021000

08000e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	@ 0x30
 8000e78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8a:	4b71      	ldr	r3, [pc, #452]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a70      	ldr	r2, [pc, #448]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b6e      	ldr	r3, [pc, #440]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a6a      	ldr	r2, [pc, #424]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b68      	ldr	r3, [pc, #416]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b65      	ldr	r3, [pc, #404]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	4a64      	ldr	r2, [pc, #400]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec6:	4b62      	ldr	r3, [pc, #392]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ede:	4b5c      	ldr	r3, [pc, #368]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eea:	4b59      	ldr	r3, [pc, #356]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	4a58      	ldr	r2, [pc, #352]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef6:	4b56      	ldr	r3, [pc, #344]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	4b53      	ldr	r3, [pc, #332]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a52      	ldr	r2, [pc, #328]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b50      	ldr	r3, [pc, #320]	@ (8001050 <MX_GPIO_Init+0x1dc>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f641 7130 	movw	r1, #7984	@ 0x1f30
 8000f20:	484c      	ldr	r0, [pc, #304]	@ (8001054 <MX_GPIO_Init+0x1e0>)
 8000f22:	f004 fd67 	bl	80059f4 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f246 0102 	movw	r1, #24578	@ 0x6002
 8000f2c:	484a      	ldr	r0, [pc, #296]	@ (8001058 <MX_GPIO_Init+0x1e4>)
 8000f2e:	f004 fd61 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000f38:	4848      	ldr	r0, [pc, #288]	@ (800105c <MX_GPIO_Init+0x1e8>)
 8000f3a:	f004 fd5b 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f44:	4846      	ldr	r0, [pc, #280]	@ (8001060 <MX_GPIO_Init+0x1ec>)
 8000f46:	f004 fd55 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f54:	f004 fd4e 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f58:	f641 7330 	movw	r3, #7984	@ 0x1f30
 8000f5c:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4838      	ldr	r0, [pc, #224]	@ (8001054 <MX_GPIO_Init+0x1e0>)
 8000f72:	f004 fbbd 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY1_Pin;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY1_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4833      	ldr	r0, [pc, #204]	@ (8001058 <MX_GPIO_Init+0x1e4>)
 8000f8c:	f004 fbb0 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 8000f90:	f246 0302 	movw	r3, #24578	@ 0x6002
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482b      	ldr	r0, [pc, #172]	@ (8001058 <MX_GPIO_Init+0x1e4>)
 8000faa:	f004 fba1 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin;
 8000fae:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4825      	ldr	r0, [pc, #148]	@ (800105c <MX_GPIO_Init+0x1e8>)
 8000fc8:	f004 fb92 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY2_Pin;
 8000fcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY2_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481e      	ldr	r0, [pc, #120]	@ (800105c <MX_GPIO_Init+0x1e8>)
 8000fe4:	f004 fb84 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 8000fe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4817      	ldr	r0, [pc, #92]	@ (8001060 <MX_GPIO_Init+0x1ec>)
 8001002:	f004 fb75 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 8001006:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001022:	f004 fb65 	bl	80056f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	2006      	movs	r0, #6
 800102c:	f003 fb16 	bl	800465c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001030:	2006      	movs	r0, #6
 8001032:	f003 fb2d 	bl	8004690 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2101      	movs	r1, #1
 800103a:	2017      	movs	r0, #23
 800103c:	f003 fb0e 	bl	800465c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001040:	2017      	movs	r0, #23
 8001042:	f003 fb25 	bl	8004690 <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3730      	adds	r7, #48	@ 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	48000800 	.word	0x48000800
 8001058:	48000400 	.word	0x48000400
 800105c:	48001000 	.word	0x48001000
 8001060:	48000c00 	.word	0x48000c00

08001064 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <MX_I2C1_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <MX_I2C1_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001070:	4a1b      	ldr	r2, [pc, #108]	@ (80010e0 <MX_I2C1_Init+0x7c>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_I2C1_Init+0x74>)
 800107c:	2201      	movs	r2, #1
 800107e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_I2C1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109e:	480e      	ldr	r0, [pc, #56]	@ (80010d8 <MX_I2C1_Init+0x74>)
 80010a0:	f004 fcf2 	bl	8005a88 <HAL_I2C_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010aa:	f000 f9a5 	bl	80013f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <MX_I2C1_Init+0x74>)
 80010b2:	f005 fb82 	bl	80067ba <HAL_I2CEx_ConfigAnalogFilter>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010bc:	f000 f99c 	bl	80013f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_I2C1_Init+0x74>)
 80010c4:	f005 fbc4 	bl	8006850 <HAL_I2CEx_ConfigDigitalFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 f993 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20010260 	.word	0x20010260
 80010dc:	40005400 	.word	0x40005400
 80010e0:	30909dec 	.word	0x30909dec

080010e4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */
//    hi2c4.XferCount
  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <MX_I2C4_Init+0x74>)
 80010ea:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <MX_I2C4_Init+0x78>)
 80010ec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00F07BFF;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <MX_I2C4_Init+0x74>)
 80010f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <MX_I2C4_Init+0x7c>)
 80010f2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010f4:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <MX_I2C4_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <MX_I2C4_Init+0x74>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_I2C4_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <MX_I2C4_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_I2C4_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_I2C4_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_I2C4_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800111e:	480e      	ldr	r0, [pc, #56]	@ (8001158 <MX_I2C4_Init+0x74>)
 8001120:	f004 fcb2 	bl	8005a88 <HAL_I2C_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800112a:	f000 f965 	bl	80013f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4809      	ldr	r0, [pc, #36]	@ (8001158 <MX_I2C4_Init+0x74>)
 8001132:	f005 fb42 	bl	80067ba <HAL_I2CEx_ConfigAnalogFilter>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800113c:	f000 f95c 	bl	80013f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001140:	2100      	movs	r1, #0
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_I2C4_Init+0x74>)
 8001144:	f005 fb84 	bl	8006850 <HAL_I2CEx_ConfigDigitalFilter>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800114e:	f000 f953 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200102b4 	.word	0x200102b4
 800115c:	40008400 	.word	0x40008400
 8001160:	00f07bff 	.word	0x00f07bff

08001164 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0a2      	sub	sp, #136	@ 0x88
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	2254      	movs	r2, #84	@ 0x54
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00a fd87 	bl	800bc98 <memset>
  if(i2cHandle->Instance==I2C1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a57      	ldr	r2, [pc, #348]	@ (80012ec <HAL_I2C_MspInit+0x188>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d158      	bne.n	8001246 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001194:	2340      	movs	r3, #64	@ 0x40
 8001196:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 f9b5 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011ac:	f000 f924 	bl	80013f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b4f      	ldr	r3, [pc, #316]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b4:	4a4e      	ldr	r2, [pc, #312]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011bc:	4b4c      	ldr	r3, [pc, #304]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b49      	ldr	r3, [pc, #292]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011cc:	4a48      	ldr	r2, [pc, #288]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d4:	4b46      	ldr	r3, [pc, #280]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011e4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f4:	2304      	movs	r3, #4
 80011f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001204:	f004 fa74 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120c:	2312      	movs	r3, #18
 800120e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121a:	2304      	movs	r3, #4
 800121c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001224:	4619      	mov	r1, r3
 8001226:	4833      	ldr	r0, [pc, #204]	@ (80012f4 <HAL_I2C_MspInit+0x190>)
 8001228:	f004 fa62 	bl	80056f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122c:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	4a2f      	ldr	r2, [pc, #188]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 8001232:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001236:	6593      	str	r3, [r2, #88]	@ 0x58
 8001238:	4b2d      	ldr	r3, [pc, #180]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001244:	e04d      	b.n	80012e2 <HAL_I2C_MspInit+0x17e>
  else if(i2cHandle->Instance==I2C4)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a2b      	ldr	r2, [pc, #172]	@ (80012f8 <HAL_I2C_MspInit+0x194>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d148      	bne.n	80012e2 <HAL_I2C_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001250:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001254:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001256:	2300      	movs	r3, #0
 8001258:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4618      	mov	r0, r3
 8001260:	f006 f956 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 800126a:	f000 f8c5 	bl	80013f8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001286:	23c0      	movs	r3, #192	@ 0xc0
 8001288:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128a:	2312      	movs	r3, #18
 800128c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001298:	2308      	movs	r3, #8
 800129a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012a2:	4619      	mov	r1, r3
 80012a4:	4815      	ldr	r0, [pc, #84]	@ (80012fc <HAL_I2C_MspInit+0x198>)
 80012a6:	f004 fa23 	bl	80056f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 80012ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ae:	4a10      	ldr	r2, [pc, #64]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_I2C_MspInit+0x18c>)
 80012b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2052      	movs	r0, #82	@ 0x52
 80012c8:	f003 f9c8 	bl	800465c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80012cc:	2052      	movs	r0, #82	@ 0x52
 80012ce:	f003 f9df 	bl	8004690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2053      	movs	r0, #83	@ 0x53
 80012d8:	f003 f9c0 	bl	800465c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80012dc:	2053      	movs	r0, #83	@ 0x53
 80012de:	f003 f9d7 	bl	8004690 <HAL_NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3788      	adds	r7, #136	@ 0x88
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40005400 	.word	0x40005400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	40008400 	.word	0x40008400
 80012fc:	48000800 	.word	0x48000800

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001304:	f001 fa80 	bl	8002808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001308:	f000 f81a 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130c:	f7ff fdb2 	bl	8000e74 <MX_GPIO_Init>
  MX_DMA_Init();
 8001310:	f7ff fcd6 	bl	8000cc0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001314:	f7ff fcfe 	bl	8000d14 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001318:	f000 fa28 	bl	800176c <MX_TIM2_Init>
  MX_CRC_Init();
 800131c:	f7ff fc8e 	bl	8000c3c <MX_CRC_Init>
  MX_ADC4_Init();
 8001320:	f7ff fab6 	bl	8000890 <MX_ADC4_Init>
  MX_SPI4_Init();
 8001324:	f000 f86e 	bl	8001404 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001328:	f7ff fa3a 	bl	80007a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800132c:	f7ff fe9a 	bl	8001064 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001330:	f7ff fed8 	bl	80010e4 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001334:	f000 fad8 	bl	80018e8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001338:	f7ff fc79 	bl	8000c2e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <main+0x3c>

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	@ 0x50
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	2238      	movs	r2, #56	@ 0x38
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f00a fca2 	bl	800bc98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001362:	2000      	movs	r0, #0
 8001364:	f005 fac0 	bl	80068e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001370:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001376:	2303      	movs	r3, #3
 8001378:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800137a:	2306      	movs	r3, #6
 800137c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800137e:	2350      	movs	r3, #80	@ 0x50
 8001380:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001386:	2304      	movs	r3, #4
 8001388:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138a:	2302      	movs	r3, #2
 800138c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fb5c 	bl	8006a50 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800139e:	f000 f82b 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2303      	movs	r3, #3
 80013a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2104      	movs	r1, #4
 80013ba:	4618      	mov	r0, r3
 80013bc:	f005 fe5a 	bl	8007074 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013c6:	f000 f817 	bl	80013f8 <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	@ 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013e6:	f001 fa27 	bl	8002838 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40001000 	.word	0x40001000

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <Error_Handler+0x8>

08001404 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_SPI4_Init+0x74>)
 800140a:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <MX_SPI4_Init+0x78>)
 800140c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_SPI4_Init+0x74>)
 8001410:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001414:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001416:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_SPI4_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_SPI4_Init+0x74>)
 800141e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001422:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_SPI4_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <MX_SPI4_Init+0x74>)
 800142c:	2201      	movs	r2, #1
 800142e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_SPI4_Init+0x74>)
 8001432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001436:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_SPI4_Init+0x74>)
 800143a:	2220      	movs	r2, #32
 800143c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_SPI4_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_SPI4_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <MX_SPI4_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_SPI4_Init+0x74>)
 8001452:	2207      	movs	r2, #7
 8001454:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <MX_SPI4_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_SPI4_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_SPI4_Init+0x74>)
 8001464:	f006 faa2 	bl	80079ac <HAL_SPI_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800146e:	f7ff ffc3 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20010308 	.word	0x20010308
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a1b      	ldr	r2, [pc, #108]	@ (800150c <HAL_SPI_MspInit+0x8c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d130      	bne.n	8001504 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_SPI_MspInit+0x90>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001510 <HAL_SPI_MspInit+0x90>)
 80014a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <HAL_SPI_MspInit+0x90>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <HAL_SPI_MspInit+0x90>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <HAL_SPI_MspInit+0x90>)
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c6:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_SPI_MspInit+0x90>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80014d2:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014e4:	2305      	movs	r3, #5
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4809      	ldr	r0, [pc, #36]	@ (8001514 <HAL_SPI_MspInit+0x94>)
 80014f0:	f004 f8fe 	bl	80056f0 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2054      	movs	r0, #84	@ 0x54
 80014fa:	f003 f8af 	bl	800465c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80014fe:	2054      	movs	r0, #84	@ 0x54
 8001500:	f003 f8c6 	bl	8004690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	@ 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40013c00 	.word	0x40013c00
 8001510:	40021000 	.word	0x40021000
 8001514:	48001000 	.word	0x48001000

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_MspInit+0x4c>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <HAL_MspInit+0x4c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6613      	str	r3, [r2, #96]	@ 0x60
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <HAL_MspInit+0x4c>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_MspInit+0x4c>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HAL_MspInit+0x4c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001540:	6593      	str	r3, [r2, #88]	@ 0x58
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HAL_MspInit+0x4c>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800154e:	f001 f9a5 	bl	800289c <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001552:	2002      	movs	r0, #2
 8001554:	f001 f98e 	bl	8002874 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001558:	f005 fa6a 	bl	8006a30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	@ 0x30
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001578:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <HAL_InitTick+0xc4>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	4a2b      	ldr	r2, [pc, #172]	@ (800162c <HAL_InitTick+0xc4>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6593      	str	r3, [r2, #88]	@ 0x58
 8001584:	4b29      	ldr	r3, [pc, #164]	@ (800162c <HAL_InitTick+0xc4>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001590:	f107 020c 	add.w	r2, r7, #12
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f005 ff40 	bl	8007420 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015a0:	f005 ff12 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 80015a4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a8:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <HAL_InitTick+0xc8>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0c9b      	lsrs	r3, r3, #18
 80015b0:	3b01      	subs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <HAL_InitTick+0xcc>)
 80015b6:	4a20      	ldr	r2, [pc, #128]	@ (8001638 <HAL_InitTick+0xd0>)
 80015b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_InitTick+0xcc>)
 80015bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001634 <HAL_InitTick+0xcc>)
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <HAL_InitTick+0xcc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_InitTick+0xcc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80015d4:	4817      	ldr	r0, [pc, #92]	@ (8001634 <HAL_InitTick+0xcc>)
 80015d6:	f006 fba8 	bl	8007d2a <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11b      	bne.n	8001620 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015e8:	4812      	ldr	r0, [pc, #72]	@ (8001634 <HAL_InitTick+0xcc>)
 80015ea:	f006 fbff 	bl	8007dec <HAL_TIM_Base_Start_IT>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d111      	bne.n	8001620 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015fc:	2036      	movs	r0, #54	@ 0x36
 80015fe:	f003 f847 	bl	8004690 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d808      	bhi.n	800161a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	2036      	movs	r0, #54	@ 0x36
 800160e:	f003 f825 	bl	800465c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <HAL_InitTick+0xd4>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e002      	b.n	8001620 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001620:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001624:	4618      	mov	r0, r3
 8001626:	3730      	adds	r7, #48	@ 0x30
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	431bde83 	.word	0x431bde83
 8001634:	2001036c 	.word	0x2001036c
 8001638:	40001000 	.word	0x40001000
 800163c:	20000044 	.word	0x20000044

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <NMI_Handler+0x4>

08001648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <MemManage_Handler+0x4>

08001658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <UsageFault_Handler+0x4>

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY1_Pin);
 800167a:	2001      	movs	r0, #1
 800167c:	f004 f9ec 	bl	8005a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <DMA1_Channel3_IRQHandler+0x10>)
 800168a:	f003 fa8b 	bl	8004ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20010178 	.word	0x20010178

08001698 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <FDCAN1_IT0_IRQHandler+0x10>)
 800169e:	f003 fda5 	bl	80051ec <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200101fc 	.word	0x200101fc

080016ac <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <FDCAN1_IT1_IRQHandler+0x10>)
 80016b2:	f003 fd9b 	bl	80051ec <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200101fc 	.word	0x200101fc

080016c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY2_Pin);
 80016c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016c8:	f004 f9c6 	bl	8005a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <TIM2_IRQHandler+0x10>)
 80016d6:	f006 fda9 	bl	800822c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200103b8 	.word	0x200103b8

080016e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <TIM6_DAC_IRQHandler+0x10>)
 80016ea:	f006 fd9f 	bl	800822c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2001036c 	.word	0x2001036c

080016f8 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <ADC4_IRQHandler+0x10>)
 80016fe:	f001 fdad 	bl	800325c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2001010c 	.word	0x2001010c

0800170c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <I2C4_EV_IRQHandler+0x10>)
 8001712:	f004 fa54 	bl	8005bbe <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200102b4 	.word	0x200102b4

08001720 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <I2C4_ER_IRQHandler+0x10>)
 8001726:	f004 fa64 	bl	8005bf2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200102b4 	.word	0x200102b4

08001734 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <SPI4_IRQHandler+0x10>)
 800173a:	f006 f9e3 	bl	8007b04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20010308 	.word	0x20010308

08001748 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178a:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <MX_TIM2_Init+0xe4>)
 800178c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001790:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001792:	4b2f      	ldr	r3, [pc, #188]	@ (8001850 <MX_TIM2_Init+0xe4>)
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b2d      	ldr	r3, [pc, #180]	@ (8001850 <MX_TIM2_Init+0xe4>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800179e:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <MX_TIM2_Init+0xe4>)
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001850 <MX_TIM2_Init+0xe4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <MX_TIM2_Init+0xe4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017b2:	4827      	ldr	r0, [pc, #156]	@ (8001850 <MX_TIM2_Init+0xe4>)
 80017b4:	f006 fb92 	bl	8007edc <HAL_TIM_IC_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017be:	f7ff fe1b 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	481f      	ldr	r0, [pc, #124]	@ (8001850 <MX_TIM2_Init+0xe4>)
 80017d2:	f007 f97d 	bl	8008ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017dc:	f7ff fe0c 	bl	80013f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e4:	2301      	movs	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4816      	ldr	r0, [pc, #88]	@ (8001850 <MX_TIM2_Init+0xe4>)
 80017f8:	f006 fe67 	bl	80084ca <HAL_TIM_IC_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001802:	f7ff fdf9 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2204      	movs	r2, #4
 800180a:	4619      	mov	r1, r3
 800180c:	4810      	ldr	r0, [pc, #64]	@ (8001850 <MX_TIM2_Init+0xe4>)
 800180e:	f006 fe5c 	bl	80084ca <HAL_TIM_IC_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001818:	f7ff fdee 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2208      	movs	r2, #8
 8001820:	4619      	mov	r1, r3
 8001822:	480b      	ldr	r0, [pc, #44]	@ (8001850 <MX_TIM2_Init+0xe4>)
 8001824:	f006 fe51 	bl	80084ca <HAL_TIM_IC_ConfigChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800182e:	f7ff fde3 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	220c      	movs	r2, #12
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_TIM2_Init+0xe4>)
 800183a:	f006 fe46 	bl	80084ca <HAL_TIM_IC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001844:	f7ff fdd8 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200103b8 	.word	0x200103b8

08001854 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001874:	d12f      	bne.n	80018d6 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001876:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <HAL_TIM_IC_MspInit+0x8c>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	4a19      	ldr	r2, [pc, #100]	@ (80018e0 <HAL_TIM_IC_MspInit+0x8c>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6593      	str	r3, [r2, #88]	@ 0x58
 8001882:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <HAL_TIM_IC_MspInit+0x8c>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <HAL_TIM_IC_MspInit+0x8c>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	4a13      	ldr	r2, [pc, #76]	@ (80018e0 <HAL_TIM_IC_MspInit+0x8c>)
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_TIM_IC_MspInit+0x8c>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 80018a6:	23d8      	movs	r3, #216	@ 0xd8
 80018a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <HAL_TIM_IC_MspInit+0x90>)
 80018c2:	f003 ff15 	bl	80056f0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	201c      	movs	r0, #28
 80018cc:	f002 fec6 	bl	800465c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d0:	201c      	movs	r0, #28
 80018d2:	f002 fedd 	bl	8004690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	@ 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48000c00 	.word	0x48000c00

080018e8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018ec:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 80018ee:	4a21      	ldr	r2, [pc, #132]	@ (8001974 <MX_LPUART1_UART_Init+0x8c>)
 80018f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 80018f4:	4a20      	ldr	r2, [pc, #128]	@ (8001978 <MX_LPUART1_UART_Init+0x90>)
 80018f6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 800190c:	220c      	movs	r2, #12
 800190e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800191c:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001928:	4811      	ldr	r0, [pc, #68]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 800192a:	f007 f9ad 	bl	8008c88 <HAL_UART_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001934:	f7ff fd60 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001938:	2100      	movs	r1, #0
 800193a:	480d      	ldr	r0, [pc, #52]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 800193c:	f007 ff48 	bl	80097d0 <HAL_UARTEx_SetTxFifoThreshold>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001946:	f7ff fd57 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194a:	2100      	movs	r1, #0
 800194c:	4808      	ldr	r0, [pc, #32]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 800194e:	f007 ff7d 	bl	800984c <HAL_UARTEx_SetRxFifoThreshold>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001958:	f7ff fd4e 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	@ (8001970 <MX_LPUART1_UART_Init+0x88>)
 800195e:	f007 fefe 	bl	800975e <HAL_UARTEx_DisableFifoMode>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001968:	f7ff fd46 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20010404 	.word	0x20010404
 8001974:	40008000 	.word	0x40008000
 8001978:	00033324 	.word	0x00033324

0800197c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b09e      	sub	sp, #120	@ 0x78
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	2254      	movs	r2, #84	@ 0x54
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f00a f97b 	bl	800bc98 <memset>
  if(uartHandle->Instance==LPUART1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a20 <HAL_UART_MspInit+0xa4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d135      	bne.n	8001a18 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019ac:	2320      	movs	r3, #32
 80019ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4618      	mov	r0, r3
 80019ba:	f005 fda9 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019c4:	f7ff fd18 	bl	80013f8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019c8:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <HAL_UART_MspInit+0xa8>)
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	4a15      	ldr	r2, [pc, #84]	@ (8001a24 <HAL_UART_MspInit+0xa8>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80019d4:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <HAL_UART_MspInit+0xa8>)
 80019d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e0:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <HAL_UART_MspInit+0xa8>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a24 <HAL_UART_MspInit+0xa8>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <HAL_UART_MspInit+0xa8>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019f8:	2303      	movs	r3, #3
 80019fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a10:	4619      	mov	r1, r3
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <HAL_UART_MspInit+0xac>)
 8001a14:	f003 fe6c 	bl	80056f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3778      	adds	r7, #120	@ 0x78
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40008000 	.word	0x40008000
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000800 	.word	0x48000800

08001a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a2c:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a30:	f7ff fe8a 	bl	8001748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a36:	490d      	ldr	r1, [pc, #52]	@ (8001a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <LoopForever+0xe>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a78 <LoopForever+0x16>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f00a f925 	bl	800bca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a5e:	f7ff fc4f 	bl	8001300 <main>

08001a62 <LoopForever>:

LoopForever:
    b LoopForever
 8001a62:	e7fe      	b.n	8001a62 <LoopForever>
  ldr   r0, =_estack
 8001a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a6c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001a70:	0800bec4 	.word	0x0800bec4
  ldr r2, =_sbss
 8001a74:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001a78:	20010e94 	.word	0x20010e94

08001a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a7c:	e7fe      	b.n	8001a7c <ADC1_2_IRQHandler>
	...

08001a80 <HAL_ADC_ConvCpltCallback>:
	analogSwitch8
};

void HAL_ADC_ConvCpltCallback(
    ADC_HandleTypeDef* hadc
){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    tx_semaphore_put(&semaphoreAnalog);
 8001a88:	4803      	ldr	r0, [pc, #12]	@ (8001a98 <HAL_ADC_ConvCpltCallback+0x18>)
 8001a8a:	f009 fed7 	bl	800b83c <_txe_semaphore_put>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200106a8 	.word	0x200106a8

08001a9c <setAnalogSwitches>:

uint8_t setAnalogSwitches(
	const uint8_t switchSettings[NUM_ADC_CHANNELS]
){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	e017      	b.n	8001ade <setAnalogSwitches+0x42>
		if(switchSettings[i]){
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <setAnalogSwitches+0x2e>
			set12VSensor(&analogSwitches[i]);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4a0c      	ldr	r2, [pc, #48]	@ (8001af0 <setAnalogSwitches+0x54>)
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f816 	bl	8001af4 <set12VSensor>
 8001ac8:	e006      	b.n	8001ad8 <setAnalogSwitches+0x3c>
		}else{
			set5VSensor(&analogSwitches[i]);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <setAnalogSwitches+0x54>)
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f826 	bl	8001b24 <set5VSensor>
	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b07      	cmp	r3, #7
 8001ae2:	d9e4      	bls.n	8001aae <setAnalogSwitches+0x12>
		}
	}
	return retval;
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000004 	.word	0x20000004

08001af4 <set12VSensor>:

uint8_t set12VSensor(
	gpio_control_t *self
){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <set12VSensor+0x16>
		retval = UCR_NPTR;
 8001b06:	2302      	movs	r3, #2
 8001b08:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(self->port, self->pin, SET_12V);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	889b      	ldrh	r3, [r3, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4619      	mov	r1, r3
 8001b16:	f003 ff6d 	bl	80059f4 <HAL_GPIO_WritePin>
	return retval;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <set5VSensor>:

uint8_t set5VSensor(
	gpio_control_t *self
){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <set5VSensor+0x16>
		retval = UCR_NPTR;
 8001b36:	2302      	movs	r3, #2
 8001b38:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(self->port, self->pin, SET_5V);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	889b      	ldrh	r3, [r3, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	4619      	mov	r1, r3
 8001b46:	f003 ff55 	bl	80059f4 <HAL_GPIO_WritePin>
	return retval;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <ThreadX_Init>:
};


UINT ThreadX_Init(
        VOID *memory_ptr
){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08e      	sub	sp, #56	@ 0x38
 8001b58:	af08      	add	r7, sp, #32
 8001b5a:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001b64:	f107 010c 	add.w	r1, r7, #12
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b6e:	6938      	ldr	r0, [r7, #16]
 8001b70:	f009 fc78 	bl	800b464 <_txe_byte_allocate>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <ThreadX_Init+0x2a>
	    return TX_POOL_ERROR;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e099      	b.n	8001cb2 <ThreadX_Init+0x15e>
	}

	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	22b0      	movs	r2, #176	@ 0xb0
 8001b82:	9206      	str	r2, [sp, #24]
 8001b84:	2201      	movs	r2, #1
 8001b86:	9205      	str	r2, [sp, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	9204      	str	r2, [sp, #16]
 8001b8c:	220a      	movs	r2, #10
 8001b8e:	9203      	str	r2, [sp, #12]
 8001b90:	220a      	movs	r2, #10
 8001b92:	9202      	str	r2, [sp, #8]
 8001b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b98:	9201      	str	r2, [sp, #4]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	4a47      	ldr	r2, [pc, #284]	@ (8001cbc <ThreadX_Init+0x168>)
 8001ba0:	4947      	ldr	r1, [pc, #284]	@ (8001cc0 <ThreadX_Init+0x16c>)
 8001ba2:	4848      	ldr	r0, [pc, #288]	@ (8001cc4 <ThreadX_Init+0x170>)
 8001ba4:	f009 fe68 	bl	800b878 <_txe_thread_create>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <ThreadX_Init+0x5e>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8001bae:	230e      	movs	r3, #14
 8001bb0:	e07f      	b.n	8001cb2 <ThreadX_Init+0x15e>
	}

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001bb2:	f107 010c 	add.w	r1, r7, #12
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bbc:	6938      	ldr	r0, [r7, #16]
 8001bbe:	f009 fc51 	bl	800b464 <_txe_byte_allocate>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <ThreadX_Init+0x78>
	    return TX_POOL_ERROR;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e072      	b.n	8001cb2 <ThreadX_Init+0x15e>
    }

	if(tx_thread_create(&txAnalogThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	22b0      	movs	r2, #176	@ 0xb0
 8001bd0:	9206      	str	r2, [sp, #24]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	9205      	str	r2, [sp, #20]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	9204      	str	r2, [sp, #16]
 8001bda:	220a      	movs	r2, #10
 8001bdc:	9203      	str	r2, [sp, #12]
 8001bde:	220b      	movs	r2, #11
 8001be0:	9202      	str	r2, [sp, #8]
 8001be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be6:	9201      	str	r2, [sp, #4]
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2300      	movs	r3, #0
 8001bec:	4a36      	ldr	r2, [pc, #216]	@ (8001cc8 <ThreadX_Init+0x174>)
 8001bee:	4937      	ldr	r1, [pc, #220]	@ (8001ccc <ThreadX_Init+0x178>)
 8001bf0:	4837      	ldr	r0, [pc, #220]	@ (8001cd0 <ThreadX_Init+0x17c>)
 8001bf2:	f009 fe41 	bl	800b878 <_txe_thread_create>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <ThreadX_Init+0xac>
						 TX_APP_STACK_SIZE, TX_ANALOG_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8001bfc:	230e      	movs	r3, #14
 8001bfe:	e058      	b.n	8001cb2 <ThreadX_Init+0x15e>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001c00:	f107 010c 	add.w	r1, r7, #12
 8001c04:	2300      	movs	r3, #0
 8001c06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c0a:	6938      	ldr	r0, [r7, #16]
 8001c0c:	f009 fc2a 	bl	800b464 <_txe_byte_allocate>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <ThreadX_Init+0xc6>
        return TX_POOL_ERROR;
 8001c16:	2302      	movs	r3, #2
 8001c18:	e04b      	b.n	8001cb2 <ThreadX_Init+0x15e>
//					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
//    ){
//		return TX_THREAD_ERROR;
//	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001c1a:	f107 010c 	add.w	r1, r7, #12
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c24:	6938      	ldr	r0, [r7, #16]
 8001c26:	f009 fc1d 	bl	800b464 <_txe_byte_allocate>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <ThreadX_Init+0xe0>
        return TX_POOL_ERROR;
 8001c30:	2302      	movs	r3, #2
 8001c32:	e03e      	b.n	8001cb2 <ThreadX_Init+0x15e>
    }

	if(tx_thread_create(&txCAN100HzThread, "txCAN100Hz", txCAN100HzThreadEntry, 0, pointer,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	22b0      	movs	r2, #176	@ 0xb0
 8001c38:	9206      	str	r2, [sp, #24]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	9205      	str	r2, [sp, #20]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	9204      	str	r2, [sp, #16]
 8001c42:	220a      	movs	r2, #10
 8001c44:	9203      	str	r2, [sp, #12]
 8001c46:	220c      	movs	r2, #12
 8001c48:	9202      	str	r2, [sp, #8]
 8001c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c4e:	9201      	str	r2, [sp, #4]
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd4 <ThreadX_Init+0x180>)
 8001c56:	4920      	ldr	r1, [pc, #128]	@ (8001cd8 <ThreadX_Init+0x184>)
 8001c58:	4820      	ldr	r0, [pc, #128]	@ (8001cdc <ThreadX_Init+0x188>)
 8001c5a:	f009 fe0d 	bl	800b878 <_txe_thread_create>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <ThreadX_Init+0x114>
					   TX_APP_STACK_SIZE, 12, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 8001c64:	230e      	movs	r3, #14
 8001c66:	e024      	b.n	8001cb2 <ThreadX_Init+0x15e>
//                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
//    ){
//        return TX_THREAD_ERROR;
//    }

	tx_semaphore_create(&semaphoreAnalog, "semaphoreAnalog", 0);
 8001c68:	231c      	movs	r3, #28
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	491c      	ldr	r1, [pc, #112]	@ (8001ce0 <ThreadX_Init+0x18c>)
 8001c6e:	481d      	ldr	r0, [pc, #116]	@ (8001ce4 <ThreadX_Init+0x190>)
 8001c70:	f009 fd0c 	bl	800b68c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreAero, "semaphoreAero", 0);
 8001c74:	231c      	movs	r3, #28
 8001c76:	2200      	movs	r2, #0
 8001c78:	491b      	ldr	r1, [pc, #108]	@ (8001ce8 <ThreadX_Init+0x194>)
 8001c7a:	481c      	ldr	r0, [pc, #112]	@ (8001cec <ThreadX_Init+0x198>)
 8001c7c:	f009 fd06 	bl	800b68c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreFrequency, "semaphoreFrequency", 1);
 8001c80:	231c      	movs	r3, #28
 8001c82:	2201      	movs	r2, #1
 8001c84:	491a      	ldr	r1, [pc, #104]	@ (8001cf0 <ThreadX_Init+0x19c>)
 8001c86:	481b      	ldr	r0, [pc, #108]	@ (8001cf4 <ThreadX_Init+0x1a0>)
 8001c88:	f009 fd00 	bl	800b68c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC1, "semaphoreExADC1", 0);
 8001c8c:	231c      	movs	r3, #28
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4919      	ldr	r1, [pc, #100]	@ (8001cf8 <ThreadX_Init+0x1a4>)
 8001c92:	481a      	ldr	r0, [pc, #104]	@ (8001cfc <ThreadX_Init+0x1a8>)
 8001c94:	f009 fcfa 	bl	800b68c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC2, "semaphoreExADC2", 0);
 8001c98:	231c      	movs	r3, #28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4918      	ldr	r1, [pc, #96]	@ (8001d00 <ThreadX_Init+0x1ac>)
 8001c9e:	4819      	ldr	r0, [pc, #100]	@ (8001d04 <ThreadX_Init+0x1b0>)
 8001ca0:	f009 fcf4 	bl	800b68c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreSPI, "semaphoreSPI", 0);
 8001ca4:	231c      	movs	r3, #28
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4917      	ldr	r1, [pc, #92]	@ (8001d08 <ThreadX_Init+0x1b4>)
 8001caa:	4818      	ldr	r0, [pc, #96]	@ (8001d0c <ThreadX_Init+0x1b8>)
 8001cac:	f009 fcee 	bl	800b68c <_txe_semaphore_create>
    

	return ret;
 8001cb0:	697b      	ldr	r3, [r7, #20]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	08001d11 	.word	0x08001d11
 8001cc0:	0800bd1c 	.word	0x0800bd1c
 8001cc4:	20010498 	.word	0x20010498
 8001cc8:	08001d61 	.word	0x08001d61
 8001ccc:	0800bd2c 	.word	0x0800bd2c
 8001cd0:	20010548 	.word	0x20010548
 8001cd4:	08001e35 	.word	0x08001e35
 8001cd8:	0800bd3c 	.word	0x0800bd3c
 8001cdc:	200105f8 	.word	0x200105f8
 8001ce0:	0800bd48 	.word	0x0800bd48
 8001ce4:	200106a8 	.word	0x200106a8
 8001ce8:	0800bd58 	.word	0x0800bd58
 8001cec:	200106c4 	.word	0x200106c4
 8001cf0:	0800bd68 	.word	0x0800bd68
 8001cf4:	200106e0 	.word	0x200106e0
 8001cf8:	0800bd7c 	.word	0x0800bd7c
 8001cfc:	200106fc 	.word	0x200106fc
 8001d00:	0800bd8c 	.word	0x0800bd8c
 8001d04:	20010718 	.word	0x20010718
 8001d08:	0800bd9c 	.word	0x0800bd9c
 8001d0c:	20010734 	.word	0x20010734

08001d10 <txMainThreadEntry>:


void txMainThreadEntry(
    ULONG threadInput
){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    HAL_FDCAN_Start(&hfdcan1);
 8001d18:	480e      	ldr	r0, [pc, #56]	@ (8001d54 <txMainThreadEntry+0x44>)
 8001d1a:	f003 f9fb 	bl	8005114 <HAL_FDCAN_Start>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	480d      	ldr	r0, [pc, #52]	@ (8001d58 <txMainThreadEntry+0x48>)
 8001d22:	f006 f933 	bl	8007f8c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001d26:	2104      	movs	r1, #4
 8001d28:	480b      	ldr	r0, [pc, #44]	@ (8001d58 <txMainThreadEntry+0x48>)
 8001d2a:	f006 f92f 	bl	8007f8c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001d2e:	2108      	movs	r1, #8
 8001d30:	4809      	ldr	r0, [pc, #36]	@ (8001d58 <txMainThreadEntry+0x48>)
 8001d32:	f006 f92b 	bl	8007f8c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001d36:	210c      	movs	r1, #12
 8001d38:	4807      	ldr	r0, [pc, #28]	@ (8001d58 <txMainThreadEntry+0x48>)
 8001d3a:	f006 f927 	bl	8007f8c <HAL_TIM_IC_Start_IT>


	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001d3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d42:	4806      	ldr	r0, [pc, #24]	@ (8001d5c <txMainThreadEntry+0x4c>)
 8001d44:	f003 fe6e 	bl	8005a24 <HAL_GPIO_TogglePin>

	    tx_thread_sleep(1000);
 8001d48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d4c:	f008 fc94 	bl	800a678 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001d50:	bf00      	nop
 8001d52:	e7f4      	b.n	8001d3e <txMainThreadEntry+0x2e>
 8001d54:	200101fc 	.word	0x200101fc
 8001d58:	200103b8 	.word	0x200103b8
 8001d5c:	48000800 	.word	0x48000800

08001d60 <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b09a      	sub	sp, #104	@ 0x68
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
    uint8_t analogRxData[UCR_01_FRONT_ANALOG1_LENGTH];
    uint32_t adcValues[NUM_ADC_CHANNELS];
    setAnalogSwitches(analogSwitchStates);
 8001d68:	482d      	ldr	r0, [pc, #180]	@ (8001e20 <txAnalogThreadEntry+0xc0>)
 8001d6a:	f7ff fe97 	bl	8001a9c <setAnalogSwitches>

    FDCAN_TxHeaderTypeDef analogHeader = {
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e24 <txAnalogThreadEntry+0xc4>)
 8001d70:	f107 041c 	add.w	r4, r7, #28
 8001d74:	461d      	mov	r5, r3
 8001d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	6023      	str	r3, [r4, #0]
            .FDFormat = FDCAN_FD_CAN,
            .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
            .MessageMarker = 0
    };
    while(1){
        HAL_ADC_Start_DMA(&hadc4, adcValues, NUM_ADC_CHANNELS);
 8001d82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d86:	2208      	movs	r2, #8
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4827      	ldr	r0, [pc, #156]	@ (8001e28 <txAnalogThreadEntry+0xc8>)
 8001d8c:	f001 f992 	bl	80030b4 <HAL_ADC_Start_DMA>
        tx_semaphore_get(&semaphoreAnalog, TX_WAIT_FOREVER);
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	4825      	ldr	r0, [pc, #148]	@ (8001e2c <txAnalogThreadEntry+0xcc>)
 8001d96:	f009 fd0f 	bl	800b7b8 <_txe_semaphore_get>
        struct ucr_01_front_analog1_t analogStruct1 = {
            .analog1 = adcValues[0],
 8001d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        struct ucr_01_front_analog1_t analogStruct1 = {
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	82bb      	strh	r3, [r7, #20]
            .analog2 = adcValues[1],
 8001da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
        struct ucr_01_front_analog1_t analogStruct1 = {
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	82fb      	strh	r3, [r7, #22]
            .analog3 = adcValues[2],
 8001da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
        struct ucr_01_front_analog1_t analogStruct1 = {
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	833b      	strh	r3, [r7, #24]
            .analog4 = adcValues[3]
 8001dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
        struct ucr_01_front_analog1_t analogStruct1 = {
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	837b      	strh	r3, [r7, #26]
        };
        struct ucr_01_front_analog2_t analogStruct2 = {
            .analog5 = adcValues[4],
 8001db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
        struct ucr_01_front_analog2_t analogStruct2 = {
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	81bb      	strh	r3, [r7, #12]
            .analog6 = adcValues[5],
 8001db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
        struct ucr_01_front_analog2_t analogStruct2 = {
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	81fb      	strh	r3, [r7, #14]
            .analog7 = adcValues[6],
 8001dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
        struct ucr_01_front_analog2_t analogStruct2 = {
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	823b      	strh	r3, [r7, #16]
            .analog8 = adcValues[7]
 8001dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
        struct ucr_01_front_analog2_t analogStruct2 = {
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	827b      	strh	r3, [r7, #18]
        };
        analogHeader.Identifier = UCR_01_FRONT_ANALOG2_FRAME_ID;
 8001dca:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001dce:	61fb      	str	r3, [r7, #28]
        ucr_01_front_analog1_pack(analogRxData, &analogStruct1, UCR_01_FRONT_ANALOG1_LENGTH);
 8001dd0:	f107 0114 	add.w	r1, r7, #20
 8001dd4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001dd8:	2208      	movs	r2, #8
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 faa6 	bl	800232c <ucr_01_front_analog1_pack>
        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &analogHeader, analogRxData);
 8001de0:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	4811      	ldr	r0, [pc, #68]	@ (8001e30 <txAnalogThreadEntry+0xd0>)
 8001dec:	f003 f9ba 	bl	8005164 <HAL_FDCAN_AddMessageToTxFifoQ>
        analogHeader.Identifier = UCR_01_FRONT_ANALOG2_FRAME_ID;
 8001df0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001df4:	61fb      	str	r3, [r7, #28]
        ucr_01_front_analog2_pack(analogRxData, &analogStruct2, UCR_01_FRONT_ANALOG2_LENGTH);
 8001df6:	f107 010c 	add.w	r1, r7, #12
 8001dfa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001dfe:	2208      	movs	r2, #8
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fb2f 	bl	8002464 <ucr_01_front_analog2_pack>
        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &analogHeader, analogRxData);
 8001e06:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4807      	ldr	r0, [pc, #28]	@ (8001e30 <txAnalogThreadEntry+0xd0>)
 8001e12:	f003 f9a7 	bl	8005164 <HAL_FDCAN_AddMessageToTxFifoQ>

        tx_thread_sleep(4);
 8001e16:	2004      	movs	r0, #4
 8001e18:	f008 fc2e 	bl	800a678 <_tx_thread_sleep>
    while(1){
 8001e1c:	bf00      	nop
 8001e1e:	e7b0      	b.n	8001d82 <txAnalogThreadEntry+0x22>
 8001e20:	0800be74 	.word	0x0800be74
 8001e24:	0800bdac 	.word	0x0800bdac
 8001e28:	2001010c 	.word	0x2001010c
 8001e2c:	200106a8 	.word	0x200106a8
 8001e30:	200101fc 	.word	0x200101fc

08001e34 <txCAN100HzThreadEntry>:
    }
}

void txCAN100HzThreadEntry(
    ULONG threadInput
){
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	b098      	sub	sp, #96	@ 0x60
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    if(UCR_OK != FrequencyInit()){
 8001e3c:	f000 f88e 	bl	8001f5c <FrequencyInit>

    }
	uint8_t preScalar = htim2.Init.Prescaler + 1;
 8001e40:	4b40      	ldr	r3, [pc, #256]	@ (8001f44 <txCAN100HzThreadEntry+0x110>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    float refClock = TIMCLOCK/(preScalar);
 8001e4c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001e50:	4a3d      	ldr	r2, [pc, #244]	@ (8001f48 <txCAN100HzThreadEntry+0x114>)
 8001e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	float frequency[NUM_FREQUENCY_CHANNELS];
	uint8_t frequencyData[UCR_01_FRONT_FREQUENCY1_LENGTH];
	FDCAN_TxHeaderTypeDef frequencyHeader = {
 8001e62:	4b3a      	ldr	r3, [pc, #232]	@ (8001f4c <txCAN100HzThreadEntry+0x118>)
 8001e64:	f107 0418 	add.w	r4, r7, #24
 8001e68:	461d      	mov	r5, r3
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e72:	682b      	ldr	r3, [r5, #0]
 8001e74:	6023      	str	r3, [r4, #0]
	        .MessageMarker = 0
	};

    while(1){
        // Acquire the semaphore
    	tx_semaphore_get(&semaphoreFrequency, TX_WAIT_FOREVER);
 8001e76:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7a:	4835      	ldr	r0, [pc, #212]	@ (8001f50 <txCAN100HzThreadEntry+0x11c>)
 8001e7c:	f009 fc9c 	bl	800b7b8 <_txe_semaphore_get>
    	// Convert the data to frequency and encode it
    	for(int i = 0; i < 4; i ++){
 8001e80:	2300      	movs	r3, #0
 8001e82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e84:	e028      	b.n	8001ed8 <txCAN100HzThreadEntry+0xa4>
    	    if(!ChannelData[i].difference){
 8001e86:	4a33      	ldr	r2, [pc, #204]	@ (8001f54 <txCAN100HzThreadEntry+0x120>)
 8001e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e8a:	019b      	lsls	r3, r3, #6
 8001e8c:	4413      	add	r3, r2
 8001e8e:	333c      	adds	r3, #60	@ 0x3c
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d108      	bne.n	8001ea8 <txCAN100HzThreadEntry+0x74>
    	        frequency[i] = 0;
 8001e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	3360      	adds	r3, #96	@ 0x60
 8001e9c:	443b      	add	r3, r7
 8001e9e:	3b1c      	subs	r3, #28
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e014      	b.n	8001ed2 <txCAN100HzThreadEntry+0x9e>
    	    }else{
    	        frequency[i] = refClock / ChannelData[i].difference;
 8001ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f54 <txCAN100HzThreadEntry+0x120>)
 8001eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	4413      	add	r3, r2
 8001eb0:	333c      	adds	r3, #60	@ 0x3c
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ebc:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	3360      	adds	r3, #96	@ 0x60
 8001eca:	443b      	add	r3, r7
 8001ecc:	3b1c      	subs	r3, #28
 8001ece:	edc3 7a00 	vstr	s15, [r3]
    	for(int i = 0; i < 4; i ++){
 8001ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ed8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	ddd3      	ble.n	8001e86 <txCAN100HzThreadEntry+0x52>
    	    }
    	}
    	struct ucr_01_front_frequency1_t frequencyStruct1 = {
    	        .freq1 = frequency[0],
 8001ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    	struct ucr_01_front_frequency1_t frequencyStruct1 = {
 8001ee0:	613b      	str	r3, [r7, #16]
    	        .freq2 = frequency[1]
 8001ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    	struct ucr_01_front_frequency1_t frequencyStruct1 = {
 8001ee4:	617b      	str	r3, [r7, #20]
    	};
        struct ucr_01_front_frequency2_t frequencyStruct2 = {
    	        .freq3 = frequency[2],
 8001ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
        struct ucr_01_front_frequency2_t frequencyStruct2 = {
 8001ee8:	60bb      	str	r3, [r7, #8]
    	        .freq4 = frequency[3]
 8001eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
        struct ucr_01_front_frequency2_t frequencyStruct2 = {
 8001eec:	60fb      	str	r3, [r7, #12]
    	};
    	tx_semaphore_put(&semaphoreFrequency);
 8001eee:	4818      	ldr	r0, [pc, #96]	@ (8001f50 <txCAN100HzThreadEntry+0x11c>)
 8001ef0:	f009 fca4 	bl	800b83c <_txe_semaphore_put>
        frequencyHeader.Identifier = UCR_01_FRONT_FREQUENCY1_FRAME_ID;
 8001ef4:	2314      	movs	r3, #20
 8001ef6:	61bb      	str	r3, [r7, #24]
    	ucr_01_front_frequency1_pack(frequencyData, &frequencyStruct1, UCR_01_FRONT_FREQUENCY1_LENGTH);
 8001ef8:	f107 0110 	add.w	r1, r7, #16
 8001efc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f00:	2208      	movs	r2, #8
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fb4a 	bl	800259c <ucr_01_front_frequency1_pack>
    	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frequencyHeader, frequencyData);
 8001f08:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	4619      	mov	r1, r3
 8001f12:	4811      	ldr	r0, [pc, #68]	@ (8001f58 <txCAN100HzThreadEntry+0x124>)
 8001f14:	f003 f926 	bl	8005164 <HAL_FDCAN_AddMessageToTxFifoQ>

        frequencyHeader.Identifier = UCR_01_FRONT_FREQUENCY2_FRAME_ID;
 8001f18:	2315      	movs	r3, #21
 8001f1a:	61bb      	str	r3, [r7, #24]
    	ucr_01_front_frequency2_pack(frequencyData, &frequencyStruct2, UCR_01_FRONT_FREQUENCY2_LENGTH);
 8001f1c:	f107 0108 	add.w	r1, r7, #8
 8001f20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f24:	2208      	movs	r2, #8
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fbd3 	bl	80026d2 <ucr_01_front_frequency2_pack>
    	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frequencyHeader, frequencyData);
 8001f2c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001f30:	f107 0318 	add.w	r3, r7, #24
 8001f34:	4619      	mov	r1, r3
 8001f36:	4808      	ldr	r0, [pc, #32]	@ (8001f58 <txCAN100HzThreadEntry+0x124>)
 8001f38:	f003 f914 	bl	8005164 <HAL_FDCAN_AddMessageToTxFifoQ>

        tx_thread_sleep(10);
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f008 fb9b 	bl	800a678 <_tx_thread_sleep>
    while(1){
 8001f42:	e798      	b.n	8001e76 <txCAN100HzThreadEntry+0x42>
 8001f44:	200103b8 	.word	0x200103b8
 8001f48:	0a21fe80 	.word	0x0a21fe80
 8001f4c:	0800bdd0 	.word	0x0800bdd0
 8001f50:	200106e0 	.word	0x200106e0
 8001f54:	20010750 	.word	0x20010750
 8001f58:	200101fc 	.word	0x200101fc

08001f5c <FrequencyInit>:
static uint8_t CalculateFrequency(
        frequency_t* channel,
        TIM_HandleTypeDef* htim
);

uint8_t FrequencyInit(void){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af04      	add	r7, sp, #16
    uint8_t retVal = UCR_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	70fb      	strb	r3, [r7, #3]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	e016      	b.n	8001f9a <FrequencyInit+0x3e>
        ChannelData[i].firstValue = 0;
 8001f6c:	4a35      	ldr	r2, [pc, #212]	@ (8002044 <FrequencyInit+0xe8>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	4413      	add	r3, r2
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
        ChannelData[i].secondValue = 0;
 8001f78:	4a32      	ldr	r2, [pc, #200]	@ (8002044 <FrequencyInit+0xe8>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
        ChannelData[i].isFirstCapture = false;
 8001f86:	4a2f      	ldr	r2, [pc, #188]	@ (8002044 <FrequencyInit+0xe8>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	019b      	lsls	r3, r3, #6
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3308      	adds	r3, #8
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d9e5      	bls.n	8001f6c <FrequencyInit+0x10>
//        ChannelData[i].zeroReset = true;
    }
    ChannelData[0].halChannel = TIM_CHANNEL_1;
 8001fa0:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <FrequencyInit+0xe8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ChannelData[1].halChannel = TIM_CHANNEL_2;
 8001fa8:	4b26      	ldr	r3, [pc, #152]	@ (8002044 <FrequencyInit+0xe8>)
 8001faa:	2204      	movs	r2, #4
 8001fac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    ChannelData[2].halChannel = TIM_CHANNEL_3;
 8001fb0:	4b24      	ldr	r3, [pc, #144]	@ (8002044 <FrequencyInit+0xe8>)
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    ChannelData[3].halChannel = TIM_CHANNEL_4;
 8001fb8:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <FrequencyInit+0xe8>)
 8001fba:	220c      	movs	r2, #12
 8001fbc:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

    tx_timer_create(&ChannelData[0].resetTimer, "resetTimer1", 
 8001fc0:	232c      	movs	r3, #44	@ 0x2c
 8001fc2:	9303      	str	r3, [sp, #12]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002048 <FrequencyInit+0xec>)
 8001fd6:	491d      	ldr	r1, [pc, #116]	@ (800204c <FrequencyInit+0xf0>)
 8001fd8:	481d      	ldr	r0, [pc, #116]	@ (8002050 <FrequencyInit+0xf4>)
 8001fda:	f009 fd93 	bl	800bb04 <_txe_timer_create>
        timerExpirationFrequency, 0, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[1].resetTimer, "resetTimer2", 
 8001fde:	232c      	movs	r3, #44	@ 0x2c
 8001fe0:	9303      	str	r3, [sp, #12]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9302      	str	r3, [sp, #8]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	4a15      	ldr	r2, [pc, #84]	@ (8002048 <FrequencyInit+0xec>)
 8001ff4:	4917      	ldr	r1, [pc, #92]	@ (8002054 <FrequencyInit+0xf8>)
 8001ff6:	4818      	ldr	r0, [pc, #96]	@ (8002058 <FrequencyInit+0xfc>)
 8001ff8:	f009 fd84 	bl	800bb04 <_txe_timer_create>
        timerExpirationFrequency, 1, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[2].resetTimer, "resetTimer3", 
 8001ffc:	232c      	movs	r3, #44	@ 0x2c
 8001ffe:	9303      	str	r3, [sp, #12]
 8002000:	2300      	movs	r3, #0
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	2300      	movs	r3, #0
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	f241 3388 	movw	r3, #5000	@ 0x1388
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2302      	movs	r3, #2
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <FrequencyInit+0xec>)
 8002012:	4912      	ldr	r1, [pc, #72]	@ (800205c <FrequencyInit+0x100>)
 8002014:	4812      	ldr	r0, [pc, #72]	@ (8002060 <FrequencyInit+0x104>)
 8002016:	f009 fd75 	bl	800bb04 <_txe_timer_create>
        timerExpirationFrequency, 2, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[3].resetTimer, "resetTimer4", 
 800201a:	232c      	movs	r3, #44	@ 0x2c
 800201c:	9303      	str	r3, [sp, #12]
 800201e:	2300      	movs	r3, #0
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	2300      	movs	r3, #0
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	f241 3388 	movw	r3, #5000	@ 0x1388
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2303      	movs	r3, #3
 800202e:	4a06      	ldr	r2, [pc, #24]	@ (8002048 <FrequencyInit+0xec>)
 8002030:	490c      	ldr	r1, [pc, #48]	@ (8002064 <FrequencyInit+0x108>)
 8002032:	480d      	ldr	r0, [pc, #52]	@ (8002068 <FrequencyInit+0x10c>)
 8002034:	f009 fd66 	bl	800bb04 <_txe_timer_create>
        timerExpirationFrequency, 3, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    return retVal;
 8002038:	78fb      	ldrb	r3, [r7, #3]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20010750 	.word	0x20010750
 8002048:	080021cd 	.word	0x080021cd
 800204c:	0800be18 	.word	0x0800be18
 8002050:	2001075c 	.word	0x2001075c
 8002054:	0800be24 	.word	0x0800be24
 8002058:	2001079c 	.word	0x2001079c
 800205c:	0800be30 	.word	0x0800be30
 8002060:	200107dc 	.word	0x200107dc
 8002064:	0800be3c 	.word	0x0800be3c
 8002068:	2001081c 	.word	0x2001081c

0800206c <HAL_TIM_IC_CaptureCallback>:
  * @param htim: Timer handle
  * @retval void
  */
void HAL_TIM_IC_CaptureCallback(
    TIM_HandleTypeDef* htim
){
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
    switch (htim->Channel){
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7f1b      	ldrb	r3, [r3, #28]
 800207c:	3b01      	subs	r3, #1
 800207e:	2b07      	cmp	r3, #7
 8002080:	d827      	bhi.n	80020d2 <HAL_TIM_IC_CaptureCallback+0x66>
 8002082:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8002084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002088:	080020a9 	.word	0x080020a9
 800208c:	080020af 	.word	0x080020af
 8002090:	080020d3 	.word	0x080020d3
 8002094:	080020b5 	.word	0x080020b5
 8002098:	080020d3 	.word	0x080020d3
 800209c:	080020d3 	.word	0x080020d3
 80020a0:	080020d3 	.word	0x080020d3
 80020a4:	080020bb 	.word	0x080020bb
        case HAL_TIM_ACTIVE_CHANNEL_1:
            channel = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
            break;
 80020ac:	e008      	b.n	80020c0 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_2:
            channel = 1;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
            break;
 80020b2:	e005      	b.n	80020c0 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            channel = 2;
 80020b4:	2302      	movs	r3, #2
 80020b6:	73fb      	strb	r3, [r7, #15]
            break;
 80020b8:	e002      	b.n	80020c0 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_4:
            channel = 3;
 80020ba:	2303      	movs	r3, #3
 80020bc:	73fb      	strb	r3, [r7, #15]
            break;
 80020be:	bf00      	nop
        default:
            return;
    }
    CalculateFrequency(&ChannelData[channel], htim);
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	019b      	lsls	r3, r3, #6
 80020c4:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <HAL_TIM_IC_CaptureCallback+0x70>)
 80020c6:	4413      	add	r3, r2
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f808 	bl	80020e0 <CalculateFrequency>
 80020d0:	e000      	b.n	80020d4 <HAL_TIM_IC_CaptureCallback+0x68>
            return;
 80020d2:	bf00      	nop
}
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20010750 	.word	0x20010750

080020e0 <CalculateFrequency>:

static uint8_t CalculateFrequency(
    frequency_t* channel,
    TIM_HandleTypeDef* htim
){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
    uint8_t retVal = UCR_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
    // Check if first rising edge to begin capture
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 80020ee:	2100      	movs	r1, #0
 80020f0:	4835      	ldr	r0, [pc, #212]	@ (80021c8 <CalculateFrequency+0xe8>)
 80020f2:	f009 fb61 	bl	800b7b8 <_txe_semaphore_get>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <CalculateFrequency+0x24>
        retVal = UCR_NOT_OK;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
        return retVal;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	e05c      	b.n	80021be <CalculateFrequency+0xde>
    }

    if(!channel->isFirstCapture){
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7a1b      	ldrb	r3, [r3, #8]
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d012      	beq.n	8002138 <CalculateFrequency+0x58>
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	330c      	adds	r3, #12
 8002116:	4618      	mov	r0, r3
 8002118:	f009 fca0 	bl	800ba5c <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
        channel->firstValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002122:	4619      	mov	r1, r3
 8002124:	6838      	ldr	r0, [r7, #0]
 8002126:	f006 fa6d 	bl	8008604 <HAL_TIM_ReadCapturedValue>
 800212a:	4602      	mov	r2, r0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	601a      	str	r2, [r3, #0]
        // Set flag to indicate next value will be second rising edge
        channel->isFirstCapture = true;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	721a      	strb	r2, [r3, #8]
 8002136:	e036      	b.n	80021a6 <CalculateFrequency+0xc6>
    }else{
        // Stop the reset timer
        if(TX_SUCCESS != tx_timer_deactivate(&channel->resetTimer)){
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	330c      	adds	r3, #12
 800213c:	4618      	mov	r0, r3
 800213e:	f009 fd8d 	bl	800bc5c <_txe_timer_deactivate>
            // ADD error handler stuff here;
        }
        channel->secondValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002148:	4619      	mov	r1, r3
 800214a:	6838      	ldr	r0, [r7, #0]
 800214c:	f006 fa5a 	bl	8008604 <HAL_TIM_ReadCapturedValue>
 8002150:	4602      	mov	r2, r0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	605a      	str	r2, [r3, #4]
        // Check if the first capture was before the second
        if(channel->secondValue > channel->firstValue){
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d907      	bls.n	8002172 <CalculateFrequency+0x92>
            // Calculate the difference
            channel->difference = channel->secondValue - channel->firstValue;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002170:	e010      	b.n	8002194 <CalculateFrequency+0xb4>
        } else if (channel->secondValue < channel->firstValue){
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d20a      	bcs.n	8002194 <CalculateFrequency+0xb4>
            channel->difference = ((htim->Init.Period - channel->firstValue) + channel->secondValue) + 1;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1ad2      	subs	r2, r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4413      	add	r3, r2
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        // Reset the first capture state
        channel->firstValue = channel->secondValue;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	330c      	adds	r3, #12
 80021a0:	4618      	mov	r0, r3
 80021a2:	f009 fc5b 	bl	800ba5c <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
    }
    // Release the semaphore
    if(TX_SUCCESS != tx_semaphore_put(&semaphoreFrequency)){
 80021a6:	4808      	ldr	r0, [pc, #32]	@ (80021c8 <CalculateFrequency+0xe8>)
 80021a8:	f009 fb48 	bl	800b83c <_txe_semaphore_put>
        // ADD error handler stuff here;
    }
    // Reset the timer;
    if(TX_SUCCESS != tx_timer_change(&channel->resetTimer, FREQUENCY_RESET_TIME, 0)){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	330c      	adds	r3, #12
 80021b0:	2200      	movs	r2, #0
 80021b2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80021b6:	4618      	mov	r0, r3
 80021b8:	f009 fc6e 	bl	800ba98 <_txe_timer_change>
        // ADD error handler stuff here;
    }
    return retVal;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200106e0 	.word	0x200106e0

080021cc <timerExpirationFrequency>:
  * @param channel: the number of the timer
  * @retval void
  */
void timerExpirationFrequency(
    ULONG channel
){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    // Attempt to acquire the semaphore
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 80021d4:	2100      	movs	r1, #0
 80021d6:	4818      	ldr	r0, [pc, #96]	@ (8002238 <timerExpirationFrequency+0x6c>)
 80021d8:	f009 faee 	bl	800b7b8 <_txe_semaphore_get>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d126      	bne.n	8002230 <timerExpirationFrequency+0x64>
        return;
    }
    // Set the first capture and difference to zero
    ChannelData[channel].isFirstCapture = false;
 80021e2:	4a16      	ldr	r2, [pc, #88]	@ (800223c <timerExpirationFrequency+0x70>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	019b      	lsls	r3, r3, #6
 80021e8:	4413      	add	r3, r2
 80021ea:	3308      	adds	r3, #8
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
    ChannelData[channel].difference = 0;
 80021f0:	4a12      	ldr	r2, [pc, #72]	@ (800223c <timerExpirationFrequency+0x70>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	4413      	add	r3, r2
 80021f8:	333c      	adds	r3, #60	@ 0x3c
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
    // Reset the timer
    tx_timer_deactivate(&ChannelData[channel].resetTimer);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	3308      	adds	r3, #8
 8002204:	4a0d      	ldr	r2, [pc, #52]	@ (800223c <timerExpirationFrequency+0x70>)
 8002206:	4413      	add	r3, r2
 8002208:	3304      	adds	r3, #4
 800220a:	4618      	mov	r0, r3
 800220c:	f009 fd26 	bl	800bc5c <_txe_timer_deactivate>
    tx_timer_change(&ChannelData[channel].resetTimer, FREQUENCY_RESET_TIME, 0);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	019b      	lsls	r3, r3, #6
 8002214:	3308      	adds	r3, #8
 8002216:	4a09      	ldr	r2, [pc, #36]	@ (800223c <timerExpirationFrequency+0x70>)
 8002218:	4413      	add	r3, r2
 800221a:	3304      	adds	r3, #4
 800221c:	2200      	movs	r2, #0
 800221e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002222:	4618      	mov	r0, r3
 8002224:	f009 fc38 	bl	800ba98 <_txe_timer_change>
    // Release the semaphore
    tx_semaphore_put(&semaphoreFrequency);
 8002228:	4803      	ldr	r0, [pc, #12]	@ (8002238 <timerExpirationFrequency+0x6c>)
 800222a:	f009 fb07 	bl	800b83c <_txe_semaphore_put>
    return;
 800222e:	e000      	b.n	8002232 <timerExpirationFrequency+0x66>
        return;
 8002230:	bf00      	nop
}
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	200106e0 	.word	0x200106e0
 800223c:	20010750 	.word	0x20010750

08002240 <HAL_GPIO_EXTI_Callback>:
#include "exti.h"
#include "stdint.h"
#include "main.h"
#include "threadx.h"
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == DRDY1_Pin){
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d103      	bne.n	8002258 <HAL_GPIO_EXTI_Callback+0x18>
        tx_semaphore_put(&semaphoreExADC1);
 8002250:	4807      	ldr	r0, [pc, #28]	@ (8002270 <HAL_GPIO_EXTI_Callback+0x30>)
 8002252:	f009 faf3 	bl	800b83c <_txe_semaphore_put>
    }else if(GPIO_Pin == DRDY2_Pin){
        tx_semaphore_put(&semaphoreExADC2);
    }
}
 8002256:	e006      	b.n	8002266 <HAL_GPIO_EXTI_Callback+0x26>
    }else if(GPIO_Pin == DRDY2_Pin){
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800225e:	d102      	bne.n	8002266 <HAL_GPIO_EXTI_Callback+0x26>
        tx_semaphore_put(&semaphoreExADC2);
 8002260:	4804      	ldr	r0, [pc, #16]	@ (8002274 <HAL_GPIO_EXTI_Callback+0x34>)
 8002262:	f009 faeb 	bl	800b83c <_txe_semaphore_put>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200106fc 	.word	0x200106fc
 8002274:	20010718 	.word	0x20010718

08002278 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
 8002282:	460b      	mov	r3, r1
 8002284:	717b      	strb	r3, [r7, #5]
 8002286:	4613      	mov	r3, r2
 8002288:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	797b      	ldrb	r3, [r7, #5]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	b2da      	uxtb	r2, r3
 8002294:	793b      	ldrb	r3, [r7, #4]
 8002296:	4013      	ands	r3, r2
 8002298:	b2db      	uxtb	r3, r3
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <pack_left_shift_u32>:

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70fb      	strb	r3, [r7, #3]
 80022b2:	4613      	mov	r3, r2
 80022b4:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	78bb      	ldrb	r3, [r7, #2]
 80022c2:	4013      	ands	r3, r2
 80022c4:	b2db      	uxtb	r3, r3
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	80fb      	strh	r3, [r7, #6]
 80022dc:	460b      	mov	r3, r1
 80022de:	717b      	strb	r3, [r7, #5]
 80022e0:	4613      	mov	r3, r2
 80022e2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80022e4:	88fa      	ldrh	r2, [r7, #6]
 80022e6:	797b      	ldrb	r3, [r7, #5]
 80022e8:	fa42 f303 	asr.w	r3, r2, r3
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	793b      	ldrb	r3, [r7, #4]
 80022f0:	4013      	ands	r3, r2
 80022f2:	b2db      	uxtb	r3, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <pack_right_shift_u32>:

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	70fb      	strb	r3, [r7, #3]
 800230c:	4613      	mov	r3, r2
 800230e:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	b2da      	uxtb	r2, r3
 800231a:	78bb      	ldrb	r3, [r7, #2]
 800231c:	4013      	ands	r3, r2
 800231e:	b2db      	uxtb	r3, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <ucr_01_front_analog1_pack>:

int ucr_01_front_analog1_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_analog1_t *src_p,
    size_t size)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b07      	cmp	r3, #7
 800233c:	d802      	bhi.n	8002344 <ucr_01_front_analog1_pack+0x18>
        return (-EINVAL);
 800233e:	f06f 0315 	mvn.w	r3, #21
 8002342:	e08b      	b.n	800245c <ucr_01_front_analog1_pack+0x130>
    }

    memset(&dst_p[0], 0, 8);
 8002344:	2208      	movs	r2, #8
 8002346:	2100      	movs	r1, #0
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f009 fca5 	bl	800bc98 <memset>

    dst_p[0] |= pack_left_shift_u16(src_p->analog1, 0u, 0xffu);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	22ff      	movs	r2, #255	@ 0xff
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff8e 	bl	8002278 <pack_left_shift_u16>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4313      	orrs	r3, r2
 8002366:	b2da      	uxtb	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(src_p->analog1, 8u, 0xffu);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	22ff      	movs	r2, #255	@ 0xff
 8002372:	2108      	movs	r1, #8
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ffac 	bl	80022d2 <pack_right_shift_u16>
 800237a:	4603      	mov	r3, r0
 800237c:	4619      	mov	r1, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3301      	adds	r3, #1
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3301      	adds	r3, #1
 8002388:	430a      	orrs	r2, r1
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u16(src_p->analog2, 0u, 0xffu);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	885b      	ldrh	r3, [r3, #2]
 8002392:	22ff      	movs	r2, #255	@ 0xff
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff6e 	bl	8002278 <pack_left_shift_u16>
 800239c:	4603      	mov	r3, r0
 800239e:	4619      	mov	r1, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3302      	adds	r3, #2
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3302      	adds	r3, #2
 80023aa:	430a      	orrs	r2, r1
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->analog2, 8u, 0xffu);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	885b      	ldrh	r3, [r3, #2]
 80023b4:	22ff      	movs	r2, #255	@ 0xff
 80023b6:	2108      	movs	r1, #8
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff8a 	bl	80022d2 <pack_right_shift_u16>
 80023be:	4603      	mov	r3, r0
 80023c0:	4619      	mov	r1, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3303      	adds	r3, #3
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3303      	adds	r3, #3
 80023cc:	430a      	orrs	r2, r1
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u16(src_p->analog3, 0u, 0xffu);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	889b      	ldrh	r3, [r3, #4]
 80023d6:	22ff      	movs	r2, #255	@ 0xff
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff4c 	bl	8002278 <pack_left_shift_u16>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4619      	mov	r1, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3304      	adds	r3, #4
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3304      	adds	r3, #4
 80023ee:	430a      	orrs	r2, r1
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(src_p->analog3, 8u, 0xffu);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	889b      	ldrh	r3, [r3, #4]
 80023f8:	22ff      	movs	r2, #255	@ 0xff
 80023fa:	2108      	movs	r1, #8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff68 	bl	80022d2 <pack_right_shift_u16>
 8002402:	4603      	mov	r3, r0
 8002404:	4619      	mov	r1, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3305      	adds	r3, #5
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3305      	adds	r3, #5
 8002410:	430a      	orrs	r2, r1
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u16(src_p->analog4, 0u, 0xffu);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	88db      	ldrh	r3, [r3, #6]
 800241a:	22ff      	movs	r2, #255	@ 0xff
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff2a 	bl	8002278 <pack_left_shift_u16>
 8002424:	4603      	mov	r3, r0
 8002426:	4619      	mov	r1, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3306      	adds	r3, #6
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3306      	adds	r3, #6
 8002432:	430a      	orrs	r2, r1
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(src_p->analog4, 8u, 0xffu);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	88db      	ldrh	r3, [r3, #6]
 800243c:	22ff      	movs	r2, #255	@ 0xff
 800243e:	2108      	movs	r1, #8
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff46 	bl	80022d2 <pack_right_shift_u16>
 8002446:	4603      	mov	r3, r0
 8002448:	4619      	mov	r1, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3307      	adds	r3, #7
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3307      	adds	r3, #7
 8002454:	430a      	orrs	r2, r1
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]

    return (8);
 800245a:	2308      	movs	r3, #8
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <ucr_01_front_analog2_pack>:

int ucr_01_front_analog2_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_analog2_t *src_p,
    size_t size)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b07      	cmp	r3, #7
 8002474:	d802      	bhi.n	800247c <ucr_01_front_analog2_pack+0x18>
        return (-EINVAL);
 8002476:	f06f 0315 	mvn.w	r3, #21
 800247a:	e08b      	b.n	8002594 <ucr_01_front_analog2_pack+0x130>
    }

    memset(&dst_p[0], 0, 8);
 800247c:	2208      	movs	r2, #8
 800247e:	2100      	movs	r1, #0
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f009 fc09 	bl	800bc98 <memset>

    dst_p[0] |= pack_left_shift_u16(src_p->analog5, 0u, 0xffu);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	22ff      	movs	r2, #255	@ 0xff
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fef2 	bl	8002278 <pack_left_shift_u16>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4313      	orrs	r3, r2
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(src_p->analog5, 8u, 0xffu);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	22ff      	movs	r2, #255	@ 0xff
 80024aa:	2108      	movs	r1, #8
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff10 	bl	80022d2 <pack_right_shift_u16>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4619      	mov	r1, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3301      	adds	r3, #1
 80024c0:	430a      	orrs	r2, r1
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u16(src_p->analog6, 0u, 0xffu);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	885b      	ldrh	r3, [r3, #2]
 80024ca:	22ff      	movs	r2, #255	@ 0xff
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fed2 	bl	8002278 <pack_left_shift_u16>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4619      	mov	r1, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3302      	adds	r3, #2
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3302      	adds	r3, #2
 80024e2:	430a      	orrs	r2, r1
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->analog6, 8u, 0xffu);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	885b      	ldrh	r3, [r3, #2]
 80024ec:	22ff      	movs	r2, #255	@ 0xff
 80024ee:	2108      	movs	r1, #8
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff feee 	bl	80022d2 <pack_right_shift_u16>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4619      	mov	r1, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3303      	adds	r3, #3
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3303      	adds	r3, #3
 8002504:	430a      	orrs	r2, r1
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u16(src_p->analog7, 0u, 0xffu);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	889b      	ldrh	r3, [r3, #4]
 800250e:	22ff      	movs	r2, #255	@ 0xff
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff feb0 	bl	8002278 <pack_left_shift_u16>
 8002518:	4603      	mov	r3, r0
 800251a:	4619      	mov	r1, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3304      	adds	r3, #4
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3304      	adds	r3, #4
 8002526:	430a      	orrs	r2, r1
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(src_p->analog7, 8u, 0xffu);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	889b      	ldrh	r3, [r3, #4]
 8002530:	22ff      	movs	r2, #255	@ 0xff
 8002532:	2108      	movs	r1, #8
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fecc 	bl	80022d2 <pack_right_shift_u16>
 800253a:	4603      	mov	r3, r0
 800253c:	4619      	mov	r1, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3305      	adds	r3, #5
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3305      	adds	r3, #5
 8002548:	430a      	orrs	r2, r1
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u16(src_p->analog8, 0u, 0xffu);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	88db      	ldrh	r3, [r3, #6]
 8002552:	22ff      	movs	r2, #255	@ 0xff
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fe8e 	bl	8002278 <pack_left_shift_u16>
 800255c:	4603      	mov	r3, r0
 800255e:	4619      	mov	r1, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3306      	adds	r3, #6
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3306      	adds	r3, #6
 800256a:	430a      	orrs	r2, r1
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(src_p->analog8, 8u, 0xffu);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	88db      	ldrh	r3, [r3, #6]
 8002574:	22ff      	movs	r2, #255	@ 0xff
 8002576:	2108      	movs	r1, #8
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff feaa 	bl	80022d2 <pack_right_shift_u16>
 800257e:	4603      	mov	r3, r0
 8002580:	4619      	mov	r1, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3307      	adds	r3, #7
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3307      	adds	r3, #7
 800258c:	430a      	orrs	r2, r1
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

    return (8);
 8002592:	2308      	movs	r3, #8
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <ucr_01_front_frequency1_pack>:

int ucr_01_front_frequency1_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_frequency1_t *src_p,
    size_t size)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
    uint32_t freq1;
    uint32_t freq2;

    if (size < 8u) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b07      	cmp	r3, #7
 80025ac:	d802      	bhi.n	80025b4 <ucr_01_front_frequency1_pack+0x18>
        return (-EINVAL);
 80025ae:	f06f 0315 	mvn.w	r3, #21
 80025b2:	e08a      	b.n	80026ca <ucr_01_front_frequency1_pack+0x12e>
    }

    memset(&dst_p[0], 0, 8);
 80025b4:	2208      	movs	r2, #8
 80025b6:	2100      	movs	r1, #0
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f009 fb6d 	bl	800bc98 <memset>

    memcpy(&freq1, &src_p->freq1, sizeof(freq1));
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	617b      	str	r3, [r7, #20]
    dst_p[0] |= pack_left_shift_u32(freq1, 0u, 0xffu);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	22ff      	movs	r2, #255	@ 0xff
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fe6b 	bl	80022a6 <pack_left_shift_u32>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(freq1, 8u, 0xffu);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	22ff      	movs	r2, #255	@ 0xff
 80025e4:	2108      	movs	r1, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fe8a 	bl	8002300 <pack_right_shift_u32>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4619      	mov	r1, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3301      	adds	r3, #1
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3301      	adds	r3, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(freq1, 16u, 0xffu);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	22ff      	movs	r2, #255	@ 0xff
 8002604:	2110      	movs	r1, #16
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fe7a 	bl	8002300 <pack_right_shift_u32>
 800260c:	4603      	mov	r3, r0
 800260e:	4619      	mov	r1, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3302      	adds	r3, #2
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3302      	adds	r3, #2
 800261a:	430a      	orrs	r2, r1
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u32(freq1, 24u, 0xffu);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	22ff      	movs	r2, #255	@ 0xff
 8002624:	2118      	movs	r1, #24
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fe6a 	bl	8002300 <pack_right_shift_u32>
 800262c:	4603      	mov	r3, r0
 800262e:	4619      	mov	r1, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3303      	adds	r3, #3
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3303      	adds	r3, #3
 800263a:	430a      	orrs	r2, r1
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]
    memcpy(&freq2, &src_p->freq2, sizeof(freq2));
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3304      	adds	r3, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	613b      	str	r3, [r7, #16]
    dst_p[4] |= pack_left_shift_u32(freq2, 0u, 0xffu);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	22ff      	movs	r2, #255	@ 0xff
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fe29 	bl	80022a6 <pack_left_shift_u32>
 8002654:	4603      	mov	r3, r0
 8002656:	4619      	mov	r1, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3304      	adds	r3, #4
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3304      	adds	r3, #4
 8002662:	430a      	orrs	r2, r1
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(freq2, 8u, 0xffu);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	22ff      	movs	r2, #255	@ 0xff
 800266c:	2108      	movs	r1, #8
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fe46 	bl	8002300 <pack_right_shift_u32>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3305      	adds	r3, #5
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3305      	adds	r3, #5
 8002682:	430a      	orrs	r2, r1
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u32(freq2, 16u, 0xffu);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	22ff      	movs	r2, #255	@ 0xff
 800268c:	2110      	movs	r1, #16
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fe36 	bl	8002300 <pack_right_shift_u32>
 8002694:	4603      	mov	r3, r0
 8002696:	4619      	mov	r1, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3306      	adds	r3, #6
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3306      	adds	r3, #6
 80026a2:	430a      	orrs	r2, r1
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(freq2, 24u, 0xffu);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	22ff      	movs	r2, #255	@ 0xff
 80026ac:	2118      	movs	r1, #24
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fe26 	bl	8002300 <pack_right_shift_u32>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4619      	mov	r1, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3307      	adds	r3, #7
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3307      	adds	r3, #7
 80026c2:	430a      	orrs	r2, r1
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

    return (8);
 80026c8:	2308      	movs	r3, #8
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <ucr_01_front_frequency2_pack>:

int ucr_01_front_frequency2_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_frequency2_t *src_p,
    size_t size)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
    uint32_t freq3;
    uint32_t freq4;

    if (size < 8u) {
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b07      	cmp	r3, #7
 80026e2:	d802      	bhi.n	80026ea <ucr_01_front_frequency2_pack+0x18>
        return (-EINVAL);
 80026e4:	f06f 0315 	mvn.w	r3, #21
 80026e8:	e08a      	b.n	8002800 <ucr_01_front_frequency2_pack+0x12e>
    }

    memset(&dst_p[0], 0, 8);
 80026ea:	2208      	movs	r2, #8
 80026ec:	2100      	movs	r1, #0
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f009 fad2 	bl	800bc98 <memset>

    memcpy(&freq3, &src_p->freq3, sizeof(freq3));
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	617b      	str	r3, [r7, #20]
    dst_p[0] |= pack_left_shift_u32(freq3, 0u, 0xffu);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	22ff      	movs	r2, #255	@ 0xff
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fdd0 	bl	80022a6 <pack_left_shift_u32>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(freq3, 8u, 0xffu);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	22ff      	movs	r2, #255	@ 0xff
 800271a:	2108      	movs	r1, #8
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fdef 	bl	8002300 <pack_right_shift_u32>
 8002722:	4603      	mov	r3, r0
 8002724:	4619      	mov	r1, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3301      	adds	r3, #1
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3301      	adds	r3, #1
 8002730:	430a      	orrs	r2, r1
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(freq3, 16u, 0xffu);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	22ff      	movs	r2, #255	@ 0xff
 800273a:	2110      	movs	r1, #16
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fddf 	bl	8002300 <pack_right_shift_u32>
 8002742:	4603      	mov	r3, r0
 8002744:	4619      	mov	r1, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3302      	adds	r3, #2
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3302      	adds	r3, #2
 8002750:	430a      	orrs	r2, r1
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u32(freq3, 24u, 0xffu);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	22ff      	movs	r2, #255	@ 0xff
 800275a:	2118      	movs	r1, #24
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fdcf 	bl	8002300 <pack_right_shift_u32>
 8002762:	4603      	mov	r3, r0
 8002764:	4619      	mov	r1, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3303      	adds	r3, #3
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3303      	adds	r3, #3
 8002770:	430a      	orrs	r2, r1
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
    memcpy(&freq4, &src_p->freq4, sizeof(freq4));
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3304      	adds	r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	613b      	str	r3, [r7, #16]
    dst_p[4] |= pack_left_shift_u32(freq4, 0u, 0xffu);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	22ff      	movs	r2, #255	@ 0xff
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fd8e 	bl	80022a6 <pack_left_shift_u32>
 800278a:	4603      	mov	r3, r0
 800278c:	4619      	mov	r1, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3304      	adds	r3, #4
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3304      	adds	r3, #4
 8002798:	430a      	orrs	r2, r1
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(freq4, 8u, 0xffu);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	22ff      	movs	r2, #255	@ 0xff
 80027a2:	2108      	movs	r1, #8
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fdab 	bl	8002300 <pack_right_shift_u32>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4619      	mov	r1, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3305      	adds	r3, #5
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3305      	adds	r3, #5
 80027b8:	430a      	orrs	r2, r1
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u32(freq4, 16u, 0xffu);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	22ff      	movs	r2, #255	@ 0xff
 80027c2:	2110      	movs	r1, #16
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fd9b 	bl	8002300 <pack_right_shift_u32>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4619      	mov	r1, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3306      	adds	r3, #6
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3306      	adds	r3, #6
 80027d8:	430a      	orrs	r2, r1
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(freq4, 24u, 0xffu);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	22ff      	movs	r2, #255	@ 0xff
 80027e2:	2118      	movs	r1, #24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fd8b 	bl	8002300 <pack_right_shift_u32>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4619      	mov	r1, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3307      	adds	r3, #7
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3307      	adds	r3, #7
 80027f8:	430a      	orrs	r2, r1
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    return (8);
 80027fe:	2308      	movs	r3, #8
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002812:	2003      	movs	r0, #3
 8002814:	f001 ff17 	bl	8004646 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002818:	200f      	movs	r0, #15
 800281a:	f7fe fea5 	bl	8001568 <HAL_InitTick>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	71fb      	strb	r3, [r7, #7]
 8002828:	e001      	b.n	800282e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800282a:	f7fe fe75 	bl	8001518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800282e:	79fb      	ldrb	r3, [r7, #7]

}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_IncTick+0x1c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_IncTick+0x20>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4413      	add	r3, r2
 8002846:	4a03      	ldr	r2, [pc, #12]	@ (8002854 <HAL_IncTick+0x1c>)
 8002848:	6013      	str	r3, [r2, #0]
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	20010850 	.word	0x20010850
 8002858:	20000048 	.word	0x20000048

0800285c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b03      	ldr	r3, [pc, #12]	@ (8002870 <HAL_GetTick+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20010850 	.word	0x20010850

08002874 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 0202 	bic.w	r2, r3, #2
 8002884:	4904      	ldr	r1, [pc, #16]	@ (8002898 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40010030 	.word	0x40010030

0800289c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40010030 	.word	0x40010030

080028bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	609a      	str	r2, [r3, #8]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3360      	adds	r3, #96	@ 0x60
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <LL_ADC_SetOffset+0x44>)
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	4313      	orrs	r3, r2
 8002954:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	03fff000 	.word	0x03fff000

0800296c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3360      	adds	r3, #96	@ 0x60
 800297a:	461a      	mov	r2, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3360      	adds	r3, #96	@ 0x60
 80029a8:	461a      	mov	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	431a      	orrs	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029c2:	bf00      	nop
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b087      	sub	sp, #28
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3360      	adds	r3, #96	@ 0x60
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3360      	adds	r3, #96	@ 0x60
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	615a      	str	r2, [r3, #20]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b087      	sub	sp, #28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3330      	adds	r3, #48	@ 0x30
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	211f      	movs	r1, #31
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	401a      	ands	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	f003 011f 	and.w	r1, r3, #31
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	431a      	orrs	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aea:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3314      	adds	r3, #20
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	0e5b      	lsrs	r3, r3, #25
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	4413      	add	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	0d1b      	lsrs	r3, r3, #20
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2107      	movs	r1, #7
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	401a      	ands	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	0d1b      	lsrs	r3, r3, #20
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f003 0318 	and.w	r3, r3, #24
 8002b7e:	4908      	ldr	r1, [pc, #32]	@ (8002ba0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b80:	40d9      	lsrs	r1, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	400b      	ands	r3, r1
 8002b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	0007ffff 	.word	0x0007ffff

08002ba4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002bec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6093      	str	r3, [r2, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c14:	d101      	bne.n	8002c1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c64:	d101      	bne.n	8002c6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c8c:	f043 0201 	orr.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <LL_ADC_IsEnabled+0x18>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <LL_ADC_IsEnabled+0x1a>
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cd6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d101      	bne.n	8002d06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d101      	bne.n	8002d2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b089      	sub	sp, #36	@ 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e1a9      	b.n	80030aa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fd fe6d 	bl	8000a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff3f 	bl	8002c00 <LL_ADC_IsDeepPowerDownEnabled>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff25 	bl	8002bdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ff5a 	bl	8002c50 <LL_ADC_IsInternalRegulatorEnabled>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d115      	bne.n	8002dce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff3e 	bl	8002c28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dac:	4b9c      	ldr	r3, [pc, #624]	@ (8003020 <HAL_ADC_Init+0x2e4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	4a9c      	ldr	r2, [pc, #624]	@ (8003024 <HAL_ADC_Init+0x2e8>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	3301      	adds	r3, #1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dc0:	e002      	b.n	8002dc8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f9      	bne.n	8002dc2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff3c 	bl	8002c50 <LL_ADC_IsInternalRegulatorEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10d      	bne.n	8002dfa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff75 	bl	8002cee <LL_ADC_REG_IsConversionOngoing>
 8002e04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 8142 	bne.w	8003098 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 813e 	bne.w	8003098 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e24:	f043 0202 	orr.w	r2, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff35 	bl	8002ca0 <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d141      	bne.n	8002ec0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e44:	d004      	beq.n	8002e50 <HAL_ADC_Init+0x114>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a77      	ldr	r2, [pc, #476]	@ (8003028 <HAL_ADC_Init+0x2ec>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d10f      	bne.n	8002e70 <HAL_ADC_Init+0x134>
 8002e50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e54:	f7ff ff24 	bl	8002ca0 <LL_ADC_IsEnabled>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	4873      	ldr	r0, [pc, #460]	@ (8003028 <HAL_ADC_Init+0x2ec>)
 8002e5c:	f7ff ff20 	bl	8002ca0 <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4323      	orrs	r3, r4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e012      	b.n	8002e96 <HAL_ADC_Init+0x15a>
 8002e70:	486e      	ldr	r0, [pc, #440]	@ (800302c <HAL_ADC_Init+0x2f0>)
 8002e72:	f7ff ff15 	bl	8002ca0 <LL_ADC_IsEnabled>
 8002e76:	4604      	mov	r4, r0
 8002e78:	486d      	ldr	r0, [pc, #436]	@ (8003030 <HAL_ADC_Init+0x2f4>)
 8002e7a:	f7ff ff11 	bl	8002ca0 <LL_ADC_IsEnabled>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	431c      	orrs	r4, r3
 8002e82:	486c      	ldr	r0, [pc, #432]	@ (8003034 <HAL_ADC_Init+0x2f8>)
 8002e84:	f7ff ff0c 	bl	8002ca0 <LL_ADC_IsEnabled>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4323      	orrs	r3, r4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d012      	beq.n	8002ec0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ea2:	d004      	beq.n	8002eae <HAL_ADC_Init+0x172>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5f      	ldr	r2, [pc, #380]	@ (8003028 <HAL_ADC_Init+0x2ec>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_Init+0x176>
 8002eae:	4a62      	ldr	r2, [pc, #392]	@ (8003038 <HAL_ADC_Init+0x2fc>)
 8002eb0:	e000      	b.n	8002eb4 <HAL_ADC_Init+0x178>
 8002eb2:	4a62      	ldr	r2, [pc, #392]	@ (800303c <HAL_ADC_Init+0x300>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f7ff fcfe 	bl	80028bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7f5b      	ldrb	r3, [r3, #29]
 8002ec4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ed0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ed6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ede:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d106      	bne.n	8002efc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	045b      	lsls	r3, r3, #17
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	4b48      	ldr	r3, [pc, #288]	@ (8003040 <HAL_ADC_Init+0x304>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	69b9      	ldr	r1, [r7, #24]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fee4 	bl	8002d14 <LL_ADC_INJ_IsConversionOngoing>
 8002f4c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d17f      	bne.n	8003054 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d17c      	bne.n	8003054 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f5e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f66:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f76:	f023 0302 	bic.w	r3, r3, #2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	69b9      	ldr	r1, [r7, #24]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f9a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fa4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6911      	ldr	r1, [r2, #16]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002fba:	e013      	b.n	8002fe4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fe0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d12a      	bne.n	8003044 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003004:	4311      	orrs	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800300a:	4311      	orrs	r1, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003010:	430a      	orrs	r2, r1
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0201 	orr.w	r2, r2, #1
 800301c:	611a      	str	r2, [r3, #16]
 800301e:	e019      	b.n	8003054 <HAL_ADC_Init+0x318>
 8003020:	20000000 	.word	0x20000000
 8003024:	053e2d63 	.word	0x053e2d63
 8003028:	50000100 	.word	0x50000100
 800302c:	50000400 	.word	0x50000400
 8003030:	50000500 	.word	0x50000500
 8003034:	50000600 	.word	0x50000600
 8003038:	50000300 	.word	0x50000300
 800303c:	50000700 	.word	0x50000700
 8003040:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d10c      	bne.n	8003076 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	f023 010f 	bic.w	r1, r3, #15
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	1e5a      	subs	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
 8003074:	e007      	b.n	8003086 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 020f 	bic.w	r2, r2, #15
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308a:	f023 0303 	bic.w	r3, r3, #3
 800308e:	f043 0201 	orr.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003096:	e007      	b.n	80030a8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309c:	f043 0210 	orr.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3724      	adds	r7, #36	@ 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd90      	pop	{r4, r7, pc}
 80030b2:	bf00      	nop

080030b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030c8:	d004      	beq.n	80030d4 <HAL_ADC_Start_DMA+0x20>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003238 <HAL_ADC_Start_DMA+0x184>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_Start_DMA+0x24>
 80030d4:	4b59      	ldr	r3, [pc, #356]	@ (800323c <HAL_ADC_Start_DMA+0x188>)
 80030d6:	e000      	b.n	80030da <HAL_ADC_Start_DMA+0x26>
 80030d8:	4b59      	ldr	r3, [pc, #356]	@ (8003240 <HAL_ADC_Start_DMA+0x18c>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fd62 	bl	8002ba4 <LL_ADC_GetMultimode>
 80030e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fe01 	bl	8002cee <LL_ADC_REG_IsConversionOngoing>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f040 809b 	bne.w	800322a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_Start_DMA+0x4e>
 80030fe:	2302      	movs	r3, #2
 8003100:	e096      	b.n	8003230 <HAL_ADC_Start_DMA+0x17c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a4d      	ldr	r2, [pc, #308]	@ (8003244 <HAL_ADC_Start_DMA+0x190>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d008      	beq.n	8003126 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b05      	cmp	r3, #5
 800311e:	d002      	beq.n	8003126 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b09      	cmp	r3, #9
 8003124:	d17a      	bne.n	800321c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 ff56 	bl	8003fd8 <ADC_Enable>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d16d      	bne.n	8003212 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a3a      	ldr	r2, [pc, #232]	@ (8003238 <HAL_ADC_Start_DMA+0x184>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d009      	beq.n	8003168 <HAL_ADC_Start_DMA+0xb4>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3b      	ldr	r2, [pc, #236]	@ (8003248 <HAL_ADC_Start_DMA+0x194>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d002      	beq.n	8003164 <HAL_ADC_Start_DMA+0xb0>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	e003      	b.n	800316c <HAL_ADC_Start_DMA+0xb8>
 8003164:	4b39      	ldr	r3, [pc, #228]	@ (800324c <HAL_ADC_Start_DMA+0x198>)
 8003166:	e001      	b.n	800316c <HAL_ADC_Start_DMA+0xb8>
 8003168:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	4293      	cmp	r3, r2
 8003172:	d002      	beq.n	800317a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003196:	f023 0206 	bic.w	r2, r3, #6
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	661a      	str	r2, [r3, #96]	@ 0x60
 800319e:	e002      	b.n	80031a6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031aa:	4a29      	ldr	r2, [pc, #164]	@ (8003250 <HAL_ADC_Start_DMA+0x19c>)
 80031ac:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b2:	4a28      	ldr	r2, [pc, #160]	@ (8003254 <HAL_ADC_Start_DMA+0x1a0>)
 80031b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	4a27      	ldr	r2, [pc, #156]	@ (8003258 <HAL_ADC_Start_DMA+0x1a4>)
 80031bc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	221c      	movs	r2, #28
 80031c4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0210 	orr.w	r2, r2, #16
 80031dc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3340      	adds	r3, #64	@ 0x40
 80031f8:	4619      	mov	r1, r3
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f001 fbef 	bl	80049e0 <HAL_DMA_Start_IT>
 8003202:	4603      	mov	r3, r0
 8003204:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fd5b 	bl	8002cc6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003210:	e00d      	b.n	800322e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800321a:	e008      	b.n	800322e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003228:	e001      	b.n	800322e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800322a:	2302      	movs	r3, #2
 800322c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800322e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	50000100 	.word	0x50000100
 800323c:	50000300 	.word	0x50000300
 8003240:	50000700 	.word	0x50000700
 8003244:	50000600 	.word	0x50000600
 8003248:	50000500 	.word	0x50000500
 800324c:	50000400 	.word	0x50000400
 8003250:	08004105 	.word	0x08004105
 8003254:	080041dd 	.word	0x080041dd
 8003258:	080041f9 	.word	0x080041f9

0800325c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	@ 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003280:	d004      	beq.n	800328c <HAL_ADC_IRQHandler+0x30>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a8e      	ldr	r2, [pc, #568]	@ (80034c0 <HAL_ADC_IRQHandler+0x264>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_ADC_IRQHandler+0x34>
 800328c:	4b8d      	ldr	r3, [pc, #564]	@ (80034c4 <HAL_ADC_IRQHandler+0x268>)
 800328e:	e000      	b.n	8003292 <HAL_ADC_IRQHandler+0x36>
 8003290:	4b8d      	ldr	r3, [pc, #564]	@ (80034c8 <HAL_ADC_IRQHandler+0x26c>)
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fc86 	bl	8002ba4 <LL_ADC_GetMultimode>
 8003298:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d017      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x78>
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032be:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fffe 	bl	80042c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2202      	movs	r2, #2
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <HAL_ADC_IRQHandler+0x8c>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8094 	beq.w	800341c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 808e 	beq.w	800341c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003310:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fb9f 	bl	8002a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d072      	beq.n	800340e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a64      	ldr	r2, [pc, #400]	@ (80034c0 <HAL_ADC_IRQHandler+0x264>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_ADC_IRQHandler+0xea>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a65      	ldr	r2, [pc, #404]	@ (80034cc <HAL_ADC_IRQHandler+0x270>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d002      	beq.n	8003342 <HAL_ADC_IRQHandler+0xe6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	e003      	b.n	800334a <HAL_ADC_IRQHandler+0xee>
 8003342:	4b63      	ldr	r3, [pc, #396]	@ (80034d0 <HAL_ADC_IRQHandler+0x274>)
 8003344:	e001      	b.n	800334a <HAL_ADC_IRQHandler+0xee>
 8003346:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	4293      	cmp	r3, r2
 8003350:	d008      	beq.n	8003364 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b05      	cmp	r3, #5
 800335c:	d002      	beq.n	8003364 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b09      	cmp	r3, #9
 8003362:	d104      	bne.n	800336e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	623b      	str	r3, [r7, #32]
 800336c:	e014      	b.n	8003398 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a53      	ldr	r2, [pc, #332]	@ (80034c0 <HAL_ADC_IRQHandler+0x264>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d009      	beq.n	800338c <HAL_ADC_IRQHandler+0x130>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a53      	ldr	r2, [pc, #332]	@ (80034cc <HAL_ADC_IRQHandler+0x270>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d002      	beq.n	8003388 <HAL_ADC_IRQHandler+0x12c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	e003      	b.n	8003390 <HAL_ADC_IRQHandler+0x134>
 8003388:	4b51      	ldr	r3, [pc, #324]	@ (80034d0 <HAL_ADC_IRQHandler+0x274>)
 800338a:	e001      	b.n	8003390 <HAL_ADC_IRQHandler+0x134>
 800338c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003390:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d135      	bne.n	800340e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d12e      	bne.n	800340e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fc9a 	bl	8002cee <LL_ADC_REG_IsConversionOngoing>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d11a      	bne.n	80033f6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 020c 	bic.w	r2, r2, #12
 80033ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d112      	bne.n	800340e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033f4:	e00b      	b.n	800340e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	f043 0210 	orr.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe fb36 	bl	8001a80 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	220c      	movs	r2, #12
 800341a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <HAL_ADC_IRQHandler+0x1d4>
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80b3 	beq.w	80035a2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80ad 	beq.w	80035a2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fb3a 	bl	8002ade <LL_ADC_INJ_IsTriggerSourceSWStart>
 800346a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff faf5 	bl	8002a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003476:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a10      	ldr	r2, [pc, #64]	@ (80034c0 <HAL_ADC_IRQHandler+0x264>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_ADC_IRQHandler+0x23a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a11      	ldr	r2, [pc, #68]	@ (80034cc <HAL_ADC_IRQHandler+0x270>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d002      	beq.n	8003492 <HAL_ADC_IRQHandler+0x236>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	e003      	b.n	800349a <HAL_ADC_IRQHandler+0x23e>
 8003492:	4b0f      	ldr	r3, [pc, #60]	@ (80034d0 <HAL_ADC_IRQHandler+0x274>)
 8003494:	e001      	b.n	800349a <HAL_ADC_IRQHandler+0x23e>
 8003496:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	4293      	cmp	r3, r2
 80034a0:	d008      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d002      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b07      	cmp	r3, #7
 80034b2:	d10f      	bne.n	80034d4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	e01f      	b.n	80034fe <HAL_ADC_IRQHandler+0x2a2>
 80034be:	bf00      	nop
 80034c0:	50000100 	.word	0x50000100
 80034c4:	50000300 	.word	0x50000300
 80034c8:	50000700 	.word	0x50000700
 80034cc:	50000500 	.word	0x50000500
 80034d0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a8b      	ldr	r2, [pc, #556]	@ (8003708 <HAL_ADC_IRQHandler+0x4ac>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x296>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a8a      	ldr	r2, [pc, #552]	@ (800370c <HAL_ADC_IRQHandler+0x4b0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d002      	beq.n	80034ee <HAL_ADC_IRQHandler+0x292>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	e003      	b.n	80034f6 <HAL_ADC_IRQHandler+0x29a>
 80034ee:	4b88      	ldr	r3, [pc, #544]	@ (8003710 <HAL_ADC_IRQHandler+0x4b4>)
 80034f0:	e001      	b.n	80034f6 <HAL_ADC_IRQHandler+0x29a>
 80034f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034f6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d047      	beq.n	8003594 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_ADC_IRQHandler+0x2c2>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03f      	beq.n	8003594 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800351a:	2b00      	cmp	r3, #0
 800351c:	d13a      	bne.n	8003594 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d133      	bne.n	8003594 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d12e      	bne.n	8003594 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fbea 	bl	8002d14 <LL_ADC_INJ_IsConversionOngoing>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11a      	bne.n	800357c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003554:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d112      	bne.n	8003594 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	65da      	str	r2, [r3, #92]	@ 0x5c
 800357a:	e00b      	b.n	8003594 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003580:	f043 0210 	orr.w	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fe6f 	bl	8004278 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2260      	movs	r2, #96	@ 0x60
 80035a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d011      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x374>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8b4 	bl	8003730 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2280      	movs	r2, #128	@ 0x80
 80035ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <HAL_ADC_IRQHandler+0x3a4>
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00d      	beq.n	8003600 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fe55 	bl	80042a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_ADC_IRQHandler+0x3d4>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003618:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fe47 	bl	80042b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d043      	beq.n	80036c2 <HAL_ADC_IRQHandler+0x466>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03e      	beq.n	80036c2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800364c:	2301      	movs	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003650:	e021      	b.n	8003696 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003660:	d004      	beq.n	800366c <HAL_ADC_IRQHandler+0x410>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a28      	ldr	r2, [pc, #160]	@ (8003708 <HAL_ADC_IRQHandler+0x4ac>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_ADC_IRQHandler+0x414>
 800366c:	4b29      	ldr	r3, [pc, #164]	@ (8003714 <HAL_ADC_IRQHandler+0x4b8>)
 800366e:	e000      	b.n	8003672 <HAL_ADC_IRQHandler+0x416>
 8003670:	4b29      	ldr	r3, [pc, #164]	@ (8003718 <HAL_ADC_IRQHandler+0x4bc>)
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff faa4 	bl	8002bc0 <LL_ADC_GetMultiDMATransfer>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800367e:	2301      	movs	r3, #1
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
 8003682:	e008      	b.n	8003696 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003692:	2301      	movs	r3, #1
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10e      	bne.n	80036ba <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ac:	f043 0202 	orr.w	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f845 	bl	8003744 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2210      	movs	r2, #16
 80036c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d018      	beq.n	80036fe <HAL_ADC_IRQHandler+0x4a2>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d013      	beq.n	80036fe <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036da:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e6:	f043 0208 	orr.w	r2, r3, #8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036f6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fdc7 	bl	800428c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80036fe:	bf00      	nop
 8003700:	3728      	adds	r7, #40	@ 0x28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	50000100 	.word	0x50000100
 800370c:	50000500 	.word	0x50000500
 8003710:	50000400 	.word	0x50000400
 8003714:	50000300 	.word	0x50000300
 8003718:	50000700 	.word	0x50000700

0800371c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b0b6      	sub	sp, #216	@ 0xd8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <HAL_ADC_ConfigChannel+0x24>
 8003776:	2302      	movs	r3, #2
 8003778:	f000 bc13 	b.w	8003fa2 <HAL_ADC_ConfigChannel+0x84a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fab0 	bl	8002cee <LL_ADC_REG_IsConversionOngoing>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 83f3 	bne.w	8003f7c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	f7ff f96f 	bl	8002a86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fa9e 	bl	8002cee <LL_ADC_REG_IsConversionOngoing>
 80037b2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff faaa 	bl	8002d14 <LL_ADC_INJ_IsConversionOngoing>
 80037c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 81d9 	bne.w	8003b80 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 81d4 	bne.w	8003b80 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037e0:	d10f      	bne.n	8003802 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7ff f989 	bl	8002b04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f91d 	bl	8002a3a <LL_ADC_SetSamplingTimeCommonConfig>
 8003800:	e00e      	b.n	8003820 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	461a      	mov	r2, r3
 8003810:	f7ff f978 	bl	8002b04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff f90d 	bl	8002a3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	08db      	lsrs	r3, r3, #3
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b04      	cmp	r3, #4
 8003840:	d022      	beq.n	8003888 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6919      	ldr	r1, [r3, #16]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003852:	f7ff f867 	bl	8002924 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6919      	ldr	r1, [r3, #16]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	461a      	mov	r2, r3
 8003864:	f7ff f8b3 	bl	80029ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003874:	2b01      	cmp	r3, #1
 8003876:	d102      	bne.n	800387e <HAL_ADC_ConfigChannel+0x126>
 8003878:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800387c:	e000      	b.n	8003880 <HAL_ADC_ConfigChannel+0x128>
 800387e:	2300      	movs	r3, #0
 8003880:	461a      	mov	r2, r3
 8003882:	f7ff f8bf 	bl	8002a04 <LL_ADC_SetOffsetSaturation>
 8003886:	e17b      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff f86c 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003894:	4603      	mov	r3, r0
 8003896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x15c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff f861 	bl	800296c <LL_ADC_GetOffsetChannel>
 80038aa:	4603      	mov	r3, r0
 80038ac:	0e9b      	lsrs	r3, r3, #26
 80038ae:	f003 021f 	and.w	r2, r3, #31
 80038b2:	e01e      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x19a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff f856 	bl	800296c <LL_ADC_GetOffsetChannel>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80038e2:	2320      	movs	r3, #32
 80038e4:	e004      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80038e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_ADC_ConfigChannel+0x1b2>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0e9b      	lsrs	r3, r3, #26
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	e018      	b.n	800393c <HAL_ADC_ConfigChannel+0x1e4>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800391e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800392e:	2320      	movs	r3, #32
 8003930:	e004      	b.n	800393c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800393c:	429a      	cmp	r2, r3
 800393e:	d106      	bne.n	800394e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f825 	bl	8002998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff f809 	bl	800296c <LL_ADC_GetOffsetChannel>
 800395a:	4603      	mov	r3, r0
 800395c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_ADC_ConfigChannel+0x222>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2101      	movs	r1, #1
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fffe 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003970:	4603      	mov	r3, r0
 8003972:	0e9b      	lsrs	r3, r3, #26
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	e01e      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x260>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fff3 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800399c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80039a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80039a8:	2320      	movs	r3, #32
 80039aa:	e004      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80039ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x278>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0e9b      	lsrs	r3, r3, #26
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	e018      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x2aa>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80039e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80039ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80039f4:	2320      	movs	r3, #32
 80039f6:	e004      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80039f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039fc:	fab3 f383 	clz	r3, r3
 8003a00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d106      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe ffc2 	bl	8002998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe ffa6 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x2e8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2102      	movs	r1, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe ff9b 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003a36:	4603      	mov	r3, r0
 8003a38:	0e9b      	lsrs	r3, r3, #26
 8003a3a:	f003 021f 	and.w	r2, r3, #31
 8003a3e:	e01e      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x326>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2102      	movs	r1, #2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe ff90 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003a6e:	2320      	movs	r3, #32
 8003a70:	e004      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d105      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x33e>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	0e9b      	lsrs	r3, r3, #26
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	e016      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x36c>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003aa8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003aaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	e004      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d106      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe ff61 	bl	8002998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2103      	movs	r1, #3
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe ff45 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x3aa>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2103      	movs	r1, #3
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe ff3a 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003af8:	4603      	mov	r3, r0
 8003afa:	0e9b      	lsrs	r3, r3, #26
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	e017      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x3da>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2103      	movs	r1, #3
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe ff2f 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003b24:	2320      	movs	r3, #32
 8003b26:	e003      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d105      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x3f2>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	0e9b      	lsrs	r3, r3, #26
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	e011      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x416>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003b62:	2320      	movs	r3, #32
 8003b64:	e003      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d106      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	2103      	movs	r1, #3
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe ff0c 	bl	8002998 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f88b 	bl	8002ca0 <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f040 813d 	bne.w	8003e0c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f7fe ffdc 	bl	8002b5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4aa2      	ldr	r2, [pc, #648]	@ (8003e34 <HAL_ADC_ConfigChannel+0x6dc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	f040 812e 	bne.w	8003e0c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x480>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0e9b      	lsrs	r3, r3, #26
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2b09      	cmp	r3, #9
 8003bce:	bf94      	ite	ls
 8003bd0:	2301      	movls	r3, #1
 8003bd2:	2300      	movhi	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	e019      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x4b4>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003bea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	e003      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003bf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2b09      	cmp	r3, #9
 8003c04:	bf94      	ite	ls
 8003c06:	2301      	movls	r3, #1
 8003c08:	2300      	movhi	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d079      	beq.n	8003d04 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d107      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x4d4>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0e9b      	lsrs	r3, r3, #26
 8003c22:	3301      	adds	r3, #1
 8003c24:	069b      	lsls	r3, r3, #26
 8003c26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c2a:	e015      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x500>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c3c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003c44:	2320      	movs	r3, #32
 8003c46:	e003      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	069b      	lsls	r3, r3, #26
 8003c54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x520>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0e9b      	lsrs	r3, r3, #26
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2101      	movs	r1, #1
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	e017      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x550>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c80:	fa93 f3a3 	rbit	r3, r3
 8003c84:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c88:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003c90:	2320      	movs	r3, #32
 8003c92:	e003      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca8:	ea42 0103 	orr.w	r1, r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x576>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0e9b      	lsrs	r3, r3, #26
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	051b      	lsls	r3, r3, #20
 8003ccc:	e018      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x5a8>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	e003      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f003 021f 	and.w	r2, r3, #31
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d00:	430b      	orrs	r3, r1
 8003d02:	e07e      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x5c8>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0e9b      	lsrs	r3, r3, #26
 8003d16:	3301      	adds	r3, #1
 8003d18:	069b      	lsls	r3, r3, #26
 8003d1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d1e:	e015      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x5f4>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d30:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003d38:	2320      	movs	r3, #32
 8003d3a:	e003      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	069b      	lsls	r3, r3, #26
 8003d48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x614>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	e017      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x644>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	61fb      	str	r3, [r7, #28]
  return result;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	e003      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	fab3 f383 	clz	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	3301      	adds	r3, #1
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	ea42 0103 	orr.w	r1, r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10d      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x670>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	0e9b      	lsrs	r3, r3, #26
 8003db2:	3301      	adds	r3, #1
 8003db4:	f003 021f 	and.w	r2, r3, #31
 8003db8:	4613      	mov	r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3b1e      	subs	r3, #30
 8003dc0:	051b      	lsls	r3, r3, #20
 8003dc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	e01b      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x6a8>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	fa93 f3a3 	rbit	r3, r3
 8003dd4:	613b      	str	r3, [r7, #16]
  return result;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003de0:	2320      	movs	r3, #32
 8003de2:	e003      	b.n	8003dec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	3301      	adds	r3, #1
 8003dee:	f003 021f 	and.w	r2, r3, #31
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	3b1e      	subs	r3, #30
 8003dfa:	051b      	lsls	r3, r3, #20
 8003dfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e00:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e06:	4619      	mov	r1, r3
 8003e08:	f7fe fe7c 	bl	8002b04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <HAL_ADC_ConfigChannel+0x6e0>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80be 	beq.w	8003f96 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e22:	d004      	beq.n	8003e2e <HAL_ADC_ConfigChannel+0x6d6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a04      	ldr	r2, [pc, #16]	@ (8003e3c <HAL_ADC_ConfigChannel+0x6e4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10a      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x6ec>
 8003e2e:	4b04      	ldr	r3, [pc, #16]	@ (8003e40 <HAL_ADC_ConfigChannel+0x6e8>)
 8003e30:	e009      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x6ee>
 8003e32:	bf00      	nop
 8003e34:	407f0000 	.word	0x407f0000
 8003e38:	80080000 	.word	0x80080000
 8003e3c:	50000100 	.word	0x50000100
 8003e40:	50000300 	.word	0x50000300
 8003e44:	4b59      	ldr	r3, [pc, #356]	@ (8003fac <HAL_ADC_ConfigChannel+0x854>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fd5e 	bl	8002908 <LL_ADC_GetCommonPathInternalCh>
 8003e4c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a56      	ldr	r2, [pc, #344]	@ (8003fb0 <HAL_ADC_ConfigChannel+0x858>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_ADC_ConfigChannel+0x70c>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a55      	ldr	r2, [pc, #340]	@ (8003fb4 <HAL_ADC_ConfigChannel+0x85c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d13a      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d134      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e78:	d005      	beq.n	8003e86 <HAL_ADC_ConfigChannel+0x72e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x860>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	f040 8085 	bne.w	8003f90 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e8e:	d004      	beq.n	8003e9a <HAL_ADC_ConfigChannel+0x742>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a49      	ldr	r2, [pc, #292]	@ (8003fbc <HAL_ADC_ConfigChannel+0x864>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x746>
 8003e9a:	4a49      	ldr	r2, [pc, #292]	@ (8003fc0 <HAL_ADC_ConfigChannel+0x868>)
 8003e9c:	e000      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x748>
 8003e9e:	4a43      	ldr	r2, [pc, #268]	@ (8003fac <HAL_ADC_ConfigChannel+0x854>)
 8003ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ea4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f7fe fd19 	bl	80028e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eb0:	4b44      	ldr	r3, [pc, #272]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x86c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	4a44      	ldr	r2, [pc, #272]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x870>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eca:	e002      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f9      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ed8:	e05a      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3b      	ldr	r2, [pc, #236]	@ (8003fcc <HAL_ADC_ConfigChannel+0x874>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d125      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ee4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11f      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a31      	ldr	r2, [pc, #196]	@ (8003fbc <HAL_ADC_ConfigChannel+0x864>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d104      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x7ac>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a34      	ldr	r2, [pc, #208]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x878>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d047      	beq.n	8003f94 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0c:	d004      	beq.n	8003f18 <HAL_ADC_ConfigChannel+0x7c0>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2a      	ldr	r2, [pc, #168]	@ (8003fbc <HAL_ADC_ConfigChannel+0x864>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x7c4>
 8003f18:	4a29      	ldr	r2, [pc, #164]	@ (8003fc0 <HAL_ADC_ConfigChannel+0x868>)
 8003f1a:	e000      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x7c6>
 8003f1c:	4a23      	ldr	r2, [pc, #140]	@ (8003fac <HAL_ADC_ConfigChannel+0x854>)
 8003f1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f7fe fcda 	bl	80028e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f2e:	e031      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a27      	ldr	r2, [pc, #156]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x87c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d12d      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d127      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fbc <HAL_ADC_ConfigChannel+0x864>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d022      	beq.n	8003f96 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f58:	d004      	beq.n	8003f64 <HAL_ADC_ConfigChannel+0x80c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a17      	ldr	r2, [pc, #92]	@ (8003fbc <HAL_ADC_ConfigChannel+0x864>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x810>
 8003f64:	4a16      	ldr	r2, [pc, #88]	@ (8003fc0 <HAL_ADC_ConfigChannel+0x868>)
 8003f66:	e000      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x812>
 8003f68:	4a10      	ldr	r2, [pc, #64]	@ (8003fac <HAL_ADC_ConfigChannel+0x854>)
 8003f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f7fe fcb4 	bl	80028e2 <LL_ADC_SetCommonPathInternalCh>
 8003f7a:	e00c      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003f8e:	e002      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f90:	bf00      	nop
 8003f92:	e000      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	37d8      	adds	r7, #216	@ 0xd8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	50000700 	.word	0x50000700
 8003fb0:	c3210000 	.word	0xc3210000
 8003fb4:	90c00010 	.word	0x90c00010
 8003fb8:	50000600 	.word	0x50000600
 8003fbc:	50000100 	.word	0x50000100
 8003fc0:	50000300 	.word	0x50000300
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	053e2d63 	.word	0x053e2d63
 8003fcc:	c7520000 	.word	0xc7520000
 8003fd0:	50000500 	.word	0x50000500
 8003fd4:	cb840000 	.word	0xcb840000

08003fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe fe59 	bl	8002ca0 <LL_ADC_IsEnabled>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d176      	bne.n	80040e2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80040ec <ADC_Enable+0x114>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004006:	f043 0210 	orr.w	r2, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e062      	b.n	80040e4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fe28 	bl	8002c78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004030:	d004      	beq.n	800403c <ADC_Enable+0x64>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2e      	ldr	r2, [pc, #184]	@ (80040f0 <ADC_Enable+0x118>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d101      	bne.n	8004040 <ADC_Enable+0x68>
 800403c:	4b2d      	ldr	r3, [pc, #180]	@ (80040f4 <ADC_Enable+0x11c>)
 800403e:	e000      	b.n	8004042 <ADC_Enable+0x6a>
 8004040:	4b2d      	ldr	r3, [pc, #180]	@ (80040f8 <ADC_Enable+0x120>)
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fc60 	bl	8002908 <LL_ADC_GetCommonPathInternalCh>
 8004048:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800404a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800404e:	2b00      	cmp	r3, #0
 8004050:	d013      	beq.n	800407a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004052:	4b2a      	ldr	r3, [pc, #168]	@ (80040fc <ADC_Enable+0x124>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	4a29      	ldr	r2, [pc, #164]	@ (8004100 <ADC_Enable+0x128>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	099b      	lsrs	r3, r3, #6
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800406c:	e002      	b.n	8004074 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	3b01      	subs	r3, #1
 8004072:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f9      	bne.n	800406e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800407a:	f7fe fbef 	bl	800285c <HAL_GetTick>
 800407e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004080:	e028      	b.n	80040d4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fe0a 	bl	8002ca0 <LL_ADC_IsEnabled>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fdee 	bl	8002c78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800409c:	f7fe fbde 	bl	800285c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d914      	bls.n	80040d4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d00d      	beq.n	80040d4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	f043 0210 	orr.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e007      	b.n	80040e4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d1cf      	bne.n	8004082 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	8000003f 	.word	0x8000003f
 80040f0:	50000100 	.word	0x50000100
 80040f4:	50000300 	.word	0x50000300
 80040f8:	50000700 	.word	0x50000700
 80040fc:	20000000 	.word	0x20000000
 8004100:	053e2d63 	.word	0x053e2d63

08004104 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004116:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800411a:	2b00      	cmp	r3, #0
 800411c:	d14b      	bne.n	80041b6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004122:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d021      	beq.n	800417c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe fc8f 	bl	8002a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d032      	beq.n	80041ae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d12b      	bne.n	80041ae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d11f      	bne.n	80041ae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	65da      	str	r2, [r3, #92]	@ 0x5c
 800417a:	e018      	b.n	80041ae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d111      	bne.n	80041ae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d105      	bne.n	80041ae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a6:	f043 0201 	orr.w	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7fd fc66 	bl	8001a80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041b4:	e00e      	b.n	80041d4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fabe 	bl	8003744 <HAL_ADC_ErrorCallback>
}
 80041c8:	e004      	b.n	80041d4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff fa96 	bl	800371c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff fa90 	bl	8003744 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <LL_ADC_IsEnabled>:
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <LL_ADC_IsEnabled+0x18>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <LL_ADC_IsEnabled+0x1a>
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_ADC_REG_IsConversionOngoing>:
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b04      	cmp	r3, #4
 8004264:	d101      	bne.n	800426a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b0a1      	sub	sp, #132	@ 0x84
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e0e7      	b.n	80044ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004302:	2300      	movs	r3, #0
 8004304:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004306:	2300      	movs	r3, #0
 8004308:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004312:	d102      	bne.n	800431a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004314:	4b6f      	ldr	r3, [pc, #444]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	e009      	b.n	800432e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6e      	ldr	r2, [pc, #440]	@ (80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d102      	bne.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004324:	4b6d      	ldr	r3, [pc, #436]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	e001      	b.n	800432e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0be      	b.n	80044ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff7f 	bl	8004252 <LL_ADC_REG_IsConversionOngoing>
 8004354:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff79 	bl	8004252 <LL_ADC_REG_IsConversionOngoing>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 80a0 	bne.w	80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 809c 	bne.w	80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004378:	d004      	beq.n	8004384 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a55      	ldr	r2, [pc, #340]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004384:	4b56      	ldr	r3, [pc, #344]	@ (80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004386:	e000      	b.n	800438a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004388:	4b56      	ldr	r3, [pc, #344]	@ (80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800438a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d04b      	beq.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043a6:	035b      	lsls	r3, r3, #13
 80043a8:	430b      	orrs	r3, r1
 80043aa:	431a      	orrs	r2, r3
 80043ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043b8:	d004      	beq.n	80043c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a45      	ldr	r2, [pc, #276]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d10f      	bne.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80043c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80043c8:	f7ff ff30 	bl	800422c <LL_ADC_IsEnabled>
 80043cc:	4604      	mov	r4, r0
 80043ce:	4841      	ldr	r0, [pc, #260]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043d0:	f7ff ff2c 	bl	800422c <LL_ADC_IsEnabled>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4323      	orrs	r3, r4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e012      	b.n	800440a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80043e4:	483c      	ldr	r0, [pc, #240]	@ (80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043e6:	f7ff ff21 	bl	800422c <LL_ADC_IsEnabled>
 80043ea:	4604      	mov	r4, r0
 80043ec:	483b      	ldr	r0, [pc, #236]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043ee:	f7ff ff1d 	bl	800422c <LL_ADC_IsEnabled>
 80043f2:	4603      	mov	r3, r0
 80043f4:	431c      	orrs	r4, r3
 80043f6:	483c      	ldr	r0, [pc, #240]	@ (80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043f8:	f7ff ff18 	bl	800422c <LL_ADC_IsEnabled>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4323      	orrs	r3, r4
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d056      	beq.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800440e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004416:	f023 030f 	bic.w	r3, r3, #15
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	6811      	ldr	r1, [r2, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	6892      	ldr	r2, [r2, #8]
 8004422:	430a      	orrs	r2, r1
 8004424:	431a      	orrs	r2, r3
 8004426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004428:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800442a:	e047      	b.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800442c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004436:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004440:	d004      	beq.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d10f      	bne.n	800446c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800444c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004450:	f7ff feec 	bl	800422c <LL_ADC_IsEnabled>
 8004454:	4604      	mov	r4, r0
 8004456:	481f      	ldr	r0, [pc, #124]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004458:	f7ff fee8 	bl	800422c <LL_ADC_IsEnabled>
 800445c:	4603      	mov	r3, r0
 800445e:	4323      	orrs	r3, r4
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e012      	b.n	8004492 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800446c:	481a      	ldr	r0, [pc, #104]	@ (80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800446e:	f7ff fedd 	bl	800422c <LL_ADC_IsEnabled>
 8004472:	4604      	mov	r4, r0
 8004474:	4819      	ldr	r0, [pc, #100]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004476:	f7ff fed9 	bl	800422c <LL_ADC_IsEnabled>
 800447a:	4603      	mov	r3, r0
 800447c:	431c      	orrs	r4, r3
 800447e:	481a      	ldr	r0, [pc, #104]	@ (80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004480:	f7ff fed4 	bl	800422c <LL_ADC_IsEnabled>
 8004484:	4603      	mov	r3, r0
 8004486:	4323      	orrs	r3, r4
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d012      	beq.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004496:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800449e:	f023 030f 	bic.w	r3, r3, #15
 80044a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80044a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044a6:	e009      	b.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ac:	f043 0220 	orr.w	r2, r3, #32
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80044ba:	e000      	b.n	80044be <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80044c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3784      	adds	r7, #132	@ 0x84
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd90      	pop	{r4, r7, pc}
 80044d2:	bf00      	nop
 80044d4:	50000100 	.word	0x50000100
 80044d8:	50000400 	.word	0x50000400
 80044dc:	50000500 	.word	0x50000500
 80044e0:	50000300 	.word	0x50000300
 80044e4:	50000700 	.word	0x50000700
 80044e8:	50000600 	.word	0x50000600

080044ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <__NVIC_SetPriorityGrouping+0x44>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004508:	4013      	ands	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800451c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800451e:	4a04      	ldr	r2, [pc, #16]	@ (8004530 <__NVIC_SetPriorityGrouping+0x44>)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	60d3      	str	r3, [r2, #12]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004538:	4b04      	ldr	r3, [pc, #16]	@ (800454c <__NVIC_GetPriorityGrouping+0x18>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	f003 0307 	and.w	r3, r3, #7
}
 8004542:	4618      	mov	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	2b00      	cmp	r3, #0
 8004560:	db0b      	blt.n	800457a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	f003 021f 	and.w	r2, r3, #31
 8004568:	4907      	ldr	r1, [pc, #28]	@ (8004588 <__NVIC_EnableIRQ+0x38>)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2001      	movs	r0, #1
 8004572:	fa00 f202 	lsl.w	r2, r0, r2
 8004576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000e100 	.word	0xe000e100

0800458c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459c:	2b00      	cmp	r3, #0
 800459e:	db0a      	blt.n	80045b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	490c      	ldr	r1, [pc, #48]	@ (80045d8 <__NVIC_SetPriority+0x4c>)
 80045a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045aa:	0112      	lsls	r2, r2, #4
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	440b      	add	r3, r1
 80045b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b4:	e00a      	b.n	80045cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4908      	ldr	r1, [pc, #32]	@ (80045dc <__NVIC_SetPriority+0x50>)
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	3b04      	subs	r3, #4
 80045c4:	0112      	lsls	r2, r2, #4
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	440b      	add	r3, r1
 80045ca:	761a      	strb	r2, [r3, #24]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000e100 	.word	0xe000e100
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	@ 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f1c3 0307 	rsb	r3, r3, #7
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	bf28      	it	cs
 80045fe:	2304      	movcs	r3, #4
 8004600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3304      	adds	r3, #4
 8004606:	2b06      	cmp	r3, #6
 8004608:	d902      	bls.n	8004610 <NVIC_EncodePriority+0x30>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3b03      	subs	r3, #3
 800460e:	e000      	b.n	8004612 <NVIC_EncodePriority+0x32>
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004614:	f04f 32ff 	mov.w	r2, #4294967295
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43da      	mvns	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	401a      	ands	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004628:	f04f 31ff 	mov.w	r1, #4294967295
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	fa01 f303 	lsl.w	r3, r1, r3
 8004632:	43d9      	mvns	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004638:	4313      	orrs	r3, r2
         );
}
 800463a:	4618      	mov	r0, r3
 800463c:	3724      	adds	r7, #36	@ 0x24
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ff4c 	bl	80044ec <__NVIC_SetPriorityGrouping>
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800466a:	f7ff ff63 	bl	8004534 <__NVIC_GetPriorityGrouping>
 800466e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	f7ff ffb3 	bl	80045e0 <NVIC_EncodePriority>
 800467a:	4602      	mov	r2, r0
 800467c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff82 	bl	800458c <__NVIC_SetPriority>
}
 8004688:	bf00      	nop
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff56 	bl	8004550 <__NVIC_EnableIRQ>
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e054      	b.n	8004768 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7f5b      	ldrb	r3, [r3, #29]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fc fad6 	bl	8000c80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	791b      	ldrb	r3, [r3, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10c      	bne.n	80046fc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a22      	ldr	r2, [pc, #136]	@ (8004770 <HAL_CRC_Init+0xc4>)
 80046e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0218 	bic.w	r2, r2, #24
 80046f8:	609a      	str	r2, [r3, #8]
 80046fa:	e00c      	b.n	8004716 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6899      	ldr	r1, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	461a      	mov	r2, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f834 	bl	8004774 <HAL_CRCEx_Polynomial_Set>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e028      	b.n	8004768 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	795b      	ldrb	r3, [r3, #5]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d105      	bne.n	800472a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	611a      	str	r2, [r3, #16]
 8004728:	e004      	b.n	8004734 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6912      	ldr	r2, [r2, #16]
 8004732:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	04c11db7 	.word	0x04c11db7

08004774 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004784:	231f      	movs	r3, #31
 8004786:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
 8004796:	e063      	b.n	8004860 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004798:	bf00      	nop
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1e5a      	subs	r2, r3, #1
 800479e:	613a      	str	r2, [r7, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d009      	beq.n	80047b8 <HAL_CRCEx_Polynomial_Set+0x44>
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b18      	cmp	r3, #24
 80047bc:	d846      	bhi.n	800484c <HAL_CRCEx_Polynomial_Set+0xd8>
 80047be:	a201      	add	r2, pc, #4	@ (adr r2, 80047c4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	08004853 	.word	0x08004853
 80047c8:	0800484d 	.word	0x0800484d
 80047cc:	0800484d 	.word	0x0800484d
 80047d0:	0800484d 	.word	0x0800484d
 80047d4:	0800484d 	.word	0x0800484d
 80047d8:	0800484d 	.word	0x0800484d
 80047dc:	0800484d 	.word	0x0800484d
 80047e0:	0800484d 	.word	0x0800484d
 80047e4:	08004841 	.word	0x08004841
 80047e8:	0800484d 	.word	0x0800484d
 80047ec:	0800484d 	.word	0x0800484d
 80047f0:	0800484d 	.word	0x0800484d
 80047f4:	0800484d 	.word	0x0800484d
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	0800484d 	.word	0x0800484d
 8004800:	0800484d 	.word	0x0800484d
 8004804:	08004835 	.word	0x08004835
 8004808:	0800484d 	.word	0x0800484d
 800480c:	0800484d 	.word	0x0800484d
 8004810:	0800484d 	.word	0x0800484d
 8004814:	0800484d 	.word	0x0800484d
 8004818:	0800484d 	.word	0x0800484d
 800481c:	0800484d 	.word	0x0800484d
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004829 	.word	0x08004829
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b06      	cmp	r3, #6
 800482c:	d913      	bls.n	8004856 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004832:	e010      	b.n	8004856 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b07      	cmp	r3, #7
 8004838:	d90f      	bls.n	800485a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800483e:	e00c      	b.n	800485a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d90b      	bls.n	800485e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800484a:	e008      	b.n	800485e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	75fb      	strb	r3, [r7, #23]
        break;
 8004850:	e006      	b.n	8004860 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004852:	bf00      	nop
 8004854:	e004      	b.n	8004860 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004856:	bf00      	nop
 8004858:	e002      	b.n	8004860 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800485e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 0118 	bic.w	r1, r3, #24
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004882:	7dfb      	ldrb	r3, [r7, #23]
}
 8004884:	4618      	mov	r0, r3
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e08d      	b.n	80049be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	4b47      	ldr	r3, [pc, #284]	@ (80049c8 <HAL_DMA_Init+0x138>)
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d80f      	bhi.n	80048ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	4b45      	ldr	r3, [pc, #276]	@ (80049cc <HAL_DMA_Init+0x13c>)
 80048b6:	4413      	add	r3, r2
 80048b8:	4a45      	ldr	r2, [pc, #276]	@ (80049d0 <HAL_DMA_Init+0x140>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	009a      	lsls	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a42      	ldr	r2, [pc, #264]	@ (80049d4 <HAL_DMA_Init+0x144>)
 80048ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80048cc:	e00e      	b.n	80048ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	4b40      	ldr	r3, [pc, #256]	@ (80049d8 <HAL_DMA_Init+0x148>)
 80048d6:	4413      	add	r3, r2
 80048d8:	4a3d      	ldr	r2, [pc, #244]	@ (80049d0 <HAL_DMA_Init+0x140>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	009a      	lsls	r2, r3, #2
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a3c      	ldr	r2, [pc, #240]	@ (80049dc <HAL_DMA_Init+0x14c>)
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004906:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800491c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa2c 	bl	8004d9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800494c:	d102      	bne.n	8004954 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004968:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d010      	beq.n	8004994 <HAL_DMA_Init+0x104>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b04      	cmp	r3, #4
 8004978:	d80c      	bhi.n	8004994 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa4c 	bl	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	e008      	b.n	80049a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40020407 	.word	0x40020407
 80049cc:	bffdfff8 	.word	0xbffdfff8
 80049d0:	cccccccd 	.word	0xcccccccd
 80049d4:	40020000 	.word	0x40020000
 80049d8:	bffdfbf8 	.word	0xbffdfbf8
 80049dc:	40020400 	.word	0x40020400

080049e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_DMA_Start_IT+0x20>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e066      	b.n	8004ace <HAL_DMA_Start_IT+0xee>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d155      	bne.n	8004ac0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f970 	bl	8004d1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 020e 	orr.w	r2, r2, #14
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e00f      	b.n	8004a78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0204 	bic.w	r2, r2, #4
 8004a66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 020a 	orr.w	r2, r2, #10
 8004a76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0201 	orr.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e005      	b.n	8004acc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d00d      	beq.n	8004b0a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2204      	movs	r2, #4
 8004af2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
 8004b08:	e047      	b.n	8004b9a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 020e 	bic.w	r2, r2, #14
 8004b18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3e:	f003 021f 	and.w	r2, r3, #31
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	2101      	movs	r1, #1
 8004b48:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b56:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b78:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
    }
  }
  return status;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d026      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x7a>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d021      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0204 	bic.w	r2, r2, #4
 8004bf6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfc:	f003 021f 	and.w	r2, r3, #31
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	2104      	movs	r1, #4
 8004c06:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d071      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c1c:	e06c      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2202      	movs	r2, #2
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02e      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d029      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 020a 	bic.w	r2, r2, #10
 8004c58:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	f003 021f 	and.w	r2, r3, #31
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	2102      	movs	r1, #2
 8004c70:	fa01 f202 	lsl.w	r2, r1, r2
 8004c74:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d038      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c8e:	e033      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2208      	movs	r2, #8
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d02a      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d025      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 020e 	bic.w	r2, r2, #14
 8004cbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc2:	f003 021f 	and.w	r2, r3, #31
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	2101      	movs	r1, #1
 8004ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
}
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d10:	b2db      	uxtb	r3, r3
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d34:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d46:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d108      	bne.n	8004d7e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d7c:	e007      	b.n	8004d8e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	60da      	str	r2, [r3, #12]
}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b16      	ldr	r3, [pc, #88]	@ (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d802      	bhi.n	8004db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004db0:	4b15      	ldr	r3, [pc, #84]	@ (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e001      	b.n	8004dba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004db8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	3b08      	subs	r3, #8
 8004dc6:	4a12      	ldr	r2, [pc, #72]	@ (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	009a      	lsls	r2, r3, #2
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4413      	add	r3, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a0b      	ldr	r2, [pc, #44]	@ (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004de6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2201      	movs	r2, #1
 8004df0:	409a      	lsls	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40020407 	.word	0x40020407
 8004e08:	40020800 	.word	0x40020800
 8004e0c:	40020820 	.word	0x40020820
 8004e10:	cccccccd 	.word	0xcccccccd
 8004e14:	40020880 	.word	0x40020880

08004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	461a      	mov	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a08      	ldr	r2, [pc, #32]	@ (8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e3a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	2201      	movs	r2, #1
 8004e46:	409a      	lsls	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004e4c:	bf00      	nop
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	1000823f 	.word	0x1000823f
 8004e5c:	40020940 	.word	0x40020940

08004e60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e147      	b.n	8005102 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fb ff8a 	bl	8000da0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0210 	bic.w	r2, r2, #16
 8004e9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e9c:	f7fd fcde 	bl	800285c <HAL_GetTick>
 8004ea0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ea2:	e012      	b.n	8004eca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ea4:	f7fd fcda 	bl	800285c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b0a      	cmp	r3, #10
 8004eb0:	d90b      	bls.n	8004eca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb6:	f043 0201 	orr.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e11b      	b.n	8005102 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d0e5      	beq.n	8004ea4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ee8:	f7fd fcb8 	bl	800285c <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004eee:	e012      	b.n	8004f16 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ef0:	f7fd fcb4 	bl	800285c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b0a      	cmp	r3, #10
 8004efc:	d90b      	bls.n	8004f16 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f02:	f043 0201 	orr.w	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0f5      	b.n	8005102 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0e5      	beq.n	8004ef0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0202 	orr.w	r2, r2, #2
 8004f32:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a74      	ldr	r2, [pc, #464]	@ (800510c <HAL_FDCAN_Init+0x2ac>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d103      	bne.n	8004f46 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004f3e:	4a74      	ldr	r2, [pc, #464]	@ (8005110 <HAL_FDCAN_Init+0x2b0>)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7c1b      	ldrb	r3, [r3, #16]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d108      	bne.n	8004f60 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699a      	ldr	r2, [r3, #24]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f5c:	619a      	str	r2, [r3, #24]
 8004f5e:	e007      	b.n	8004f70 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	7c5b      	ldrb	r3, [r3, #17]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d108      	bne.n	8004f8a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f86:	619a      	str	r2, [r3, #24]
 8004f88:	e007      	b.n	8004f9a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f98:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7c9b      	ldrb	r3, [r3, #18]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d108      	bne.n	8004fb4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fb0:	619a      	str	r2, [r3, #24]
 8004fb2:	e007      	b.n	8004fc4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fc2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004fe8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0210 	bic.w	r2, r2, #16
 8004ff8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d108      	bne.n	8005014 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699a      	ldr	r2, [r3, #24]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0204 	orr.w	r2, r2, #4
 8005010:	619a      	str	r2, [r3, #24]
 8005012:	e02c      	b.n	800506e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d028      	beq.n	800506e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d01c      	beq.n	800505e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005032:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0210 	orr.w	r2, r2, #16
 8005042:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d110      	bne.n	800506e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0220 	orr.w	r2, r2, #32
 800505a:	619a      	str	r2, [r3, #24]
 800505c:	e007      	b.n	800506e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0220 	orr.w	r2, r2, #32
 800506c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	3b01      	subs	r3, #1
 8005074:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	3b01      	subs	r3, #1
 800507c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800507e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005086:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	3b01      	subs	r3, #1
 8005090:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005096:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005098:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a2:	d115      	bne.n	80050d0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ae:	3b01      	subs	r3, #1
 80050b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	3b01      	subs	r3, #1
 80050ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80050bc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	3b01      	subs	r3, #1
 80050c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80050cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa1a 	bl	8005520 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40006400 	.word	0x40006400
 8005110:	40006500 	.word	0x40006500

08005114 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d110      	bne.n	800514a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e006      	b.n	8005158 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514e:	f043 0204 	orr.w	r2, r3, #4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
  }
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d12c      	bne.n	80051d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005190:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e023      	b.n	80051e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fa20 	bl	80055f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2101      	movs	r1, #1
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	fa01 f202 	lsl.w	r2, r1, r2
 80051c4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80051c8:	2201      	movs	r2, #1
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	409a      	lsls	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e006      	b.n	80051e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051da:	f043 0208 	orr.w	r2, r3, #8
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08c      	sub	sp, #48	@ 0x30
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fa:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80051fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005208:	4013      	ands	r3, r2
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005220:	4013      	ands	r3, r2
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005238:	4013      	ands	r3, r2
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005242:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005246:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524e:	6a3a      	ldr	r2, [r7, #32]
 8005250:	4013      	ands	r3, r2
 8005252:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800525e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	4013      	ands	r3, r2
 800526a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d006      	beq.n	800529e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2240      	movs	r2, #64	@ 0x40
 8005296:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f921 	bl	80054e0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d019      	beq.n	80052dc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d014      	beq.n	80052dc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052ba:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4013      	ands	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80052d4:	6939      	ldr	r1, [r7, #16]
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f8e3 	bl	80054a2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80052dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052e8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80052ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8a2 	bl	8005436 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8a2 	bl	800544c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005316:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f8a2 	bl	8005462 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00c      	beq.n	8005342 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800533a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f89b 	bl	8005478 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005348:	2b00      	cmp	r3, #0
 800534a:	d018      	beq.n	800537e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005352:	2b00      	cmp	r3, #0
 8005354:	d013      	beq.n	800537e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800535e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4013      	ands	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2280      	movs	r2, #128	@ 0x80
 8005374:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005376:	68f9      	ldr	r1, [r7, #12]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f887 	bl	800548c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00c      	beq.n	80053a2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800539a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f88b 	bl	80054b8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80053be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f883 	bl	80054cc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00f      	beq.n	80053f0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80053e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80053fe:	69f9      	ldr	r1, [r7, #28]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f881 	bl	8005508 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d009      	beq.n	8005420 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a3a      	ldr	r2, [r7, #32]
 8005412:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f863 	bl	80054f4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800542e:	bf00      	nop
 8005430:	3730      	adds	r7, #48	@ 0x30
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005528:	4b30      	ldr	r3, [pc, #192]	@ (80055ec <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800552a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2f      	ldr	r2, [pc, #188]	@ (80055f0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d103      	bne.n	800553e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800553c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2c      	ldr	r2, [pc, #176]	@ (80055f4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d103      	bne.n	8005550 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800554e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800555e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005566:	041a      	lsls	r2, r3, #16
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005584:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	061a      	lsls	r2, r3, #24
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	e005      	b.n	80055d2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3304      	adds	r3, #4
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d3f3      	bcc.n	80055c6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	4000a400 	.word	0x4000a400
 80055f0:	40006800 	.word	0x40006800
 80055f4:	40006c00 	.word	0x40006c00

080055f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	@ 0x24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005616:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800561e:	4313      	orrs	r3, r2
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	e00a      	b.n	800563a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800562c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005632:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005638:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005644:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800564a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005650:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	3304      	adds	r3, #4
 8005678:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	3304      	adds	r3, #4
 8005684:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e020      	b.n	80056ce <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	3303      	adds	r3, #3
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	4413      	add	r3, r2
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	3302      	adds	r3, #2
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	440b      	add	r3, r1
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80056a4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	3301      	adds	r3, #1
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	440b      	add	r3, r1
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80056b2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	440a      	add	r2, r1
 80056ba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80056bc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	3304      	adds	r3, #4
 80056c6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3304      	adds	r3, #4
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4a06      	ldr	r2, [pc, #24]	@ (80056ec <FDCAN_CopyMessageToRAM+0xf4>)
 80056d4:	5cd3      	ldrb	r3, [r2, r3]
 80056d6:	461a      	mov	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	4293      	cmp	r3, r2
 80056dc:	d3d6      	bcc.n	800568c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	3724      	adds	r7, #36	@ 0x24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	0800be7c 	.word	0x0800be7c

080056f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056fe:	e15a      	b.n	80059b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	4013      	ands	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 814c 	beq.w	80059b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d005      	beq.n	8005730 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800572c:	2b02      	cmp	r3, #2
 800572e:	d130      	bne.n	8005792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4013      	ands	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005766:	2201      	movs	r2, #1
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4013      	ands	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	f003 0201 	and.w	r2, r3, #1
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b03      	cmp	r3, #3
 800579c:	d017      	beq.n	80057ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	2203      	movs	r2, #3
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43db      	mvns	r3, r3
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4013      	ands	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d123      	bne.n	8005822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	08da      	lsrs	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3208      	adds	r2, #8
 80057e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	220f      	movs	r2, #15
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4013      	ands	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	08da      	lsrs	r2, r3, #3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3208      	adds	r2, #8
 800581c:	6939      	ldr	r1, [r7, #16]
 800581e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	2203      	movs	r2, #3
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 0203 	and.w	r2, r3, #3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 80a6 	beq.w	80059b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005864:	4b5b      	ldr	r3, [pc, #364]	@ (80059d4 <HAL_GPIO_Init+0x2e4>)
 8005866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005868:	4a5a      	ldr	r2, [pc, #360]	@ (80059d4 <HAL_GPIO_Init+0x2e4>)
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005870:	4b58      	ldr	r3, [pc, #352]	@ (80059d4 <HAL_GPIO_Init+0x2e4>)
 8005872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800587c:	4a56      	ldr	r2, [pc, #344]	@ (80059d8 <HAL_GPIO_Init+0x2e8>)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	089b      	lsrs	r3, r3, #2
 8005882:	3302      	adds	r3, #2
 8005884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	220f      	movs	r2, #15
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	43db      	mvns	r3, r3
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4013      	ands	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058a6:	d01f      	beq.n	80058e8 <HAL_GPIO_Init+0x1f8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a4c      	ldr	r2, [pc, #304]	@ (80059dc <HAL_GPIO_Init+0x2ec>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d019      	beq.n	80058e4 <HAL_GPIO_Init+0x1f4>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a4b      	ldr	r2, [pc, #300]	@ (80059e0 <HAL_GPIO_Init+0x2f0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <HAL_GPIO_Init+0x1f0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a4a      	ldr	r2, [pc, #296]	@ (80059e4 <HAL_GPIO_Init+0x2f4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00d      	beq.n	80058dc <HAL_GPIO_Init+0x1ec>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a49      	ldr	r2, [pc, #292]	@ (80059e8 <HAL_GPIO_Init+0x2f8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d007      	beq.n	80058d8 <HAL_GPIO_Init+0x1e8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a48      	ldr	r2, [pc, #288]	@ (80059ec <HAL_GPIO_Init+0x2fc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <HAL_GPIO_Init+0x1e4>
 80058d0:	2305      	movs	r3, #5
 80058d2:	e00a      	b.n	80058ea <HAL_GPIO_Init+0x1fa>
 80058d4:	2306      	movs	r3, #6
 80058d6:	e008      	b.n	80058ea <HAL_GPIO_Init+0x1fa>
 80058d8:	2304      	movs	r3, #4
 80058da:	e006      	b.n	80058ea <HAL_GPIO_Init+0x1fa>
 80058dc:	2303      	movs	r3, #3
 80058de:	e004      	b.n	80058ea <HAL_GPIO_Init+0x1fa>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e002      	b.n	80058ea <HAL_GPIO_Init+0x1fa>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <HAL_GPIO_Init+0x1fa>
 80058e8:	2300      	movs	r3, #0
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	f002 0203 	and.w	r2, r2, #3
 80058f0:	0092      	lsls	r2, r2, #2
 80058f2:	4093      	lsls	r3, r2
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058fa:	4937      	ldr	r1, [pc, #220]	@ (80059d8 <HAL_GPIO_Init+0x2e8>)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	3302      	adds	r3, #2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005908:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <HAL_GPIO_Init+0x300>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	43db      	mvns	r3, r3
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4013      	ands	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800592c:	4a30      	ldr	r2, [pc, #192]	@ (80059f0 <HAL_GPIO_Init+0x300>)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005932:	4b2f      	ldr	r3, [pc, #188]	@ (80059f0 <HAL_GPIO_Init+0x300>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	43db      	mvns	r3, r3
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4013      	ands	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005956:	4a26      	ldr	r2, [pc, #152]	@ (80059f0 <HAL_GPIO_Init+0x300>)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800595c:	4b24      	ldr	r3, [pc, #144]	@ (80059f0 <HAL_GPIO_Init+0x300>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	43db      	mvns	r3, r3
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4013      	ands	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005980:	4a1b      	ldr	r2, [pc, #108]	@ (80059f0 <HAL_GPIO_Init+0x300>)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005986:	4b1a      	ldr	r3, [pc, #104]	@ (80059f0 <HAL_GPIO_Init+0x300>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	43db      	mvns	r3, r3
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4013      	ands	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059aa:	4a11      	ldr	r2, [pc, #68]	@ (80059f0 <HAL_GPIO_Init+0x300>)
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	3301      	adds	r3, #1
 80059b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f47f ae9d 	bne.w	8005700 <HAL_GPIO_Init+0x10>
  }
}
 80059c6:	bf00      	nop
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40010000 	.word	0x40010000
 80059dc:	48000400 	.word	0x48000400
 80059e0:	48000800 	.word	0x48000800
 80059e4:	48000c00 	.word	0x48000c00
 80059e8:	48001000 	.word	0x48001000
 80059ec:	48001400 	.word	0x48001400
 80059f0:	40010400 	.word	0x40010400

080059f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	807b      	strh	r3, [r7, #2]
 8005a00:	4613      	mov	r3, r2
 8005a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a04:	787b      	ldrb	r3, [r7, #1]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a0a:	887a      	ldrh	r2, [r7, #2]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a10:	e002      	b.n	8005a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a12:	887a      	ldrh	r2, [r7, #2]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a36:	887a      	ldrh	r2, [r7, #2]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	041a      	lsls	r2, r3, #16
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	43d9      	mvns	r1, r3
 8005a42:	887b      	ldrh	r3, [r7, #2]
 8005a44:	400b      	ands	r3, r1
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	619a      	str	r2, [r3, #24]
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a62:	4b08      	ldr	r3, [pc, #32]	@ (8005a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a64:	695a      	ldr	r2, [r3, #20]
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d006      	beq.n	8005a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a6e:	4a05      	ldr	r2, [pc, #20]	@ (8005a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a74:	88fb      	ldrh	r3, [r7, #6]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fc fbe2 	bl	8002240 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40010400 	.word	0x40010400

08005a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e08d      	b.n	8005bb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb fb58 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2224      	movs	r2, #36	@ 0x24
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ad8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ae8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d107      	bne.n	8005b02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	e006      	b.n	8005b10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d108      	bne.n	8005b2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b26:	605a      	str	r2, [r3, #4]
 8005b28:	e007      	b.n	8005b3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6812      	ldr	r2, [r2, #0]
 8005b44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1a      	ldr	r2, [r3, #32]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	68f9      	ldr	r1, [r7, #12]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
  }
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b086      	sub	sp, #24
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00f      	beq.n	8005c34 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00f      	beq.n	8005c5e <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4c:	f043 0208 	orr.w	r2, r3, #8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c5c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00f      	beq.n	8005c88 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c76:	f043 0202 	orr.w	r2, r3, #2
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c86:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 030b 	and.w	r3, r3, #11
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005c98:	68f9      	ldr	r1, [r7, #12]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fbd6 	bl	800644c <I2C_ITError>
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <I2C_Slave_ISR_IT+0x24>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e0e2      	b.n	8005f12 <I2C_Slave_ISR_IT+0x1ea>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005d68:	6939      	ldr	r1, [r7, #16]
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 f9b6 	bl	80060dc <I2C_ITSlaveCplt>
 8005d70:	e0ca      	b.n	8005f08 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d04b      	beq.n	8005e14 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d046      	beq.n	8005e14 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d128      	bne.n	8005de2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b28      	cmp	r3, #40	@ 0x28
 8005d9a:	d108      	bne.n	8005dae <I2C_Slave_ISR_IT+0x86>
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005da2:	d104      	bne.n	8005dae <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005da4:	6939      	ldr	r1, [r7, #16]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fafc 	bl	80063a4 <I2C_ITListenCplt>
 8005dac:	e031      	b.n	8005e12 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b29      	cmp	r3, #41	@ 0x29
 8005db8:	d10e      	bne.n	8005dd8 <I2C_Slave_ISR_IT+0xb0>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dc0:	d00a      	beq.n	8005dd8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2210      	movs	r2, #16
 8005dc8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fc55 	bl	800667a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f926 	bl	8006022 <I2C_ITSlaveSeqCplt>
 8005dd6:	e01c      	b.n	8005e12 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2210      	movs	r2, #16
 8005dde:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005de0:	e08f      	b.n	8005f02 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2210      	movs	r2, #16
 8005de8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f043 0204 	orr.w	r2, r3, #4
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <I2C_Slave_ISR_IT+0xdc>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e02:	d17e      	bne.n	8005f02 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e08:	4619      	mov	r1, r3
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 fb1e 	bl	800644c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005e10:	e077      	b.n	8005f02 <I2C_Slave_ISR_IT+0x1da>
 8005e12:	e076      	b.n	8005f02 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d02f      	beq.n	8005e7e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d02a      	beq.n	8005e7e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d018      	beq.n	8005e64 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d14b      	bne.n	8005f06 <I2C_Slave_ISR_IT+0x1de>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e74:	d047      	beq.n	8005f06 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f8d3 	bl	8006022 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005e7c:	e043      	b.n	8005f06 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005e92:	6939      	ldr	r1, [r7, #16]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f840 	bl	8005f1a <I2C_ITAddrCplt>
 8005e9a:	e035      	b.n	8005f08 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d030      	beq.n	8005f08 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d02b      	beq.n	8005f08 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d018      	beq.n	8005eec <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	781a      	ldrb	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005eea:	e00d      	b.n	8005f08 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ef2:	d002      	beq.n	8005efa <I2C_Slave_ISR_IT+0x1d2>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f891 	bl	8006022 <I2C_ITSlaveSeqCplt>
 8005f00:	e002      	b.n	8005f08 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005f02:	bf00      	nop
 8005f04:	e000      	b.n	8005f08 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005f06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f30:	2b28      	cmp	r3, #40	@ 0x28
 8005f32:	d16a      	bne.n	800600a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	0c1b      	lsrs	r3, r3, #16
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005f52:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f60:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005f6e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d138      	bne.n	8005fea <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005f78:	897b      	ldrh	r3, [r7, #10]
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	89bb      	ldrh	r3, [r7, #12]
 8005f80:	4053      	eors	r3, r2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f003 0306 	and.w	r3, r3, #6
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d11c      	bne.n	8005fc6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005f8c:	897b      	ldrh	r3, [r7, #10]
 8005f8e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d13b      	bne.n	800601a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2208      	movs	r2, #8
 8005fae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005fb8:	89ba      	ldrh	r2, [r7, #12]
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff fe86 	bl	8005cd0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005fc4:	e029      	b.n	800601a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005fc6:	893b      	ldrh	r3, [r7, #8]
 8005fc8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005fca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fb95 	bl	80066fe <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005fdc:	89ba      	ldrh	r2, [r7, #12]
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff fe74 	bl	8005cd0 <HAL_I2C_AddrCallback>
}
 8005fe8:	e017      	b.n	800601a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005fea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fb85 	bl	80066fe <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ffc:	89ba      	ldrh	r2, [r7, #12]
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff fe64 	bl	8005cd0 <HAL_I2C_AddrCallback>
}
 8006008:	e007      	b.n	800601a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2208      	movs	r2, #8
 8006010:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e00c      	b.n	8006070 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800606e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b29      	cmp	r3, #41	@ 0x29
 800607a:	d112      	bne.n	80060a2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2228      	movs	r2, #40	@ 0x28
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2221      	movs	r2, #33	@ 0x21
 8006088:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800608a:	2101      	movs	r1, #1
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fb36 	bl	80066fe <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff fe04 	bl	8005ca8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80060a0:	e017      	b.n	80060d2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ac:	d111      	bne.n	80060d2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2228      	movs	r2, #40	@ 0x28
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2222      	movs	r2, #34	@ 0x22
 80060ba:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80060bc:	2102      	movs	r1, #2
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fb1d 	bl	80066fe <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff fdf5 	bl	8005cbc <HAL_I2C_SlaveRxCpltCallback>
}
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060fe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2220      	movs	r2, #32
 8006106:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006108:	7afb      	ldrb	r3, [r7, #11]
 800610a:	2b21      	cmp	r3, #33	@ 0x21
 800610c:	d002      	beq.n	8006114 <I2C_ITSlaveCplt+0x38>
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	2b29      	cmp	r3, #41	@ 0x29
 8006112:	d108      	bne.n	8006126 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006114:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 faf0 	bl	80066fe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2221      	movs	r2, #33	@ 0x21
 8006122:	631a      	str	r2, [r3, #48]	@ 0x30
 8006124:	e019      	b.n	800615a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	2b22      	cmp	r3, #34	@ 0x22
 800612a:	d002      	beq.n	8006132 <I2C_ITSlaveCplt+0x56>
 800612c:	7afb      	ldrb	r3, [r7, #11]
 800612e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006130:	d108      	bne.n	8006144 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006132:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fae1 	bl	80066fe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2222      	movs	r2, #34	@ 0x22
 8006140:	631a      	str	r2, [r3, #48]	@ 0x30
 8006142:	e00a      	b.n	800615a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	2b28      	cmp	r3, #40	@ 0x28
 8006148:	d107      	bne.n	800615a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800614a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fad5 	bl	80066fe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006168:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6859      	ldr	r1, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	4b89      	ldr	r3, [pc, #548]	@ (800639c <I2C_ITSlaveCplt+0x2c0>)
 8006176:	400b      	ands	r3, r1
 8006178:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa7d 	bl	800667a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d013      	beq.n	80061b2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006198:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01f      	beq.n	80061e2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061b0:	e017      	b.n	80061e2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d012      	beq.n	80061e2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061ca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	b29a      	uxth	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d020      	beq.n	800622e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0304 	bic.w	r3, r3, #4
 80061f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00c      	beq.n	800622e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623c:	f043 0204 	orr.w	r2, r3, #4
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b00      	cmp	r3, #0
 800624c:	d049      	beq.n	80062e2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006254:	2b00      	cmp	r3, #0
 8006256:	d044      	beq.n	80062e2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d128      	bne.n	80062b4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b28      	cmp	r3, #40	@ 0x28
 800626c:	d108      	bne.n	8006280 <I2C_ITSlaveCplt+0x1a4>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006274:	d104      	bne.n	8006280 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006276:	6979      	ldr	r1, [r7, #20]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f893 	bl	80063a4 <I2C_ITListenCplt>
 800627e:	e030      	b.n	80062e2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b29      	cmp	r3, #41	@ 0x29
 800628a:	d10e      	bne.n	80062aa <I2C_ITSlaveCplt+0x1ce>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006292:	d00a      	beq.n	80062aa <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2210      	movs	r2, #16
 800629a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f9ec 	bl	800667a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff febd 	bl	8006022 <I2C_ITSlaveSeqCplt>
 80062a8:	e01b      	b.n	80062e2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2210      	movs	r2, #16
 80062b0:	61da      	str	r2, [r3, #28]
 80062b2:	e016      	b.n	80062e2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2210      	movs	r2, #16
 80062ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c0:	f043 0204 	orr.w	r2, r3, #4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <I2C_ITSlaveCplt+0x1fa>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062d4:	d105      	bne.n	80062e2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8b5 	bl	800644c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d010      	beq.n	800631a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8a4 	bl	800644c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b28      	cmp	r3, #40	@ 0x28
 800630e:	d141      	bne.n	8006394 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006310:	6979      	ldr	r1, [r7, #20]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f846 	bl	80063a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006318:	e03c      	b.n	8006394 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006322:	d014      	beq.n	800634e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fe7c 	bl	8006022 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a1c      	ldr	r2, [pc, #112]	@ (80063a0 <I2C_ITSlaveCplt+0x2c4>)
 800632e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff fcd0 	bl	8005cec <HAL_I2C_ListenCpltCallback>
}
 800634c:	e022      	b.n	8006394 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b22      	cmp	r3, #34	@ 0x22
 8006358:	d10e      	bne.n	8006378 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff fca3 	bl	8005cbc <HAL_I2C_SlaveRxCpltCallback>
}
 8006376:	e00d      	b.n	8006394 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff fc8a 	bl	8005ca8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006394:	bf00      	nop
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	fe00e800 	.word	0xfe00e800
 80063a0:	ffff0000 	.word	0xffff0000

080063a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a25      	ldr	r2, [pc, #148]	@ (8006448 <I2C_ITListenCplt+0xa4>)
 80063b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d022      	beq.n	8006420 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d012      	beq.n	8006420 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006418:	f043 0204 	orr.w	r2, r3, #4
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006420:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f96a 	bl	80066fe <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2210      	movs	r2, #16
 8006430:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fc56 	bl	8005cec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	ffff0000 	.word	0xffff0000

0800644c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800645c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a6d      	ldr	r2, [pc, #436]	@ (8006620 <I2C_ITError+0x1d4>)
 800646a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b28      	cmp	r3, #40	@ 0x28
 8006482:	d005      	beq.n	8006490 <I2C_ITError+0x44>
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b29      	cmp	r3, #41	@ 0x29
 8006488:	d002      	beq.n	8006490 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	2b2a      	cmp	r3, #42	@ 0x2a
 800648e:	d10b      	bne.n	80064a8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006490:	2103      	movs	r1, #3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f933 	bl	80066fe <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2228      	movs	r2, #40	@ 0x28
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a60      	ldr	r2, [pc, #384]	@ (8006624 <I2C_ITError+0x1d8>)
 80064a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80064a6:	e030      	b.n	800650a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80064a8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f926 	bl	80066fe <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f8e1 	bl	800667a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b60      	cmp	r3, #96	@ 0x60
 80064c2:	d01f      	beq.n	8006504 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d114      	bne.n	8006504 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d109      	bne.n	80064fc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2210      	movs	r2, #16
 80064ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f4:	f043 0204 	orr.w	r2, r3, #4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2220      	movs	r2, #32
 8006502:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	2b00      	cmp	r3, #0
 8006516:	d039      	beq.n	800658c <I2C_ITError+0x140>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b11      	cmp	r3, #17
 800651c:	d002      	beq.n	8006524 <I2C_ITError+0xd8>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b21      	cmp	r3, #33	@ 0x21
 8006522:	d133      	bne.n	800658c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800652e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006532:	d107      	bne.n	8006544 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006542:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fbda 	bl	8004d02 <HAL_DMA_GetState>
 800654e:	4603      	mov	r3, r0
 8006550:	2b01      	cmp	r3, #1
 8006552:	d017      	beq.n	8006584 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	4a33      	ldr	r2, [pc, #204]	@ (8006628 <I2C_ITError+0x1dc>)
 800655a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe fab4 	bl	8004ad6 <HAL_DMA_Abort_IT>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d04d      	beq.n	8006610 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800657e:	4610      	mov	r0, r2
 8006580:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006582:	e045      	b.n	8006610 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f851 	bl	800662c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800658a:	e041      	b.n	8006610 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d039      	beq.n	8006608 <I2C_ITError+0x1bc>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b12      	cmp	r3, #18
 8006598:	d002      	beq.n	80065a0 <I2C_ITError+0x154>
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b22      	cmp	r3, #34	@ 0x22
 800659e:	d133      	bne.n	8006608 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ae:	d107      	bne.n	80065c0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe fb9c 	bl	8004d02 <HAL_DMA_GetState>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d017      	beq.n	8006600 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d4:	4a14      	ldr	r2, [pc, #80]	@ (8006628 <I2C_ITError+0x1dc>)
 80065d6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fa76 	bl	8004ad6 <HAL_DMA_Abort_IT>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d011      	beq.n	8006614 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065fa:	4610      	mov	r0, r2
 80065fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065fe:	e009      	b.n	8006614 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f813 	bl	800662c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006606:	e005      	b.n	8006614 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f80f 	bl	800662c <I2C_TreatErrorCallback>
  }
}
 800660e:	e002      	b.n	8006616 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006614:	bf00      	nop
}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	ffff0000 	.word	0xffff0000
 8006624:	08005d29 	.word	0x08005d29
 8006628:	080066c3 	.word	0x080066c3

0800662c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b60      	cmp	r3, #96	@ 0x60
 800663e:	d10e      	bne.n	800665e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fb5c 	bl	8005d14 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800665c:	e009      	b.n	8006672 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff fb47 	bl	8005d00 <HAL_I2C_ErrorCallback>
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b02      	cmp	r3, #2
 800668e:	d103      	bne.n	8006698 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2200      	movs	r2, #0
 8006696:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d007      	beq.n	80066b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699a      	ldr	r2, [r3, #24]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0201 	orr.w	r2, r2, #1
 80066b4:	619a      	str	r2, [r3, #24]
  }
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066dc:	2200      	movs	r2, #0
 80066de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ec:	2200      	movs	r2, #0
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff9b 	bl	800662c <I2C_TreatErrorCallback>
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800670e:	887b      	ldrh	r3, [r7, #2]
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00f      	beq.n	8006738 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800671e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800672c:	2b28      	cmp	r3, #40	@ 0x28
 800672e:	d003      	beq.n	8006738 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006736:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006738:	887b      	ldrh	r3, [r7, #2]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00f      	beq.n	8006762 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006748:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006756:	2b28      	cmp	r3, #40	@ 0x28
 8006758:	d003      	beq.n	8006762 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006760:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006762:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006766:	2b00      	cmp	r3, #0
 8006768:	da03      	bge.n	8006772 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006770:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006772:	887b      	ldrh	r3, [r7, #2]
 8006774:	2b10      	cmp	r3, #16
 8006776:	d103      	bne.n	8006780 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800677e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006780:	887b      	ldrh	r3, [r7, #2]
 8006782:	2b20      	cmp	r3, #32
 8006784:	d103      	bne.n	800678e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f043 0320 	orr.w	r3, r3, #32
 800678c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800678e:	887b      	ldrh	r3, [r7, #2]
 8006790:	2b40      	cmp	r3, #64	@ 0x40
 8006792:	d103      	bne.n	800679c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6819      	ldr	r1, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	43da      	mvns	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	400a      	ands	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d138      	bne.n	8006842 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067da:	2302      	movs	r3, #2
 80067dc:	e032      	b.n	8006844 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2224      	movs	r2, #36	@ 0x24
 80067ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800680c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6819      	ldr	r1, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0201 	orr.w	r2, r2, #1
 800682c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e000      	b.n	8006844 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b20      	cmp	r3, #32
 8006864:	d139      	bne.n	80068da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006870:	2302      	movs	r3, #2
 8006872:	e033      	b.n	80068dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2224      	movs	r2, #36	@ 0x24
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80068a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0201 	orr.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e000      	b.n	80068dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068da:	2302      	movs	r3, #2
  }
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d141      	bne.n	800697a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068f6:	4b4b      	ldr	r3, [pc, #300]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006902:	d131      	bne.n	8006968 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006904:	4b47      	ldr	r3, [pc, #284]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800690a:	4a46      	ldr	r2, [pc, #280]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006910:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006914:	4b43      	ldr	r3, [pc, #268]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800691c:	4a41      	ldr	r2, [pc, #260]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006924:	4b40      	ldr	r3, [pc, #256]	@ (8006a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2232      	movs	r2, #50	@ 0x32
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	4a3f      	ldr	r2, [pc, #252]	@ (8006a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006930:	fba2 2303 	umull	r2, r3, r2, r3
 8006934:	0c9b      	lsrs	r3, r3, #18
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800693a:	e002      	b.n	8006942 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3b01      	subs	r3, #1
 8006940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006942:	4b38      	ldr	r3, [pc, #224]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800694a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800694e:	d102      	bne.n	8006956 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f2      	bne.n	800693c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006956:	4b33      	ldr	r3, [pc, #204]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006962:	d158      	bne.n	8006a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e057      	b.n	8006a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006968:	4b2e      	ldr	r3, [pc, #184]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800696a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006978:	e04d      	b.n	8006a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006980:	d141      	bne.n	8006a06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006982:	4b28      	ldr	r3, [pc, #160]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800698a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800698e:	d131      	bne.n	80069f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006990:	4b24      	ldr	r3, [pc, #144]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006996:	4a23      	ldr	r2, [pc, #140]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800699c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069a0:	4b20      	ldr	r3, [pc, #128]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2232      	movs	r2, #50	@ 0x32
 80069b6:	fb02 f303 	mul.w	r3, r2, r3
 80069ba:	4a1c      	ldr	r2, [pc, #112]	@ (8006a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069bc:	fba2 2303 	umull	r2, r3, r2, r3
 80069c0:	0c9b      	lsrs	r3, r3, #18
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069c6:	e002      	b.n	80069ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ce:	4b15      	ldr	r3, [pc, #84]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069da:	d102      	bne.n	80069e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f2      	bne.n	80069c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069e2:	4b10      	ldr	r3, [pc, #64]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ee:	d112      	bne.n	8006a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e011      	b.n	8006a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006a04:	e007      	b.n	8006a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a06:	4b07      	ldr	r3, [pc, #28]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a0e:	4a05      	ldr	r2, [pc, #20]	@ (8006a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40007000 	.word	0x40007000
 8006a28:	20000000 	.word	0x20000000
 8006a2c:	431bde83 	.word	0x431bde83

08006a30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006a34:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	4a04      	ldr	r2, [pc, #16]	@ (8006a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a3e:	6093      	str	r3, [r2, #8]
}
 8006a40:	bf00      	nop
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40007000 	.word	0x40007000

08006a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e2fe      	b.n	8007060 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d075      	beq.n	8006b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a6e:	4b97      	ldr	r3, [pc, #604]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a78:	4b94      	ldr	r3, [pc, #592]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b0c      	cmp	r3, #12
 8006a86:	d102      	bne.n	8006a8e <HAL_RCC_OscConfig+0x3e>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d002      	beq.n	8006a94 <HAL_RCC_OscConfig+0x44>
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d10b      	bne.n	8006aac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a94:	4b8d      	ldr	r3, [pc, #564]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05b      	beq.n	8006b58 <HAL_RCC_OscConfig+0x108>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d157      	bne.n	8006b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e2d9      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ab4:	d106      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x74>
 8006ab6:	4b85      	ldr	r3, [pc, #532]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a84      	ldr	r2, [pc, #528]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e01d      	b.n	8006b00 <HAL_RCC_OscConfig+0xb0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x98>
 8006ace:	4b7f      	ldr	r3, [pc, #508]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	4b7c      	ldr	r3, [pc, #496]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a7b      	ldr	r2, [pc, #492]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e00b      	b.n	8006b00 <HAL_RCC_OscConfig+0xb0>
 8006ae8:	4b78      	ldr	r3, [pc, #480]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a77      	ldr	r2, [pc, #476]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	4b75      	ldr	r3, [pc, #468]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a74      	ldr	r2, [pc, #464]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d013      	beq.n	8006b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b08:	f7fb fea8 	bl	800285c <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b10:	f7fb fea4 	bl	800285c <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b64      	cmp	r3, #100	@ 0x64
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e29e      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b22:	4b6a      	ldr	r3, [pc, #424]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0xc0>
 8006b2e:	e014      	b.n	8006b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b30:	f7fb fe94 	bl	800285c <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b38:	f7fb fe90 	bl	800285c <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b64      	cmp	r3, #100	@ 0x64
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e28a      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b4a:	4b60      	ldr	r3, [pc, #384]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f0      	bne.n	8006b38 <HAL_RCC_OscConfig+0xe8>
 8006b56:	e000      	b.n	8006b5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d075      	beq.n	8006c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b66:	4b59      	ldr	r3, [pc, #356]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b70:	4b56      	ldr	r3, [pc, #344]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b0c      	cmp	r3, #12
 8006b7e:	d102      	bne.n	8006b86 <HAL_RCC_OscConfig+0x136>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d002      	beq.n	8006b8c <HAL_RCC_OscConfig+0x13c>
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d11f      	bne.n	8006bcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x154>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e25d      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba4:	4b49      	ldr	r3, [pc, #292]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	061b      	lsls	r3, r3, #24
 8006bb2:	4946      	ldr	r1, [pc, #280]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006bb8:	4b45      	ldr	r3, [pc, #276]	@ (8006cd0 <HAL_RCC_OscConfig+0x280>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fa fcd3 	bl	8001568 <HAL_InitTick>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d043      	beq.n	8006c50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e249      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d023      	beq.n	8006c1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be0:	f7fb fe3c 	bl	800285c <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be8:	f7fb fe38 	bl	800285c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e232      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bfa:	4b34      	ldr	r3, [pc, #208]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c06:	4b31      	ldr	r3, [pc, #196]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	061b      	lsls	r3, r3, #24
 8006c14:	492d      	ldr	r1, [pc, #180]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	604b      	str	r3, [r1, #4]
 8006c1a:	e01a      	b.n	8006c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a2a      	ldr	r2, [pc, #168]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c28:	f7fb fe18 	bl	800285c <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c30:	f7fb fe14 	bl	800285c <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e20e      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c42:	4b22      	ldr	r3, [pc, #136]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x1e0>
 8006c4e:	e000      	b.n	8006c52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d041      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01c      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c66:	4b19      	ldr	r3, [pc, #100]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c6c:	4a17      	ldr	r2, [pc, #92]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c76:	f7fb fdf1 	bl	800285c <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c7e:	f7fb fded 	bl	800285c <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e1e7      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c90:	4b0e      	ldr	r3, [pc, #56]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0ef      	beq.n	8006c7e <HAL_RCC_OscConfig+0x22e>
 8006c9e:	e020      	b.n	8006ce2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ca6:	4a09      	ldr	r2, [pc, #36]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb0:	f7fb fdd4 	bl	800285c <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cb6:	e00d      	b.n	8006cd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cb8:	f7fb fdd0 	bl	800285c <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d906      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e1ca      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
 8006cca:	bf00      	nop
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1ea      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0304 	and.w	r3, r3, #4
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80a6 	beq.w	8006e3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cf4:	4b84      	ldr	r3, [pc, #528]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <HAL_RCC_OscConfig+0x2b4>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <HAL_RCC_OscConfig+0x2b6>
 8006d04:	2300      	movs	r3, #0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d16:	4b7c      	ldr	r3, [pc, #496]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d22:	2301      	movs	r3, #1
 8006d24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d26:	4b79      	ldr	r3, [pc, #484]	@ (8006f0c <HAL_RCC_OscConfig+0x4bc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d118      	bne.n	8006d64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d32:	4b76      	ldr	r3, [pc, #472]	@ (8006f0c <HAL_RCC_OscConfig+0x4bc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a75      	ldr	r2, [pc, #468]	@ (8006f0c <HAL_RCC_OscConfig+0x4bc>)
 8006d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d3e:	f7fb fd8d 	bl	800285c <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d46:	f7fb fd89 	bl	800285c <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e183      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d58:	4b6c      	ldr	r3, [pc, #432]	@ (8006f0c <HAL_RCC_OscConfig+0x4bc>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f0      	beq.n	8006d46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d108      	bne.n	8006d7e <HAL_RCC_OscConfig+0x32e>
 8006d6c:	4b66      	ldr	r3, [pc, #408]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d72:	4a65      	ldr	r2, [pc, #404]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006d74:	f043 0301 	orr.w	r3, r3, #1
 8006d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d7c:	e024      	b.n	8006dc8 <HAL_RCC_OscConfig+0x378>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d110      	bne.n	8006da8 <HAL_RCC_OscConfig+0x358>
 8006d86:	4b60      	ldr	r3, [pc, #384]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8c:	4a5e      	ldr	r2, [pc, #376]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006d8e:	f043 0304 	orr.w	r3, r3, #4
 8006d92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d96:	4b5c      	ldr	r3, [pc, #368]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006da6:	e00f      	b.n	8006dc8 <HAL_RCC_OscConfig+0x378>
 8006da8:	4b57      	ldr	r3, [pc, #348]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dae:	4a56      	ldr	r2, [pc, #344]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006db8:	4b53      	ldr	r3, [pc, #332]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbe:	4a52      	ldr	r2, [pc, #328]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006dc0:	f023 0304 	bic.w	r3, r3, #4
 8006dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d016      	beq.n	8006dfe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd0:	f7fb fd44 	bl	800285c <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dd6:	e00a      	b.n	8006dee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd8:	f7fb fd40 	bl	800285c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e138      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dee:	4b46      	ldr	r3, [pc, #280]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ed      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x388>
 8006dfc:	e015      	b.n	8006e2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfe:	f7fb fd2d 	bl	800285c <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e04:	e00a      	b.n	8006e1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e06:	f7fb fd29 	bl	800285c <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e121      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1ed      	bne.n	8006e06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e2a:	7ffb      	ldrb	r3, [r7, #31]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e30:	4b35      	ldr	r3, [pc, #212]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e34:	4a34      	ldr	r2, [pc, #208]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d03c      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01c      	beq.n	8006e8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e50:	4b2d      	ldr	r3, [pc, #180]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e56:	4a2c      	ldr	r2, [pc, #176]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e60:	f7fb fcfc 	bl	800285c <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e68:	f7fb fcf8 	bl	800285c <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e0f2      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e7a:	4b23      	ldr	r3, [pc, #140]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0ef      	beq.n	8006e68 <HAL_RCC_OscConfig+0x418>
 8006e88:	e01b      	b.n	8006ec2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e90:	4a1d      	ldr	r2, [pc, #116]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006e92:	f023 0301 	bic.w	r3, r3, #1
 8006e96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e9a:	f7fb fcdf 	bl	800285c <HAL_GetTick>
 8006e9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ea0:	e008      	b.n	8006eb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ea2:	f7fb fcdb 	bl	800285c <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e0d5      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006eb4:	4b14      	ldr	r3, [pc, #80]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1ef      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 80c9 	beq.w	800705e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 030c 	and.w	r3, r3, #12
 8006ed4:	2b0c      	cmp	r3, #12
 8006ed6:	f000 8083 	beq.w	8006fe0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d15e      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee2:	4b09      	ldr	r3, [pc, #36]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a08      	ldr	r2, [pc, #32]	@ (8006f08 <HAL_RCC_OscConfig+0x4b8>)
 8006ee8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eee:	f7fb fcb5 	bl	800285c <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ef4:	e00c      	b.n	8006f10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef6:	f7fb fcb1 	bl	800285c <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d905      	bls.n	8006f10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e0ab      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f10:	4b55      	ldr	r3, [pc, #340]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1ec      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f1c:	4b52      	ldr	r3, [pc, #328]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	4b52      	ldr	r3, [pc, #328]	@ (800706c <HAL_RCC_OscConfig+0x61c>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6a11      	ldr	r1, [r2, #32]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f2c:	3a01      	subs	r2, #1
 8006f2e:	0112      	lsls	r2, r2, #4
 8006f30:	4311      	orrs	r1, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006f36:	0212      	lsls	r2, r2, #8
 8006f38:	4311      	orrs	r1, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f3e:	0852      	lsrs	r2, r2, #1
 8006f40:	3a01      	subs	r2, #1
 8006f42:	0552      	lsls	r2, r2, #21
 8006f44:	4311      	orrs	r1, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f4a:	0852      	lsrs	r2, r2, #1
 8006f4c:	3a01      	subs	r2, #1
 8006f4e:	0652      	lsls	r2, r2, #25
 8006f50:	4311      	orrs	r1, r2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f56:	06d2      	lsls	r2, r2, #27
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	4943      	ldr	r1, [pc, #268]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f60:	4b41      	ldr	r3, [pc, #260]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a40      	ldr	r2, [pc, #256]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4a3d      	ldr	r2, [pc, #244]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fb fc70 	bl	800285c <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f80:	f7fb fc6c 	bl	800285c <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e066      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f92:	4b35      	ldr	r3, [pc, #212]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x530>
 8006f9e:	e05e      	b.n	800705e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa0:	4b31      	ldr	r3, [pc, #196]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a30      	ldr	r2, [pc, #192]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fac:	f7fb fc56 	bl	800285c <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb4:	f7fb fc52 	bl	800285c <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e04c      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fc6:	4b28      	ldr	r3, [pc, #160]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f0      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006fd2:	4b25      	ldr	r3, [pc, #148]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	4924      	ldr	r1, [pc, #144]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006fd8:	4b25      	ldr	r3, [pc, #148]	@ (8007070 <HAL_RCC_OscConfig+0x620>)
 8006fda:	4013      	ands	r3, r2
 8006fdc:	60cb      	str	r3, [r1, #12]
 8006fde:	e03e      	b.n	800705e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e039      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006fec:	4b1e      	ldr	r3, [pc, #120]	@ (8007068 <HAL_RCC_OscConfig+0x618>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f003 0203 	and.w	r2, r3, #3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d12c      	bne.n	800705a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700a:	3b01      	subs	r3, #1
 800700c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700e:	429a      	cmp	r2, r3
 8007010:	d123      	bne.n	800705a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800701e:	429a      	cmp	r2, r3
 8007020:	d11b      	bne.n	800705a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800702e:	429a      	cmp	r2, r3
 8007030:	d113      	bne.n	800705a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703c:	085b      	lsrs	r3, r3, #1
 800703e:	3b01      	subs	r3, #1
 8007040:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d109      	bne.n	800705a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007050:	085b      	lsrs	r3, r3, #1
 8007052:	3b01      	subs	r3, #1
 8007054:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007056:	429a      	cmp	r2, r3
 8007058:	d001      	beq.n	800705e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40021000 	.word	0x40021000
 800706c:	019f800c 	.word	0x019f800c
 8007070:	feeefffc 	.word	0xfeeefffc

08007074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e11e      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800708c:	4b91      	ldr	r3, [pc, #580]	@ (80072d4 <HAL_RCC_ClockConfig+0x260>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d910      	bls.n	80070bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800709a:	4b8e      	ldr	r3, [pc, #568]	@ (80072d4 <HAL_RCC_ClockConfig+0x260>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 020f 	bic.w	r2, r3, #15
 80070a2:	498c      	ldr	r1, [pc, #560]	@ (80072d4 <HAL_RCC_ClockConfig+0x260>)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070aa:	4b8a      	ldr	r3, [pc, #552]	@ (80072d4 <HAL_RCC_ClockConfig+0x260>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d001      	beq.n	80070bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e106      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d073      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d129      	bne.n	8007124 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070d0:	4b81      	ldr	r3, [pc, #516]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0f4      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80070e0:	f000 f9d0 	bl	8007484 <RCC_GetSysClockFreqFromPLLSource>
 80070e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	4a7c      	ldr	r2, [pc, #496]	@ (80072dc <HAL_RCC_ClockConfig+0x268>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d93f      	bls.n	800716e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80070ee:	4b7a      	ldr	r3, [pc, #488]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007102:	2b00      	cmp	r3, #0
 8007104:	d033      	beq.n	800716e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800710a:	2b00      	cmp	r3, #0
 800710c:	d12f      	bne.n	800716e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800710e:	4b72      	ldr	r3, [pc, #456]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007116:	4a70      	ldr	r2, [pc, #448]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800711c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800711e:	2380      	movs	r3, #128	@ 0x80
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	e024      	b.n	800716e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d107      	bne.n	800713c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800712c:	4b6a      	ldr	r3, [pc, #424]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d109      	bne.n	800714c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0c6      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800713c:	4b66      	ldr	r3, [pc, #408]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e0be      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800714c:	f000 f8ce 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 8007150:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	4a61      	ldr	r2, [pc, #388]	@ (80072dc <HAL_RCC_ClockConfig+0x268>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d909      	bls.n	800716e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800715a:	4b5f      	ldr	r3, [pc, #380]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007162:	4a5d      	ldr	r2, [pc, #372]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007168:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800716a:	2380      	movs	r3, #128	@ 0x80
 800716c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800716e:	4b5a      	ldr	r3, [pc, #360]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f023 0203 	bic.w	r2, r3, #3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4957      	ldr	r1, [pc, #348]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800717c:	4313      	orrs	r3, r2
 800717e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007180:	f7fb fb6c 	bl	800285c <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007186:	e00a      	b.n	800719e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007188:	f7fb fb68 	bl	800285c <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e095      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719e:	4b4e      	ldr	r3, [pc, #312]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 020c 	and.w	r2, r3, #12
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d1eb      	bne.n	8007188 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d023      	beq.n	8007204 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071c8:	4b43      	ldr	r3, [pc, #268]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	4a42      	ldr	r2, [pc, #264]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80071d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0308 	and.w	r3, r3, #8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80071e0:	4b3d      	ldr	r3, [pc, #244]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80071e8:	4a3b      	ldr	r2, [pc, #236]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80071ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071f0:	4b39      	ldr	r3, [pc, #228]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	4936      	ldr	r1, [pc, #216]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	608b      	str	r3, [r1, #8]
 8007202:	e008      	b.n	8007216 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b80      	cmp	r3, #128	@ 0x80
 8007208:	d105      	bne.n	8007216 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800720a:	4b33      	ldr	r3, [pc, #204]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	4a32      	ldr	r2, [pc, #200]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007210:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007214:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007216:	4b2f      	ldr	r3, [pc, #188]	@ (80072d4 <HAL_RCC_ClockConfig+0x260>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d21d      	bcs.n	8007260 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007224:	4b2b      	ldr	r3, [pc, #172]	@ (80072d4 <HAL_RCC_ClockConfig+0x260>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f023 020f 	bic.w	r2, r3, #15
 800722c:	4929      	ldr	r1, [pc, #164]	@ (80072d4 <HAL_RCC_ClockConfig+0x260>)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	4313      	orrs	r3, r2
 8007232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007234:	f7fb fb12 	bl	800285c <HAL_GetTick>
 8007238:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800723a:	e00a      	b.n	8007252 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800723c:	f7fb fb0e 	bl	800285c <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800724a:	4293      	cmp	r3, r2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e03b      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007252:	4b20      	ldr	r3, [pc, #128]	@ (80072d4 <HAL_RCC_ClockConfig+0x260>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d1ed      	bne.n	800723c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800726c:	4b1a      	ldr	r3, [pc, #104]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4917      	ldr	r1, [pc, #92]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800727a:	4313      	orrs	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800728a:	4b13      	ldr	r3, [pc, #76]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	490f      	ldr	r1, [pc, #60]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800729a:	4313      	orrs	r3, r2
 800729c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800729e:	f000 f825 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b0c      	ldr	r3, [pc, #48]	@ (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	091b      	lsrs	r3, r3, #4
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	490c      	ldr	r1, [pc, #48]	@ (80072e0 <HAL_RCC_ClockConfig+0x26c>)
 80072b0:	5ccb      	ldrb	r3, [r1, r3]
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ba:	4a0a      	ldr	r2, [pc, #40]	@ (80072e4 <HAL_RCC_ClockConfig+0x270>)
 80072bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80072be:	4b0a      	ldr	r3, [pc, #40]	@ (80072e8 <HAL_RCC_ClockConfig+0x274>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fa f950 	bl	8001568 <HAL_InitTick>
 80072c8:	4603      	mov	r3, r0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40022000 	.word	0x40022000
 80072d8:	40021000 	.word	0x40021000
 80072dc:	04c4b400 	.word	0x04c4b400
 80072e0:	0800be5c 	.word	0x0800be5c
 80072e4:	20000000 	.word	0x20000000
 80072e8:	20000044 	.word	0x20000044

080072ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80072f2:	4b2c      	ldr	r3, [pc, #176]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 030c 	and.w	r3, r3, #12
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d102      	bne.n	8007304 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072fe:	4b2a      	ldr	r3, [pc, #168]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	e047      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007304:	4b27      	ldr	r3, [pc, #156]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	2b08      	cmp	r3, #8
 800730e:	d102      	bne.n	8007316 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007310:	4b26      	ldr	r3, [pc, #152]	@ (80073ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	e03e      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007316:	4b23      	ldr	r3, [pc, #140]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
 800731e:	2b0c      	cmp	r3, #12
 8007320:	d136      	bne.n	8007390 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007322:	4b20      	ldr	r3, [pc, #128]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800732c:	4b1d      	ldr	r3, [pc, #116]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	091b      	lsrs	r3, r3, #4
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	3301      	adds	r3, #1
 8007338:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d10c      	bne.n	800735a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007340:	4a1a      	ldr	r2, [pc, #104]	@ (80073ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	fbb2 f3f3 	udiv	r3, r2, r3
 8007348:	4a16      	ldr	r2, [pc, #88]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800734a:	68d2      	ldr	r2, [r2, #12]
 800734c:	0a12      	lsrs	r2, r2, #8
 800734e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	617b      	str	r3, [r7, #20]
      break;
 8007358:	e00c      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800735a:	4a13      	ldr	r2, [pc, #76]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	4a10      	ldr	r2, [pc, #64]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007364:	68d2      	ldr	r2, [r2, #12]
 8007366:	0a12      	lsrs	r2, r2, #8
 8007368:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
      break;
 8007372:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007374:	4b0b      	ldr	r3, [pc, #44]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	0e5b      	lsrs	r3, r3, #25
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	3301      	adds	r3, #1
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	fbb2 f3f3 	udiv	r3, r2, r3
 800738c:	613b      	str	r3, [r7, #16]
 800738e:	e001      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007394:	693b      	ldr	r3, [r7, #16]
}
 8007396:	4618      	mov	r0, r3
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40021000 	.word	0x40021000
 80073a8:	00f42400 	.word	0x00f42400
 80073ac:	016e3600 	.word	0x016e3600

080073b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073b4:	4b03      	ldr	r3, [pc, #12]	@ (80073c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80073b6:	681b      	ldr	r3, [r3, #0]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20000000 	.word	0x20000000

080073c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80073cc:	f7ff fff0 	bl	80073b0 <HAL_RCC_GetHCLKFreq>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4b06      	ldr	r3, [pc, #24]	@ (80073ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	4904      	ldr	r1, [pc, #16]	@ (80073f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073de:	5ccb      	ldrb	r3, [r1, r3]
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40021000 	.word	0x40021000
 80073f0:	0800be6c 	.word	0x0800be6c

080073f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073f8:	f7ff ffda 	bl	80073b0 <HAL_RCC_GetHCLKFreq>
 80073fc:	4602      	mov	r2, r0
 80073fe:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	0adb      	lsrs	r3, r3, #11
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	4904      	ldr	r1, [pc, #16]	@ (800741c <HAL_RCC_GetPCLK2Freq+0x28>)
 800740a:	5ccb      	ldrb	r3, [r1, r3]
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007414:	4618      	mov	r0, r3
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40021000 	.word	0x40021000
 800741c:	0800be6c 	.word	0x0800be6c

08007420 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	220f      	movs	r2, #15
 800742e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007430:	4b12      	ldr	r3, [pc, #72]	@ (800747c <HAL_RCC_GetClockConfig+0x5c>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 0203 	and.w	r2, r3, #3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800743c:	4b0f      	ldr	r3, [pc, #60]	@ (800747c <HAL_RCC_GetClockConfig+0x5c>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007448:	4b0c      	ldr	r3, [pc, #48]	@ (800747c <HAL_RCC_GetClockConfig+0x5c>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007454:	4b09      	ldr	r3, [pc, #36]	@ (800747c <HAL_RCC_GetClockConfig+0x5c>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	08db      	lsrs	r3, r3, #3
 800745a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007462:	4b07      	ldr	r3, [pc, #28]	@ (8007480 <HAL_RCC_GetClockConfig+0x60>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 020f 	and.w	r2, r3, #15
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	601a      	str	r2, [r3, #0]
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40021000 	.word	0x40021000
 8007480:	40022000 	.word	0x40022000

08007484 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800748a:	4b1e      	ldr	r3, [pc, #120]	@ (8007504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007494:	4b1b      	ldr	r3, [pc, #108]	@ (8007504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	091b      	lsrs	r3, r3, #4
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	3301      	adds	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d10c      	bne.n	80074c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074a8:	4a17      	ldr	r2, [pc, #92]	@ (8007508 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b0:	4a14      	ldr	r2, [pc, #80]	@ (8007504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074b2:	68d2      	ldr	r2, [r2, #12]
 80074b4:	0a12      	lsrs	r2, r2, #8
 80074b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	617b      	str	r3, [r7, #20]
    break;
 80074c0:	e00c      	b.n	80074dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074c2:	4a12      	ldr	r2, [pc, #72]	@ (800750c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074cc:	68d2      	ldr	r2, [r2, #12]
 80074ce:	0a12      	lsrs	r2, r2, #8
 80074d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074d4:	fb02 f303 	mul.w	r3, r2, r3
 80074d8:	617b      	str	r3, [r7, #20]
    break;
 80074da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074dc:	4b09      	ldr	r3, [pc, #36]	@ (8007504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	0e5b      	lsrs	r3, r3, #25
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	3301      	adds	r3, #1
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80074f6:	687b      	ldr	r3, [r7, #4]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	40021000 	.word	0x40021000
 8007508:	016e3600 	.word	0x016e3600
 800750c:	00f42400 	.word	0x00f42400

08007510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007518:	2300      	movs	r3, #0
 800751a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800751c:	2300      	movs	r3, #0
 800751e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8098 	beq.w	800765e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800752e:	2300      	movs	r3, #0
 8007530:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007532:	4b43      	ldr	r3, [pc, #268]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10d      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800753e:	4b40      	ldr	r3, [pc, #256]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007542:	4a3f      	ldr	r2, [pc, #252]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007548:	6593      	str	r3, [r2, #88]	@ 0x58
 800754a:	4b3d      	ldr	r3, [pc, #244]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800754c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800754e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007552:	60bb      	str	r3, [r7, #8]
 8007554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007556:	2301      	movs	r3, #1
 8007558:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800755a:	4b3a      	ldr	r3, [pc, #232]	@ (8007644 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a39      	ldr	r2, [pc, #228]	@ (8007644 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007564:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007566:	f7fb f979 	bl	800285c <HAL_GetTick>
 800756a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800756c:	e009      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800756e:	f7fb f975 	bl	800285c <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d902      	bls.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	74fb      	strb	r3, [r7, #19]
        break;
 8007580:	e005      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007582:	4b30      	ldr	r3, [pc, #192]	@ (8007644 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0ef      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800758e:	7cfb      	ldrb	r3, [r7, #19]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d159      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007594:	4b2a      	ldr	r3, [pc, #168]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800759a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800759e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01e      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d019      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075b0:	4b23      	ldr	r3, [pc, #140]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075bc:	4b20      	ldr	r3, [pc, #128]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075dc:	4a18      	ldr	r2, [pc, #96]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d016      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ee:	f7fb f935 	bl	800285c <HAL_GetTick>
 80075f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075f4:	e00b      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f6:	f7fb f931 	bl	800285c <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007604:	4293      	cmp	r3, r2
 8007606:	d902      	bls.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	74fb      	strb	r3, [r7, #19]
            break;
 800760c:	e006      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800760e:	4b0c      	ldr	r3, [pc, #48]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0ec      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800761c:	7cfb      	ldrb	r3, [r7, #19]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10b      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007622:	4b07      	ldr	r3, [pc, #28]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007628:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007630:	4903      	ldr	r1, [pc, #12]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007638:	e008      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800763a:	7cfb      	ldrb	r3, [r7, #19]
 800763c:	74bb      	strb	r3, [r7, #18]
 800763e:	e005      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007640:	40021000 	.word	0x40021000
 8007644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	7cfb      	ldrb	r3, [r7, #19]
 800764a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800764c:	7c7b      	ldrb	r3, [r7, #17]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007652:	4ba7      	ldr	r3, [pc, #668]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007656:	4aa6      	ldr	r2, [pc, #664]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800765c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800766a:	4ba1      	ldr	r3, [pc, #644]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007670:	f023 0203 	bic.w	r2, r3, #3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	499d      	ldr	r1, [pc, #628]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800768c:	4b98      	ldr	r3, [pc, #608]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007692:	f023 020c 	bic.w	r2, r3, #12
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4995      	ldr	r1, [pc, #596]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076ae:	4b90      	ldr	r3, [pc, #576]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	498c      	ldr	r1, [pc, #560]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076d0:	4b87      	ldr	r3, [pc, #540]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	4984      	ldr	r1, [pc, #528]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076f2:	4b7f      	ldr	r3, [pc, #508]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	497b      	ldr	r1, [pc, #492]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007714:	4b76      	ldr	r3, [pc, #472]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	4973      	ldr	r1, [pc, #460]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007736:	4b6e      	ldr	r3, [pc, #440]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	496a      	ldr	r1, [pc, #424]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007758:	4b65      	ldr	r3, [pc, #404]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	4962      	ldr	r1, [pc, #392]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800777a:	4b5d      	ldr	r3, [pc, #372]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007780:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007788:	4959      	ldr	r1, [pc, #356]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800779c:	4b54      	ldr	r3, [pc, #336]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800779e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077a2:	f023 0203 	bic.w	r2, r3, #3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077aa:	4951      	ldr	r1, [pc, #324]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077be:	4b4c      	ldr	r3, [pc, #304]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077cc:	4948      	ldr	r1, [pc, #288]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d015      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077e0:	4b43      	ldr	r3, [pc, #268]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ee:	4940      	ldr	r1, [pc, #256]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077fe:	d105      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007800:	4b3b      	ldr	r3, [pc, #236]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	4a3a      	ldr	r2, [pc, #232]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800780a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007814:	2b00      	cmp	r3, #0
 8007816:	d015      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007818:	4b35      	ldr	r3, [pc, #212]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800781a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800781e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007826:	4932      	ldr	r1, [pc, #200]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007828:	4313      	orrs	r3, r2
 800782a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007836:	d105      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007838:	4b2d      	ldr	r3, [pc, #180]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	4a2c      	ldr	r2, [pc, #176]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800783e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007842:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d015      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007850:	4b27      	ldr	r3, [pc, #156]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007856:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785e:	4924      	ldr	r1, [pc, #144]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800786e:	d105      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007870:	4b1f      	ldr	r3, [pc, #124]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4a1e      	ldr	r2, [pc, #120]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800787a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d015      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007888:	4b19      	ldr	r3, [pc, #100]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800788a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007896:	4916      	ldr	r1, [pc, #88]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078a6:	d105      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078a8:	4b11      	ldr	r3, [pc, #68]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	4a10      	ldr	r2, [pc, #64]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d019      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078c0:	4b0b      	ldr	r3, [pc, #44]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ce:	4908      	ldr	r1, [pc, #32]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078de:	d109      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078e0:	4b03      	ldr	r3, [pc, #12]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	4a02      	ldr	r2, [pc, #8]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078ea:	60d3      	str	r3, [r2, #12]
 80078ec:	e002      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80078ee:	bf00      	nop
 80078f0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d015      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007900:	4b29      	ldr	r3, [pc, #164]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007906:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790e:	4926      	ldr	r1, [pc, #152]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007910:	4313      	orrs	r3, r2
 8007912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800791a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800791e:	d105      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007920:	4b21      	ldr	r3, [pc, #132]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	4a20      	ldr	r2, [pc, #128]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800792a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d015      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007938:	4b1b      	ldr	r3, [pc, #108]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007946:	4918      	ldr	r1, [pc, #96]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007948:	4313      	orrs	r3, r2
 800794a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007956:	d105      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007958:	4b13      	ldr	r3, [pc, #76]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	4a12      	ldr	r2, [pc, #72]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800795e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007962:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d015      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007970:	4b0d      	ldr	r3, [pc, #52]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007972:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007976:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800797e:	490a      	ldr	r1, [pc, #40]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007980:	4313      	orrs	r3, r2
 8007982:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800798a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800798e:	d105      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007990:	4b05      	ldr	r3, [pc, #20]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	4a04      	ldr	r2, [pc, #16]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800799a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800799c:	7cbb      	ldrb	r3, [r7, #18]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	40021000 	.word	0x40021000

080079ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e09d      	b.n	8007afa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d108      	bne.n	80079d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ce:	d009      	beq.n	80079e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	61da      	str	r2, [r3, #28]
 80079d6:	e005      	b.n	80079e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7f9 fd3e 	bl	8001480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a24:	d902      	bls.n	8007a2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
 8007a2a:	e002      	b.n	8007a32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007a3a:	d007      	beq.n	8007a4c <HAL_SPI_Init+0xa0>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a44:	d002      	beq.n	8007a4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a8e:	ea42 0103 	orr.w	r1, r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	0c1b      	lsrs	r3, r3, #16
 8007aa8:	f003 0204 	and.w	r2, r3, #4
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ac8:	ea42 0103 	orr.w	r1, r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ae8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10e      	bne.n	8007b44 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d009      	beq.n	8007b44 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
    return;
 8007b42:	e0ce      	b.n	8007ce2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <HAL_SPI_IRQHandler+0x5e>
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d004      	beq.n	8007b62 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	4798      	blx	r3
    return;
 8007b60:	e0bf      	b.n	8007ce2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <HAL_SPI_IRQHandler+0x7e>
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80b0 	beq.w	8007ce2 <HAL_SPI_IRQHandler+0x1de>
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80aa 	beq.w	8007ce2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d023      	beq.n	8007be0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d011      	beq.n	8007bc8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba8:	f043 0204 	orr.w	r2, r3, #4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	e00b      	b.n	8007be0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bc8:	2300      	movs	r3, #0
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	693b      	ldr	r3, [r7, #16]
        return;
 8007bde:	e080      	b.n	8007ce2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d014      	beq.n	8007c14 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bee:	f043 0201 	orr.w	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00c      	beq.n	8007c38 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c22:	f043 0208 	orr.w	r2, r3, #8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d04f      	beq.n	8007ce0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c4e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d104      	bne.n	8007c6c <HAL_SPI_IRQHandler+0x168>
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d034      	beq.n	8007cd6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0203 	bic.w	r2, r2, #3
 8007c7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d011      	beq.n	8007ca8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c88:	4a17      	ldr	r2, [pc, #92]	@ (8007ce8 <HAL_SPI_IRQHandler+0x1e4>)
 8007c8a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fc ff20 	bl	8004ad6 <HAL_DMA_Abort_IT>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ca0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d016      	beq.n	8007cde <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce8 <HAL_SPI_IRQHandler+0x1e4>)
 8007cb6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fc ff0a 	bl	8004ad6 <HAL_DMA_Abort_IT>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ccc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007cd4:	e003      	b.n	8007cde <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f808 	bl	8007cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007cdc:	e000      	b.n	8007ce0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007cde:	bf00      	nop
    return;
 8007ce0:	bf00      	nop
  }
}
 8007ce2:	3720      	adds	r7, #32
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	08007d01 	.word	0x08007d01

08007cec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff ffe5 	bl	8007cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e049      	b.n	8007dd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f841 	bl	8007dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3304      	adds	r3, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f000 fcad 	bl	80086c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d001      	beq.n	8007e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e054      	b.n	8007eae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a26      	ldr	r2, [pc, #152]	@ (8007ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d022      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x80>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2e:	d01d      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x80>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a22      	ldr	r2, [pc, #136]	@ (8007ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x80>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a21      	ldr	r2, [pc, #132]	@ (8007ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x80>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a1f      	ldr	r2, [pc, #124]	@ (8007ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00e      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x80>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1e      	ldr	r2, [pc, #120]	@ (8007ecc <HAL_TIM_Base_Start_IT+0xe0>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x80>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x80>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d115      	bne.n	8007e98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	4b19      	ldr	r3, [pc, #100]	@ (8007ed8 <HAL_TIM_Base_Start_IT+0xec>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b06      	cmp	r3, #6
 8007e7c:	d015      	beq.n	8007eaa <HAL_TIM_Base_Start_IT+0xbe>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e84:	d011      	beq.n	8007eaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f042 0201 	orr.w	r2, r2, #1
 8007e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e96:	e008      	b.n	8007eaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e000      	b.n	8007eac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	40012c00 	.word	0x40012c00
 8007ec0:	40000400 	.word	0x40000400
 8007ec4:	40000800 	.word	0x40000800
 8007ec8:	40000c00 	.word	0x40000c00
 8007ecc:	40013400 	.word	0x40013400
 8007ed0:	40014000 	.word	0x40014000
 8007ed4:	40015000 	.word	0x40015000
 8007ed8:	00010007 	.word	0x00010007

08007edc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e049      	b.n	8007f82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7f9 fca6 	bl	8001854 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	f000 fbd4 	bl	80086c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <HAL_TIM_IC_Start_IT+0x1e>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	e023      	b.n	8007ff2 <HAL_TIM_IC_Start_IT+0x66>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d104      	bne.n	8007fba <HAL_TIM_IC_Start_IT+0x2e>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	e01b      	b.n	8007ff2 <HAL_TIM_IC_Start_IT+0x66>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	d104      	bne.n	8007fca <HAL_TIM_IC_Start_IT+0x3e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	e013      	b.n	8007ff2 <HAL_TIM_IC_Start_IT+0x66>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b0c      	cmp	r3, #12
 8007fce:	d104      	bne.n	8007fda <HAL_TIM_IC_Start_IT+0x4e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	e00b      	b.n	8007ff2 <HAL_TIM_IC_Start_IT+0x66>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b10      	cmp	r3, #16
 8007fde:	d104      	bne.n	8007fea <HAL_TIM_IC_Start_IT+0x5e>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	e003      	b.n	8007ff2 <HAL_TIM_IC_Start_IT+0x66>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <HAL_TIM_IC_Start_IT+0x78>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008000:	b2db      	uxtb	r3, r3
 8008002:	e013      	b.n	800802c <HAL_TIM_IC_Start_IT+0xa0>
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b04      	cmp	r3, #4
 8008008:	d104      	bne.n	8008014 <HAL_TIM_IC_Start_IT+0x88>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008010:	b2db      	uxtb	r3, r3
 8008012:	e00b      	b.n	800802c <HAL_TIM_IC_Start_IT+0xa0>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b08      	cmp	r3, #8
 8008018:	d104      	bne.n	8008024 <HAL_TIM_IC_Start_IT+0x98>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008020:	b2db      	uxtb	r3, r3
 8008022:	e003      	b.n	800802c <HAL_TIM_IC_Start_IT+0xa0>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800802a:	b2db      	uxtb	r3, r3
 800802c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d102      	bne.n	800803a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008034:	7b7b      	ldrb	r3, [r7, #13]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d001      	beq.n	800803e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e0e2      	b.n	8008204 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d104      	bne.n	800804e <HAL_TIM_IC_Start_IT+0xc2>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800804c:	e023      	b.n	8008096 <HAL_TIM_IC_Start_IT+0x10a>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b04      	cmp	r3, #4
 8008052:	d104      	bne.n	800805e <HAL_TIM_IC_Start_IT+0xd2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800805c:	e01b      	b.n	8008096 <HAL_TIM_IC_Start_IT+0x10a>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b08      	cmp	r3, #8
 8008062:	d104      	bne.n	800806e <HAL_TIM_IC_Start_IT+0xe2>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800806c:	e013      	b.n	8008096 <HAL_TIM_IC_Start_IT+0x10a>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b0c      	cmp	r3, #12
 8008072:	d104      	bne.n	800807e <HAL_TIM_IC_Start_IT+0xf2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800807c:	e00b      	b.n	8008096 <HAL_TIM_IC_Start_IT+0x10a>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b10      	cmp	r3, #16
 8008082:	d104      	bne.n	800808e <HAL_TIM_IC_Start_IT+0x102>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800808c:	e003      	b.n	8008096 <HAL_TIM_IC_Start_IT+0x10a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <HAL_TIM_IC_Start_IT+0x11a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080a4:	e013      	b.n	80080ce <HAL_TIM_IC_Start_IT+0x142>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d104      	bne.n	80080b6 <HAL_TIM_IC_Start_IT+0x12a>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080b4:	e00b      	b.n	80080ce <HAL_TIM_IC_Start_IT+0x142>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d104      	bne.n	80080c6 <HAL_TIM_IC_Start_IT+0x13a>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080c4:	e003      	b.n	80080ce <HAL_TIM_IC_Start_IT+0x142>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b0c      	cmp	r3, #12
 80080d2:	d841      	bhi.n	8008158 <HAL_TIM_IC_Start_IT+0x1cc>
 80080d4:	a201      	add	r2, pc, #4	@ (adr r2, 80080dc <HAL_TIM_IC_Start_IT+0x150>)
 80080d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080da:	bf00      	nop
 80080dc:	08008111 	.word	0x08008111
 80080e0:	08008159 	.word	0x08008159
 80080e4:	08008159 	.word	0x08008159
 80080e8:	08008159 	.word	0x08008159
 80080ec:	08008123 	.word	0x08008123
 80080f0:	08008159 	.word	0x08008159
 80080f4:	08008159 	.word	0x08008159
 80080f8:	08008159 	.word	0x08008159
 80080fc:	08008135 	.word	0x08008135
 8008100:	08008159 	.word	0x08008159
 8008104:	08008159 	.word	0x08008159
 8008108:	08008159 	.word	0x08008159
 800810c:	08008147 	.word	0x08008147
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0202 	orr.w	r2, r2, #2
 800811e:	60da      	str	r2, [r3, #12]
      break;
 8008120:	e01d      	b.n	800815e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0204 	orr.w	r2, r2, #4
 8008130:	60da      	str	r2, [r3, #12]
      break;
 8008132:	e014      	b.n	800815e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0208 	orr.w	r2, r2, #8
 8008142:	60da      	str	r2, [r3, #12]
      break;
 8008144:	e00b      	b.n	800815e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f042 0210 	orr.w	r2, r2, #16
 8008154:	60da      	str	r2, [r3, #12]
      break;
 8008156:	e002      	b.n	800815e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	73fb      	strb	r3, [r7, #15]
      break;
 800815c:	bf00      	nop
  }

  if (status == HAL_OK)
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d14e      	bne.n	8008202 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fc89 	bl	8008a84 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a25      	ldr	r2, [pc, #148]	@ (800820c <HAL_TIM_IC_Start_IT+0x280>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d022      	beq.n	80081c2 <HAL_TIM_IC_Start_IT+0x236>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008184:	d01d      	beq.n	80081c2 <HAL_TIM_IC_Start_IT+0x236>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a21      	ldr	r2, [pc, #132]	@ (8008210 <HAL_TIM_IC_Start_IT+0x284>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d018      	beq.n	80081c2 <HAL_TIM_IC_Start_IT+0x236>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1f      	ldr	r2, [pc, #124]	@ (8008214 <HAL_TIM_IC_Start_IT+0x288>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <HAL_TIM_IC_Start_IT+0x236>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1e      	ldr	r2, [pc, #120]	@ (8008218 <HAL_TIM_IC_Start_IT+0x28c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00e      	beq.n	80081c2 <HAL_TIM_IC_Start_IT+0x236>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1c      	ldr	r2, [pc, #112]	@ (800821c <HAL_TIM_IC_Start_IT+0x290>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d009      	beq.n	80081c2 <HAL_TIM_IC_Start_IT+0x236>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008220 <HAL_TIM_IC_Start_IT+0x294>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_TIM_IC_Start_IT+0x236>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a19      	ldr	r2, [pc, #100]	@ (8008224 <HAL_TIM_IC_Start_IT+0x298>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d115      	bne.n	80081ee <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689a      	ldr	r2, [r3, #8]
 80081c8:	4b17      	ldr	r3, [pc, #92]	@ (8008228 <HAL_TIM_IC_Start_IT+0x29c>)
 80081ca:	4013      	ands	r3, r2
 80081cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b06      	cmp	r3, #6
 80081d2:	d015      	beq.n	8008200 <HAL_TIM_IC_Start_IT+0x274>
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081da:	d011      	beq.n	8008200 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ec:	e008      	b.n	8008200 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0201 	orr.w	r2, r2, #1
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e000      	b.n	8008202 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008200:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	40012c00 	.word	0x40012c00
 8008210:	40000400 	.word	0x40000400
 8008214:	40000800 	.word	0x40000800
 8008218:	40000c00 	.word	0x40000c00
 800821c:	40013400 	.word	0x40013400
 8008220:	40014000 	.word	0x40014000
 8008224:	40015000 	.word	0x40015000
 8008228:	00010007 	.word	0x00010007

0800822c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d020      	beq.n	8008290 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01b      	beq.n	8008290 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0202 	mvn.w	r2, #2
 8008260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7f9 fef8 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 800827c:	e005      	b.n	800828a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa04 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fa0b 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	d020      	beq.n	80082dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01b      	beq.n	80082dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0204 	mvn.w	r2, #4
 80082ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7f9 fed2 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 80082c8:	e005      	b.n	80082d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f9de 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9e5 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d020      	beq.n	8008328 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f003 0308 	and.w	r3, r3, #8
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d01b      	beq.n	8008328 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0208 	mvn.w	r2, #8
 80082f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2204      	movs	r2, #4
 80082fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7f9 feac 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8008314:	e005      	b.n	8008322 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f9b8 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f9bf 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 0310 	and.w	r3, r3, #16
 800832e:	2b00      	cmp	r3, #0
 8008330:	d020      	beq.n	8008374 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01b      	beq.n	8008374 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0210 	mvn.w	r2, #16
 8008344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2208      	movs	r2, #8
 800834a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7f9 fe86 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8008360:	e005      	b.n	800836e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f992 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f999 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00c      	beq.n	8008398 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d007      	beq.n	8008398 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0201 	mvn.w	r2, #1
 8008390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7f9 f81e 	bl	80013d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d104      	bne.n	80083ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00c      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d007      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80083be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fc25 	bl	8008c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00c      	beq.n	80083ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80083e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fc1d 	bl	8008c24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00c      	beq.n	800840e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f953 	bl	80086b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f003 0320 	and.w	r3, r3, #32
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00c      	beq.n	8008432 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f06f 0220 	mvn.w	r2, #32
 800842a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fbe5 	bl	8008bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00c      	beq.n	8008456 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800844e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fbf1 	bl	8008c38 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00c      	beq.n	800847a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fbe9 	bl	8008c4c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00c      	beq.n	800849e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fbe1 	bl	8008c60 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80084ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fbd9 	bl	8008c74 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b086      	sub	sp, #24
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d101      	bne.n	80084e8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80084e4:	2302      	movs	r3, #2
 80084e6:	e088      	b.n	80085fa <HAL_TIM_IC_ConfigChannel+0x130>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d11b      	bne.n	800852e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008506:	f000 f993 	bl	8008830 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 020c 	bic.w	r2, r2, #12
 8008518:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6999      	ldr	r1, [r3, #24]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	619a      	str	r2, [r3, #24]
 800852c:	e060      	b.n	80085f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b04      	cmp	r3, #4
 8008532:	d11c      	bne.n	800856e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008544:	f000 f9e8 	bl	8008918 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008556:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6999      	ldr	r1, [r3, #24]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	021a      	lsls	r2, r3, #8
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	619a      	str	r2, [r3, #24]
 800856c:	e040      	b.n	80085f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b08      	cmp	r3, #8
 8008572:	d11b      	bne.n	80085ac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008584:	f000 fa05 	bl	8008992 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	69da      	ldr	r2, [r3, #28]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 020c 	bic.w	r2, r2, #12
 8008596:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69d9      	ldr	r1, [r3, #28]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	61da      	str	r2, [r3, #28]
 80085aa:	e021      	b.n	80085f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b0c      	cmp	r3, #12
 80085b0:	d11c      	bne.n	80085ec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80085c2:	f000 fa22 	bl	8008a0a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80085d4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69d9      	ldr	r1, [r3, #28]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	021a      	lsls	r2, r3, #8
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	61da      	str	r2, [r3, #28]
 80085ea:	e001      	b.n	80085f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b0c      	cmp	r3, #12
 8008616:	d831      	bhi.n	800867c <HAL_TIM_ReadCapturedValue+0x78>
 8008618:	a201      	add	r2, pc, #4	@ (adr r2, 8008620 <HAL_TIM_ReadCapturedValue+0x1c>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008655 	.word	0x08008655
 8008624:	0800867d 	.word	0x0800867d
 8008628:	0800867d 	.word	0x0800867d
 800862c:	0800867d 	.word	0x0800867d
 8008630:	0800865f 	.word	0x0800865f
 8008634:	0800867d 	.word	0x0800867d
 8008638:	0800867d 	.word	0x0800867d
 800863c:	0800867d 	.word	0x0800867d
 8008640:	08008669 	.word	0x08008669
 8008644:	0800867d 	.word	0x0800867d
 8008648:	0800867d 	.word	0x0800867d
 800864c:	0800867d 	.word	0x0800867d
 8008650:	08008673 	.word	0x08008673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800865a:	60fb      	str	r3, [r7, #12]

      break;
 800865c:	e00f      	b.n	800867e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008664:	60fb      	str	r3, [r7, #12]

      break;
 8008666:	e00a      	b.n	800867e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800866e:	60fb      	str	r3, [r7, #12]

      break;
 8008670:	e005      	b.n	800867e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008678:	60fb      	str	r3, [r7, #12]

      break;
 800867a:	e000      	b.n	800867e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800867c:	bf00      	nop
  }

  return tmpreg;
 800867e:	68fb      	ldr	r3, [r7, #12]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a4c      	ldr	r2, [pc, #304]	@ (800880c <TIM_Base_SetConfig+0x144>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d017      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e6:	d013      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a49      	ldr	r2, [pc, #292]	@ (8008810 <TIM_Base_SetConfig+0x148>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00f      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a48      	ldr	r2, [pc, #288]	@ (8008814 <TIM_Base_SetConfig+0x14c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00b      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a47      	ldr	r2, [pc, #284]	@ (8008818 <TIM_Base_SetConfig+0x150>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d007      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a46      	ldr	r2, [pc, #280]	@ (800881c <TIM_Base_SetConfig+0x154>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a45      	ldr	r2, [pc, #276]	@ (8008820 <TIM_Base_SetConfig+0x158>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d108      	bne.n	8008722 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a39      	ldr	r2, [pc, #228]	@ (800880c <TIM_Base_SetConfig+0x144>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d023      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008730:	d01f      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a36      	ldr	r2, [pc, #216]	@ (8008810 <TIM_Base_SetConfig+0x148>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d01b      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a35      	ldr	r2, [pc, #212]	@ (8008814 <TIM_Base_SetConfig+0x14c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d017      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a34      	ldr	r2, [pc, #208]	@ (8008818 <TIM_Base_SetConfig+0x150>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a33      	ldr	r2, [pc, #204]	@ (800881c <TIM_Base_SetConfig+0x154>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00f      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a33      	ldr	r2, [pc, #204]	@ (8008824 <TIM_Base_SetConfig+0x15c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00b      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a32      	ldr	r2, [pc, #200]	@ (8008828 <TIM_Base_SetConfig+0x160>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d007      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a31      	ldr	r2, [pc, #196]	@ (800882c <TIM_Base_SetConfig+0x164>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2c      	ldr	r2, [pc, #176]	@ (8008820 <TIM_Base_SetConfig+0x158>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d108      	bne.n	8008784 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <TIM_Base_SetConfig+0x144>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d013      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a1a      	ldr	r2, [pc, #104]	@ (800881c <TIM_Base_SetConfig+0x154>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00f      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008824 <TIM_Base_SetConfig+0x15c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00b      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a19      	ldr	r2, [pc, #100]	@ (8008828 <TIM_Base_SetConfig+0x160>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d007      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a18      	ldr	r2, [pc, #96]	@ (800882c <TIM_Base_SetConfig+0x164>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a13      	ldr	r2, [pc, #76]	@ (8008820 <TIM_Base_SetConfig+0x158>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d103      	bne.n	80087e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d105      	bne.n	80087fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f023 0201 	bic.w	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	611a      	str	r2, [r3, #16]
  }
}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40012c00 	.word	0x40012c00
 8008810:	40000400 	.word	0x40000400
 8008814:	40000800 	.word	0x40000800
 8008818:	40000c00 	.word	0x40000c00
 800881c:	40013400 	.word	0x40013400
 8008820:	40015000 	.word	0x40015000
 8008824:	40014000 	.word	0x40014000
 8008828:	40014400 	.word	0x40014400
 800882c:	40014800 	.word	0x40014800

08008830 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	f023 0201 	bic.w	r2, r3, #1
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4a28      	ldr	r2, [pc, #160]	@ (80088fc <TIM_TI1_SetConfig+0xcc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d01b      	beq.n	8008896 <TIM_TI1_SetConfig+0x66>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008864:	d017      	beq.n	8008896 <TIM_TI1_SetConfig+0x66>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4a25      	ldr	r2, [pc, #148]	@ (8008900 <TIM_TI1_SetConfig+0xd0>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d013      	beq.n	8008896 <TIM_TI1_SetConfig+0x66>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4a24      	ldr	r2, [pc, #144]	@ (8008904 <TIM_TI1_SetConfig+0xd4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00f      	beq.n	8008896 <TIM_TI1_SetConfig+0x66>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4a23      	ldr	r2, [pc, #140]	@ (8008908 <TIM_TI1_SetConfig+0xd8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d00b      	beq.n	8008896 <TIM_TI1_SetConfig+0x66>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4a22      	ldr	r2, [pc, #136]	@ (800890c <TIM_TI1_SetConfig+0xdc>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d007      	beq.n	8008896 <TIM_TI1_SetConfig+0x66>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4a21      	ldr	r2, [pc, #132]	@ (8008910 <TIM_TI1_SetConfig+0xe0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d003      	beq.n	8008896 <TIM_TI1_SetConfig+0x66>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4a20      	ldr	r2, [pc, #128]	@ (8008914 <TIM_TI1_SetConfig+0xe4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d101      	bne.n	800889a <TIM_TI1_SetConfig+0x6a>
 8008896:	2301      	movs	r3, #1
 8008898:	e000      	b.n	800889c <TIM_TI1_SetConfig+0x6c>
 800889a:	2300      	movs	r3, #0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0303 	bic.w	r3, r3, #3
 80088a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	e003      	b.n	80088ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f043 0301 	orr.w	r3, r3, #1
 80088b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f023 030a 	bic.w	r3, r3, #10
 80088d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f003 030a 	and.w	r3, r3, #10
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	4313      	orrs	r3, r2
 80088e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	621a      	str	r2, [r3, #32]
}
 80088ee:	bf00      	nop
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40012c00 	.word	0x40012c00
 8008900:	40000400 	.word	0x40000400
 8008904:	40000800 	.word	0x40000800
 8008908:	40000c00 	.word	0x40000c00
 800890c:	40013400 	.word	0x40013400
 8008910:	40014000 	.word	0x40014000
 8008914:	40015000 	.word	0x40015000

08008918 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	f023 0210 	bic.w	r2, r3, #16
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	4313      	orrs	r3, r2
 800894e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	031b      	lsls	r3, r3, #12
 800895c:	b29b      	uxth	r3, r3
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800896a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	621a      	str	r2, [r3, #32]
}
 8008986:	bf00      	nop
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008992:	b480      	push	{r7}
 8008994:	b087      	sub	sp, #28
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
 800899e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f023 0303 	bic.w	r3, r3, #3
 80089be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4313      	orrs	r3, r2
 80089da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80089e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	621a      	str	r2, [r3, #32]
}
 80089fe:	bf00      	nop
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b087      	sub	sp, #28
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a48:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	031b      	lsls	r3, r3, #12
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	031b      	lsls	r3, r3, #12
 8008a62:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	621a      	str	r2, [r3, #32]
}
 8008a78:	bf00      	nop
 8008a7a:	371c      	adds	r7, #28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f003 031f 	and.w	r3, r3, #31
 8008a96:	2201      	movs	r2, #1
 8008a98:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1a      	ldr	r2, [r3, #32]
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	401a      	ands	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6a1a      	ldr	r2, [r3, #32]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f003 031f 	and.w	r3, r3, #31
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8008abc:	431a      	orrs	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	621a      	str	r2, [r3, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
	...

08008ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d101      	bne.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e074      	b.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a34      	ldr	r2, [pc, #208]	@ (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d009      	beq.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a33      	ldr	r2, [pc, #204]	@ (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d004      	beq.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a31      	ldr	r2, [pc, #196]	@ (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d108      	bne.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a21      	ldr	r2, [pc, #132]	@ (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d022      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b68:	d01d      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d018      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00e      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a15      	ldr	r2, [pc, #84]	@ (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d009      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a18      	ldr	r2, [pc, #96]	@ (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d004      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a11      	ldr	r2, [pc, #68]	@ (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d10c      	bne.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40012c00 	.word	0x40012c00
 8008be4:	40013400 	.word	0x40013400
 8008be8:	40015000 	.word	0x40015000
 8008bec:	40000400 	.word	0x40000400
 8008bf0:	40000800 	.word	0x40000800
 8008bf4:	40000c00 	.word	0x40000c00
 8008bf8:	40014000 	.word	0x40014000

08008bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e042      	b.n	8008d20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d106      	bne.n	8008cb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7f8 fe65 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2224      	movs	r2, #36	@ 0x24
 8008cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0201 	bic.w	r2, r2, #1
 8008cc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fb24 	bl	8009320 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f825 	bl	8008d28 <UART_SetConfig>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e01b      	b.n	8008d20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0201 	orr.w	r2, r2, #1
 8008d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fba3 	bl	8009464 <UART_CheckIdleState>
 8008d1e:	4603      	mov	r3, r0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d2c:	b08c      	sub	sp, #48	@ 0x30
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	431a      	orrs	r2, r3
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	431a      	orrs	r2, r3
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	69db      	ldr	r3, [r3, #28]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	4baa      	ldr	r3, [pc, #680]	@ (8009000 <UART_SetConfig+0x2d8>)
 8008d58:	4013      	ands	r3, r2
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	6812      	ldr	r2, [r2, #0]
 8008d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d60:	430b      	orrs	r3, r1
 8008d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a9f      	ldr	r2, [pc, #636]	@ (8009004 <UART_SetConfig+0x2dc>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d004      	beq.n	8008d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d90:	4313      	orrs	r3, r2
 8008d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008d9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	6812      	ldr	r2, [r2, #0]
 8008da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008da8:	430b      	orrs	r3, r1
 8008daa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db2:	f023 010f 	bic.w	r1, r3, #15
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a90      	ldr	r2, [pc, #576]	@ (8009008 <UART_SetConfig+0x2e0>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d125      	bne.n	8008e18 <UART_SetConfig+0xf0>
 8008dcc:	4b8f      	ldr	r3, [pc, #572]	@ (800900c <UART_SetConfig+0x2e4>)
 8008dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dd2:	f003 0303 	and.w	r3, r3, #3
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d81a      	bhi.n	8008e10 <UART_SetConfig+0xe8>
 8008dda:	a201      	add	r2, pc, #4	@ (adr r2, 8008de0 <UART_SetConfig+0xb8>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008df1 	.word	0x08008df1
 8008de4:	08008e01 	.word	0x08008e01
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008e09 	.word	0x08008e09
 8008df0:	2301      	movs	r3, #1
 8008df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008df6:	e116      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dfe:	e112      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008e00:	2304      	movs	r3, #4
 8008e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e06:	e10e      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008e08:	2308      	movs	r3, #8
 8008e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e0e:	e10a      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008e10:	2310      	movs	r3, #16
 8008e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e16:	e106      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a7c      	ldr	r2, [pc, #496]	@ (8009010 <UART_SetConfig+0x2e8>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d138      	bne.n	8008e94 <UART_SetConfig+0x16c>
 8008e22:	4b7a      	ldr	r3, [pc, #488]	@ (800900c <UART_SetConfig+0x2e4>)
 8008e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e28:	f003 030c 	and.w	r3, r3, #12
 8008e2c:	2b0c      	cmp	r3, #12
 8008e2e:	d82d      	bhi.n	8008e8c <UART_SetConfig+0x164>
 8008e30:	a201      	add	r2, pc, #4	@ (adr r2, 8008e38 <UART_SetConfig+0x110>)
 8008e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e36:	bf00      	nop
 8008e38:	08008e6d 	.word	0x08008e6d
 8008e3c:	08008e8d 	.word	0x08008e8d
 8008e40:	08008e8d 	.word	0x08008e8d
 8008e44:	08008e8d 	.word	0x08008e8d
 8008e48:	08008e7d 	.word	0x08008e7d
 8008e4c:	08008e8d 	.word	0x08008e8d
 8008e50:	08008e8d 	.word	0x08008e8d
 8008e54:	08008e8d 	.word	0x08008e8d
 8008e58:	08008e75 	.word	0x08008e75
 8008e5c:	08008e8d 	.word	0x08008e8d
 8008e60:	08008e8d 	.word	0x08008e8d
 8008e64:	08008e8d 	.word	0x08008e8d
 8008e68:	08008e85 	.word	0x08008e85
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e72:	e0d8      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008e74:	2302      	movs	r3, #2
 8008e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e7a:	e0d4      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e82:	e0d0      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e8a:	e0cc      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e92:	e0c8      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a5e      	ldr	r2, [pc, #376]	@ (8009014 <UART_SetConfig+0x2ec>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d125      	bne.n	8008eea <UART_SetConfig+0x1c2>
 8008e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800900c <UART_SetConfig+0x2e4>)
 8008ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ea4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ea8:	2b30      	cmp	r3, #48	@ 0x30
 8008eaa:	d016      	beq.n	8008eda <UART_SetConfig+0x1b2>
 8008eac:	2b30      	cmp	r3, #48	@ 0x30
 8008eae:	d818      	bhi.n	8008ee2 <UART_SetConfig+0x1ba>
 8008eb0:	2b20      	cmp	r3, #32
 8008eb2:	d00a      	beq.n	8008eca <UART_SetConfig+0x1a2>
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d814      	bhi.n	8008ee2 <UART_SetConfig+0x1ba>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <UART_SetConfig+0x19a>
 8008ebc:	2b10      	cmp	r3, #16
 8008ebe:	d008      	beq.n	8008ed2 <UART_SetConfig+0x1aa>
 8008ec0:	e00f      	b.n	8008ee2 <UART_SetConfig+0x1ba>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ec8:	e0ad      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008eca:	2302      	movs	r3, #2
 8008ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ed0:	e0a9      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008ed2:	2304      	movs	r3, #4
 8008ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ed8:	e0a5      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008eda:	2308      	movs	r3, #8
 8008edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee0:	e0a1      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008ee2:	2310      	movs	r3, #16
 8008ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee8:	e09d      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a4a      	ldr	r2, [pc, #296]	@ (8009018 <UART_SetConfig+0x2f0>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d125      	bne.n	8008f40 <UART_SetConfig+0x218>
 8008ef4:	4b45      	ldr	r3, [pc, #276]	@ (800900c <UART_SetConfig+0x2e4>)
 8008ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008efa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f00:	d016      	beq.n	8008f30 <UART_SetConfig+0x208>
 8008f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f04:	d818      	bhi.n	8008f38 <UART_SetConfig+0x210>
 8008f06:	2b80      	cmp	r3, #128	@ 0x80
 8008f08:	d00a      	beq.n	8008f20 <UART_SetConfig+0x1f8>
 8008f0a:	2b80      	cmp	r3, #128	@ 0x80
 8008f0c:	d814      	bhi.n	8008f38 <UART_SetConfig+0x210>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <UART_SetConfig+0x1f0>
 8008f12:	2b40      	cmp	r3, #64	@ 0x40
 8008f14:	d008      	beq.n	8008f28 <UART_SetConfig+0x200>
 8008f16:	e00f      	b.n	8008f38 <UART_SetConfig+0x210>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f1e:	e082      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008f20:	2302      	movs	r3, #2
 8008f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f26:	e07e      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008f28:	2304      	movs	r3, #4
 8008f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f2e:	e07a      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008f30:	2308      	movs	r3, #8
 8008f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f36:	e076      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008f38:	2310      	movs	r3, #16
 8008f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f3e:	e072      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a35      	ldr	r2, [pc, #212]	@ (800901c <UART_SetConfig+0x2f4>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d12a      	bne.n	8008fa0 <UART_SetConfig+0x278>
 8008f4a:	4b30      	ldr	r3, [pc, #192]	@ (800900c <UART_SetConfig+0x2e4>)
 8008f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f58:	d01a      	beq.n	8008f90 <UART_SetConfig+0x268>
 8008f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f5e:	d81b      	bhi.n	8008f98 <UART_SetConfig+0x270>
 8008f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f64:	d00c      	beq.n	8008f80 <UART_SetConfig+0x258>
 8008f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6a:	d815      	bhi.n	8008f98 <UART_SetConfig+0x270>
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d003      	beq.n	8008f78 <UART_SetConfig+0x250>
 8008f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f74:	d008      	beq.n	8008f88 <UART_SetConfig+0x260>
 8008f76:	e00f      	b.n	8008f98 <UART_SetConfig+0x270>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f7e:	e052      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008f80:	2302      	movs	r3, #2
 8008f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f86:	e04e      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f8e:	e04a      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008f90:	2308      	movs	r3, #8
 8008f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f96:	e046      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008f98:	2310      	movs	r3, #16
 8008f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f9e:	e042      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a17      	ldr	r2, [pc, #92]	@ (8009004 <UART_SetConfig+0x2dc>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d13a      	bne.n	8009020 <UART_SetConfig+0x2f8>
 8008faa:	4b18      	ldr	r3, [pc, #96]	@ (800900c <UART_SetConfig+0x2e4>)
 8008fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008fb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fb8:	d01a      	beq.n	8008ff0 <UART_SetConfig+0x2c8>
 8008fba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fbe:	d81b      	bhi.n	8008ff8 <UART_SetConfig+0x2d0>
 8008fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fc4:	d00c      	beq.n	8008fe0 <UART_SetConfig+0x2b8>
 8008fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fca:	d815      	bhi.n	8008ff8 <UART_SetConfig+0x2d0>
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <UART_SetConfig+0x2b0>
 8008fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fd4:	d008      	beq.n	8008fe8 <UART_SetConfig+0x2c0>
 8008fd6:	e00f      	b.n	8008ff8 <UART_SetConfig+0x2d0>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fde:	e022      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fe6:	e01e      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fee:	e01a      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ff6:	e016      	b.n	8009026 <UART_SetConfig+0x2fe>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ffe:	e012      	b.n	8009026 <UART_SetConfig+0x2fe>
 8009000:	cfff69f3 	.word	0xcfff69f3
 8009004:	40008000 	.word	0x40008000
 8009008:	40013800 	.word	0x40013800
 800900c:	40021000 	.word	0x40021000
 8009010:	40004400 	.word	0x40004400
 8009014:	40004800 	.word	0x40004800
 8009018:	40004c00 	.word	0x40004c00
 800901c:	40005000 	.word	0x40005000
 8009020:	2310      	movs	r3, #16
 8009022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4aae      	ldr	r2, [pc, #696]	@ (80092e4 <UART_SetConfig+0x5bc>)
 800902c:	4293      	cmp	r3, r2
 800902e:	f040 8097 	bne.w	8009160 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009032:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009036:	2b08      	cmp	r3, #8
 8009038:	d823      	bhi.n	8009082 <UART_SetConfig+0x35a>
 800903a:	a201      	add	r2, pc, #4	@ (adr r2, 8009040 <UART_SetConfig+0x318>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	08009065 	.word	0x08009065
 8009044:	08009083 	.word	0x08009083
 8009048:	0800906d 	.word	0x0800906d
 800904c:	08009083 	.word	0x08009083
 8009050:	08009073 	.word	0x08009073
 8009054:	08009083 	.word	0x08009083
 8009058:	08009083 	.word	0x08009083
 800905c:	08009083 	.word	0x08009083
 8009060:	0800907b 	.word	0x0800907b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009064:	f7fe f9b0 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 8009068:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800906a:	e010      	b.n	800908e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800906c:	4b9e      	ldr	r3, [pc, #632]	@ (80092e8 <UART_SetConfig+0x5c0>)
 800906e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009070:	e00d      	b.n	800908e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009072:	f7fe f93b 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 8009076:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009078:	e009      	b.n	800908e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800907a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800907e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009080:	e005      	b.n	800908e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800908c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 8130 	beq.w	80092f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800909a:	4a94      	ldr	r2, [pc, #592]	@ (80092ec <UART_SetConfig+0x5c4>)
 800909c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090a0:	461a      	mov	r2, r3
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	4413      	add	r3, r2
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d305      	bcc.n	80090c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d903      	bls.n	80090ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090cc:	e113      	b.n	80092f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	2200      	movs	r2, #0
 80090d2:	60bb      	str	r3, [r7, #8]
 80090d4:	60fa      	str	r2, [r7, #12]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090da:	4a84      	ldr	r2, [pc, #528]	@ (80092ec <UART_SetConfig+0x5c4>)
 80090dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2200      	movs	r2, #0
 80090e4:	603b      	str	r3, [r7, #0]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090f0:	f7f7 f9b2 	bl	8000458 <__aeabi_uldivmod>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4610      	mov	r0, r2
 80090fa:	4619      	mov	r1, r3
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	020b      	lsls	r3, r1, #8
 8009106:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800910a:	0202      	lsls	r2, r0, #8
 800910c:	6979      	ldr	r1, [r7, #20]
 800910e:	6849      	ldr	r1, [r1, #4]
 8009110:	0849      	lsrs	r1, r1, #1
 8009112:	2000      	movs	r0, #0
 8009114:	460c      	mov	r4, r1
 8009116:	4605      	mov	r5, r0
 8009118:	eb12 0804 	adds.w	r8, r2, r4
 800911c:	eb43 0905 	adc.w	r9, r3, r5
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	469a      	mov	sl, r3
 8009128:	4693      	mov	fp, r2
 800912a:	4652      	mov	r2, sl
 800912c:	465b      	mov	r3, fp
 800912e:	4640      	mov	r0, r8
 8009130:	4649      	mov	r1, r9
 8009132:	f7f7 f991 	bl	8000458 <__aeabi_uldivmod>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4613      	mov	r3, r2
 800913c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009144:	d308      	bcc.n	8009158 <UART_SetConfig+0x430>
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800914c:	d204      	bcs.n	8009158 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6a3a      	ldr	r2, [r7, #32]
 8009154:	60da      	str	r2, [r3, #12]
 8009156:	e0ce      	b.n	80092f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800915e:	e0ca      	b.n	80092f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009168:	d166      	bne.n	8009238 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800916a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800916e:	2b08      	cmp	r3, #8
 8009170:	d827      	bhi.n	80091c2 <UART_SetConfig+0x49a>
 8009172:	a201      	add	r2, pc, #4	@ (adr r2, 8009178 <UART_SetConfig+0x450>)
 8009174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009178:	0800919d 	.word	0x0800919d
 800917c:	080091a5 	.word	0x080091a5
 8009180:	080091ad 	.word	0x080091ad
 8009184:	080091c3 	.word	0x080091c3
 8009188:	080091b3 	.word	0x080091b3
 800918c:	080091c3 	.word	0x080091c3
 8009190:	080091c3 	.word	0x080091c3
 8009194:	080091c3 	.word	0x080091c3
 8009198:	080091bb 	.word	0x080091bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800919c:	f7fe f914 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 80091a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091a2:	e014      	b.n	80091ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091a4:	f7fe f926 	bl	80073f4 <HAL_RCC_GetPCLK2Freq>
 80091a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091aa:	e010      	b.n	80091ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091ac:	4b4e      	ldr	r3, [pc, #312]	@ (80092e8 <UART_SetConfig+0x5c0>)
 80091ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091b0:	e00d      	b.n	80091ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091b2:	f7fe f89b 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 80091b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091b8:	e009      	b.n	80091ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091c0:	e005      	b.n	80091ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 8090 	beq.w	80092f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091da:	4a44      	ldr	r2, [pc, #272]	@ (80092ec <UART_SetConfig+0x5c4>)
 80091dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091e0:	461a      	mov	r2, r3
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091e8:	005a      	lsls	r2, r3, #1
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	085b      	lsrs	r3, r3, #1
 80091f0:	441a      	add	r2, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	2b0f      	cmp	r3, #15
 8009200:	d916      	bls.n	8009230 <UART_SetConfig+0x508>
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009208:	d212      	bcs.n	8009230 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	b29b      	uxth	r3, r3
 800920e:	f023 030f 	bic.w	r3, r3, #15
 8009212:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	085b      	lsrs	r3, r3, #1
 8009218:	b29b      	uxth	r3, r3
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	b29a      	uxth	r2, r3
 8009220:	8bfb      	ldrh	r3, [r7, #30]
 8009222:	4313      	orrs	r3, r2
 8009224:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	8bfa      	ldrh	r2, [r7, #30]
 800922c:	60da      	str	r2, [r3, #12]
 800922e:	e062      	b.n	80092f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009236:	e05e      	b.n	80092f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009238:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800923c:	2b08      	cmp	r3, #8
 800923e:	d828      	bhi.n	8009292 <UART_SetConfig+0x56a>
 8009240:	a201      	add	r2, pc, #4	@ (adr r2, 8009248 <UART_SetConfig+0x520>)
 8009242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009246:	bf00      	nop
 8009248:	0800926d 	.word	0x0800926d
 800924c:	08009275 	.word	0x08009275
 8009250:	0800927d 	.word	0x0800927d
 8009254:	08009293 	.word	0x08009293
 8009258:	08009283 	.word	0x08009283
 800925c:	08009293 	.word	0x08009293
 8009260:	08009293 	.word	0x08009293
 8009264:	08009293 	.word	0x08009293
 8009268:	0800928b 	.word	0x0800928b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800926c:	f7fe f8ac 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 8009270:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009272:	e014      	b.n	800929e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009274:	f7fe f8be 	bl	80073f4 <HAL_RCC_GetPCLK2Freq>
 8009278:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800927a:	e010      	b.n	800929e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800927c:	4b1a      	ldr	r3, [pc, #104]	@ (80092e8 <UART_SetConfig+0x5c0>)
 800927e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009280:	e00d      	b.n	800929e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009282:	f7fe f833 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 8009286:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009288:	e009      	b.n	800929e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800928a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800928e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009290:	e005      	b.n	800929e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800929c:	bf00      	nop
    }

    if (pclk != 0U)
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d028      	beq.n	80092f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a8:	4a10      	ldr	r2, [pc, #64]	@ (80092ec <UART_SetConfig+0x5c4>)
 80092aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	441a      	add	r2, r3
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	2b0f      	cmp	r3, #15
 80092cc:	d910      	bls.n	80092f0 <UART_SetConfig+0x5c8>
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092d4:	d20c      	bcs.n	80092f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	b29a      	uxth	r2, r3
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60da      	str	r2, [r3, #12]
 80092e0:	e009      	b.n	80092f6 <UART_SetConfig+0x5ce>
 80092e2:	bf00      	nop
 80092e4:	40008000 	.word	0x40008000
 80092e8:	00f42400 	.word	0x00f42400
 80092ec:	0800be8c 	.word	0x0800be8c
      }
      else
      {
        ret = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2201      	movs	r2, #1
 8009302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2200      	movs	r2, #0
 800930a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2200      	movs	r2, #0
 8009310:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009312:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009316:	4618      	mov	r0, r3
 8009318:	3730      	adds	r7, #48	@ 0x30
 800931a:	46bd      	mov	sp, r7
 800931c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932c:	f003 0308 	and.w	r3, r3, #8
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00a      	beq.n	800934a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	430a      	orrs	r2, r1
 800936a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b4:	f003 0310 	and.w	r3, r3, #16
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00a      	beq.n	80093d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d6:	f003 0320 	and.w	r3, r3, #32
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01a      	beq.n	8009436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	430a      	orrs	r2, r1
 8009414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800941a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800941e:	d10a      	bne.n	8009436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800943a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	605a      	str	r2, [r3, #4]
  }
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b098      	sub	sp, #96	@ 0x60
 8009468:	af02      	add	r7, sp, #8
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009474:	f7f9 f9f2 	bl	800285c <HAL_GetTick>
 8009478:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	2b08      	cmp	r3, #8
 8009486:	d12f      	bne.n	80094e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009488:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009490:	2200      	movs	r2, #0
 8009492:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f88e 	bl	80095b8 <UART_WaitOnFlagUntilTimeout>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d022      	beq.n	80094e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e6      	bne.n	80094a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2220      	movs	r2, #32
 80094d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e063      	b.n	80095b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0304 	and.w	r3, r3, #4
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d149      	bne.n	800958a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094fe:	2200      	movs	r2, #0
 8009500:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f857 	bl	80095b8 <UART_WaitOnFlagUntilTimeout>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d03c      	beq.n	800958a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	623b      	str	r3, [r7, #32]
   return(result);
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009524:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800952e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009530:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800953c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e6      	bne.n	8009510 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3308      	adds	r3, #8
 8009548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	60fb      	str	r3, [r7, #12]
   return(result);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f023 0301 	bic.w	r3, r3, #1
 8009558:	64bb      	str	r3, [r7, #72]	@ 0x48
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3308      	adds	r3, #8
 8009560:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009562:	61fa      	str	r2, [r7, #28]
 8009564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	69b9      	ldr	r1, [r7, #24]
 8009568:	69fa      	ldr	r2, [r7, #28]
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	617b      	str	r3, [r7, #20]
   return(result);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e5      	bne.n	8009542 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e012      	b.n	80095b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2220      	movs	r2, #32
 800958e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2220      	movs	r2, #32
 8009596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3758      	adds	r7, #88	@ 0x58
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	4613      	mov	r3, r2
 80095c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095c8:	e04f      	b.n	800966a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d0:	d04b      	beq.n	800966a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095d2:	f7f9 f943 	bl	800285c <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d302      	bcc.n	80095e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e04e      	b.n	800968a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0304 	and.w	r3, r3, #4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d037      	beq.n	800966a <UART_WaitOnFlagUntilTimeout+0xb2>
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b80      	cmp	r3, #128	@ 0x80
 80095fe:	d034      	beq.n	800966a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b40      	cmp	r3, #64	@ 0x40
 8009604:	d031      	beq.n	800966a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	2b08      	cmp	r3, #8
 8009612:	d110      	bne.n	8009636 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2208      	movs	r2, #8
 800961a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 f838 	bl	8009692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2208      	movs	r2, #8
 8009626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e029      	b.n	800968a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009644:	d111      	bne.n	800966a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800964e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 f81e 	bl	8009692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2220      	movs	r2, #32
 800965a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e00f      	b.n	800968a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69da      	ldr	r2, [r3, #28]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	4013      	ands	r3, r2
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	429a      	cmp	r2, r3
 8009678:	bf0c      	ite	eq
 800967a:	2301      	moveq	r3, #1
 800967c:	2300      	movne	r3, #0
 800967e:	b2db      	uxtb	r3, r3
 8009680:	461a      	mov	r2, r3
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	429a      	cmp	r2, r3
 8009686:	d0a0      	beq.n	80095ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009692:	b480      	push	{r7}
 8009694:	b095      	sub	sp, #84	@ 0x54
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	461a      	mov	r2, r3
 80096b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e6      	bne.n	800969a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3308      	adds	r3, #8
 80096d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	61fb      	str	r3, [r7, #28]
   return(result);
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096e2:	f023 0301 	bic.w	r3, r3, #1
 80096e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3308      	adds	r3, #8
 80096ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e3      	bne.n	80096cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009708:	2b01      	cmp	r3, #1
 800970a:	d118      	bne.n	800973e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	e853 3f00 	ldrex	r3, [r3]
 8009718:	60bb      	str	r3, [r7, #8]
   return(result);
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f023 0310 	bic.w	r3, r3, #16
 8009720:	647b      	str	r3, [r7, #68]	@ 0x44
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	6979      	ldr	r1, [r7, #20]
 8009730:	69ba      	ldr	r2, [r7, #24]
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	613b      	str	r3, [r7, #16]
   return(result);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e6      	bne.n	800970c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009752:	bf00      	nop
 8009754:	3754      	adds	r7, #84	@ 0x54
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr

0800975e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800975e:	b480      	push	{r7}
 8009760:	b085      	sub	sp, #20
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800976c:	2b01      	cmp	r3, #1
 800976e:	d101      	bne.n	8009774 <HAL_UARTEx_DisableFifoMode+0x16>
 8009770:	2302      	movs	r3, #2
 8009772:	e027      	b.n	80097c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2224      	movs	r2, #36	@ 0x24
 8009780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0201 	bic.w	r2, r2, #1
 800979a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80097a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d101      	bne.n	80097e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e02d      	b.n	8009844 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2224      	movs	r2, #36	@ 0x24
 80097f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0201 	bic.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f84f 	bl	80098c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2220      	movs	r2, #32
 8009836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800985c:	2b01      	cmp	r3, #1
 800985e:	d101      	bne.n	8009864 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009860:	2302      	movs	r3, #2
 8009862:	e02d      	b.n	80098c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2224      	movs	r2, #36	@ 0x24
 8009870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0201 	bic.w	r2, r2, #1
 800988a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	430a      	orrs	r2, r1
 800989e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f811 	bl	80098c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d108      	bne.n	80098ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098e8:	e031      	b.n	800994e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098ea:	2308      	movs	r3, #8
 80098ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098ee:	2308      	movs	r3, #8
 80098f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	0e5b      	lsrs	r3, r3, #25
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0307 	and.w	r3, r3, #7
 8009900:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	0f5b      	lsrs	r3, r3, #29
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0307 	and.w	r3, r3, #7
 8009910:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	7b3a      	ldrb	r2, [r7, #12]
 8009916:	4911      	ldr	r1, [pc, #68]	@ (800995c <UARTEx_SetNbDataToProcess+0x94>)
 8009918:	5c8a      	ldrb	r2, [r1, r2]
 800991a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800991e:	7b3a      	ldrb	r2, [r7, #12]
 8009920:	490f      	ldr	r1, [pc, #60]	@ (8009960 <UARTEx_SetNbDataToProcess+0x98>)
 8009922:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009924:	fb93 f3f2 	sdiv	r3, r3, r2
 8009928:	b29a      	uxth	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	7b7a      	ldrb	r2, [r7, #13]
 8009934:	4909      	ldr	r1, [pc, #36]	@ (800995c <UARTEx_SetNbDataToProcess+0x94>)
 8009936:	5c8a      	ldrb	r2, [r1, r2]
 8009938:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800993c:	7b7a      	ldrb	r2, [r7, #13]
 800993e:	4908      	ldr	r1, [pc, #32]	@ (8009960 <UARTEx_SetNbDataToProcess+0x98>)
 8009940:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009942:	fb93 f3f2 	sdiv	r3, r3, r2
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800994e:	bf00      	nop
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	0800bea4 	.word	0x0800bea4
 8009960:	0800beac 	.word	0x0800beac

08009964 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b096      	sub	sp, #88	@ 0x58
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3303      	adds	r3, #3
 8009976:	f023 0303 	bic.w	r3, r3, #3
 800997a:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800997c:	f3ef 8310 	mrs	r3, PRIMASK
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 8009982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8009984:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8009986:	b672      	cpsid	i
#endif
    return(int_posture);
 8009988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800998a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800998c:	4b55      	ldr	r3, [pc, #340]	@ (8009ae4 <_tx_byte_allocate+0x180>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8009992:	2300      	movs	r3, #0
 8009994:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800999a:	621a      	str	r2, [r3, #32]
 800999c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800999e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a2:	f383 8810 	msr	PRIMASK, r3
}
 80099a6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 f9b2 	bl	8009d14 <_tx_byte_pool_search>
 80099b0:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099b2:	f3ef 8310 	mrs	r3, PRIMASK
 80099b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80099b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80099ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80099bc:	b672      	cpsid	i
    return(int_posture);
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80099c0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80099c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80099c8:	2301      	movs	r3, #1
 80099ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099cc:	e006      	b.n	80099dc <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d101      	bne.n	80099dc <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80099dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0d9      	beq.n	8009996 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099e6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80099e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d008      	beq.n	8009a00 <_tx_byte_allocate+0x9c>
 80099ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099f0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	f383 8810 	msr	PRIMASK, r3
}
 80099f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80099fa:	2300      	movs	r3, #0
 80099fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80099fe:	e06c      	b.n	8009ada <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d061      	beq.n	8009aca <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8009a06:	4b38      	ldr	r3, [pc, #224]	@ (8009ae8 <_tx_byte_allocate+0x184>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d007      	beq.n	8009a1e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8009a0e:	2310      	movs	r3, #16
 8009a10:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a14:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	f383 8810 	msr	PRIMASK, r3
}
 8009a1c:	e05d      	b.n	8009ada <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8009a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a20:	4a32      	ldr	r2, [pc, #200]	@ (8009aec <_tx_byte_allocate+0x188>)
 8009a22:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8009a24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8009a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8009a30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8009a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a40:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a48:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8009a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d109      	bne.n	8009a6e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a5e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8009a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a64:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a6a:	675a      	str	r2, [r3, #116]	@ 0x74
 8009a6c:	e011      	b.n	8009a92 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009a78:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a84:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a8a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a90:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8009a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a94:	2209      	movs	r2, #9
 8009a96:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8009aa4:	4b10      	ldr	r3, [pc, #64]	@ (8009ae8 <_tx_byte_allocate+0x184>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8009ae8 <_tx_byte_allocate+0x184>)
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ab0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	f383 8810 	msr	PRIMASK, r3
}
 8009ab8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8009aba:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8009abc:	f000 ff96 	bl	800a9ec <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8009ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ac8:	e007      	b.n	8009ada <_tx_byte_allocate+0x176>
 8009aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009acc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f383 8810 	msr	PRIMASK, r3
}
 8009ad4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8009ad6:	2310      	movs	r3, #16
 8009ad8:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8009ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3758      	adds	r7, #88	@ 0x58
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	2001088c 	.word	0x2001088c
 8009ae8:	20010924 	.word	0x20010924
 8009aec:	08009af1 	.word	0x08009af1

08009af0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08e      	sub	sp, #56	@ 0x38
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009afa:	f3ef 8310 	mrs	r3, PRIMASK
 8009afe:	623b      	str	r3, [r7, #32]
    return(posture);
 8009b00:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009b02:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b04:	b672      	cpsid	i
    return(int_posture);
 8009b06:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8009b08:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b0e:	4a33      	ldr	r2, [pc, #204]	@ (8009bdc <_tx_byte_pool_cleanup+0xec>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d158      	bne.n	8009bc6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d152      	bne.n	8009bc6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b24:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d04c      	beq.n	8009bc6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a2b      	ldr	r2, [pc, #172]	@ (8009be0 <_tx_byte_pool_cleanup+0xf0>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d147      	bne.n	8009bc6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d043      	beq.n	8009bc6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8009b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b48:	1e5a      	subs	r2, r3, #1
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8009b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d103      	bne.n	8009b62 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b60:	e013      	b.n	8009b8a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b66:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b6c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b72:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b78:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d102      	bne.n	8009b8a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b88:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8e:	2b09      	cmp	r3, #9
 8009b90:	d119      	bne.n	8009bc6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2210      	movs	r2, #16
 8009b96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8009b9a:	4b12      	ldr	r3, [pc, #72]	@ (8009be4 <_tx_byte_pool_cleanup+0xf4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	4a10      	ldr	r2, [pc, #64]	@ (8009be4 <_tx_byte_pool_cleanup+0xf4>)
 8009ba2:	6013      	str	r3, [r2, #0]
 8009ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f383 8810 	msr	PRIMASK, r3
}
 8009bae:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fe1b 	bl	800a7ec <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8009bba:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009bbc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009bbe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009bc0:	b672      	cpsid	i
    return(int_posture);
 8009bc2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8009bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f383 8810 	msr	PRIMASK, r3
}
 8009bd0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009bd2:	bf00      	nop
 8009bd4:	3738      	adds	r7, #56	@ 0x38
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	08009af1 	.word	0x08009af1
 8009be0:	42595445 	.word	0x42595445
 8009be4:	20010924 	.word	0x20010924

08009be8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08e      	sub	sp, #56	@ 0x38
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8009bf6:	2234      	movs	r2, #52	@ 0x34
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f002 f84c 	bl	800bc98 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	f023 0303 	bic.w	r3, r3, #3
 8009c06:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	f1a3 0208 	sub.w	r2, r3, #8
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2202      	movs	r2, #2
 8009c34:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8009c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	4413      	add	r3, r2
 8009c40:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8009c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c44:	3b04      	subs	r3, #4
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8009c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c54:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8009c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c58:	3b04      	subs	r3, #4
 8009c5a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8009c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c72:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8009c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8009c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8009c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c84:	4a1f      	ldr	r2, [pc, #124]	@ (8009d04 <_tx_byte_pool_create+0x11c>)
 8009c86:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009c92:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009c94:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009c96:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c98:	b672      	cpsid	i
    return(int_posture);
 8009c9a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8009c9c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4a19      	ldr	r2, [pc, #100]	@ (8009d08 <_tx_byte_pool_create+0x120>)
 8009ca2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8009ca4:	4b19      	ldr	r3, [pc, #100]	@ (8009d0c <_tx_byte_pool_create+0x124>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d109      	bne.n	8009cc0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8009cac:	4a18      	ldr	r2, [pc, #96]	@ (8009d10 <_tx_byte_pool_create+0x128>)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cbe:	e011      	b.n	8009ce4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8009cc0:	4b13      	ldr	r3, [pc, #76]	@ (8009d10 <_tx_byte_pool_create+0x128>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cca:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	69fa      	ldr	r2, [r7, #28]
 8009cdc:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a3a      	ldr	r2, [r7, #32]
 8009ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8009ce4:	4b09      	ldr	r3, [pc, #36]	@ (8009d0c <_tx_byte_pool_create+0x124>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	4a08      	ldr	r2, [pc, #32]	@ (8009d0c <_tx_byte_pool_create+0x124>)
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f383 8810 	msr	PRIMASK, r3
}
 8009cf8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3738      	adds	r7, #56	@ 0x38
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	ffffeeee 	.word	0xffffeeee
 8009d08:	42595445 	.word	0x42595445
 8009d0c:	20010880 	.word	0x20010880
 8009d10:	2001087c 	.word	0x2001087c

08009d14 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b097      	sub	sp, #92	@ 0x5c
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d22:	f3ef 8310 	mrs	r3, PRIMASK
 8009d26:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8009d2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d2c:	b672      	cpsid	i
    return(int_posture);
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8009d30:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	689a      	ldr	r2, [r3, #8]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	3b02      	subs	r3, #2
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	4413      	add	r3, r2
 8009d40:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d308      	bcc.n	8009d5c <_tx_byte_pool_search+0x48>
 8009d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d4c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	f383 8810 	msr	PRIMASK, r3
}
 8009d54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d5a:	e0dd      	b.n	8009f18 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8009d5c:	4b72      	ldr	r3, [pc, #456]	@ (8009f28 <_tx_byte_pool_search+0x214>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009d66:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	3301      	adds	r3, #1
 8009d74:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 8009d76:	2300      	movs	r3, #0
 8009d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8009d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8009d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a68      	ldr	r2, [pc, #416]	@ (8009f2c <_tx_byte_pool_search+0x218>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d143      	bne.n	8009e16 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8009d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d104      	bne.n	8009d9e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d98:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009da0:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 8009da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8009da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8009db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009db2:	3b08      	subs	r3, #8
 8009db4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8009db6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d257      	bcs.n	8009e6e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8009dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dca:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8009dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a56      	ldr	r2, [pc, #344]	@ (8009f2c <_tx_byte_pool_search+0x218>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d113      	bne.n	8009dfe <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8009dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8009dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	1e5a      	subs	r2, r3, #1
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d114      	bne.n	8009e20 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009dfa:	615a      	str	r2, [r3, #20]
 8009dfc:	e010      	b.n	8009e20 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8009dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e00:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 8009e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8009e08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d008      	beq.n	8009e20 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8009e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e10:	3b01      	subs	r3, #1
 8009e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e14:	e004      	b.n	8009e20 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e18:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8009e20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8009e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	f383 8810 	msr	PRIMASK, r3
}
 8009e36:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e38:	f3ef 8310 	mrs	r3, PRIMASK
 8009e3c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009e3e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009e40:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e42:	b672      	cpsid	i
    return(int_posture);
 8009e44:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8009e46:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d009      	beq.n	8009e66 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009e64:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8009e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d186      	bne.n	8009d7a <_tx_byte_pool_search+0x66>
 8009e6c:	e000      	b.n	8009e70 <_tx_byte_pool_search+0x15c>
                    break;
 8009e6e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8009e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d048      	beq.n	8009f08 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8009e76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	2b13      	cmp	r3, #19
 8009e7e:	d91e      	bls.n	8009ebe <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	3308      	adds	r3, #8
 8009e84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e86:	4413      	add	r3, r2
 8009e88:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8009e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e90:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8009e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e98:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8009e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea2:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea6:	4a21      	ldr	r2, [pc, #132]	@ (8009f2c <_tx_byte_pool_search+0x218>)
 8009ea8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eb8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8009ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec6:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689a      	ldr	r2, [r3, #8]
 8009ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	f1a3 0208 	sub.w	r2, r3, #8
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d105      	bne.n	8009ef4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eea:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	615a      	str	r2, [r3, #20]
 8009ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ef6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f383 8810 	msr	PRIMASK, r3
}
 8009efe:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8009f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f02:	3308      	adds	r3, #8
 8009f04:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f06:	e007      	b.n	8009f18 <_tx_byte_pool_search+0x204>
 8009f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f0a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f383 8810 	msr	PRIMASK, r3
}
 8009f12:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8009f14:	2300      	movs	r3, #0
 8009f16:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8009f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	375c      	adds	r7, #92	@ 0x5c
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	2001088c 	.word	0x2001088c
 8009f2c:	ffffeeee 	.word	0xffffeeee

08009f30 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8009f34:	f000 fb18 	bl	800a568 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8009f38:	f001 f880 	bl	800b03c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8009f3c:	4b12      	ldr	r3, [pc, #72]	@ (8009f88 <_tx_initialize_high_level+0x58>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	4b12      	ldr	r3, [pc, #72]	@ (8009f8c <_tx_initialize_high_level+0x5c>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8009f48:	4b11      	ldr	r3, [pc, #68]	@ (8009f90 <_tx_initialize_high_level+0x60>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	4b11      	ldr	r3, [pc, #68]	@ (8009f94 <_tx_initialize_high_level+0x64>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8009f54:	4b10      	ldr	r3, [pc, #64]	@ (8009f98 <_tx_initialize_high_level+0x68>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	4b10      	ldr	r3, [pc, #64]	@ (8009f9c <_tx_initialize_high_level+0x6c>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8009f60:	4b0f      	ldr	r3, [pc, #60]	@ (8009fa0 <_tx_initialize_high_level+0x70>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]
 8009f66:	4b0f      	ldr	r3, [pc, #60]	@ (8009fa4 <_tx_initialize_high_level+0x74>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8009f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa8 <_tx_initialize_high_level+0x78>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	4b0e      	ldr	r3, [pc, #56]	@ (8009fac <_tx_initialize_high_level+0x7c>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8009f78:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb0 <_tx_initialize_high_level+0x80>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb4 <_tx_initialize_high_level+0x84>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
#endif
}
 8009f84:	bf00      	nop
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20010854 	.word	0x20010854
 8009f8c:	20010858 	.word	0x20010858
 8009f90:	2001085c 	.word	0x2001085c
 8009f94:	20010860 	.word	0x20010860
 8009f98:	20010864 	.word	0x20010864
 8009f9c:	20010868 	.word	0x20010868
 8009fa0:	20010874 	.word	0x20010874
 8009fa4:	20010878 	.word	0x20010878
 8009fa8:	2001087c 	.word	0x2001087c
 8009fac:	20010880 	.word	0x20010880
 8009fb0:	2001086c 	.word	0x2001086c
 8009fb4:	20010870 	.word	0x20010870

08009fb8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8009fbc:	4b10      	ldr	r3, [pc, #64]	@ (800a000 <_tx_initialize_kernel_enter+0x48>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8009fc4:	d00c      	beq.n	8009fe0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009fc6:	4b0e      	ldr	r3, [pc, #56]	@ (800a000 <_tx_initialize_kernel_enter+0x48>)
 8009fc8:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8009fcc:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8009fce:	f7f6 f927 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8009fd2:	f7ff ffad 	bl	8009f30 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	@ (800a004 <_tx_initialize_kernel_enter+0x4c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	4a09      	ldr	r2, [pc, #36]	@ (800a004 <_tx_initialize_kernel_enter+0x4c>)
 8009fde:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009fe0:	4b07      	ldr	r3, [pc, #28]	@ (800a000 <_tx_initialize_kernel_enter+0x48>)
 8009fe2:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8009fe6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8009fe8:	4b07      	ldr	r3, [pc, #28]	@ (800a008 <_tx_initialize_kernel_enter+0x50>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7f6 fbab 	bl	8000748 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8009ff2:	4b03      	ldr	r3, [pc, #12]	@ (800a000 <_tx_initialize_kernel_enter+0x48>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8009ff8:	f7f6 f952 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009ffc:	bf00      	nop
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	2000004c 	.word	0x2000004c
 800a004:	20010924 	.word	0x20010924
 800a008:	20010884 	.word	0x20010884

0800a00c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08e      	sub	sp, #56	@ 0x38
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a016:	f3ef 8310 	mrs	r3, PRIMASK
 800a01a:	623b      	str	r3, [r7, #32]
    return(posture);
 800a01c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a01e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a020:	b672      	cpsid	i
    return(int_posture);
 800a022:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800a024:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a02a:	4a33      	ldr	r2, [pc, #204]	@ (800a0f8 <_tx_semaphore_cleanup+0xec>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d158      	bne.n	800a0e2 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d152      	bne.n	800a0e2 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a040:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800a042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a044:	2b00      	cmp	r3, #0
 800a046:	d04c      	beq.n	800a0e2 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800a048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a2b      	ldr	r2, [pc, #172]	@ (800a0fc <_tx_semaphore_cleanup+0xf0>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d147      	bne.n	800a0e2 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800a052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d043      	beq.n	800a0e2 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800a060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	1e5a      	subs	r2, r3, #1
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a072:	2b00      	cmp	r3, #0
 800a074:	d103      	bne.n	800a07e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a078:	2200      	movs	r2, #0
 800a07a:	60da      	str	r2, [r3, #12]
 800a07c:	e013      	b.n	800a0a6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a082:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a088:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a08e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a094:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d102      	bne.n	800a0a6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0a4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0aa:	2b06      	cmp	r3, #6
 800a0ac:	d119      	bne.n	800a0e2 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	220d      	movs	r2, #13
 800a0b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a0b6:	4b12      	ldr	r3, [pc, #72]	@ (800a100 <_tx_semaphore_cleanup+0xf4>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	4a10      	ldr	r2, [pc, #64]	@ (800a100 <_tx_semaphore_cleanup+0xf4>)
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f383 8810 	msr	PRIMASK, r3
}
 800a0ca:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fb8d 	bl	800a7ec <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a0d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a0da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0dc:	b672      	cpsid	i
    return(int_posture);
 800a0de:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a0e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f383 8810 	msr	PRIMASK, r3
}
 800a0ec:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a0ee:	bf00      	nop
 800a0f0:	3738      	adds	r7, #56	@ 0x38
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	0800a00d 	.word	0x0800a00d
 800a0fc:	53454d41 	.word	0x53454d41
 800a100:	20010924 	.word	0x20010924

0800a104 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08a      	sub	sp, #40	@ 0x28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800a110:	221c      	movs	r2, #28
 800a112:	2100      	movs	r1, #0
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f001 fdbf 	bl	800bc98 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a126:	f3ef 8310 	mrs	r3, PRIMASK
 800a12a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a12c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a12e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a130:	b672      	cpsid	i
    return(int_posture);
 800a132:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800a134:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	4a18      	ldr	r2, [pc, #96]	@ (800a19c <_tx_semaphore_create+0x98>)
 800a13a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800a13c:	4b18      	ldr	r3, [pc, #96]	@ (800a1a0 <_tx_semaphore_create+0x9c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d109      	bne.n	800a158 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800a144:	4a17      	ldr	r2, [pc, #92]	@ (800a1a4 <_tx_semaphore_create+0xa0>)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	619a      	str	r2, [r3, #24]
 800a156:	e011      	b.n	800a17c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800a158:	4b12      	ldr	r3, [pc, #72]	@ (800a1a4 <_tx_semaphore_create+0xa0>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a3a      	ldr	r2, [r7, #32]
 800a17a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800a17c:	4b08      	ldr	r3, [pc, #32]	@ (800a1a0 <_tx_semaphore_create+0x9c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3301      	adds	r3, #1
 800a182:	4a07      	ldr	r2, [pc, #28]	@ (800a1a0 <_tx_semaphore_create+0x9c>)
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f383 8810 	msr	PRIMASK, r3
}
 800a190:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3728      	adds	r7, #40	@ 0x28
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	53454d41 	.word	0x53454d41
 800a1a0:	20010858 	.word	0x20010858
 800a1a4:	20010854 	.word	0x20010854

0800a1a8 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08e      	sub	sp, #56	@ 0x38
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1b6:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ba:	623b      	str	r3, [r7, #32]
    return(posture);
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a1be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1c0:	b672      	cpsid	i
    return(int_posture);
 800a1c2:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800a1c4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	1e5a      	subs	r2, r3, #1
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	609a      	str	r2, [r3, #8]
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	f383 8810 	msr	PRIMASK, r3
}
 800a1e2:	e068      	b.n	800a2b6 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d05d      	beq.n	800a2a6 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800a1ea:	4b35      	ldr	r3, [pc, #212]	@ (800a2c0 <_tx_semaphore_get+0x118>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d008      	beq.n	800a204 <_tx_semaphore_get+0x5c>
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f383 8810 	msr	PRIMASK, r3
}
 800a1fc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800a1fe:	230d      	movs	r3, #13
 800a200:	637b      	str	r3, [r7, #52]	@ 0x34
 800a202:	e058      	b.n	800a2b6 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a204:	4b2f      	ldr	r3, [pc, #188]	@ (800a2c4 <_tx_semaphore_get+0x11c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800a20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a20c:	4a2e      	ldr	r2, [pc, #184]	@ (800a2c8 <_tx_semaphore_get+0x120>)
 800a20e:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800a210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a220:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d109      	bne.n	800a240 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a230:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800a232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a236:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800a238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a23c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a23e:	e011      	b.n	800a264 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a248:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a24a:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a250:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a256:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a25c:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a262:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800a26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a270:	2206      	movs	r2, #6
 800a272:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a276:	2201      	movs	r2, #1
 800a278:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a280:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c0 <_tx_semaphore_get+0x118>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	3301      	adds	r3, #1
 800a286:	4a0e      	ldr	r2, [pc, #56]	@ (800a2c0 <_tx_semaphore_get+0x118>)
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f383 8810 	msr	PRIMASK, r3
}
 800a294:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a296:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a298:	f000 fba8 	bl	800a9ec <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800a29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a4:	e007      	b.n	800a2b6 <_tx_semaphore_get+0x10e>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f383 8810 	msr	PRIMASK, r3
}
 800a2b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800a2b2:	230d      	movs	r3, #13
 800a2b4:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800a2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3738      	adds	r7, #56	@ 0x38
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20010924 	.word	0x20010924
 800a2c4:	2001088c 	.word	0x2001088c
 800a2c8:	0800a00d 	.word	0x0800a00d

0800a2cc <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08c      	sub	sp, #48	@ 0x30
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a2d8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a2da:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a2dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2de:	b672      	cpsid	i
    return(int_posture);
 800a2e0:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800a2e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10a      	bne.n	800a306 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	609a      	str	r2, [r3, #8]
 800a2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f383 8810 	msr	PRIMASK, r3
}
 800a304:	e033      	b.n	800a36e <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800a30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30e:	3b01      	subs	r3, #1
 800a310:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800a312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a314:	2b00      	cmp	r3, #0
 800a316:	d103      	bne.n	800a320 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	60da      	str	r2, [r3, #12]
 800a31e:	e00e      	b.n	800a33e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800a320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a324:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a3a      	ldr	r2, [r7, #32]
 800a32a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a330:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	69fa      	ldr	r2, [r7, #28]
 800a336:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	6a3a      	ldr	r2, [r7, #32]
 800a33c:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a342:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a346:	2200      	movs	r2, #0
 800a348:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	2200      	movs	r2, #0
 800a34e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800a352:	4b09      	ldr	r3, [pc, #36]	@ (800a378 <_tx_semaphore_put+0xac>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3301      	adds	r3, #1
 800a358:	4a07      	ldr	r2, [pc, #28]	@ (800a378 <_tx_semaphore_put+0xac>)
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f383 8810 	msr	PRIMASK, r3
}
 800a366:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a368:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a36a:	f000 fa3f 	bl	800a7ec <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3730      	adds	r7, #48	@ 0x30
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20010924 	.word	0x20010924

0800a37c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b092      	sub	sp, #72	@ 0x48
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800a38a:	2300      	movs	r3, #0
 800a38c:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800a38e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a390:	21ef      	movs	r1, #239	@ 0xef
 800a392:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a394:	f001 fc80 	bl	800bc98 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800a398:	22b0      	movs	r2, #176	@ 0xb0
 800a39a:	2100      	movs	r1, #0
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f001 fc7b 	bl	800bc98 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3b8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3be:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a3d2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a3d8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800a3e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800a3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3ec:	4413      	add	r3, r2
 800a3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3f4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800a3f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d007      	beq.n	800a40e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800a40c:	e006      	b.n	800a41c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a412:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a418:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2203      	movs	r2, #3
 800a420:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	4a48      	ldr	r2, [pc, #288]	@ (800a548 <_tx_thread_create+0x1cc>)
 800a426:	655a      	str	r2, [r3, #84]	@ 0x54
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800a42e:	4947      	ldr	r1, [pc, #284]	@ (800a54c <_tx_thread_create+0x1d0>)
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7f5 ff95 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a436:	f3ef 8310 	mrs	r3, PRIMASK
 800a43a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a43e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a440:	b672      	cpsid	i
    return(int_posture);
 800a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800a444:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4a41      	ldr	r2, [pc, #260]	@ (800a550 <_tx_thread_create+0x1d4>)
 800a44a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800a44c:	4b41      	ldr	r3, [pc, #260]	@ (800a554 <_tx_thread_create+0x1d8>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10b      	bne.n	800a46c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800a454:	4a40      	ldr	r2, [pc, #256]	@ (800a558 <_tx_thread_create+0x1dc>)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800a46a:	e016      	b.n	800a49a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800a46c:	4b3a      	ldr	r3, [pc, #232]	@ (800a558 <_tx_thread_create+0x1dc>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800a472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a478:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800a47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800a482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a48e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800a49a:	4b2e      	ldr	r3, [pc, #184]	@ (800a554 <_tx_thread_create+0x1d8>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	4a2c      	ldr	r2, [pc, #176]	@ (800a554 <_tx_thread_create+0x1d8>)
 800a4a2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a4a4:	4b2d      	ldr	r3, [pc, #180]	@ (800a55c <_tx_thread_create+0x1e0>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	4a2c      	ldr	r2, [pc, #176]	@ (800a55c <_tx_thread_create+0x1e0>)
 800a4ac:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800a4ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d129      	bne.n	800a508 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a4b4:	f3ef 8305 	mrs	r3, IPSR
 800a4b8:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800a4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800a4bc:	4b28      	ldr	r3, [pc, #160]	@ (800a560 <_tx_thread_create+0x1e4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a4c6:	d30d      	bcc.n	800a4e4 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800a4c8:	4b26      	ldr	r3, [pc, #152]	@ (800a564 <_tx_thread_create+0x1e8>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800a4ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d009      	beq.n	800a4e8 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800a4d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800a4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a4e2:	e001      	b.n	800a4e8 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	f383 8810 	msr	PRIMASK, r3
}
 800a4f2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 f979 	bl	800a7ec <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800a4fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01e      	beq.n	800a53e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800a500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a504:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a506:	e01a      	b.n	800a53e <_tx_thread_create+0x1c2>
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f383 8810 	msr	PRIMASK, r3
}
 800a512:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a514:	f3ef 8310 	mrs	r3, PRIMASK
 800a518:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a51a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a51c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a51e:	b672      	cpsid	i
    return(int_posture);
 800a520:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800a522:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800a524:	4b0d      	ldr	r3, [pc, #52]	@ (800a55c <_tx_thread_create+0x1e0>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3b01      	subs	r3, #1
 800a52a:	4a0c      	ldr	r2, [pc, #48]	@ (800a55c <_tx_thread_create+0x1e0>)
 800a52c:	6013      	str	r3, [r2, #0]
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	f383 8810 	msr	PRIMASK, r3
}
 800a538:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a53a:	f000 f91d 	bl	800a778 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3748      	adds	r7, #72	@ 0x48
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	0800acc1 	.word	0x0800acc1
 800a54c:	0800a5e1 	.word	0x0800a5e1
 800a550:	54485244 	.word	0x54485244
 800a554:	20010898 	.word	0x20010898
 800a558:	20010894 	.word	0x20010894
 800a55c:	20010924 	.word	0x20010924
 800a560:	2000004c 	.word	0x2000004c
 800a564:	20010890 	.word	0x20010890

0800a568 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800a56c:	4b12      	ldr	r3, [pc, #72]	@ (800a5b8 <_tx_thread_initialize+0x50>)
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800a572:	4b12      	ldr	r3, [pc, #72]	@ (800a5bc <_tx_thread_initialize+0x54>)
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800a578:	4b11      	ldr	r3, [pc, #68]	@ (800a5c0 <_tx_thread_initialize+0x58>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a57e:	4b11      	ldr	r3, [pc, #68]	@ (800a5c4 <_tx_thread_initialize+0x5c>)
 800a580:	2220      	movs	r2, #32
 800a582:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800a584:	2280      	movs	r2, #128	@ 0x80
 800a586:	2100      	movs	r1, #0
 800a588:	480f      	ldr	r0, [pc, #60]	@ (800a5c8 <_tx_thread_initialize+0x60>)
 800a58a:	f001 fb85 	bl	800bc98 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800a58e:	4b0f      	ldr	r3, [pc, #60]	@ (800a5cc <_tx_thread_initialize+0x64>)
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800a594:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d0 <_tx_thread_initialize+0x68>)
 800a596:	2200      	movs	r2, #0
 800a598:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800a59a:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d4 <_tx_thread_initialize+0x6c>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800a5a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a5d8 <_tx_thread_initialize+0x70>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800a5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5dc <_tx_thread_initialize+0x74>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800a5ae:	4a0b      	ldr	r2, [pc, #44]	@ (800a5dc <_tx_thread_initialize+0x74>)
 800a5b0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800a5b2:	bf00      	nop
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	2001088c 	.word	0x2001088c
 800a5bc:	20010890 	.word	0x20010890
 800a5c0:	2001089c 	.word	0x2001089c
 800a5c4:	200108a0 	.word	0x200108a0
 800a5c8:	200108a4 	.word	0x200108a4
 800a5cc:	20010894 	.word	0x20010894
 800a5d0:	20010898 	.word	0x20010898
 800a5d4:	20010924 	.word	0x20010924
 800a5d8:	20010928 	.word	0x20010928
 800a5dc:	2001092c 	.word	0x2001092c

0800a5e0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a5e6:	4b21      	ldr	r3, [pc, #132]	@ (800a66c <_tx_thread_shell_entry+0x8c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5f0:	69fa      	ldr	r2, [r7, #28]
 800a5f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800a5f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a670 <_tx_thread_shell_entry+0x90>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800a600:	4b1b      	ldr	r3, [pc, #108]	@ (800a670 <_tx_thread_shell_entry+0x90>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	69f8      	ldr	r0, [r7, #28]
 800a606:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a608:	f3ef 8310 	mrs	r3, PRIMASK
 800a60c:	607b      	str	r3, [r7, #4]
    return(posture);
 800a60e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800a610:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a612:	b672      	cpsid	i
    return(int_posture);
 800a614:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800a616:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	2201      	movs	r2, #1
 800a61c:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	2201      	movs	r2, #1
 800a622:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	2200      	movs	r2, #0
 800a628:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a62a:	4b12      	ldr	r3, [pc, #72]	@ (800a674 <_tx_thread_shell_entry+0x94>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3301      	adds	r3, #1
 800a630:	4a10      	ldr	r2, [pc, #64]	@ (800a674 <_tx_thread_shell_entry+0x94>)
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f383 8810 	msr	PRIMASK, r3
}
 800a63e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800a640:	f3ef 8314 	mrs	r3, CONTROL
 800a644:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800a646:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800a648:	617b      	str	r3, [r7, #20]
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f023 0304 	bic.w	r3, r3, #4
 800a650:	617b      	str	r3, [r7, #20]
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	f383 8814 	msr	CONTROL, r3
}
 800a65c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800a65e:	69f8      	ldr	r0, [r7, #28]
 800a660:	f000 f9c4 	bl	800a9ec <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800a664:	bf00      	nop
 800a666:	3720      	adds	r7, #32
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	2001088c 	.word	0x2001088c
 800a670:	20010928 	.word	0x20010928
 800a674:	20010924 	.word	0x20010924

0800a678 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08e      	sub	sp, #56	@ 0x38
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a680:	f3ef 8310 	mrs	r3, PRIMASK
 800a684:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800a686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800a688:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a68a:	b672      	cpsid	i
    return(int_posture);
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800a68e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a690:	4b35      	ldr	r3, [pc, #212]	@ (800a768 <_tx_thread_sleep+0xf0>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800a696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d108      	bne.n	800a6ae <_tx_thread_sleep+0x36>
 800a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	f383 8810 	msr	PRIMASK, r3
}
 800a6a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800a6a8:	2313      	movs	r3, #19
 800a6aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ac:	e056      	b.n	800a75c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a6ae:	f3ef 8305 	mrs	r3, IPSR
 800a6b2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800a6b4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a6b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a76c <_tx_thread_sleep+0xf4>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d008      	beq.n	800a6d2 <_tx_thread_sleep+0x5a>
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	f383 8810 	msr	PRIMASK, r3
}
 800a6ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800a6cc:	2313      	movs	r3, #19
 800a6ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6d0:	e044      	b.n	800a75c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800a6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d4:	4a26      	ldr	r2, [pc, #152]	@ (800a770 <_tx_thread_sleep+0xf8>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d108      	bne.n	800a6ec <_tx_thread_sleep+0x74>
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f383 8810 	msr	PRIMASK, r3
}
 800a6e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800a6e6:	2313      	movs	r3, #19
 800a6e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ea:	e037      	b.n	800a75c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d108      	bne.n	800a704 <_tx_thread_sleep+0x8c>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f383 8810 	msr	PRIMASK, r3
}
 800a6fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800a6fe:	2300      	movs	r3, #0
 800a700:	637b      	str	r3, [r7, #52]	@ 0x34
 800a702:	e02b      	b.n	800a75c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800a704:	4b1b      	ldr	r3, [pc, #108]	@ (800a774 <_tx_thread_sleep+0xfc>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d008      	beq.n	800a71e <_tx_thread_sleep+0xa6>
 800a70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f383 8810 	msr	PRIMASK, r3
}
 800a716:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800a718:	2313      	movs	r3, #19
 800a71a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a71c:	e01e      	b.n	800a75c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800a71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a720:	2204      	movs	r2, #4
 800a722:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a726:	2201      	movs	r2, #1
 800a728:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800a72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72c:	2200      	movs	r2, #0
 800a72e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800a732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a738:	4b0e      	ldr	r3, [pc, #56]	@ (800a774 <_tx_thread_sleep+0xfc>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3301      	adds	r3, #1
 800a73e:	4a0d      	ldr	r2, [pc, #52]	@ (800a774 <_tx_thread_sleep+0xfc>)
 800a740:	6013      	str	r3, [r2, #0]
 800a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a744:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	f383 8810 	msr	PRIMASK, r3
}
 800a74c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a74e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a750:	f000 f94c 	bl	800a9ec <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800a754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a75a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800a75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3738      	adds	r7, #56	@ 0x38
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	2001088c 	.word	0x2001088c
 800a76c:	2000004c 	.word	0x2000004c
 800a770:	200109d4 	.word	0x200109d4
 800a774:	20010924 	.word	0x20010924

0800a778 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800a778:	b480      	push	{r7}
 800a77a:	b089      	sub	sp, #36	@ 0x24
 800a77c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a77e:	4b17      	ldr	r3, [pc, #92]	@ (800a7dc <_tx_thread_system_preempt_check+0x64>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d121      	bne.n	800a7ce <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800a78a:	4b15      	ldr	r3, [pc, #84]	@ (800a7e0 <_tx_thread_system_preempt_check+0x68>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800a790:	4b14      	ldr	r3, [pc, #80]	@ (800a7e4 <_tx_thread_system_preempt_check+0x6c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d017      	beq.n	800a7ce <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a79e:	4b12      	ldr	r3, [pc, #72]	@ (800a7e8 <_tx_thread_system_preempt_check+0x70>)
 800a7a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7a4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a7a6:	f3ef 8305 	mrs	r3, IPSR
 800a7aa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a7ac:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10c      	bne.n	800a7cc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a7b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a7b6:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800a7ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a7bc:	b662      	cpsie	i
}
 800a7be:	bf00      	nop
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f383 8810 	msr	PRIMASK, r3
}
 800a7ca:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800a7cc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800a7ce:	bf00      	nop
 800a7d0:	3724      	adds	r7, #36	@ 0x24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20010924 	.word	0x20010924
 800a7e0:	2001088c 	.word	0x2001088c
 800a7e4:	20010890 	.word	0x20010890
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b096      	sub	sp, #88	@ 0x58
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a7f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a7f8:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800a7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800a7fc:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800a7fe:	b672      	cpsid	i
    return(int_posture);
 800a800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800a802:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	334c      	adds	r3, #76	@ 0x4c
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fcf1 	bl	800b1f8 <_tx_timer_system_deactivate>
 800a816:	e002      	b.n	800a81e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800a81e:	4b6c      	ldr	r3, [pc, #432]	@ (800a9d0 <_tx_thread_system_resume+0x1e4>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3b01      	subs	r3, #1
 800a824:	4a6a      	ldr	r2, [pc, #424]	@ (800a9d0 <_tx_thread_system_resume+0x1e4>)
 800a826:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f040 8083 	bne.w	800a938 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 8097 	beq.w	800a96a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a840:	2b00      	cmp	r3, #0
 800a842:	d172      	bne.n	800a92a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84e:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800a850:	4a60      	ldr	r2, [pc, #384]	@ (800a9d4 <_tx_thread_system_resume+0x1e8>)
 800a852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a858:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800a85a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d154      	bne.n	800a90a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800a860:	495c      	ldr	r1, [pc, #368]	@ (800a9d4 <_tx_thread_system_resume+0x1e8>)
 800a862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800a876:	2201      	movs	r2, #1
 800a878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a87a:	fa02 f303 	lsl.w	r3, r2, r3
 800a87e:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800a880:	4b55      	ldr	r3, [pc, #340]	@ (800a9d8 <_tx_thread_system_resume+0x1ec>)
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a886:	4313      	orrs	r3, r2
 800a888:	4a53      	ldr	r2, [pc, #332]	@ (800a9d8 <_tx_thread_system_resume+0x1ec>)
 800a88a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800a88c:	4b53      	ldr	r3, [pc, #332]	@ (800a9dc <_tx_thread_system_resume+0x1f0>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a892:	429a      	cmp	r2, r3
 800a894:	d269      	bcs.n	800a96a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800a896:	4a51      	ldr	r2, [pc, #324]	@ (800a9dc <_tx_thread_system_resume+0x1f0>)
 800a898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a89a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800a89c:	4b50      	ldr	r3, [pc, #320]	@ (800a9e0 <_tx_thread_system_resume+0x1f4>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800a8a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d103      	bne.n	800a8b0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800a8a8:	4a4d      	ldr	r2, [pc, #308]	@ (800a9e0 <_tx_thread_system_resume+0x1f4>)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	e05c      	b.n	800a96a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800a8b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d257      	bcs.n	800a96a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800a8ba:	4a49      	ldr	r2, [pc, #292]	@ (800a9e0 <_tx_thread_system_resume+0x1f4>)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c6:	f383 8810 	msr	PRIMASK, r3
}
 800a8ca:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a8cc:	4b40      	ldr	r3, [pc, #256]	@ (800a9d0 <_tx_thread_system_resume+0x1e4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800a8d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d174      	bne.n	800a9c2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a8d8:	4b42      	ldr	r3, [pc, #264]	@ (800a9e4 <_tx_thread_system_resume+0x1f8>)
 800a8da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8de:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a8e0:	f3ef 8305 	mrs	r3, IPSR
 800a8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800a8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10c      	bne.n	800a906 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a8f0:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800a8f4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a8f6:	b662      	cpsie	i
}
 800a8f8:	bf00      	nop
 800a8fa:	6a3b      	ldr	r3, [r7, #32]
 800a8fc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	f383 8810 	msr	PRIMASK, r3
}
 800a904:	bf00      	nop
}
 800a906:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800a908:	e05b      	b.n	800a9c2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800a90a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90e:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800a910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800a916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a920:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a926:	621a      	str	r2, [r3, #32]
 800a928:	e01f      	b.n	800a96a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2203      	movs	r2, #3
 800a934:	631a      	str	r2, [r3, #48]	@ 0x30
 800a936:	e018      	b.n	800a96a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d014      	beq.n	800a96a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a944:	2b02      	cmp	r3, #2
 800a946:	d010      	beq.n	800a96a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d106      	bne.n	800a95e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a95c:	e005      	b.n	800a96a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2203      	movs	r2, #3
 800a968:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800a96a:	4b1f      	ldr	r3, [pc, #124]	@ (800a9e8 <_tx_thread_system_resume+0x1fc>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a972:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	f383 8810 	msr	PRIMASK, r3
}
 800a97a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800a97c:	4b18      	ldr	r3, [pc, #96]	@ (800a9e0 <_tx_thread_system_resume+0x1f4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a982:	429a      	cmp	r2, r3
 800a984:	d020      	beq.n	800a9c8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a986:	4b12      	ldr	r3, [pc, #72]	@ (800a9d0 <_tx_thread_system_resume+0x1e4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800a98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d11a      	bne.n	800a9c8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a992:	4b14      	ldr	r3, [pc, #80]	@ (800a9e4 <_tx_thread_system_resume+0x1f8>)
 800a994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a998:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a99a:	f3ef 8305 	mrs	r3, IPSR
 800a99e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a9a0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10f      	bne.n	800a9c6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9aa:	613b      	str	r3, [r7, #16]
    return(posture);
 800a9ac:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800a9ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a9b0:	b662      	cpsie	i
}
 800a9b2:	bf00      	nop
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f383 8810 	msr	PRIMASK, r3
}
 800a9be:	bf00      	nop
}
 800a9c0:	e001      	b.n	800a9c6 <_tx_thread_system_resume+0x1da>
                                return;
 800a9c2:	bf00      	nop
 800a9c4:	e000      	b.n	800a9c8 <_tx_thread_system_resume+0x1dc>
 800a9c6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800a9c8:	3758      	adds	r7, #88	@ 0x58
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20010924 	.word	0x20010924
 800a9d4:	200108a4 	.word	0x200108a4
 800a9d8:	2001089c 	.word	0x2001089c
 800a9dc:	200108a0 	.word	0x200108a0
 800a9e0:	20010890 	.word	0x20010890
 800a9e4:	e000ed04 	.word	0xe000ed04
 800a9e8:	2001088c 	.word	0x2001088c

0800a9ec <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b09e      	sub	sp, #120	@ 0x78
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800a9f4:	4b81      	ldr	r3, [pc, #516]	@ (800abfc <_tx_thread_system_suspend+0x210>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a9fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800aa00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800aa02:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa04:	b672      	cpsid	i
    return(int_posture);
 800aa06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800aa08:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d112      	bne.n	800aa38 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa16:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800aa18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d008      	beq.n	800aa30 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800aa1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa24:	d004      	beq.n	800aa30 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	334c      	adds	r3, #76	@ 0x4c
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fb82 	bl	800b134 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	4a72      	ldr	r2, [pc, #456]	@ (800ac00 <_tx_thread_system_suspend+0x214>)
 800aa36:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800aa38:	4b72      	ldr	r3, [pc, #456]	@ (800ac04 <_tx_thread_system_suspend+0x218>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	4a71      	ldr	r2, [pc, #452]	@ (800ac04 <_tx_thread_system_suspend+0x218>)
 800aa40:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	f040 80a6 	bne.w	800ab98 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa56:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800aa5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d015      	beq.n	800aa92 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6a:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800aa6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa70:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800aa72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa76:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800aa78:	4a63      	ldr	r2, [pc, #396]	@ (800ac08 <_tx_thread_system_suspend+0x21c>)
 800aa7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d157      	bne.n	800ab36 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800aa86:	4960      	ldr	r1, [pc, #384]	@ (800ac08 <_tx_thread_system_suspend+0x21c>)
 800aa88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aa90:	e051      	b.n	800ab36 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800aa92:	4a5d      	ldr	r2, [pc, #372]	@ (800ac08 <_tx_thread_system_suspend+0x21c>)
 800aa94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa96:	2100      	movs	r1, #0
 800aa98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aaa0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa4:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800aaa6:	4b59      	ldr	r3, [pc, #356]	@ (800ac0c <_tx_thread_system_suspend+0x220>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aaac:	43db      	mvns	r3, r3
 800aaae:	4013      	ands	r3, r2
 800aab0:	4a56      	ldr	r2, [pc, #344]	@ (800ac0c <_tx_thread_system_suspend+0x220>)
 800aab2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800aab4:	2300      	movs	r3, #0
 800aab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800aab8:	4b54      	ldr	r3, [pc, #336]	@ (800ac0c <_tx_thread_system_suspend+0x220>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800aabe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d12b      	bne.n	800ab1c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800aac4:	4b52      	ldr	r3, [pc, #328]	@ (800ac10 <_tx_thread_system_suspend+0x224>)
 800aac6:	2220      	movs	r2, #32
 800aac8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800aaca:	4b52      	ldr	r3, [pc, #328]	@ (800ac14 <_tx_thread_system_suspend+0x228>)
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aad2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aad6:	f383 8810 	msr	PRIMASK, r3
}
 800aada:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800aadc:	4b49      	ldr	r3, [pc, #292]	@ (800ac04 <_tx_thread_system_suspend+0x218>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800aae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f040 8081 	bne.w	800abec <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800aaea:	4b4b      	ldr	r3, [pc, #300]	@ (800ac18 <_tx_thread_system_suspend+0x22c>)
 800aaec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaf0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aaf2:	f3ef 8305 	mrs	r3, IPSR
 800aaf6:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800aaf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10c      	bne.n	800ab18 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aafe:	f3ef 8310 	mrs	r3, PRIMASK
 800ab02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800ab04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800ab06:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800ab08:	b662      	cpsie	i
}
 800ab0a:	bf00      	nop
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0e:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab12:	f383 8810 	msr	PRIMASK, r3
}
 800ab16:	bf00      	nop
}
 800ab18:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800ab1a:	e067      	b.n	800abec <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800ab1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab1e:	fa93 f3a3 	rbit	r3, r3
 800ab22:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab26:	fab3 f383 	clz	r3, r3
 800ab2a:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800ab2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab30:	4413      	add	r3, r2
 800ab32:	4a37      	ldr	r2, [pc, #220]	@ (800ac10 <_tx_thread_system_suspend+0x224>)
 800ab34:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800ab36:	4b37      	ldr	r3, [pc, #220]	@ (800ac14 <_tx_thread_system_suspend+0x228>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d12b      	bne.n	800ab98 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ab40:	4b33      	ldr	r3, [pc, #204]	@ (800ac10 <_tx_thread_system_suspend+0x224>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a30      	ldr	r2, [pc, #192]	@ (800ac08 <_tx_thread_system_suspend+0x21c>)
 800ab46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab4a:	4a32      	ldr	r2, [pc, #200]	@ (800ac14 <_tx_thread_system_suspend+0x228>)
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab50:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab54:	f383 8810 	msr	PRIMASK, r3
}
 800ab58:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ab5a:	4b2a      	ldr	r3, [pc, #168]	@ (800ac04 <_tx_thread_system_suspend+0x218>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800ab60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d144      	bne.n	800abf0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ab66:	4b2c      	ldr	r3, [pc, #176]	@ (800ac18 <_tx_thread_system_suspend+0x22c>)
 800ab68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab6c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ab6e:	f3ef 8305 	mrs	r3, IPSR
 800ab72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800ab74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10c      	bne.n	800ab94 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab7a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800ab80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800ab82:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800ab84:	b662      	cpsie	i
}
 800ab86:	bf00      	nop
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	f383 8810 	msr	PRIMASK, r3
}
 800ab92:	bf00      	nop
}
 800ab94:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800ab96:	e02b      	b.n	800abf0 <_tx_thread_system_suspend+0x204>
 800ab98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab9a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	f383 8810 	msr	PRIMASK, r3
}
 800aba2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800aba4:	4b1b      	ldr	r3, [pc, #108]	@ (800ac14 <_tx_thread_system_suspend+0x228>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800abaa:	429a      	cmp	r2, r3
 800abac:	d022      	beq.n	800abf4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800abae:	4b15      	ldr	r3, [pc, #84]	@ (800ac04 <_tx_thread_system_suspend+0x218>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800abb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d11c      	bne.n	800abf4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800abba:	4b17      	ldr	r3, [pc, #92]	@ (800ac18 <_tx_thread_system_suspend+0x22c>)
 800abbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abc0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800abc2:	f3ef 8305 	mrs	r3, IPSR
 800abc6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800abc8:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10c      	bne.n	800abe8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800abce:	f3ef 8310 	mrs	r3, PRIMASK
 800abd2:	617b      	str	r3, [r7, #20]
    return(posture);
 800abd4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800abd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800abd8:	b662      	cpsie	i
}
 800abda:	bf00      	nop
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f383 8810 	msr	PRIMASK, r3
}
 800abe6:	bf00      	nop
}
 800abe8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800abea:	e003      	b.n	800abf4 <_tx_thread_system_suspend+0x208>
                return;
 800abec:	bf00      	nop
 800abee:	e002      	b.n	800abf6 <_tx_thread_system_suspend+0x20a>
            return;
 800abf0:	bf00      	nop
 800abf2:	e000      	b.n	800abf6 <_tx_thread_system_suspend+0x20a>
    return;
 800abf4:	bf00      	nop
}
 800abf6:	3778      	adds	r7, #120	@ 0x78
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	2001088c 	.word	0x2001088c
 800ac00:	20010e90 	.word	0x20010e90
 800ac04:	20010924 	.word	0x20010924
 800ac08:	200108a4 	.word	0x200108a4
 800ac0c:	2001089c 	.word	0x2001089c
 800ac10:	200108a0 	.word	0x200108a0
 800ac14:	20010890 	.word	0x20010890
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ac22:	4b21      	ldr	r3, [pc, #132]	@ (800aca8 <_tx_thread_time_slice+0x8c>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac28:	f3ef 8310 	mrs	r3, PRIMASK
 800ac2c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800ac30:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac32:	b672      	cpsid	i
    return(int_posture);
 800ac34:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800ac36:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800ac38:	4b1c      	ldr	r3, [pc, #112]	@ (800acac <_tx_thread_time_slice+0x90>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d024      	beq.n	800ac8e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d120      	bne.n	800ac8e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	69da      	ldr	r2, [r3, #28]
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	4a15      	ldr	r2, [pc, #84]	@ (800acb0 <_tx_thread_time_slice+0x94>)
 800ac5a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d013      	beq.n	800ac8e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d10d      	bne.n	800ac8e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	6a12      	ldr	r2, [r2, #32]
 800ac7a:	490e      	ldr	r1, [pc, #56]	@ (800acb4 <_tx_thread_time_slice+0x98>)
 800ac7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ac80:	4b0d      	ldr	r3, [pc, #52]	@ (800acb8 <_tx_thread_time_slice+0x9c>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a0b      	ldr	r2, [pc, #44]	@ (800acb4 <_tx_thread_time_slice+0x98>)
 800ac86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac8a:	4a0c      	ldr	r2, [pc, #48]	@ (800acbc <_tx_thread_time_slice+0xa0>)
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f383 8810 	msr	PRIMASK, r3
}
 800ac98:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800ac9a:	bf00      	nop
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	2001088c 	.word	0x2001088c
 800acac:	20010934 	.word	0x20010934
 800acb0:	20010e90 	.word	0x20010e90
 800acb4:	200108a4 	.word	0x200108a4
 800acb8:	200108a0 	.word	0x200108a0
 800acbc:	20010890 	.word	0x20010890

0800acc0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	@ 0x28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800accc:	f3ef 8310 	mrs	r3, PRIMASK
 800acd0:	617b      	str	r3, [r7, #20]
    return(posture);
 800acd2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800acd4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800acd6:	b672      	cpsid	i
    return(int_posture);
 800acd8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800acda:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800acdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	d10e      	bne.n	800ad02 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800ace4:	4b13      	ldr	r3, [pc, #76]	@ (800ad34 <_tx_thread_timeout+0x74>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3301      	adds	r3, #1
 800acea:	4a12      	ldr	r2, [pc, #72]	@ (800ad34 <_tx_thread_timeout+0x74>)
 800acec:	6013      	str	r3, [r2, #0]
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f383 8810 	msr	PRIMASK, r3
}
 800acf8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800acfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800acfc:	f7ff fd76 	bl	800a7ec <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800ad00:	e013      	b.n	800ad2a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800ad02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad06:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800ad08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ad0e:	61bb      	str	r3, [r7, #24]
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	f383 8810 	msr	PRIMASK, r3
}
 800ad1a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	69b9      	ldr	r1, [r7, #24]
 800ad26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad28:	4798      	blx	r3
}
 800ad2a:	bf00      	nop
 800ad2c:	3728      	adds	r7, #40	@ 0x28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20010924 	.word	0x20010924

0800ad38 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b088      	sub	sp, #32
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad40:	f3ef 8310 	mrs	r3, PRIMASK
 800ad44:	617b      	str	r3, [r7, #20]
    return(posture);
 800ad46:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ad48:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad4a:	b672      	cpsid	i
    return(int_posture);
 800ad4c:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800ad4e:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800ad58:	2317      	movs	r3, #23
 800ad5a:	61fb      	str	r3, [r7, #28]
 800ad5c:	e00d      	b.n	800ad7a <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d102      	bne.n	800ad6c <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800ad66:	2317      	movs	r3, #23
 800ad68:	61fb      	str	r3, [r7, #28]
 800ad6a:	e006      	b.n	800ad7a <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3308      	adds	r3, #8
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 f9df 	bl	800b134 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800ad76:	2300      	movs	r3, #0
 800ad78:	61fb      	str	r3, [r7, #28]
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f383 8810 	msr	PRIMASK, r3
}
 800ad84:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800ad86:	69fb      	ldr	r3, [r7, #28]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3720      	adds	r7, #32
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b089      	sub	sp, #36	@ 0x24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad9c:	f3ef 8310 	mrs	r3, PRIMASK
 800ada0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ada2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ada4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ada6:	b672      	cpsid	i
    return(int_posture);
 800ada8:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800adaa:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d105      	bne.n	800adc0 <_tx_timer_change+0x30>
    {

        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	60da      	str	r2, [r3, #12]
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f383 8810 	msr	PRIMASK, r3
}
 800adca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3724      	adds	r7, #36	@ 0x24
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
	...

0800addc <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08a      	sub	sp, #40	@ 0x28
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800adea:	222c      	movs	r2, #44	@ 0x2c
 800adec:	2100      	movs	r1, #0
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 ff52 	bl	800bc98 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adfe:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae04:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae12:	f3ef 8310 	mrs	r3, PRIMASK
 800ae16:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ae18:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ae1a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae1c:	b672      	cpsid	i
    return(int_posture);
 800ae1e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800ae20:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	4a1c      	ldr	r2, [pc, #112]	@ (800ae98 <_tx_timer_create+0xbc>)
 800ae26:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800ae28:	4b1c      	ldr	r3, [pc, #112]	@ (800ae9c <_tx_timer_create+0xc0>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d109      	bne.n	800ae44 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800ae30:	4a1b      	ldr	r2, [pc, #108]	@ (800aea0 <_tx_timer_create+0xc4>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	625a      	str	r2, [r3, #36]	@ 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae42:	e011      	b.n	800ae68 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800ae44:	4b16      	ldr	r3, [pc, #88]	@ (800aea0 <_tx_timer_create+0xc4>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4e:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	69fa      	ldr	r2, [r7, #28]
 800ae60:	629a      	str	r2, [r3, #40]	@ 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6a3a      	ldr	r2, [r7, #32]
 800ae66:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800ae68:	4b0c      	ldr	r3, [pc, #48]	@ (800ae9c <_tx_timer_create+0xc0>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	4a0b      	ldr	r2, [pc, #44]	@ (800ae9c <_tx_timer_create+0xc0>)
 800ae70:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800ae72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d104      	bne.n	800ae82 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 f959 	bl	800b134 <_tx_timer_system_activate>
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	f383 8810 	msr	PRIMASK, r3
}
 800ae8c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3728      	adds	r7, #40	@ 0x28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	4154494d 	.word	0x4154494d
 800ae9c:	200109cc 	.word	0x200109cc
 800aea0:	200109c8 	.word	0x200109c8

0800aea4 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b08d      	sub	sp, #52	@ 0x34
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3308      	adds	r3, #8
 800aeb0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aeb2:	f3ef 8310 	mrs	r3, PRIMASK
 800aeb6:	613b      	str	r3, [r7, #16]
    return(posture);
 800aeb8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800aeba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aebc:	b672      	cpsid	i
    return(int_posture);
 800aebe:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 800aec0:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 800aec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d07f      	beq.n	800afce <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800aece:	2300      	movs	r3, #0
 800aed0:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 800aed2:	4b45      	ldr	r3, [pc, #276]	@ (800afe8 <_tx_timer_deactivate+0x144>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	69fa      	ldr	r2, [r7, #28]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d306      	bcc.n	800aeea <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800aedc:	4b43      	ldr	r3, [pc, #268]	@ (800afec <_tx_timer_deactivate+0x148>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	69fa      	ldr	r2, [r7, #28]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d201      	bcs.n	800aeea <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 800aee6:	2301      	movs	r3, #1
 800aee8:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800aeea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d12e      	bne.n	800af4e <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 800aef0:	4b3f      	ldr	r3, [pc, #252]	@ (800aff0 <_tx_timer_deactivate+0x14c>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	69fa      	ldr	r2, [r7, #28]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d307      	bcc.n	800af0a <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800aefa:	4b3d      	ldr	r3, [pc, #244]	@ (800aff0 <_tx_timer_deactivate+0x14c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	69fa      	ldr	r2, [r7, #28]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	109b      	asrs	r3, r3, #2
 800af04:	3301      	adds	r3, #1
 800af06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af08:	e010      	b.n	800af2c <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800af0a:	4b37      	ldr	r3, [pc, #220]	@ (800afe8 <_tx_timer_deactivate+0x144>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	69fa      	ldr	r2, [r7, #28]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	109b      	asrs	r3, r3, #2
 800af14:	62fb      	str	r3, [r7, #44]	@ 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800af16:	4b35      	ldr	r3, [pc, #212]	@ (800afec <_tx_timer_deactivate+0x148>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	4b35      	ldr	r3, [pc, #212]	@ (800aff0 <_tx_timer_deactivate+0x14c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	109b      	asrs	r3, r3, #2
 800af22:	461a      	mov	r2, r3
 800af24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af26:	4413      	add	r3, r2
 800af28:	3301      	adds	r3, #1
 800af2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800af2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b20      	cmp	r3, #32
 800af32:	d908      	bls.n	800af46 <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800af34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3a:	4413      	add	r3, r2
 800af3c:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 800af40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	e01c      	b.n	800af80 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 800af46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	e018      	b.n	800af80 <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800af4e:	4b29      	ldr	r3, [pc, #164]	@ (800aff4 <_tx_timer_deactivate+0x150>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af54:	429a      	cmp	r2, r3
 800af56:	d00f      	beq.n	800af78 <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800af58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b20      	cmp	r3, #32
 800af5e:	d906      	bls.n	800af6e <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800af60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 800af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	e008      	b.n	800af80 <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800af6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af70:	685a      	ldr	r2, [r3, #4]
 800af72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	e003      	b.n	800af80 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800af78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 800af86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d108      	bne.n	800afa0 <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af94:	429a      	cmp	r2, r3
 800af96:	d117      	bne.n	800afc8 <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	2200      	movs	r2, #0
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	e013      	b.n	800afc8 <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 800afa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	69ba      	ldr	r2, [r7, #24]
 800afb0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afb8:	429a      	cmp	r2, r3
 800afba:	d105      	bne.n	800afc8 <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	69fa      	ldr	r2, [r7, #28]
 800afc0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800afc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afca:	2200      	movs	r2, #0
 800afcc:	619a      	str	r2, [r3, #24]
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	f383 8810 	msr	PRIMASK, r3
}
 800afd8:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3734      	adds	r7, #52	@ 0x34
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	200109b8 	.word	0x200109b8
 800afec:	200109bc 	.word	0x200109bc
 800aff0:	200109c0 	.word	0x200109c0
 800aff4:	200109d0 	.word	0x200109d0

0800aff8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800affe:	f3ef 8310 	mrs	r3, PRIMASK
 800b002:	607b      	str	r3, [r7, #4]
    return(posture);
 800b004:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b006:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b008:	b672      	cpsid	i
    return(int_posture);
 800b00a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b00c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b00e:	4b09      	ldr	r3, [pc, #36]	@ (800b034 <_tx_timer_expiration_process+0x3c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	3301      	adds	r3, #1
 800b014:	4a07      	ldr	r2, [pc, #28]	@ (800b034 <_tx_timer_expiration_process+0x3c>)
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	f383 8810 	msr	PRIMASK, r3
}
 800b022:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b024:	4804      	ldr	r0, [pc, #16]	@ (800b038 <_tx_timer_expiration_process+0x40>)
 800b026:	f7ff fbe1 	bl	800a7ec <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b02a:	bf00      	nop
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20010924 	.word	0x20010924
 800b038:	200109d4 	.word	0x200109d4

0800b03c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800b03c:	b590      	push	{r4, r7, lr}
 800b03e:	b089      	sub	sp, #36	@ 0x24
 800b040:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800b042:	4b28      	ldr	r3, [pc, #160]	@ (800b0e4 <_tx_timer_initialize+0xa8>)
 800b044:	2200      	movs	r2, #0
 800b046:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800b048:	4b27      	ldr	r3, [pc, #156]	@ (800b0e8 <_tx_timer_initialize+0xac>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b04e:	4b27      	ldr	r3, [pc, #156]	@ (800b0ec <_tx_timer_initialize+0xb0>)
 800b050:	2200      	movs	r2, #0
 800b052:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800b054:	4b26      	ldr	r3, [pc, #152]	@ (800b0f0 <_tx_timer_initialize+0xb4>)
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800b05a:	4b26      	ldr	r3, [pc, #152]	@ (800b0f4 <_tx_timer_initialize+0xb8>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800b060:	2280      	movs	r2, #128	@ 0x80
 800b062:	2100      	movs	r1, #0
 800b064:	4824      	ldr	r0, [pc, #144]	@ (800b0f8 <_tx_timer_initialize+0xbc>)
 800b066:	f000 fe17 	bl	800bc98 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800b06a:	4b24      	ldr	r3, [pc, #144]	@ (800b0fc <_tx_timer_initialize+0xc0>)
 800b06c:	4a22      	ldr	r2, [pc, #136]	@ (800b0f8 <_tx_timer_initialize+0xbc>)
 800b06e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800b070:	4b23      	ldr	r3, [pc, #140]	@ (800b100 <_tx_timer_initialize+0xc4>)
 800b072:	4a21      	ldr	r2, [pc, #132]	@ (800b0f8 <_tx_timer_initialize+0xbc>)
 800b074:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800b076:	4b23      	ldr	r3, [pc, #140]	@ (800b104 <_tx_timer_initialize+0xc8>)
 800b078:	4a23      	ldr	r2, [pc, #140]	@ (800b108 <_tx_timer_initialize+0xcc>)
 800b07a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800b07c:	4b21      	ldr	r3, [pc, #132]	@ (800b104 <_tx_timer_initialize+0xc8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3304      	adds	r3, #4
 800b082:	4a20      	ldr	r2, [pc, #128]	@ (800b104 <_tx_timer_initialize+0xc8>)
 800b084:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800b086:	4b21      	ldr	r3, [pc, #132]	@ (800b10c <_tx_timer_initialize+0xd0>)
 800b088:	4a21      	ldr	r2, [pc, #132]	@ (800b110 <_tx_timer_initialize+0xd4>)
 800b08a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800b08c:	4b21      	ldr	r3, [pc, #132]	@ (800b114 <_tx_timer_initialize+0xd8>)
 800b08e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b092:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800b094:	4b20      	ldr	r3, [pc, #128]	@ (800b118 <_tx_timer_initialize+0xdc>)
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800b09a:	4b1c      	ldr	r3, [pc, #112]	@ (800b10c <_tx_timer_initialize+0xd0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a1d      	ldr	r2, [pc, #116]	@ (800b114 <_tx_timer_initialize+0xd8>)
 800b0a0:	6812      	ldr	r2, [r2, #0]
 800b0a2:	491d      	ldr	r1, [pc, #116]	@ (800b118 <_tx_timer_initialize+0xdc>)
 800b0a4:	6809      	ldr	r1, [r1, #0]
 800b0a6:	481c      	ldr	r0, [pc, #112]	@ (800b118 <_tx_timer_initialize+0xdc>)
 800b0a8:	6800      	ldr	r0, [r0, #0]
 800b0aa:	2400      	movs	r4, #0
 800b0ac:	9405      	str	r4, [sp, #20]
 800b0ae:	2400      	movs	r4, #0
 800b0b0:	9404      	str	r4, [sp, #16]
 800b0b2:	9003      	str	r0, [sp, #12]
 800b0b4:	9102      	str	r1, [sp, #8]
 800b0b6:	9201      	str	r2, [sp, #4]
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	4b18      	ldr	r3, [pc, #96]	@ (800b11c <_tx_timer_initialize+0xe0>)
 800b0bc:	4a18      	ldr	r2, [pc, #96]	@ (800b120 <_tx_timer_initialize+0xe4>)
 800b0be:	4919      	ldr	r1, [pc, #100]	@ (800b124 <_tx_timer_initialize+0xe8>)
 800b0c0:	4819      	ldr	r0, [pc, #100]	@ (800b128 <_tx_timer_initialize+0xec>)
 800b0c2:	f7ff f95b 	bl	800a37c <_tx_thread_create>
 800b0c6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e5      	bne.n	800b09a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800b0ce:	4b17      	ldr	r3, [pc, #92]	@ (800b12c <_tx_timer_initialize+0xf0>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800b0d4:	4b16      	ldr	r3, [pc, #88]	@ (800b130 <_tx_timer_initialize+0xf4>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800b0da:	bf00      	nop
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd90      	pop	{r4, r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20010930 	.word	0x20010930
 800b0e8:	20010e90 	.word	0x20010e90
 800b0ec:	20010934 	.word	0x20010934
 800b0f0:	200109c4 	.word	0x200109c4
 800b0f4:	200109d0 	.word	0x200109d0
 800b0f8:	20010938 	.word	0x20010938
 800b0fc:	200109b8 	.word	0x200109b8
 800b100:	200109c0 	.word	0x200109c0
 800b104:	200109bc 	.word	0x200109bc
 800b108:	200109b4 	.word	0x200109b4
 800b10c:	20010a84 	.word	0x20010a84
 800b110:	20010a90 	.word	0x20010a90
 800b114:	20010a88 	.word	0x20010a88
 800b118:	20010a8c 	.word	0x20010a8c
 800b11c:	4154494d 	.word	0x4154494d
 800b120:	0800b269 	.word	0x0800b269
 800b124:	0800be48 	.word	0x0800be48
 800b128:	200109d4 	.word	0x200109d4
 800b12c:	200109c8 	.word	0x200109c8
 800b130:	200109cc 	.word	0x200109cc

0800b134 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b134:	b480      	push	{r7}
 800b136:	b089      	sub	sp, #36	@ 0x24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d04a      	beq.n	800b1de <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14e:	d046      	beq.n	800b1de <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d142      	bne.n	800b1de <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2b20      	cmp	r3, #32
 800b15c:	d902      	bls.n	800b164 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800b15e:	231f      	movs	r3, #31
 800b160:	61bb      	str	r3, [r7, #24]
 800b162:	e002      	b.n	800b16a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	3b01      	subs	r3, #1
 800b168:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800b16a:	4b20      	ldr	r3, [pc, #128]	@ (800b1ec <_tx_timer_system_activate+0xb8>)
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b176:	4b1e      	ldr	r3, [pc, #120]	@ (800b1f0 <_tx_timer_system_activate+0xbc>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	69fa      	ldr	r2, [r7, #28]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d30b      	bcc.n	800b198 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800b180:	4b1b      	ldr	r3, [pc, #108]	@ (800b1f0 <_tx_timer_system_activate+0xbc>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	69fa      	ldr	r2, [r7, #28]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	109b      	asrs	r3, r3, #2
 800b18a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800b18c:	4b19      	ldr	r3, [pc, #100]	@ (800b1f4 <_tx_timer_system_activate+0xc0>)
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d109      	bne.n	800b1b4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	e011      	b.n	800b1d8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	69fa      	ldr	r2, [r7, #28]
 800b1dc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800b1de:	bf00      	nop
 800b1e0:	3724      	adds	r7, #36	@ 0x24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	200109c0 	.word	0x200109c0
 800b1f0:	200109bc 	.word	0x200109bc
 800b1f4:	200109b8 	.word	0x200109b8

0800b1f8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d026      	beq.n	800b25a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	429a      	cmp	r2, r3
 800b218:	d108      	bne.n	800b22c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	429a      	cmp	r2, r3
 800b222:	d117      	bne.n	800b254 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	2200      	movs	r2, #0
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	e013      	b.n	800b254 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	695b      	ldr	r3, [r3, #20]
 800b230:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	429a      	cmp	r2, r3
 800b246:	d105      	bne.n	800b254 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	619a      	str	r2, [r3, #24]
    }
}
 800b25a:	bf00      	nop
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
	...

0800b268 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b098      	sub	sp, #96	@ 0x60
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800b270:	2300      	movs	r3, #0
 800b272:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a73      	ldr	r2, [pc, #460]	@ (800b444 <_tx_timer_thread_entry+0x1dc>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	f040 80de 	bne.w	800b43a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b27e:	f3ef 8310 	mrs	r3, PRIMASK
 800b282:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800b284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800b286:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b288:	b672      	cpsid	i
    return(int_posture);
 800b28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800b28c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800b28e:	4b6e      	ldr	r3, [pc, #440]	@ (800b448 <_tx_timer_thread_entry+0x1e0>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f107 020c 	add.w	r2, r7, #12
 800b2a2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800b2a4:	4b68      	ldr	r3, [pc, #416]	@ (800b448 <_tx_timer_thread_entry+0x1e0>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800b2ac:	4b66      	ldr	r3, [pc, #408]	@ (800b448 <_tx_timer_thread_entry+0x1e0>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	4a65      	ldr	r2, [pc, #404]	@ (800b448 <_tx_timer_thread_entry+0x1e0>)
 800b2b4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800b2b6:	4b64      	ldr	r3, [pc, #400]	@ (800b448 <_tx_timer_thread_entry+0x1e0>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	4b64      	ldr	r3, [pc, #400]	@ (800b44c <_tx_timer_thread_entry+0x1e4>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d103      	bne.n	800b2ca <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800b2c2:	4b63      	ldr	r3, [pc, #396]	@ (800b450 <_tx_timer_thread_entry+0x1e8>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a60      	ldr	r2, [pc, #384]	@ (800b448 <_tx_timer_thread_entry+0x1e0>)
 800b2c8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800b2ca:	4b62      	ldr	r3, [pc, #392]	@ (800b454 <_tx_timer_thread_entry+0x1ec>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	601a      	str	r2, [r3, #0]
 800b2d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2d2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d6:	f383 8810 	msr	PRIMASK, r3
}
 800b2da:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800b2e4:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800b2e6:	b672      	cpsid	i
    return(int_posture);
 800b2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800b2ea:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800b2ec:	e07f      	b.n	800b3ee <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800b2fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b300:	429a      	cmp	r2, r3
 800b302:	d102      	bne.n	800b30a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800b304:	2300      	movs	r3, #0
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	e00e      	b.n	800b328 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800b30a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b314:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b318:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b31a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800b31c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b31e:	f107 020c 	add.w	r2, r7, #12
 800b322:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800b324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b326:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	d911      	bls.n	800b354 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800b330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800b338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b33a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800b33c:	2300      	movs	r3, #0
 800b33e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800b340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b342:	f107 0208 	add.w	r2, r7, #8
 800b346:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800b348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b34a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b34c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800b34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b350:	60bb      	str	r3, [r7, #8]
 800b352:	e01a      	b.n	800b38a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800b354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800b35a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800b360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b366:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800b368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d009      	beq.n	800b384 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800b370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b372:	f107 0208 	add.w	r2, r7, #8
 800b376:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800b378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b37a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b37c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800b37e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b380:	60bb      	str	r3, [r7, #8]
 800b382:	e002      	b.n	800b38a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800b384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b386:	2200      	movs	r2, #0
 800b388:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800b38a:	4a33      	ldr	r2, [pc, #204]	@ (800b458 <_tx_timer_thread_entry+0x1f0>)
 800b38c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b38e:	6013      	str	r3, [r2, #0]
 800b390:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b396:	f383 8810 	msr	PRIMASK, r3
}
 800b39a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800b39c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800b3a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3a4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b3a6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3b2:	b672      	cpsid	i
    return(int_posture);
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800b3b6:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800b3b8:	4b27      	ldr	r3, [pc, #156]	@ (800b458 <_tx_timer_thread_entry+0x1f0>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d105      	bne.n	800b3d2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800b3c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800b3cc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b3ce:	f7ff feb1 	bl	800b134 <_tx_timer_system_activate>
 800b3d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	f383 8810 	msr	PRIMASK, r3
}
 800b3dc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3de:	f3ef 8310 	mrs	r3, PRIMASK
 800b3e2:	623b      	str	r3, [r7, #32]
    return(posture);
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b3e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3e8:	b672      	cpsid	i
    return(int_posture);
 800b3ea:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800b3ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f47f af7c 	bne.w	800b2ee <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800b3f6:	4b17      	ldr	r3, [pc, #92]	@ (800b454 <_tx_timer_thread_entry+0x1ec>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d116      	bne.n	800b42c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800b3fe:	4b17      	ldr	r3, [pc, #92]	@ (800b45c <_tx_timer_thread_entry+0x1f4>)
 800b400:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b404:	2203      	movs	r2, #3
 800b406:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b40a:	2201      	movs	r2, #1
 800b40c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800b40e:	4b14      	ldr	r3, [pc, #80]	@ (800b460 <_tx_timer_thread_entry+0x1f8>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	3301      	adds	r3, #1
 800b414:	4a12      	ldr	r2, [pc, #72]	@ (800b460 <_tx_timer_thread_entry+0x1f8>)
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b41a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f383 8810 	msr	PRIMASK, r3
}
 800b422:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b424:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800b426:	f7ff fae1 	bl	800a9ec <_tx_thread_system_suspend>
 800b42a:	e728      	b.n	800b27e <_tx_timer_thread_entry+0x16>
 800b42c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b42e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	f383 8810 	msr	PRIMASK, r3
}
 800b436:	bf00      	nop
            TX_DISABLE
 800b438:	e721      	b.n	800b27e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800b43a:	bf00      	nop
 800b43c:	3760      	adds	r7, #96	@ 0x60
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	4154494d 	.word	0x4154494d
 800b448:	200109c0 	.word	0x200109c0
 800b44c:	200109bc 	.word	0x200109bc
 800b450:	200109b8 	.word	0x200109b8
 800b454:	200109c4 	.word	0x200109c4
 800b458:	200109d0 	.word	0x200109d0
 800b45c:	200109d4 	.word	0x200109d4
 800b460:	20010924 	.word	0x20010924

0800b464 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08a      	sub	sp, #40	@ 0x28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b472:	2300      	movs	r3, #0
 800b474:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d102      	bne.n	800b482 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800b47c:	2302      	movs	r3, #2
 800b47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b480:	e029      	b.n	800b4d6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a2d      	ldr	r2, [pc, #180]	@ (800b53c <_txe_byte_allocate+0xd8>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d002      	beq.n	800b492 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800b48c:	2302      	movs	r3, #2
 800b48e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b490:	e021      	b.n	800b4d6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800b498:	2303      	movs	r3, #3
 800b49a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b49c:	e01b      	b.n	800b4d6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d102      	bne.n	800b4aa <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800b4a4:	2305      	movs	r3, #5
 800b4a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4a8:	e015      	b.n	800b4d6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	69db      	ldr	r3, [r3, #28]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d902      	bls.n	800b4ba <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800b4b4:	2305      	movs	r3, #5
 800b4b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4b8:	e00d      	b.n	800b4d6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00a      	beq.n	800b4d6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4c0:	f3ef 8305 	mrs	r3, IPSR
 800b4c4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b4c6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b4c8:	4b1d      	ldr	r3, [pc, #116]	@ (800b540 <_txe_byte_allocate+0xdc>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800b4d2:	2304      	movs	r3, #4
 800b4d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d108      	bne.n	800b4ee <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b4dc:	4b19      	ldr	r3, [pc, #100]	@ (800b544 <_txe_byte_allocate+0xe0>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	4a18      	ldr	r2, [pc, #96]	@ (800b548 <_txe_byte_allocate+0xe4>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d101      	bne.n	800b4ee <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800b4ea:	2313      	movs	r3, #19
 800b4ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d114      	bne.n	800b51e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4f4:	f3ef 8305 	mrs	r3, IPSR
 800b4f8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b4fa:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b4fc:	4b10      	ldr	r3, [pc, #64]	@ (800b540 <_txe_byte_allocate+0xdc>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4313      	orrs	r3, r2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00b      	beq.n	800b51e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b506:	f3ef 8305 	mrs	r3, IPSR
 800b50a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b50c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b50e:	4b0c      	ldr	r3, [pc, #48]	@ (800b540 <_txe_byte_allocate+0xdc>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4313      	orrs	r3, r2
 800b514:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b518:	d201      	bcs.n	800b51e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b51a:	2313      	movs	r3, #19
 800b51c:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b520:	2b00      	cmp	r3, #0
 800b522:	d106      	bne.n	800b532 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	68b9      	ldr	r1, [r7, #8]
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f7fe fa1a 	bl	8009964 <_tx_byte_allocate>
 800b530:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800b532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b534:	4618      	mov	r0, r3
 800b536:	3728      	adds	r7, #40	@ 0x28
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	42595445 	.word	0x42595445
 800b540:	2000004c 	.word	0x2000004c
 800b544:	2001088c 	.word	0x2001088c
 800b548:	200109d4 	.word	0x200109d4

0800b54c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b092      	sub	sp, #72	@ 0x48
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
 800b558:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b55a:	2300      	movs	r3, #0
 800b55c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800b564:	2302      	movs	r3, #2
 800b566:	647b      	str	r3, [r7, #68]	@ 0x44
 800b568:	e075      	b.n	800b656 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800b56a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b56c:	2b34      	cmp	r3, #52	@ 0x34
 800b56e:	d002      	beq.n	800b576 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800b570:	2302      	movs	r3, #2
 800b572:	647b      	str	r3, [r7, #68]	@ 0x44
 800b574:	e06f      	b.n	800b656 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b576:	f3ef 8310 	mrs	r3, PRIMASK
 800b57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b57e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b580:	b672      	cpsid	i
    return(int_posture);
 800b582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800b584:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800b586:	4b3b      	ldr	r3, [pc, #236]	@ (800b674 <_txe_byte_pool_create+0x128>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3301      	adds	r3, #1
 800b58c:	4a39      	ldr	r2, [pc, #228]	@ (800b674 <_txe_byte_pool_create+0x128>)
 800b58e:	6013      	str	r3, [r2, #0]
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b596:	f383 8810 	msr	PRIMASK, r3
}
 800b59a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800b59c:	4b36      	ldr	r3, [pc, #216]	@ (800b678 <_txe_byte_pool_create+0x12c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5a6:	e009      	b.n	800b5bc <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d00b      	beq.n	800b5c8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800b5b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5bc:	4b2f      	ldr	r3, [pc, #188]	@ (800b67c <_txe_byte_pool_create+0x130>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d3f0      	bcc.n	800b5a8 <_txe_byte_pool_create+0x5c>
 800b5c6:	e000      	b.n	800b5ca <_txe_byte_pool_create+0x7e>
                break;
 800b5c8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ce:	623b      	str	r3, [r7, #32]
    return(posture);
 800b5d0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b5d2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5d4:	b672      	cpsid	i
    return(int_posture);
 800b5d6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b5d8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800b5da:	4b26      	ldr	r3, [pc, #152]	@ (800b674 <_txe_byte_pool_create+0x128>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	4a24      	ldr	r2, [pc, #144]	@ (800b674 <_txe_byte_pool_create+0x128>)
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ea:	f383 8810 	msr	PRIMASK, r3
}
 800b5ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b5f0:	f7ff f8c2 	bl	800a778 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d102      	bne.n	800b602 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800b600:	e029      	b.n	800b656 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800b608:	2303      	movs	r3, #3
 800b60a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b60c:	e023      	b.n	800b656 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b63      	cmp	r3, #99	@ 0x63
 800b612:	d802      	bhi.n	800b61a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800b614:	2305      	movs	r3, #5
 800b616:	647b      	str	r3, [r7, #68]	@ 0x44
 800b618:	e01d      	b.n	800b656 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b61a:	4b19      	ldr	r3, [pc, #100]	@ (800b680 <_txe_byte_pool_create+0x134>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800b620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b622:	4a18      	ldr	r2, [pc, #96]	@ (800b684 <_txe_byte_pool_create+0x138>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d101      	bne.n	800b62c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b628:	2313      	movs	r3, #19
 800b62a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b62c:	f3ef 8305 	mrs	r3, IPSR
 800b630:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b632:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b634:	4b14      	ldr	r3, [pc, #80]	@ (800b688 <_txe_byte_pool_create+0x13c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4313      	orrs	r3, r2
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00b      	beq.n	800b656 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b63e:	f3ef 8305 	mrs	r3, IPSR
 800b642:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b644:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b646:	4b10      	ldr	r3, [pc, #64]	@ (800b688 <_txe_byte_pool_create+0x13c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b650:	d201      	bcs.n	800b656 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800b652:	2313      	movs	r3, #19
 800b654:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d106      	bne.n	800b66a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	68b9      	ldr	r1, [r7, #8]
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7fe fac0 	bl	8009be8 <_tx_byte_pool_create>
 800b668:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800b66a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3748      	adds	r7, #72	@ 0x48
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20010924 	.word	0x20010924
 800b678:	2001087c 	.word	0x2001087c
 800b67c:	20010880 	.word	0x20010880
 800b680:	2001088c 	.word	0x2001088c
 800b684:	200109d4 	.word	0x200109d4
 800b688:	2000004c 	.word	0x2000004c

0800b68c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b092      	sub	sp, #72	@ 0x48
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b69a:	2300      	movs	r3, #0
 800b69c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d102      	bne.n	800b6aa <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b6a4:	230c      	movs	r3, #12
 800b6a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6a8:	e054      	b.n	800b754 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2b1c      	cmp	r3, #28
 800b6ae:	d002      	beq.n	800b6b6 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b6b0:	230c      	movs	r3, #12
 800b6b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6b4:	e04e      	b.n	800b754 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b6be:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6c0:	b672      	cpsid	i
    return(int_posture);
 800b6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800b6c4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800b6c6:	4b36      	ldr	r3, [pc, #216]	@ (800b7a0 <_txe_semaphore_create+0x114>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	4a34      	ldr	r2, [pc, #208]	@ (800b7a0 <_txe_semaphore_create+0x114>)
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d6:	f383 8810 	msr	PRIMASK, r3
}
 800b6da:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800b6dc:	4b31      	ldr	r3, [pc, #196]	@ (800b7a4 <_txe_semaphore_create+0x118>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6e6:	e009      	b.n	800b6fc <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d00b      	beq.n	800b708 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800b6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800b6f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6fc:	4b2a      	ldr	r3, [pc, #168]	@ (800b7a8 <_txe_semaphore_create+0x11c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b702:	429a      	cmp	r2, r3
 800b704:	d3f0      	bcc.n	800b6e8 <_txe_semaphore_create+0x5c>
 800b706:	e000      	b.n	800b70a <_txe_semaphore_create+0x7e>
                break;
 800b708:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b70a:	f3ef 8310 	mrs	r3, PRIMASK
 800b70e:	623b      	str	r3, [r7, #32]
    return(posture);
 800b710:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b712:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b714:	b672      	cpsid	i
    return(int_posture);
 800b716:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b718:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800b71a:	4b21      	ldr	r3, [pc, #132]	@ (800b7a0 <_txe_semaphore_create+0x114>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	3b01      	subs	r3, #1
 800b720:	4a1f      	ldr	r2, [pc, #124]	@ (800b7a0 <_txe_semaphore_create+0x114>)
 800b722:	6013      	str	r3, [r2, #0]
 800b724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b726:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72a:	f383 8810 	msr	PRIMASK, r3
}
 800b72e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b730:	f7ff f822 	bl	800a778 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b738:	429a      	cmp	r2, r3
 800b73a:	d102      	bne.n	800b742 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800b73c:	230c      	movs	r3, #12
 800b73e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b740:	e008      	b.n	800b754 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b742:	4b1a      	ldr	r3, [pc, #104]	@ (800b7ac <_txe_semaphore_create+0x120>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800b748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b74a:	4a19      	ldr	r2, [pc, #100]	@ (800b7b0 <_txe_semaphore_create+0x124>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d101      	bne.n	800b754 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b750:	2313      	movs	r3, #19
 800b752:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b756:	2b00      	cmp	r3, #0
 800b758:	d114      	bne.n	800b784 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b75a:	f3ef 8305 	mrs	r3, IPSR
 800b75e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b760:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b762:	4b14      	ldr	r3, [pc, #80]	@ (800b7b4 <_txe_semaphore_create+0x128>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4313      	orrs	r3, r2
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00b      	beq.n	800b784 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b76c:	f3ef 8305 	mrs	r3, IPSR
 800b770:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b772:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b774:	4b0f      	ldr	r3, [pc, #60]	@ (800b7b4 <_txe_semaphore_create+0x128>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4313      	orrs	r3, r2
 800b77a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b77e:	d201      	bcs.n	800b784 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b780:	2313      	movs	r3, #19
 800b782:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b786:	2b00      	cmp	r3, #0
 800b788:	d105      	bne.n	800b796 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f7fe fcb8 	bl	800a104 <_tx_semaphore_create>
 800b794:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800b796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3748      	adds	r7, #72	@ 0x48
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20010924 	.word	0x20010924
 800b7a4:	20010854 	.word	0x20010854
 800b7a8:	20010858 	.word	0x20010858
 800b7ac:	2001088c 	.word	0x2001088c
 800b7b0:	200109d4 	.word	0x200109d4
 800b7b4:	2000004c 	.word	0x2000004c

0800b7b8 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d102      	bne.n	800b7d2 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b7cc:	230c      	movs	r3, #12
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	e01f      	b.n	800b812 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a15      	ldr	r2, [pc, #84]	@ (800b82c <_txe_semaphore_get+0x74>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d002      	beq.n	800b7e2 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b7dc:	230c      	movs	r3, #12
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	e017      	b.n	800b812 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d014      	beq.n	800b812 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b7e8:	f3ef 8305 	mrs	r3, IPSR
 800b7ec:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800b7ee:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b7f0:	4b0f      	ldr	r3, [pc, #60]	@ (800b830 <_txe_semaphore_get+0x78>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800b7fa:	2304      	movs	r3, #4
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	e008      	b.n	800b812 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800b800:	4b0c      	ldr	r3, [pc, #48]	@ (800b834 <_txe_semaphore_get+0x7c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	4a0b      	ldr	r2, [pc, #44]	@ (800b838 <_txe_semaphore_get+0x80>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d101      	bne.n	800b812 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800b80e:	2304      	movs	r3, #4
 800b810:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d104      	bne.n	800b822 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7fe fcc4 	bl	800a1a8 <_tx_semaphore_get>
 800b820:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800b822:	697b      	ldr	r3, [r7, #20]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	53454d41 	.word	0x53454d41
 800b830:	2000004c 	.word	0x2000004c
 800b834:	2001088c 	.word	0x2001088c
 800b838:	200109d4 	.word	0x200109d4

0800b83c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b84a:	230c      	movs	r3, #12
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	e00b      	b.n	800b868 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a07      	ldr	r2, [pc, #28]	@ (800b874 <_txe_semaphore_put+0x38>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d002      	beq.n	800b860 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b85a:	230c      	movs	r3, #12
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	e003      	b.n	800b868 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7fe fd33 	bl	800a2cc <_tx_semaphore_put>
 800b866:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800b868:	68fb      	ldr	r3, [r7, #12]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	53454d41 	.word	0x53454d41

0800b878 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b09a      	sub	sp, #104	@ 0x68
 800b87c:	af06      	add	r7, sp, #24
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b886:	2300      	movs	r3, #0
 800b888:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d102      	bne.n	800b896 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800b890:	230e      	movs	r3, #14
 800b892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b894:	e0bb      	b.n	800ba0e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800b896:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b898:	2bb0      	cmp	r3, #176	@ 0xb0
 800b89a:	d002      	beq.n	800b8a2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800b89c:	230e      	movs	r3, #14
 800b89e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8a0:	e0b5      	b.n	800ba0e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800b8aa:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8ac:	b672      	cpsid	i
    return(int_posture);
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800b8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800b8b2:	4b64      	ldr	r3, [pc, #400]	@ (800ba44 <_txe_thread_create+0x1cc>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	4a62      	ldr	r2, [pc, #392]	@ (800ba44 <_txe_thread_create+0x1cc>)
 800b8ba:	6013      	str	r3, [r2, #0]
 800b8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c2:	f383 8810 	msr	PRIMASK, r3
}
 800b8c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800b8cc:	4b5e      	ldr	r3, [pc, #376]	@ (800ba48 <_txe_thread_create+0x1d0>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800b8d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8d4:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800b8d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8dc:	4413      	add	r3, r2
 800b8de:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e2:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8e8:	e02b      	b.n	800b942 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d101      	bne.n	800b8f6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800b8f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d028      	beq.n	800b94e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800b8fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b902:	429a      	cmp	r2, r3
 800b904:	d308      	bcc.n	800b918 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800b906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d203      	bcs.n	800b918 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800b910:	2300      	movs	r3, #0
 800b912:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800b914:	2301      	movs	r3, #1
 800b916:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800b918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b91e:	429a      	cmp	r2, r3
 800b920:	d308      	bcc.n	800b934 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800b922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b928:	429a      	cmp	r2, r3
 800b92a:	d203      	bcs.n	800b934 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800b92c:	2300      	movs	r3, #0
 800b92e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800b930:	2301      	movs	r3, #1
 800b932:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800b934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b93a:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800b93c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b93e:	3301      	adds	r3, #1
 800b940:	647b      	str	r3, [r7, #68]	@ 0x44
 800b942:	4b42      	ldr	r3, [pc, #264]	@ (800ba4c <_txe_thread_create+0x1d4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b948:	429a      	cmp	r2, r3
 800b94a:	d3ce      	bcc.n	800b8ea <_txe_thread_create+0x72>
 800b94c:	e000      	b.n	800b950 <_txe_thread_create+0xd8>
                break;
 800b94e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b950:	f3ef 8310 	mrs	r3, PRIMASK
 800b954:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b956:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b958:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b95a:	b672      	cpsid	i
    return(int_posture);
 800b95c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b95e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800b960:	4b38      	ldr	r3, [pc, #224]	@ (800ba44 <_txe_thread_create+0x1cc>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3b01      	subs	r3, #1
 800b966:	4a37      	ldr	r2, [pc, #220]	@ (800ba44 <_txe_thread_create+0x1cc>)
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b96c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	f383 8810 	msr	PRIMASK, r3
}
 800b974:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b976:	f7fe feff 	bl	800a778 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b97e:	429a      	cmp	r2, r3
 800b980:	d102      	bne.n	800b988 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800b982:	230e      	movs	r3, #14
 800b984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b986:	e042      	b.n	800ba0e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800b988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d102      	bne.n	800b994 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800b98e:	2303      	movs	r3, #3
 800b990:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b992:	e03c      	b.n	800ba0e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d102      	bne.n	800b9a0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800b99a:	2303      	movs	r3, #3
 800b99c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b99e:	e036      	b.n	800ba0e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800b9a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9a2:	2bc7      	cmp	r3, #199	@ 0xc7
 800b9a4:	d802      	bhi.n	800b9ac <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800b9a6:	2305      	movs	r3, #5
 800b9a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9aa:	e030      	b.n	800ba0e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800b9ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9ae:	2b1f      	cmp	r3, #31
 800b9b0:	d902      	bls.n	800b9b8 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800b9b2:	230f      	movs	r3, #15
 800b9b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9b6:	e02a      	b.n	800ba0e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800b9b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b9ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d902      	bls.n	800b9c6 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800b9c0:	2318      	movs	r3, #24
 800b9c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9c4:	e023      	b.n	800ba0e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800b9c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d902      	bls.n	800b9d2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800b9cc:	2310      	movs	r3, #16
 800b9ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9d0:	e01d      	b.n	800ba0e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800b9d2:	4b1f      	ldr	r3, [pc, #124]	@ (800ba50 <_txe_thread_create+0x1d8>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9da:	4a1e      	ldr	r2, [pc, #120]	@ (800ba54 <_txe_thread_create+0x1dc>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d101      	bne.n	800b9e4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b9e0:	2313      	movs	r3, #19
 800b9e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b9e4:	f3ef 8305 	mrs	r3, IPSR
 800b9e8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b9ea:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b9ec:	4b1a      	ldr	r3, [pc, #104]	@ (800ba58 <_txe_thread_create+0x1e0>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00b      	beq.n	800ba0e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b9f6:	f3ef 8305 	mrs	r3, IPSR
 800b9fa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b9fc:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b9fe:	4b16      	ldr	r3, [pc, #88]	@ (800ba58 <_txe_thread_create+0x1e0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ba08:	d201      	bcs.n	800ba0e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800ba0a:	2313      	movs	r3, #19
 800ba0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ba0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d112      	bne.n	800ba3a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800ba14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba16:	9305      	str	r3, [sp, #20]
 800ba18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba1e:	9303      	str	r3, [sp, #12]
 800ba20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba22:	9302      	str	r3, [sp, #8]
 800ba24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	68b9      	ldr	r1, [r7, #8]
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7fe fca2 	bl	800a37c <_tx_thread_create>
 800ba38:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800ba3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3750      	adds	r7, #80	@ 0x50
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	20010924 	.word	0x20010924
 800ba48:	20010894 	.word	0x20010894
 800ba4c:	20010898 	.word	0x20010898
 800ba50:	2001088c 	.word	0x2001088c
 800ba54:	200109d4 	.word	0x200109d4
 800ba58:	2000004c 	.word	0x2000004c

0800ba5c <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800ba6a:	2315      	movs	r3, #21
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	e00b      	b.n	800ba88 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a07      	ldr	r2, [pc, #28]	@ (800ba94 <_txe_timer_activate+0x38>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d002      	beq.n	800ba80 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800ba7a:	2315      	movs	r3, #21
 800ba7c:	60fb      	str	r3, [r7, #12]
 800ba7e:	e003      	b.n	800ba88 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7ff f959 	bl	800ad38 <_tx_timer_activate>
 800ba86:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800ba88:	68fb      	ldr	r3, [r7, #12]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	4154494d 	.word	0x4154494d

0800ba98 <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d102      	bne.n	800bab0 <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800baaa:	2315      	movs	r3, #21
 800baac:	617b      	str	r3, [r7, #20]
 800baae:	e020      	b.n	800baf2 <_txe_timer_change+0x5a>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a11      	ldr	r2, [pc, #68]	@ (800bafc <_txe_timer_change+0x64>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d002      	beq.n	800bac0 <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800baba:	2315      	movs	r3, #21
 800babc:	617b      	str	r3, [r7, #20]
 800babe:	e018      	b.n	800baf2 <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d102      	bne.n	800bacc <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 800bac6:	2316      	movs	r3, #22
 800bac8:	617b      	str	r3, [r7, #20]
 800baca:	e012      	b.n	800baf2 <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bacc:	f3ef 8305 	mrs	r3, IPSR
 800bad0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800bad2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800bad4:	4b0a      	ldr	r3, [pc, #40]	@ (800bb00 <_txe_timer_change+0x68>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4313      	orrs	r3, r2
 800bada:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bade:	d302      	bcc.n	800bae6 <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800bae0:	2313      	movs	r3, #19
 800bae2:	617b      	str	r3, [r7, #20]
 800bae4:	e005      	b.n	800baf2 <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	68b9      	ldr	r1, [r7, #8]
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff f950 	bl	800ad90 <_tx_timer_change>
 800baf0:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800baf2:	697b      	ldr	r3, [r7, #20]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	4154494d 	.word	0x4154494d
 800bb00:	2000004c 	.word	0x2000004c

0800bb04 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b096      	sub	sp, #88	@ 0x58
 800bb08:	af04      	add	r7, sp, #16
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
 800bb10:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bb12:	2300      	movs	r3, #0
 800bb14:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d102      	bne.n	800bb22 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800bb1c:	2315      	movs	r3, #21
 800bb1e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb20:	e059      	b.n	800bbd6 <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800bb22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb24:	2b2c      	cmp	r3, #44	@ 0x2c
 800bb26:	d002      	beq.n	800bb2e <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800bb28:	2315      	movs	r3, #21
 800bb2a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb2c:	e053      	b.n	800bbd6 <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb2e:	f3ef 8310 	mrs	r3, PRIMASK
 800bb32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bb36:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb38:	b672      	cpsid	i
    return(int_posture);
 800bb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bb3c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bb3e:	4b41      	ldr	r3, [pc, #260]	@ (800bc44 <_txe_timer_create+0x140>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3301      	adds	r3, #1
 800bb44:	4a3f      	ldr	r2, [pc, #252]	@ (800bc44 <_txe_timer_create+0x140>)
 800bb46:	6013      	str	r3, [r2, #0]
 800bb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4e:	f383 8810 	msr	PRIMASK, r3
}
 800bb52:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800bb54:	4b3c      	ldr	r3, [pc, #240]	@ (800bc48 <_txe_timer_create+0x144>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb5e:	e009      	b.n	800bb74 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d00b      	beq.n	800bb80 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800bb68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800bb6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb70:	3301      	adds	r3, #1
 800bb72:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb74:	4b35      	ldr	r3, [pc, #212]	@ (800bc4c <_txe_timer_create+0x148>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d3f0      	bcc.n	800bb60 <_txe_timer_create+0x5c>
 800bb7e:	e000      	b.n	800bb82 <_txe_timer_create+0x7e>
                break;
 800bb80:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb82:	f3ef 8310 	mrs	r3, PRIMASK
 800bb86:	623b      	str	r3, [r7, #32]
    return(posture);
 800bb88:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bb8a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb8c:	b672      	cpsid	i
    return(int_posture);
 800bb8e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bb90:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bb92:	4b2c      	ldr	r3, [pc, #176]	@ (800bc44 <_txe_timer_create+0x140>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	4a2a      	ldr	r2, [pc, #168]	@ (800bc44 <_txe_timer_create+0x140>)
 800bb9a:	6013      	str	r3, [r2, #0]
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba2:	f383 8810 	msr	PRIMASK, r3
}
 800bba6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bba8:	f7fe fde6 	bl	800a778 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d102      	bne.n	800bbba <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800bbb4:	2315      	movs	r3, #21
 800bbb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbb8:	e00d      	b.n	800bbd6 <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800bbba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d102      	bne.n	800bbc6 <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800bbc0:	2316      	movs	r3, #22
 800bbc2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbc4:	e007      	b.n	800bbd6 <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800bbc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d004      	beq.n	800bbd6 <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800bbcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800bbd2:	2317      	movs	r3, #23
 800bbd4:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bbd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d11d      	bne.n	800bc18 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bbdc:	4b1c      	ldr	r3, [pc, #112]	@ (800bc50 <_txe_timer_create+0x14c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800bbe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbe4:	4a1b      	ldr	r2, [pc, #108]	@ (800bc54 <_txe_timer_create+0x150>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d101      	bne.n	800bbee <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bbea:	2313      	movs	r3, #19
 800bbec:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bbee:	f3ef 8305 	mrs	r3, IPSR
 800bbf2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bbf4:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bbf6:	4b18      	ldr	r3, [pc, #96]	@ (800bc58 <_txe_timer_create+0x154>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00b      	beq.n	800bc18 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc00:	f3ef 8305 	mrs	r3, IPSR
 800bc04:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bc06:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bc08:	4b13      	ldr	r3, [pc, #76]	@ (800bc58 <_txe_timer_create+0x154>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bc12:	d201      	bcs.n	800bc18 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bc14:	2313      	movs	r3, #19
 800bc16:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bc18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10c      	bne.n	800bc38 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800bc1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc20:	9302      	str	r3, [sp, #8]
 800bc22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	68b9      	ldr	r1, [r7, #8]
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f7ff f8d3 	bl	800addc <_tx_timer_create>
 800bc36:	6478      	str	r0, [r7, #68]	@ 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800bc38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3748      	adds	r7, #72	@ 0x48
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20010924 	.word	0x20010924
 800bc48:	200109c8 	.word	0x200109c8
 800bc4c:	200109cc 	.word	0x200109cc
 800bc50:	2001088c 	.word	0x2001088c
 800bc54:	200109d4 	.word	0x200109d4
 800bc58:	2000004c 	.word	0x2000004c

0800bc5c <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d102      	bne.n	800bc70 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800bc6a:	2315      	movs	r3, #21
 800bc6c:	60fb      	str	r3, [r7, #12]
 800bc6e:	e00b      	b.n	800bc88 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a07      	ldr	r2, [pc, #28]	@ (800bc94 <_txe_timer_deactivate+0x38>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d002      	beq.n	800bc80 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800bc7a:	2315      	movs	r3, #21
 800bc7c:	60fb      	str	r3, [r7, #12]
 800bc7e:	e003      	b.n	800bc88 <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff f90f 	bl	800aea4 <_tx_timer_deactivate>
 800bc86:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800bc88:	68fb      	ldr	r3, [r7, #12]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	4154494d 	.word	0x4154494d

0800bc98 <memset>:
 800bc98:	4402      	add	r2, r0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d100      	bne.n	800bca2 <memset+0xa>
 800bca0:	4770      	bx	lr
 800bca2:	f803 1b01 	strb.w	r1, [r3], #1
 800bca6:	e7f9      	b.n	800bc9c <memset+0x4>

0800bca8 <__libc_init_array>:
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	4d0d      	ldr	r5, [pc, #52]	@ (800bce0 <__libc_init_array+0x38>)
 800bcac:	4c0d      	ldr	r4, [pc, #52]	@ (800bce4 <__libc_init_array+0x3c>)
 800bcae:	1b64      	subs	r4, r4, r5
 800bcb0:	10a4      	asrs	r4, r4, #2
 800bcb2:	2600      	movs	r6, #0
 800bcb4:	42a6      	cmp	r6, r4
 800bcb6:	d109      	bne.n	800bccc <__libc_init_array+0x24>
 800bcb8:	4d0b      	ldr	r5, [pc, #44]	@ (800bce8 <__libc_init_array+0x40>)
 800bcba:	4c0c      	ldr	r4, [pc, #48]	@ (800bcec <__libc_init_array+0x44>)
 800bcbc:	f000 f818 	bl	800bcf0 <_init>
 800bcc0:	1b64      	subs	r4, r4, r5
 800bcc2:	10a4      	asrs	r4, r4, #2
 800bcc4:	2600      	movs	r6, #0
 800bcc6:	42a6      	cmp	r6, r4
 800bcc8:	d105      	bne.n	800bcd6 <__libc_init_array+0x2e>
 800bcca:	bd70      	pop	{r4, r5, r6, pc}
 800bccc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcd0:	4798      	blx	r3
 800bcd2:	3601      	adds	r6, #1
 800bcd4:	e7ee      	b.n	800bcb4 <__libc_init_array+0xc>
 800bcd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcda:	4798      	blx	r3
 800bcdc:	3601      	adds	r6, #1
 800bcde:	e7f2      	b.n	800bcc6 <__libc_init_array+0x1e>
 800bce0:	0800bebc 	.word	0x0800bebc
 800bce4:	0800bebc 	.word	0x0800bebc
 800bce8:	0800bebc 	.word	0x0800bebc
 800bcec:	0800bec0 	.word	0x0800bec0

0800bcf0 <_init>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	bf00      	nop
 800bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf6:	bc08      	pop	{r3}
 800bcf8:	469e      	mov	lr, r3
 800bcfa:	4770      	bx	lr

0800bcfc <_fini>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	bf00      	nop
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr
