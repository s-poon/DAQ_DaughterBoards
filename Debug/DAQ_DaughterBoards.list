
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d328  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800d508  0800d508  0000e508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d718  0800d718  0000f050  2**0
                  CONTENTS
  4 .ARM          00000008  0800d718  0800d718  0000e718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d720  0800d720  0000f050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d720  0800d720  0000e720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d724  0800d724  0000e724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  0800d728  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011060  20000050  0800d778  0000f050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200110b0  0800d778  0000f0b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039aed  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008f23  00000000  00000000  00048b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c30  00000000  00000000  00051a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020e7  00000000  00000000  000546c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034149  00000000  00000000  000567a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000426d6  00000000  00000000  0008a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012abfa  00000000  00000000  000ccfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f7bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aeb4  00000000  00000000  001f7c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f4  00000000  00000000  00202ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000050 	.word	0x20000050
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d4f0 	.word	0x0800d4f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000054 	.word	0x20000054
 800021c:	0800d4f0 	.word	0x0800d4f0

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20010aa4 	.word	0x20010aa4
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20010b40 	.word	0x20010b40
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20010aa8 	.word	0x20010aa8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20010aac 	.word	0x20010aac
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	200110ac 	.word	0x200110ac

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f00c f9fd 	bl	800c7f8 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f00c f80a 	bl	800c41c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20010b4c 	.word	0x20010b4c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	200110ac 	.word	0x200110ac
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20010b50 	.word	0x20010b50
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20010bdc 	.word	0x20010bdc
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20010be0 	.word	0x20010be0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20010bd8 	.word	0x20010bd8
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20010bd4 	.word	0x20010bd4
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20010b40 	.word	0x20010b40
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20010aa8 	.word	0x20010aa8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20010aac 	.word	0x20010aac
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_uldivmod>:
 8000458:	b953      	cbnz	r3, 8000470 <__aeabi_uldivmod+0x18>
 800045a:	b94a      	cbnz	r2, 8000470 <__aeabi_uldivmod+0x18>
 800045c:	2900      	cmp	r1, #0
 800045e:	bf08      	it	eq
 8000460:	2800      	cmpeq	r0, #0
 8000462:	bf1c      	itt	ne
 8000464:	f04f 31ff 	movne.w	r1, #4294967295
 8000468:	f04f 30ff 	movne.w	r0, #4294967295
 800046c:	f000 b96a 	b.w	8000744 <__aeabi_idiv0>
 8000470:	f1ad 0c08 	sub.w	ip, sp, #8
 8000474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000478:	f000 f806 	bl	8000488 <__udivmoddi4>
 800047c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000484:	b004      	add	sp, #16
 8000486:	4770      	bx	lr

08000488 <__udivmoddi4>:
 8000488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800048c:	9d08      	ldr	r5, [sp, #32]
 800048e:	460c      	mov	r4, r1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d14e      	bne.n	8000532 <__udivmoddi4+0xaa>
 8000494:	4694      	mov	ip, r2
 8000496:	458c      	cmp	ip, r1
 8000498:	4686      	mov	lr, r0
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	d962      	bls.n	8000566 <__udivmoddi4+0xde>
 80004a0:	b14a      	cbz	r2, 80004b6 <__udivmoddi4+0x2e>
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	4091      	lsls	r1, r2
 80004a8:	fa20 f303 	lsr.w	r3, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	4319      	orrs	r1, r3
 80004b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ba:	fa1f f68c 	uxth.w	r6, ip
 80004be:	fbb1 f4f7 	udiv	r4, r1, r7
 80004c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004c6:	fb07 1114 	mls	r1, r7, r4, r1
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb04 f106 	mul.w	r1, r4, r6
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d90a      	bls.n	80004ec <__udivmoddi4+0x64>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f104 30ff 	add.w	r0, r4, #4294967295
 80004de:	f080 8112 	bcs.w	8000706 <__udivmoddi4+0x27e>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 810f 	bls.w	8000706 <__udivmoddi4+0x27e>
 80004e8:	3c02      	subs	r4, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a59      	subs	r1, r3, r1
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f6:	fb07 1110 	mls	r1, r7, r0, r1
 80004fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fe:	fb00 f606 	mul.w	r6, r0, r6
 8000502:	429e      	cmp	r6, r3
 8000504:	d90a      	bls.n	800051c <__udivmoddi4+0x94>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 31ff 	add.w	r1, r0, #4294967295
 800050e:	f080 80fc 	bcs.w	800070a <__udivmoddi4+0x282>
 8000512:	429e      	cmp	r6, r3
 8000514:	f240 80f9 	bls.w	800070a <__udivmoddi4+0x282>
 8000518:	4463      	add	r3, ip
 800051a:	3802      	subs	r0, #2
 800051c:	1b9b      	subs	r3, r3, r6
 800051e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000522:	2100      	movs	r1, #0
 8000524:	b11d      	cbz	r5, 800052e <__udivmoddi4+0xa6>
 8000526:	40d3      	lsrs	r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	e9c5 3200 	strd	r3, r2, [r5]
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	428b      	cmp	r3, r1
 8000534:	d905      	bls.n	8000542 <__udivmoddi4+0xba>
 8000536:	b10d      	cbz	r5, 800053c <__udivmoddi4+0xb4>
 8000538:	e9c5 0100 	strd	r0, r1, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	4608      	mov	r0, r1
 8000540:	e7f5      	b.n	800052e <__udivmoddi4+0xa6>
 8000542:	fab3 f183 	clz	r1, r3
 8000546:	2900      	cmp	r1, #0
 8000548:	d146      	bne.n	80005d8 <__udivmoddi4+0x150>
 800054a:	42a3      	cmp	r3, r4
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xcc>
 800054e:	4290      	cmp	r0, r2
 8000550:	f0c0 80f0 	bcc.w	8000734 <__udivmoddi4+0x2ac>
 8000554:	1a86      	subs	r6, r0, r2
 8000556:	eb64 0303 	sbc.w	r3, r4, r3
 800055a:	2001      	movs	r0, #1
 800055c:	2d00      	cmp	r5, #0
 800055e:	d0e6      	beq.n	800052e <__udivmoddi4+0xa6>
 8000560:	e9c5 6300 	strd	r6, r3, [r5]
 8000564:	e7e3      	b.n	800052e <__udivmoddi4+0xa6>
 8000566:	2a00      	cmp	r2, #0
 8000568:	f040 8090 	bne.w	800068c <__udivmoddi4+0x204>
 800056c:	eba1 040c 	sub.w	r4, r1, ip
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	fa1f f78c 	uxth.w	r7, ip
 8000578:	2101      	movs	r1, #1
 800057a:	fbb4 f6f8 	udiv	r6, r4, r8
 800057e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000582:	fb08 4416 	mls	r4, r8, r6, r4
 8000586:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800058a:	fb07 f006 	mul.w	r0, r7, r6
 800058e:	4298      	cmp	r0, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x11c>
 8000592:	eb1c 0303 	adds.w	r3, ip, r3
 8000596:	f106 34ff 	add.w	r4, r6, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x11a>
 800059c:	4298      	cmp	r0, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2b4>
 80005a2:	4626      	mov	r6, r4
 80005a4:	1a1c      	subs	r4, r3, r0
 80005a6:	fa1f f38e 	uxth.w	r3, lr
 80005aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80005ae:	fb08 4410 	mls	r4, r8, r0, r4
 80005b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b6:	fb00 f707 	mul.w	r7, r0, r7
 80005ba:	429f      	cmp	r7, r3
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x148>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c6:	d202      	bcs.n	80005ce <__udivmoddi4+0x146>
 80005c8:	429f      	cmp	r7, r3
 80005ca:	f200 80b0 	bhi.w	800072e <__udivmoddi4+0x2a6>
 80005ce:	4620      	mov	r0, r4
 80005d0:	1bdb      	subs	r3, r3, r7
 80005d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005d6:	e7a5      	b.n	8000524 <__udivmoddi4+0x9c>
 80005d8:	f1c1 0620 	rsb	r6, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 f706 	lsr.w	r7, r2, r6
 80005e2:	431f      	orrs	r7, r3
 80005e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e8:	fa04 f301 	lsl.w	r3, r4, r1
 80005ec:	ea43 030c 	orr.w	r3, r3, ip
 80005f0:	40f4      	lsrs	r4, r6
 80005f2:	fa00 f801 	lsl.w	r8, r0, r1
 80005f6:	0c38      	lsrs	r0, r7, #16
 80005f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000600:	fa1f fc87 	uxth.w	ip, r7
 8000604:	fb00 441e 	mls	r4, r0, lr, r4
 8000608:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800060c:	fb0e f90c 	mul.w	r9, lr, ip
 8000610:	45a1      	cmp	r9, r4
 8000612:	fa02 f201 	lsl.w	r2, r2, r1
 8000616:	d90a      	bls.n	800062e <__udivmoddi4+0x1a6>
 8000618:	193c      	adds	r4, r7, r4
 800061a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800061e:	f080 8084 	bcs.w	800072a <__udivmoddi4+0x2a2>
 8000622:	45a1      	cmp	r9, r4
 8000624:	f240 8081 	bls.w	800072a <__udivmoddi4+0x2a2>
 8000628:	f1ae 0e02 	sub.w	lr, lr, #2
 800062c:	443c      	add	r4, r7
 800062e:	eba4 0409 	sub.w	r4, r4, r9
 8000632:	fa1f f983 	uxth.w	r9, r3
 8000636:	fbb4 f3f0 	udiv	r3, r4, r0
 800063a:	fb00 4413 	mls	r4, r0, r3, r4
 800063e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000642:	fb03 fc0c 	mul.w	ip, r3, ip
 8000646:	45a4      	cmp	ip, r4
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x1d2>
 800064a:	193c      	adds	r4, r7, r4
 800064c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000650:	d267      	bcs.n	8000722 <__udivmoddi4+0x29a>
 8000652:	45a4      	cmp	ip, r4
 8000654:	d965      	bls.n	8000722 <__udivmoddi4+0x29a>
 8000656:	3b02      	subs	r3, #2
 8000658:	443c      	add	r4, r7
 800065a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800065e:	fba0 9302 	umull	r9, r3, r0, r2
 8000662:	eba4 040c 	sub.w	r4, r4, ip
 8000666:	429c      	cmp	r4, r3
 8000668:	46ce      	mov	lr, r9
 800066a:	469c      	mov	ip, r3
 800066c:	d351      	bcc.n	8000712 <__udivmoddi4+0x28a>
 800066e:	d04e      	beq.n	800070e <__udivmoddi4+0x286>
 8000670:	b155      	cbz	r5, 8000688 <__udivmoddi4+0x200>
 8000672:	ebb8 030e 	subs.w	r3, r8, lr
 8000676:	eb64 040c 	sbc.w	r4, r4, ip
 800067a:	fa04 f606 	lsl.w	r6, r4, r6
 800067e:	40cb      	lsrs	r3, r1
 8000680:	431e      	orrs	r6, r3
 8000682:	40cc      	lsrs	r4, r1
 8000684:	e9c5 6400 	strd	r6, r4, [r5]
 8000688:	2100      	movs	r1, #0
 800068a:	e750      	b.n	800052e <__udivmoddi4+0xa6>
 800068c:	f1c2 0320 	rsb	r3, r2, #32
 8000690:	fa20 f103 	lsr.w	r1, r0, r3
 8000694:	fa0c fc02 	lsl.w	ip, ip, r2
 8000698:	fa24 f303 	lsr.w	r3, r4, r3
 800069c:	4094      	lsls	r4, r2
 800069e:	430c      	orrs	r4, r1
 80006a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a8:	fa1f f78c 	uxth.w	r7, ip
 80006ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b0:	fb08 3110 	mls	r1, r8, r0, r3
 80006b4:	0c23      	lsrs	r3, r4, #16
 80006b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ba:	fb00 f107 	mul.w	r1, r0, r7
 80006be:	4299      	cmp	r1, r3
 80006c0:	d908      	bls.n	80006d4 <__udivmoddi4+0x24c>
 80006c2:	eb1c 0303 	adds.w	r3, ip, r3
 80006c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80006ca:	d22c      	bcs.n	8000726 <__udivmoddi4+0x29e>
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d92a      	bls.n	8000726 <__udivmoddi4+0x29e>
 80006d0:	3802      	subs	r0, #2
 80006d2:	4463      	add	r3, ip
 80006d4:	1a5b      	subs	r3, r3, r1
 80006d6:	b2a4      	uxth	r4, r4
 80006d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80006dc:	fb08 3311 	mls	r3, r8, r1, r3
 80006e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e4:	fb01 f307 	mul.w	r3, r1, r7
 80006e8:	42a3      	cmp	r3, r4
 80006ea:	d908      	bls.n	80006fe <__udivmoddi4+0x276>
 80006ec:	eb1c 0404 	adds.w	r4, ip, r4
 80006f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80006f4:	d213      	bcs.n	800071e <__udivmoddi4+0x296>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d911      	bls.n	800071e <__udivmoddi4+0x296>
 80006fa:	3902      	subs	r1, #2
 80006fc:	4464      	add	r4, ip
 80006fe:	1ae4      	subs	r4, r4, r3
 8000700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000704:	e739      	b.n	800057a <__udivmoddi4+0xf2>
 8000706:	4604      	mov	r4, r0
 8000708:	e6f0      	b.n	80004ec <__udivmoddi4+0x64>
 800070a:	4608      	mov	r0, r1
 800070c:	e706      	b.n	800051c <__udivmoddi4+0x94>
 800070e:	45c8      	cmp	r8, r9
 8000710:	d2ae      	bcs.n	8000670 <__udivmoddi4+0x1e8>
 8000712:	ebb9 0e02 	subs.w	lr, r9, r2
 8000716:	eb63 0c07 	sbc.w	ip, r3, r7
 800071a:	3801      	subs	r0, #1
 800071c:	e7a8      	b.n	8000670 <__udivmoddi4+0x1e8>
 800071e:	4631      	mov	r1, r6
 8000720:	e7ed      	b.n	80006fe <__udivmoddi4+0x276>
 8000722:	4603      	mov	r3, r0
 8000724:	e799      	b.n	800065a <__udivmoddi4+0x1d2>
 8000726:	4630      	mov	r0, r6
 8000728:	e7d4      	b.n	80006d4 <__udivmoddi4+0x24c>
 800072a:	46d6      	mov	lr, sl
 800072c:	e77f      	b.n	800062e <__udivmoddi4+0x1a6>
 800072e:	4463      	add	r3, ip
 8000730:	3802      	subs	r0, #2
 8000732:	e74d      	b.n	80005d0 <__udivmoddi4+0x148>
 8000734:	4606      	mov	r6, r0
 8000736:	4623      	mov	r3, r4
 8000738:	4608      	mov	r0, r1
 800073a:	e70f      	b.n	800055c <__udivmoddi4+0xd4>
 800073c:	3e02      	subs	r6, #2
 800073e:	4463      	add	r3, ip
 8000740:	e730      	b.n	80005a4 <__udivmoddi4+0x11c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000754:	2334      	movs	r3, #52	@ 0x34
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <tx_application_define+0x4c>)
 800075e:	490e      	ldr	r1, [pc, #56]	@ (8000798 <tx_application_define+0x50>)
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <tx_application_define+0x54>)
 8000762:	f00c faf3 	bl	800cd4c <_txe_byte_pool_create>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10e      	bne.n	800078a <tx_application_define+0x42>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <tx_application_define+0x54>)
 800076e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f000 fa4d 	bl	8000c10 <App_ThreadX_Init>
 8000776:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f001 f9e8 	bl	8001b58 <ThreadX_Init>
 8000788:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000006c 	.word	0x2000006c
 8000798:	0800d508 	.word	0x0800d508
 800079c:	2001006c 	.word	0x2001006c

080007a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00c fe6d 	bl	800d498 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800082a:	f003 f98b 	bl	8003b44 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 fde2 	bl	80013fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000844:	f004 fc4e 	bl	80050e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800084e:	f000 fdd5 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_ADC1_Init+0xec>)
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000856:	2306      	movs	r3, #6
 8000858:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	237f      	movs	r3, #127	@ 0x7f
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000870:	f003 fe76 	bl	8004560 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087a:	f000 fdbf 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200100a0 	.word	0x200100a0
 800088c:	10c00010 	.word	0x10c00010

08000890 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f00c fdfb 	bl	800d498 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008a4:	4a5e      	ldr	r2, [pc, #376]	@ (8000a20 <MX_ADC4_Init+0x190>)
 80008a6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ae:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b59      	ldr	r3, [pc, #356]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008bc:	4b57      	ldr	r3, [pc, #348]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c2:	4b56      	ldr	r3, [pc, #344]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008c8:	4b54      	ldr	r3, [pc, #336]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008d4:	4b51      	ldr	r3, [pc, #324]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008dc:	2208      	movs	r2, #8
 80008de:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e8:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008f4:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fc:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000902:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000904:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800090c:	4843      	ldr	r0, [pc, #268]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800090e:	f003 f919 	bl	8003b44 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 fd70 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800091c:	4b41      	ldr	r3, [pc, #260]	@ (8000a24 <MX_ADC4_Init+0x194>)
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000920:	2306      	movs	r3, #6
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000928:	237f      	movs	r3, #127	@ 0x7f
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4838      	ldr	r0, [pc, #224]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800093a:	f003 fe11 	bl	8004560 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000944:	f000 fd5a 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <MX_ADC4_Init+0x198>)
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094c:	230c      	movs	r3, #12
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4831      	ldr	r0, [pc, #196]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000956:	f003 fe03 	bl	8004560 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000960:	f000 fd4c 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b31      	ldr	r3, [pc, #196]	@ (8000a2c <MX_ADC4_Init+0x19c>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000968:	2312      	movs	r3, #18
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	482a      	ldr	r0, [pc, #168]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000972:	f003 fdf5 	bl	8004560 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 800097c:	f000 fd3e 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_ADC4_Init+0x1a0>)
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000984:	2318      	movs	r3, #24
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800098e:	f003 fde7 	bl	8004560 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000998:	f000 fd30 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_ADC4_Init+0x1a4>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ac:	f003 fdd8 	bl	8004560 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 80009b6:	f000 fd21 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_ADC4_Init+0x1a8>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009be:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ca:	f003 fdc9 	bl	8004560 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 80009d4:	f000 fd12 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_ADC4_Init+0x1ac>)
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009dc:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009e8:	f003 fdba 	bl	8004560 <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 80009f2:	f000 fd03 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_ADC4_Init+0x1b0>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009fa:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000a06:	f003 fdab 	bl	8004560 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000a10:	f000 fcf4 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2001010c 	.word	0x2001010c
 8000a20:	50000500 	.word	0x50000500
 8000a24:	14f00020 	.word	0x14f00020
 8000a28:	32601000 	.word	0x32601000
 8000a2c:	2a000400 	.word	0x2a000400
 8000a30:	2e300800 	.word	0x2e300800
 8000a34:	36902000 	.word	0x36902000
 8000a38:	1d500080 	.word	0x1d500080
 8000a3c:	21800100 	.word	0x21800100
 8000a40:	25b00200 	.word	0x25b00200

08000a44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0a2      	sub	sp, #136	@ 0x88
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	2254      	movs	r2, #84	@ 0x54
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00c fd17 	bl	800d498 <memset>
  if(adcHandle->Instance==ADC1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a72:	d135      	bne.n	8000ae0 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	4618      	mov	r0, r3
 8000a86:	f007 fc47 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a90:	f000 fcb4 	bl	80013fc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a94:	4b58      	ldr	r3, [pc, #352]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	4a57      	ldr	r2, [pc, #348]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa0:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b52      	ldr	r3, [pc, #328]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab0:	4a51      	ldr	r2, [pc, #324]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f005 fd0d 	bl	80064f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000ade:	e086      	b.n	8000bee <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a45      	ldr	r2, [pc, #276]	@ (8000bfc <HAL_ADC_MspInit+0x1b8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 8081 	bne.w	8000bee <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000af2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f007 fc0b 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000b08:	f000 fc78 	bl	80013fc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a39      	ldr	r2, [pc, #228]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	4a33      	ldr	r2, [pc, #204]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b58:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b66:	4619      	mov	r1, r3
 8000b68:	4825      	ldr	r0, [pc, #148]	@ (8000c00 <HAL_ADC_MspInit+0x1bc>)
 8000b6a:	f005 fcc5 	bl	80064f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000b6e:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000b72:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b80:	4619      	mov	r1, r3
 8000b82:	4820      	ldr	r0, [pc, #128]	@ (8000c04 <HAL_ADC_MspInit+0x1c0>)
 8000b84:	f005 fcb8 	bl	80064f8 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b8a:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_ADC_MspInit+0x1c8>)
 8000b8c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b90:	2226      	movs	r2, #38	@ 0x26
 8000b92:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb8:	2220      	movs	r2, #32
 8000bba:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000bc2:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bc4:	f004 fd68 	bl	8005698 <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000bce:	f000 fc15 	bl	80013fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	203d      	movs	r0, #61	@ 0x3d
 8000be4:	f004 fc3e 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000be8:	203d      	movs	r0, #61	@ 0x3d
 8000bea:	f004 fc55 	bl	8005498 <HAL_NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3788      	adds	r7, #136	@ 0x88
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000500 	.word	0x50000500
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	20010178 	.word	0x20010178
 8000c0c:	40020030 	.word	0x40020030

08000c10 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  ret = ThreadX_Init(memory_ptr);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 ff9b 	bl	8001b58 <ThreadX_Init>
 8000c22:	60f8      	str	r0, [r7, #12]
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000c32:	f00a fdc1 	bl	800b7b8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <MX_CRC_Init+0x40>)
 8000c44:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c66:	f004 fc25 	bl	80054b4 <HAL_CRC_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c70:	f000 fbc4 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200101d8 	.word	0x200101d8
 8000c7c:	40023000 	.word	0x40023000

08000c80 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_CRC_MspInit+0x38>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d10b      	bne.n	8000caa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c96:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023000 	.word	0x40023000
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cca:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	200d      	movs	r0, #13
 8000cfc:	f004 fbb2 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d00:	200d      	movs	r0, #13
 8000d02:	f004 fbc9 	bl	8005498 <HAL_NVIC_EnableIRQ>

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d1a:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <MX_FDCAN1_Init+0x8c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d26:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d2a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d52:	221f      	movs	r2, #31
 8000d54:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d88:	f004 ff6e 	bl	8005c68 <HAL_FDCAN_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000d92:	f000 fb33 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200101fc 	.word	0x200101fc
 8000da0:	40006400 	.word	0x40006400

08000da4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b09e      	sub	sp, #120	@ 0x78
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	2254      	movs	r2, #84	@ 0x54
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00c fb67 	bl	800d498 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a28      	ldr	r2, [pc, #160]	@ (8000e70 <HAL_FDCAN_MspInit+0xcc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d149      	bne.n	8000e68 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dde:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4618      	mov	r0, r3
 8000de6:	f007 fa97 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000df0:	f000 fb04 	bl	80013fc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000dfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e24:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e36:	2309      	movs	r3, #9
 8000e38:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f005 fb58 	bl	80064f8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2015      	movs	r0, #21
 8000e4e:	f004 fb09 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e52:	2015      	movs	r0, #21
 8000e54:	f004 fb20 	bl	8005498 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2016      	movs	r0, #22
 8000e5e:	f004 fb01 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e62:	2016      	movs	r0, #22
 8000e64:	f004 fb18 	bl	8005498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3778      	adds	r7, #120	@ 0x78
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40006400 	.word	0x40006400
 8000e74:	40021000 	.word	0x40021000

08000e78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	4b71      	ldr	r3, [pc, #452]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	4a70      	ldr	r2, [pc, #448]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b6b      	ldr	r3, [pc, #428]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	4a6a      	ldr	r2, [pc, #424]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb2:	4b68      	ldr	r3, [pc, #416]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b65      	ldr	r3, [pc, #404]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a64      	ldr	r2, [pc, #400]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b62      	ldr	r3, [pc, #392]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a5e      	ldr	r2, [pc, #376]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eee:	4b59      	ldr	r3, [pc, #356]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a58      	ldr	r2, [pc, #352]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b56      	ldr	r3, [pc, #344]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	4b53      	ldr	r3, [pc, #332]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a52      	ldr	r2, [pc, #328]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b50      	ldr	r3, [pc, #320]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f641 7130 	movw	r1, #7984	@ 0x1f30
 8000f24:	484c      	ldr	r0, [pc, #304]	@ (8001058 <MX_GPIO_Init+0x1e0>)
 8000f26:	f005 fc69 	bl	80067fc <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f246 0102 	movw	r1, #24578	@ 0x6002
 8000f30:	484a      	ldr	r0, [pc, #296]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000f32:	f005 fc63 	bl	80067fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000f3c:	4848      	ldr	r0, [pc, #288]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000f3e:	f005 fc5d 	bl	80067fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f48:	4846      	ldr	r0, [pc, #280]	@ (8001064 <MX_GPIO_Init+0x1ec>)
 8000f4a:	f005 fc57 	bl	80067fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f005 fc50 	bl	80067fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f5c:	f641 7330 	movw	r3, #7984	@ 0x1f30
 8000f60:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4838      	ldr	r0, [pc, #224]	@ (8001058 <MX_GPIO_Init+0x1e0>)
 8000f76:	f005 fabf 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY1_Pin;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY1_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4833      	ldr	r0, [pc, #204]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000f90:	f005 fab2 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 8000f94:	f246 0302 	movw	r3, #24578	@ 0x6002
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	482b      	ldr	r0, [pc, #172]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000fae:	f005 faa3 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin;
 8000fb2:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4825      	ldr	r0, [pc, #148]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000fcc:	f005 fa94 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY2_Pin;
 8000fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY2_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481e      	ldr	r0, [pc, #120]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000fe8:	f005 fa86 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 8000fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4817      	ldr	r0, [pc, #92]	@ (8001064 <MX_GPIO_Init+0x1ec>)
 8001006:	f005 fa77 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 800100a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f005 fa67 	bl	80064f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2101      	movs	r1, #1
 800102e:	2006      	movs	r0, #6
 8001030:	f004 fa18 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001034:	2006      	movs	r0, #6
 8001036:	f004 fa2f 	bl	8005498 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	2017      	movs	r0, #23
 8001040:	f004 fa10 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001044:	2017      	movs	r0, #23
 8001046:	f004 fa27 	bl	8005498 <HAL_NVIC_EnableIRQ>

}
 800104a:	bf00      	nop
 800104c:	3730      	adds	r7, #48	@ 0x30
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	48000800 	.word	0x48000800
 800105c:	48000400 	.word	0x48000400
 8001060:	48001000 	.word	0x48001000
 8001064:	48000c00 	.word	0x48000c00

08001068 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_I2C1_Init+0x74>)
 800106e:	4a1c      	ldr	r2, [pc, #112]	@ (80010e0 <MX_I2C1_Init+0x78>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <MX_I2C1_Init+0x7c>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_I2C1_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001080:	2201      	movs	r2, #1
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a2:	480e      	ldr	r0, [pc, #56]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010a4:	f005 fbf4 	bl	8006890 <HAL_I2C_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ae:	f000 f9a5 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4809      	ldr	r0, [pc, #36]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010b6:	f006 fa84 	bl	80075c2 <HAL_I2CEx_ConfigAnalogFilter>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010c0:	f000 f99c 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010c8:	f006 fac6 	bl	8007658 <HAL_I2CEx_ConfigDigitalFilter>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 f993 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20010260 	.word	0x20010260
 80010e0:	40005400 	.word	0x40005400
 80010e4:	30909dec 	.word	0x30909dec

080010e8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */
//    hi2c4.XferCount
  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_I2C4_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <MX_I2C4_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00F07BFF;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_I2C4_Init+0x74>)
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <MX_I2C4_Init+0x7c>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_I2C4_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_I2C4_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_I2C4_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_I2C4_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_I2C4_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_I2C4_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_I2C4_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	@ (800115c <MX_I2C4_Init+0x74>)
 8001124:	f005 fbb4 	bl	8006890 <HAL_I2C_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 f965 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <MX_I2C4_Init+0x74>)
 8001136:	f006 fa44 	bl	80075c2 <HAL_I2CEx_ConfigAnalogFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 f95c 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_I2C4_Init+0x74>)
 8001148:	f006 fa86 	bl	8007658 <HAL_I2CEx_ConfigDigitalFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 f953 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200102b4 	.word	0x200102b4
 8001160:	40008400 	.word	0x40008400
 8001164:	00f07bff 	.word	0x00f07bff

08001168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0a2      	sub	sp, #136	@ 0x88
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	2254      	movs	r2, #84	@ 0x54
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f00c f985 	bl	800d498 <memset>
  if(i2cHandle->Instance==I2C1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a57      	ldr	r2, [pc, #348]	@ (80012f0 <HAL_I2C_MspInit+0x188>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d158      	bne.n	800124a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001198:	2340      	movs	r3, #64	@ 0x40
 800119a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 f8b7 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011b0:	f000 f924 	bl	80013fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b4f      	ldr	r3, [pc, #316]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b8:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	4a48      	ldr	r2, [pc, #288]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d8:	4b46      	ldr	r3, [pc, #280]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011e8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ea:	2312      	movs	r3, #18
 80011ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f005 f976 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121e:	2304      	movs	r3, #4
 8001220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001228:	4619      	mov	r1, r3
 800122a:	4833      	ldr	r0, [pc, #204]	@ (80012f8 <HAL_I2C_MspInit+0x190>)
 800122c:	f005 f964 	bl	80064f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	4a2f      	ldr	r2, [pc, #188]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123a:	6593      	str	r3, [r2, #88]	@ 0x58
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001248:	e04d      	b.n	80012e6 <HAL_I2C_MspInit+0x17e>
  else if(i2cHandle->Instance==I2C4)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2b      	ldr	r2, [pc, #172]	@ (80012fc <HAL_I2C_MspInit+0x194>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d148      	bne.n	80012e6 <HAL_I2C_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001254:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001258:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800125a:	2300      	movs	r3, #0
 800125c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4618      	mov	r0, r3
 8001264:	f007 f858 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 800126e:	f000 f8c5 	bl	80013fc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a1f      	ldr	r2, [pc, #124]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128a:	23c0      	movs	r3, #192	@ 0xc0
 800128c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128e:	2312      	movs	r3, #18
 8001290:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 800129c:	2308      	movs	r3, #8
 800129e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012a6:	4619      	mov	r1, r3
 80012a8:	4815      	ldr	r0, [pc, #84]	@ (8001300 <HAL_I2C_MspInit+0x198>)
 80012aa:	f005 f925 	bl	80064f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b2:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2052      	movs	r0, #82	@ 0x52
 80012cc:	f004 f8ca 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80012d0:	2052      	movs	r0, #82	@ 0x52
 80012d2:	f004 f8e1 	bl	8005498 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2053      	movs	r0, #83	@ 0x53
 80012dc:	f004 f8c2 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80012e0:	2053      	movs	r0, #83	@ 0x53
 80012e2:	f004 f8d9 	bl	8005498 <HAL_NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3788      	adds	r7, #136	@ 0x88
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000400 	.word	0x48000400
 80012fc:	40008400 	.word	0x40008400
 8001300:	48000800 	.word	0x48000800

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f002 f960 	bl	80035cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f81a 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f7ff fdb2 	bl	8000e78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001314:	f7ff fcd4 	bl	8000cc0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001318:	f7ff fcfc 	bl	8000d14 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 800131c:	f000 fa28 	bl	8001770 <MX_TIM2_Init>
  MX_CRC_Init();
 8001320:	f7ff fc8c 	bl	8000c3c <MX_CRC_Init>
  MX_ADC4_Init();
 8001324:	f7ff fab4 	bl	8000890 <MX_ADC4_Init>
  MX_SPI4_Init();
 8001328:	f000 f86e 	bl	8001408 <MX_SPI4_Init>
  MX_ADC1_Init();
 800132c:	f7ff fa38 	bl	80007a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001330:	f7ff fe9a 	bl	8001068 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001334:	f7ff fed8 	bl	80010e8 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001338:	f000 fad8 	bl	80018ec <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800133c:	f7ff fc77 	bl	8000c2e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <main+0x3c>

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	@ 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	2238      	movs	r2, #56	@ 0x38
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f00c f8a0 	bl	800d498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001366:	2000      	movs	r0, #0
 8001368:	f006 f9c2 	bl	80076f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136c:	2301      	movs	r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001374:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137a:	2303      	movs	r3, #3
 800137c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800137e:	2306      	movs	r3, #6
 8001380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001382:	2350      	movs	r3, #80	@ 0x50
 8001384:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800138a:	2304      	movs	r3, #4
 800138c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138e:	2302      	movs	r3, #2
 8001390:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	4618      	mov	r0, r3
 8001398:	f006 fa5e 	bl	8007858 <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80013a2:	f000 f82b 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a6:	230f      	movs	r3, #15
 80013a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013aa:	2303      	movs	r3, #3
 80013ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2104      	movs	r1, #4
 80013be:	4618      	mov	r0, r3
 80013c0:	f006 fd5c 	bl	8007e7c <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013ca:	f000 f817 	bl	80013fc <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	@ 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ea:	f002 f907 	bl	80035fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40001000 	.word	0x40001000

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <MX_SPI4_Init+0x74>)
 800140e:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <MX_SPI4_Init+0x78>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <MX_SPI4_Init+0x74>)
 8001414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b18      	ldr	r3, [pc, #96]	@ (800147c <MX_SPI4_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <MX_SPI4_Init+0x74>)
 8001422:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001426:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_SPI4_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_SPI4_Init+0x74>)
 8001430:	2201      	movs	r2, #1
 8001432:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_SPI4_Init+0x74>)
 8001436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_SPI4_Init+0x74>)
 800143e:	2220      	movs	r2, #32
 8001440:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_SPI4_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_SPI4_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_SPI4_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_SPI4_Init+0x74>)
 8001456:	2207      	movs	r2, #7
 8001458:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800145a:	4b08      	ldr	r3, [pc, #32]	@ (800147c <MX_SPI4_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_SPI4_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_SPI4_Init+0x74>)
 8001468:	f007 f9a4 	bl	80087b4 <HAL_SPI_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001472:	f7ff ffc3 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20010308 	.word	0x20010308
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <HAL_SPI_MspInit+0x8c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d130      	bne.n	8001508 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80014d6:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014e8:	2305      	movs	r3, #5
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4809      	ldr	r0, [pc, #36]	@ (8001518 <HAL_SPI_MspInit+0x94>)
 80014f4:	f005 f800 	bl	80064f8 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2054      	movs	r0, #84	@ 0x54
 80014fe:	f003 ffb1 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001502:	2054      	movs	r0, #84	@ 0x54
 8001504:	f003 ffc8 	bl	8005498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013c00 	.word	0x40013c00
 8001514:	40021000 	.word	0x40021000
 8001518:	48001000 	.word	0x48001000

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_MspInit+0x4c>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001526:	4a10      	ldr	r2, [pc, #64]	@ (8001568 <HAL_MspInit+0x4c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6613      	str	r3, [r2, #96]	@ 0x60
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_MspInit+0x4c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_MspInit+0x4c>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_MspInit+0x4c>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001544:	6593      	str	r3, [r2, #88]	@ 0x58
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <HAL_MspInit+0x4c>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001552:	f002 f8a7 	bl	80036a4 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001556:	2002      	movs	r0, #2
 8001558:	f002 f890 	bl	800367c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800155c:	f006 f96c 	bl	8007838 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800157c:	4b2c      	ldr	r3, [pc, #176]	@ (8001630 <HAL_InitTick+0xc4>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001580:	4a2b      	ldr	r2, [pc, #172]	@ (8001630 <HAL_InitTick+0xc4>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6593      	str	r3, [r2, #88]	@ 0x58
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <HAL_InitTick+0xc4>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001594:	f107 020c 	add.w	r2, r7, #12
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 fe42 	bl	8008228 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015a4:	f006 fe14 	bl	80081d0 <HAL_RCC_GetPCLK1Freq>
 80015a8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	4a21      	ldr	r2, [pc, #132]	@ (8001634 <HAL_InitTick+0xc8>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	3b01      	subs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_InitTick+0xcc>)
 80015ba:	4a20      	ldr	r2, [pc, #128]	@ (800163c <HAL_InitTick+0xd0>)
 80015bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <HAL_InitTick+0xcc>)
 80015c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <HAL_InitTick+0xcc>)
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_InitTick+0xcc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_InitTick+0xcc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80015d8:	4817      	ldr	r0, [pc, #92]	@ (8001638 <HAL_InitTick+0xcc>)
 80015da:	f007 ffa5 	bl	8009528 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d11b      	bne.n	8001624 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015ec:	4812      	ldr	r0, [pc, #72]	@ (8001638 <HAL_InitTick+0xcc>)
 80015ee:	f007 fffd 	bl	80095ec <HAL_TIM_Base_Start_IT>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001600:	2036      	movs	r0, #54	@ 0x36
 8001602:	f003 ff49 	bl	8005498 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d808      	bhi.n	800161e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	2036      	movs	r0, #54	@ 0x36
 8001612:	f003 ff27 	bl	8005464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_InitTick+0xd4>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e002      	b.n	8001624 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001624:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001628:	4618      	mov	r0, r3
 800162a:	3730      	adds	r7, #48	@ 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	431bde83 	.word	0x431bde83
 8001638:	2001036c 	.word	0x2001036c
 800163c:	40001000 	.word	0x40001000
 8001640:	20000044 	.word	0x20000044

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY1_Pin);
 800167e:	2001      	movs	r0, #1
 8001680:	f005 f8ee 	bl	8006860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <DMA1_Channel3_IRQHandler+0x10>)
 800168e:	f004 f98d 	bl	80059ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20010178 	.word	0x20010178

0800169c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <FDCAN1_IT0_IRQHandler+0x10>)
 80016a2:	f004 fca7 	bl	8005ff4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200101fc 	.word	0x200101fc

080016b0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <FDCAN1_IT1_IRQHandler+0x10>)
 80016b6:	f004 fc9d 	bl	8005ff4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200101fc 	.word	0x200101fc

080016c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY2_Pin);
 80016c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016cc:	f005 f8c8 	bl	8006860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <TIM2_IRQHandler+0x10>)
 80016da:	f008 f9a7 	bl	8009a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200103b8 	.word	0x200103b8

080016e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <TIM6_DAC_IRQHandler+0x10>)
 80016ee:	f008 f99d 	bl	8009a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2001036c 	.word	0x2001036c

080016fc <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <ADC4_IRQHandler+0x10>)
 8001702:	f002 fcaf 	bl	8004064 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2001010c 	.word	0x2001010c

08001710 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <I2C4_EV_IRQHandler+0x10>)
 8001716:	f005 f956 	bl	80069c6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200102b4 	.word	0x200102b4

08001724 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <I2C4_ER_IRQHandler+0x10>)
 800172a:	f005 f966 	bl	80069fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200102b4 	.word	0x200102b4

08001738 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <SPI4_IRQHandler+0x10>)
 800173e:	f007 fc7b 	bl	8009038 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20010308 	.word	0x20010308

0800174c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	@ (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <MX_TIM2_Init+0xe4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017b6:	4827      	ldr	r0, [pc, #156]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017b8:	f007 ff90 	bl	80096dc <HAL_TIM_IC_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017c2:	f7ff fe1b 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	481f      	ldr	r0, [pc, #124]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017d6:	f008 fd7b 	bl	800a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017e0:	f7ff fe0c 	bl	80013fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	4816      	ldr	r0, [pc, #88]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017fc:	f008 fa65 	bl	8009cca <HAL_TIM_IC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001806:	f7ff fdf9 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2204      	movs	r2, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4810      	ldr	r0, [pc, #64]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001812:	f008 fa5a 	bl	8009cca <HAL_TIM_IC_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800181c:	f7ff fdee 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2208      	movs	r2, #8
 8001824:	4619      	mov	r1, r3
 8001826:	480b      	ldr	r0, [pc, #44]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001828:	f008 fa4f 	bl	8009cca <HAL_TIM_IC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001832:	f7ff fde3 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	220c      	movs	r2, #12
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MX_TIM2_Init+0xe4>)
 800183e:	f008 fa44 	bl	8009cca <HAL_TIM_IC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001848:	f7ff fdd8 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200103b8 	.word	0x200103b8

08001858 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001878:	d12f      	bne.n	80018da <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a19      	ldr	r2, [pc, #100]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a13      	ldr	r2, [pc, #76]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 80018aa:	23d8      	movs	r3, #216	@ 0xd8
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <HAL_TIM_IC_MspInit+0x90>)
 80018c6:	f004 fe17 	bl	80064f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201c      	movs	r0, #28
 80018d0:	f003 fdc8 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d4:	201c      	movs	r0, #28
 80018d6:	f003 fddf 	bl	8005498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000c00 	.word	0x48000c00

080018ec <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 80018f2:	4a21      	ldr	r2, [pc, #132]	@ (8001978 <MX_LPUART1_UART_Init+0x8c>)
 80018f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 80018f8:	4a20      	ldr	r2, [pc, #128]	@ (800197c <MX_LPUART1_UART_Init+0x90>)
 80018fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001910:	220c      	movs	r2, #12
 8001912:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800192c:	4811      	ldr	r0, [pc, #68]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 800192e:	f008 fdab 	bl	800a488 <HAL_UART_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001938:	f7ff fd60 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193c:	2100      	movs	r1, #0
 800193e:	480d      	ldr	r0, [pc, #52]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001940:	f009 fb46 	bl	800afd0 <HAL_UARTEx_SetTxFifoThreshold>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800194a:	f7ff fd57 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194e:	2100      	movs	r1, #0
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001952:	f009 fb7b 	bl	800b04c <HAL_UARTEx_SetRxFifoThreshold>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800195c:	f7ff fd4e 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001962:	f009 fafc 	bl	800af5e <HAL_UARTEx_DisableFifoMode>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800196c:	f7ff fd46 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20010404 	.word	0x20010404
 8001978:	40008000 	.word	0x40008000
 800197c:	00033324 	.word	0x00033324

08001980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09e      	sub	sp, #120	@ 0x78
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2254      	movs	r2, #84	@ 0x54
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00b fd79 	bl	800d498 <memset>
  if(uartHandle->Instance==LPUART1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <HAL_UART_MspInit+0xa4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d135      	bne.n	8001a1c <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019b0:	2320      	movs	r3, #32
 80019b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4618      	mov	r0, r3
 80019be:	f006 fcab 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019c8:	f7ff fd18 	bl	80013fc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	4a15      	ldr	r2, [pc, #84]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e4:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019fc:	2303      	movs	r3, #3
 80019fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a14:	4619      	mov	r1, r3
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <HAL_UART_MspInit+0xac>)
 8001a18:	f004 fd6e 	bl	80064f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3778      	adds	r7, #120	@ 0x78
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40008000 	.word	0x40008000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a30:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a34:	f7ff fe8a 	bl	800174c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3a:	490d      	ldr	r1, [pc, #52]	@ (8001a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <LoopForever+0xe>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a50:	4c0a      	ldr	r4, [pc, #40]	@ (8001a7c <LoopForever+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f00b fd23 	bl	800d4a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7ff fc4f 	bl	8001304 <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   r0, =_estack
 8001a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001a74:	0800d728 	.word	0x0800d728
  ldr r2, =_sbss
 8001a78:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001a7c:	200110b0 	.word	0x200110b0

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>
	...

08001a84 <HAL_ADC_ConvCpltCallback>:
	analogSwitch8
};

void HAL_ADC_ConvCpltCallback(
    ADC_HandleTypeDef* hadc
){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    tx_semaphore_put(&semaphoreAnalog);
 8001a8c:	4803      	ldr	r0, [pc, #12]	@ (8001a9c <HAL_ADC_ConvCpltCallback+0x18>)
 8001a8e:	f00b fad5 	bl	800d03c <_txe_semaphore_put>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20010758 	.word	0x20010758

08001aa0 <setAnalogSwitches>:

uint8_t setAnalogSwitches(
	const uint8_t switchSettings[NUM_ADC_CHANNELS]
){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e017      	b.n	8001ae2 <setAnalogSwitches+0x42>
		if(switchSettings[i]){
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <setAnalogSwitches+0x2e>
			set12VSensor(&analogSwitches[i]);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8001af4 <setAnalogSwitches+0x54>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f816 	bl	8001af8 <set12VSensor>
 8001acc:	e006      	b.n	8001adc <setAnalogSwitches+0x3c>
		}else{
			set5VSensor(&analogSwitches[i]);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <setAnalogSwitches+0x54>)
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f826 	bl	8001b28 <set5VSensor>
	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b07      	cmp	r3, #7
 8001ae6:	d9e4      	bls.n	8001ab2 <setAnalogSwitches+0x12>
		}
	}
	return retval;
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000004 	.word	0x20000004

08001af8 <set12VSensor>:

uint8_t set12VSensor(
	gpio_control_t *self
){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <set12VSensor+0x16>
		retval = UCR_NPTR;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(self->port, self->pin, SET_12V);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	889b      	ldrh	r3, [r3, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f004 fe6f 	bl	80067fc <HAL_GPIO_WritePin>
	return retval;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <set5VSensor>:

uint8_t set5VSensor(
	gpio_control_t *self
){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <set5VSensor+0x16>
		retval = UCR_NPTR;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(self->port, self->pin, SET_5V);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	889b      	ldrh	r3, [r3, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f004 fe57 	bl	80067fc <HAL_GPIO_WritePin>
	return retval;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <ThreadX_Init>:
};


UINT ThreadX_Init(
        VOID *memory_ptr
){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08e      	sub	sp, #56	@ 0x38
 8001b5c:	af08      	add	r7, sp, #32
 8001b5e:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001b68:	f107 010c 	add.w	r1, r7, #12
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b72:	6938      	ldr	r0, [r7, #16]
 8001b74:	f00b f876 	bl	800cc64 <_txe_byte_allocate>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <ThreadX_Init+0x2a>
	    return TX_POOL_ERROR;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e0c0      	b.n	8001d04 <ThreadX_Init+0x1ac>
	}

	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	22b0      	movs	r2, #176	@ 0xb0
 8001b86:	9206      	str	r2, [sp, #24]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	9205      	str	r2, [sp, #20]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	9204      	str	r2, [sp, #16]
 8001b90:	220a      	movs	r2, #10
 8001b92:	9203      	str	r2, [sp, #12]
 8001b94:	220a      	movs	r2, #10
 8001b96:	9202      	str	r2, [sp, #8]
 8001b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b9c:	9201      	str	r2, [sp, #4]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d0c <ThreadX_Init+0x1b4>)
 8001ba4:	495a      	ldr	r1, [pc, #360]	@ (8001d10 <ThreadX_Init+0x1b8>)
 8001ba6:	485b      	ldr	r0, [pc, #364]	@ (8001d14 <ThreadX_Init+0x1bc>)
 8001ba8:	f00b fa66 	bl	800d078 <_txe_thread_create>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <ThreadX_Init+0x5e>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8001bb2:	230e      	movs	r3, #14
 8001bb4:	e0a6      	b.n	8001d04 <ThreadX_Init+0x1ac>
	}

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001bb6:	f107 010c 	add.w	r1, r7, #12
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc0:	6938      	ldr	r0, [r7, #16]
 8001bc2:	f00b f84f 	bl	800cc64 <_txe_byte_allocate>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <ThreadX_Init+0x78>
	    return TX_POOL_ERROR;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e099      	b.n	8001d04 <ThreadX_Init+0x1ac>
    }

	if(tx_thread_create(&txAnalogThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	22b0      	movs	r2, #176	@ 0xb0
 8001bd4:	9206      	str	r2, [sp, #24]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	9205      	str	r2, [sp, #20]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	9204      	str	r2, [sp, #16]
 8001bde:	220a      	movs	r2, #10
 8001be0:	9203      	str	r2, [sp, #12]
 8001be2:	220b      	movs	r2, #11
 8001be4:	9202      	str	r2, [sp, #8]
 8001be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bea:	9201      	str	r2, [sp, #4]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	4a49      	ldr	r2, [pc, #292]	@ (8001d18 <ThreadX_Init+0x1c0>)
 8001bf2:	494a      	ldr	r1, [pc, #296]	@ (8001d1c <ThreadX_Init+0x1c4>)
 8001bf4:	484a      	ldr	r0, [pc, #296]	@ (8001d20 <ThreadX_Init+0x1c8>)
 8001bf6:	f00b fa3f 	bl	800d078 <_txe_thread_create>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <ThreadX_Init+0xac>
						 TX_APP_STACK_SIZE, TX_ANALOG_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8001c00:	230e      	movs	r3, #14
 8001c02:	e07f      	b.n	8001d04 <ThreadX_Init+0x1ac>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001c04:	f107 010c 	add.w	r1, r7, #12
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c0e:	6938      	ldr	r0, [r7, #16]
 8001c10:	f00b f828 	bl	800cc64 <_txe_byte_allocate>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <ThreadX_Init+0xc6>
        return TX_POOL_ERROR;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e072      	b.n	8001d04 <ThreadX_Init+0x1ac>
//					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
//    ){
//		return TX_THREAD_ERROR;
//	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001c1e:	f107 010c 	add.w	r1, r7, #12
 8001c22:	2300      	movs	r3, #0
 8001c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c28:	6938      	ldr	r0, [r7, #16]
 8001c2a:	f00b f81b 	bl	800cc64 <_txe_byte_allocate>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <ThreadX_Init+0xe0>
        return TX_POOL_ERROR;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e065      	b.n	8001d04 <ThreadX_Init+0x1ac>
    }

	if(tx_thread_create(&txCAN100HzThread, "txCAN100Hz", txCAN100HzThreadEntry, 0, pointer,
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	22b0      	movs	r2, #176	@ 0xb0
 8001c3c:	9206      	str	r2, [sp, #24]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	9205      	str	r2, [sp, #20]
 8001c42:	2200      	movs	r2, #0
 8001c44:	9204      	str	r2, [sp, #16]
 8001c46:	220a      	movs	r2, #10
 8001c48:	9203      	str	r2, [sp, #12]
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	9202      	str	r2, [sp, #8]
 8001c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c52:	9201      	str	r2, [sp, #4]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	4a32      	ldr	r2, [pc, #200]	@ (8001d24 <ThreadX_Init+0x1cc>)
 8001c5a:	4933      	ldr	r1, [pc, #204]	@ (8001d28 <ThreadX_Init+0x1d0>)
 8001c5c:	4833      	ldr	r0, [pc, #204]	@ (8001d2c <ThreadX_Init+0x1d4>)
 8001c5e:	f00b fa0b 	bl	800d078 <_txe_thread_create>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <ThreadX_Init+0x114>
					   TX_APP_STACK_SIZE, 12, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 8001c68:	230e      	movs	r3, #14
 8001c6a:	e04b      	b.n	8001d04 <ThreadX_Init+0x1ac>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001c6c:	f107 010c 	add.w	r1, r7, #12
 8001c70:	2300      	movs	r3, #0
 8001c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c76:	6938      	ldr	r0, [r7, #16]
 8001c78:	f00a fff4 	bl	800cc64 <_txe_byte_allocate>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <ThreadX_Init+0x12e>
        return TX_POOL_ERROR;
 8001c82:	2302      	movs	r3, #2
 8001c84:	e03e      	b.n	8001d04 <ThreadX_Init+0x1ac>
    }

	if(tx_thread_create(&txStrainThread, "txStrainThread", txADS1ThreadInput, 0, pointer,
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	22b0      	movs	r2, #176	@ 0xb0
 8001c8a:	9206      	str	r2, [sp, #24]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	9205      	str	r2, [sp, #20]
 8001c90:	2200      	movs	r2, #0
 8001c92:	9204      	str	r2, [sp, #16]
 8001c94:	220a      	movs	r2, #10
 8001c96:	9203      	str	r2, [sp, #12]
 8001c98:	220f      	movs	r2, #15
 8001c9a:	9202      	str	r2, [sp, #8]
 8001c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ca0:	9201      	str	r2, [sp, #4]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4a22      	ldr	r2, [pc, #136]	@ (8001d30 <ThreadX_Init+0x1d8>)
 8001ca8:	4922      	ldr	r1, [pc, #136]	@ (8001d34 <ThreadX_Init+0x1dc>)
 8001caa:	4823      	ldr	r0, [pc, #140]	@ (8001d38 <ThreadX_Init+0x1e0>)
 8001cac:	f00b f9e4 	bl	800d078 <_txe_thread_create>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <ThreadX_Init+0x162>
                       TX_APP_STACK_SIZE, 15, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
        return TX_THREAD_ERROR;
 8001cb6:	230e      	movs	r3, #14
 8001cb8:	e024      	b.n	8001d04 <ThreadX_Init+0x1ac>
    }

	tx_semaphore_create(&semaphoreAnalog, "semaphoreAnalog", 0);
 8001cba:	231c      	movs	r3, #28
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	491f      	ldr	r1, [pc, #124]	@ (8001d3c <ThreadX_Init+0x1e4>)
 8001cc0:	481f      	ldr	r0, [pc, #124]	@ (8001d40 <ThreadX_Init+0x1e8>)
 8001cc2:	f00b f8e3 	bl	800ce8c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreAero, "semaphoreAero", 0);
 8001cc6:	231c      	movs	r3, #28
 8001cc8:	2200      	movs	r2, #0
 8001cca:	491e      	ldr	r1, [pc, #120]	@ (8001d44 <ThreadX_Init+0x1ec>)
 8001ccc:	481e      	ldr	r0, [pc, #120]	@ (8001d48 <ThreadX_Init+0x1f0>)
 8001cce:	f00b f8dd 	bl	800ce8c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreFrequency, "semaphoreFrequency", 1);
 8001cd2:	231c      	movs	r3, #28
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	491d      	ldr	r1, [pc, #116]	@ (8001d4c <ThreadX_Init+0x1f4>)
 8001cd8:	481d      	ldr	r0, [pc, #116]	@ (8001d50 <ThreadX_Init+0x1f8>)
 8001cda:	f00b f8d7 	bl	800ce8c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC1, "semaphoreExADC1", 0);
 8001cde:	231c      	movs	r3, #28
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	491c      	ldr	r1, [pc, #112]	@ (8001d54 <ThreadX_Init+0x1fc>)
 8001ce4:	481c      	ldr	r0, [pc, #112]	@ (8001d58 <ThreadX_Init+0x200>)
 8001ce6:	f00b f8d1 	bl	800ce8c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC2, "semaphoreExADC2", 0);
 8001cea:	231c      	movs	r3, #28
 8001cec:	2200      	movs	r2, #0
 8001cee:	491b      	ldr	r1, [pc, #108]	@ (8001d5c <ThreadX_Init+0x204>)
 8001cf0:	481b      	ldr	r0, [pc, #108]	@ (8001d60 <ThreadX_Init+0x208>)
 8001cf2:	f00b f8cb 	bl	800ce8c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreSPI, "semaphoreSPI", 0);
 8001cf6:	231c      	movs	r3, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	491a      	ldr	r1, [pc, #104]	@ (8001d64 <ThreadX_Init+0x20c>)
 8001cfc:	481a      	ldr	r0, [pc, #104]	@ (8001d68 <ThreadX_Init+0x210>)
 8001cfe:	f00b f8c5 	bl	800ce8c <_txe_semaphore_create>
    

	return ret;
 8001d02:	697b      	ldr	r3, [r7, #20]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	08001d6d 	.word	0x08001d6d
 8001d10:	0800d51c 	.word	0x0800d51c
 8001d14:	20010498 	.word	0x20010498
 8001d18:	08001dbd 	.word	0x08001dbd
 8001d1c:	0800d52c 	.word	0x0800d52c
 8001d20:	20010548 	.word	0x20010548
 8001d24:	08001e65 	.word	0x08001e65
 8001d28:	0800d53c 	.word	0x0800d53c
 8001d2c:	200105f8 	.word	0x200105f8
 8001d30:	08001f65 	.word	0x08001f65
 8001d34:	0800d548 	.word	0x0800d548
 8001d38:	200106a8 	.word	0x200106a8
 8001d3c:	0800d558 	.word	0x0800d558
 8001d40:	20010758 	.word	0x20010758
 8001d44:	0800d568 	.word	0x0800d568
 8001d48:	20010774 	.word	0x20010774
 8001d4c:	0800d578 	.word	0x0800d578
 8001d50:	20010790 	.word	0x20010790
 8001d54:	0800d58c 	.word	0x0800d58c
 8001d58:	200107ac 	.word	0x200107ac
 8001d5c:	0800d59c 	.word	0x0800d59c
 8001d60:	200107c8 	.word	0x200107c8
 8001d64:	0800d5ac 	.word	0x0800d5ac
 8001d68:	200107e4 	.word	0x200107e4

08001d6c <txMainThreadEntry>:


void txMainThreadEntry(
    ULONG threadInput
){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    HAL_FDCAN_Start(&hfdcan1);
 8001d74:	480e      	ldr	r0, [pc, #56]	@ (8001db0 <txMainThreadEntry+0x44>)
 8001d76:	f004 f8d1 	bl	8005f1c <HAL_FDCAN_Start>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	480d      	ldr	r0, [pc, #52]	@ (8001db4 <txMainThreadEntry+0x48>)
 8001d7e:	f007 fd05 	bl	800978c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001d82:	2104      	movs	r1, #4
 8001d84:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <txMainThreadEntry+0x48>)
 8001d86:	f007 fd01 	bl	800978c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001d8a:	2108      	movs	r1, #8
 8001d8c:	4809      	ldr	r0, [pc, #36]	@ (8001db4 <txMainThreadEntry+0x48>)
 8001d8e:	f007 fcfd 	bl	800978c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001d92:	210c      	movs	r1, #12
 8001d94:	4807      	ldr	r0, [pc, #28]	@ (8001db4 <txMainThreadEntry+0x48>)
 8001d96:	f007 fcf9 	bl	800978c <HAL_TIM_IC_Start_IT>


	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001d9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d9e:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <txMainThreadEntry+0x4c>)
 8001da0:	f004 fd44 	bl	800682c <HAL_GPIO_TogglePin>

	    tx_thread_sleep(1000);
 8001da4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da8:	f00a f866 	bl	800be78 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001dac:	bf00      	nop
 8001dae:	e7f4      	b.n	8001d9a <txMainThreadEntry+0x2e>
 8001db0:	200101fc 	.word	0x200101fc
 8001db4:	200103b8 	.word	0x200103b8
 8001db8:	48000800 	.word	0x48000800

08001dbc <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b09c      	sub	sp, #112	@ 0x70
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
    uint8_t analogRxData[ANALOG_DATA_LENGTH];
    uint32_t adcValues[NUM_ADC_CHANNELS];
    setAnalogSwitches(analogSwitchStates);
 8001dc4:	4822      	ldr	r0, [pc, #136]	@ (8001e50 <txAnalogThreadEntry+0x94>)
 8001dc6:	f7ff fe6b 	bl	8001aa0 <setAnalogSwitches>

    FDCAN_TxHeaderTypeDef analogHeader = {
 8001dca:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <txAnalogThreadEntry+0x98>)
 8001dcc:	f107 041c 	add.w	r4, r7, #28
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dda:	682b      	ldr	r3, [r5, #0]
 8001ddc:	6023      	str	r3, [r4, #0]
            .FDFormat = FDCAN_FD_CAN,
            .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
            .MessageMarker = 0
    };
    while(1){
        HAL_ADC_Start_DMA(&hadc4, adcValues, NUM_ADC_CHANNELS);
 8001dde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001de2:	2208      	movs	r2, #8
 8001de4:	4619      	mov	r1, r3
 8001de6:	481c      	ldr	r0, [pc, #112]	@ (8001e58 <txAnalogThreadEntry+0x9c>)
 8001de8:	f002 f868 	bl	8003ebc <HAL_ADC_Start_DMA>
        tx_semaphore_get(&semaphoreAnalog, TX_WAIT_FOREVER);
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	481a      	ldr	r0, [pc, #104]	@ (8001e5c <txAnalogThreadEntry+0xa0>)
 8001df2:	f00b f8e1 	bl	800cfb8 <_txe_semaphore_get>
        struct analogData_t analogStruct = {
            .analog1 = adcValues[0],
 8001df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        struct analogData_t analogStruct = {
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	81bb      	strh	r3, [r7, #12]
            .analog2 = adcValues[1],
 8001dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
        struct analogData_t analogStruct = {
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	81fb      	strh	r3, [r7, #14]
            .analog3 = adcValues[2],
 8001e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
        struct analogData_t analogStruct = {
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	823b      	strh	r3, [r7, #16]
            .analog4 = adcValues[3],
 8001e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
        struct analogData_t analogStruct = {
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	827b      	strh	r3, [r7, #18]
            .analog5 = adcValues[4],
 8001e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
        struct analogData_t analogStruct = {
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	82bb      	strh	r3, [r7, #20]
            .analog6 = adcValues[5],
 8001e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
        struct analogData_t analogStruct = {
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	82fb      	strh	r3, [r7, #22]
            .analog7 = adcValues[6],
 8001e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
        struct analogData_t analogStruct = {
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	833b      	strh	r3, [r7, #24]
            .analog8 = adcValues[7]
 8001e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
        struct analogData_t analogStruct = {
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	837b      	strh	r3, [r7, #26]
        };
        analogPack(analogRxData, &analogStruct, ANALOG_DATA_LENGTH);
 8001e26:	f107 010c 	add.w	r1, r7, #12
 8001e2a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e2e:	2210      	movs	r2, #16
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 fe4d 	bl	8002ad0 <ucr_01_front_analog_pack>
        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &analogHeader, analogRxData);
 8001e36:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4807      	ldr	r0, [pc, #28]	@ (8001e60 <txAnalogThreadEntry+0xa4>)
 8001e42:	f004 f893 	bl	8005f6c <HAL_FDCAN_AddMessageToTxFifoQ>
        tx_thread_sleep(4);
 8001e46:	2004      	movs	r0, #4
 8001e48:	f00a f816 	bl	800be78 <_tx_thread_sleep>
    while(1){
 8001e4c:	bf00      	nop
 8001e4e:	e7c6      	b.n	8001dde <txAnalogThreadEntry+0x22>
 8001e50:	0800d6d0 	.word	0x0800d6d0
 8001e54:	0800d5bc 	.word	0x0800d5bc
 8001e58:	2001010c 	.word	0x2001010c
 8001e5c:	20010758 	.word	0x20010758
 8001e60:	200101fc 	.word	0x200101fc

08001e64 <txCAN100HzThreadEntry>:
    }
}

void txCAN100HzThreadEntry(
    ULONG threadInput
){
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b09a      	sub	sp, #104	@ 0x68
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    if(UCR_OK != FrequencyInit()){
 8001e6c:	f000 f9ca 	bl	8002204 <FrequencyInit>

    }
	uint8_t preScalar = htim2.Init.Prescaler + 1;
 8001e70:	4b36      	ldr	r3, [pc, #216]	@ (8001f4c <txCAN100HzThreadEntry+0xe8>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    float refClock = TIMCLOCK/(preScalar);
 8001e7c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001e80:	4a33      	ldr	r2, [pc, #204]	@ (8001f50 <txCAN100HzThreadEntry+0xec>)
 8001e82:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	float frequency[NUM_FREQUENCY_CHANNELS];
	uint8_t frequencyData[FREQUENCY_DATA_LENGTH];
	FDCAN_TxHeaderTypeDef frequencyHeader = {
 8001e92:	4b30      	ldr	r3, [pc, #192]	@ (8001f54 <txCAN100HzThreadEntry+0xf0>)
 8001e94:	f107 0418 	add.w	r4, r7, #24
 8001e98:	461d      	mov	r5, r3
 8001e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	6023      	str	r3, [r4, #0]
	        .MessageMarker = 0
	};

    while(1){
        // Acquire the semaphore
    	tx_semaphore_get(&semaphoreFrequency, TX_WAIT_FOREVER);
 8001ea6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eaa:	482b      	ldr	r0, [pc, #172]	@ (8001f58 <txCAN100HzThreadEntry+0xf4>)
 8001eac:	f00b f884 	bl	800cfb8 <_txe_semaphore_get>
    	// Convert the data to frequency and encode it
    	for(int i = 0; i < 4; i ++){
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001eb4:	e028      	b.n	8001f08 <txCAN100HzThreadEntry+0xa4>
    	    if(!ChannelData[i].difference){
 8001eb6:	4a29      	ldr	r2, [pc, #164]	@ (8001f5c <txCAN100HzThreadEntry+0xf8>)
 8001eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001eba:	019b      	lsls	r3, r3, #6
 8001ebc:	4413      	add	r3, r2
 8001ebe:	333c      	adds	r3, #60	@ 0x3c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d108      	bne.n	8001ed8 <txCAN100HzThreadEntry+0x74>
    	        frequency[i] = 0;
 8001ec6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3368      	adds	r3, #104	@ 0x68
 8001ecc:	443b      	add	r3, r7
 8001ece:	3b1c      	subs	r3, #28
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e014      	b.n	8001f02 <txCAN100HzThreadEntry+0x9e>
    	    }else{
    	        frequency[i] = refClock / ChannelData[i].difference;
 8001ed8:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <txCAN100HzThreadEntry+0xf8>)
 8001eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001edc:	019b      	lsls	r3, r3, #6
 8001ede:	4413      	add	r3, r2
 8001ee0:	333c      	adds	r3, #60	@ 0x3c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eec:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8001ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3368      	adds	r3, #104	@ 0x68
 8001efa:	443b      	add	r3, r7
 8001efc:	3b1c      	subs	r3, #28
 8001efe:	edc3 7a00 	vstr	s15, [r3]
    	for(int i = 0; i < 4; i ++){
 8001f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f04:	3301      	adds	r3, #1
 8001f06:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	ddd3      	ble.n	8001eb6 <txCAN100HzThreadEntry+0x52>
    	    }
    	}
    	struct frequencyData_t frequencyStruct = {
    	        .freq1 = frequency[0],
 8001f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    	struct frequencyData_t frequencyStruct = {
 8001f10:	60bb      	str	r3, [r7, #8]
    	        .freq2 = frequency[1],
 8001f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    	struct frequencyData_t frequencyStruct = {
 8001f14:	60fb      	str	r3, [r7, #12]
    	        .freq3 = frequency[2],
 8001f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    	struct frequencyData_t frequencyStruct = {
 8001f18:	613b      	str	r3, [r7, #16]
    	        .freq4 = frequency[3]
 8001f1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
    	struct frequencyData_t frequencyStruct = {
 8001f1c:	617b      	str	r3, [r7, #20]
    	};
    	frequencyPack(frequencyData, &frequencyStruct, FREQUENCY_DATA_LENGTH);
 8001f1e:	f107 0108 	add.w	r1, r7, #8
 8001f22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f26:	2210      	movs	r2, #16
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 f981 	bl	8003230 <ucr_01_front_frequency_pack>
    	tx_semaphore_put(&semaphoreFrequency);
 8001f2e:	480a      	ldr	r0, [pc, #40]	@ (8001f58 <txCAN100HzThreadEntry+0xf4>)
 8001f30:	f00b f884 	bl	800d03c <_txe_semaphore_put>
    	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frequencyHeader, frequencyData);
 8001f34:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001f38:	f107 0318 	add.w	r3, r7, #24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4808      	ldr	r0, [pc, #32]	@ (8001f60 <txCAN100HzThreadEntry+0xfc>)
 8001f40:	f004 f814 	bl	8005f6c <HAL_FDCAN_AddMessageToTxFifoQ>

        tx_thread_sleep(10);
 8001f44:	200a      	movs	r0, #10
 8001f46:	f009 ff97 	bl	800be78 <_tx_thread_sleep>
    while(1){
 8001f4a:	e7ac      	b.n	8001ea6 <txCAN100HzThreadEntry+0x42>
 8001f4c:	200103b8 	.word	0x200103b8
 8001f50:	0a21fe80 	.word	0x0a21fe80
 8001f54:	0800d604 	.word	0x0800d604
 8001f58:	20010790 	.word	0x20010790
 8001f5c:	20010800 	.word	0x20010800
 8001f60:	200101fc 	.word	0x200101fc

08001f64 <txADS1ThreadInput>:
    }
}

void txADS1ThreadInput(
    ULONG threadInput
){
 8001f64:	b5b0      	push	{r4, r5, r7, lr}
 8001f66:	b0b4      	sub	sp, #208	@ 0xd0
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
//    uint8_t rxData[3];
//    uint8_t inputSet = 0;
    uint8_t canTxData[20];
//    uint64_t combinedData[6];
    externalADC1.csPinPort = CS1_GPIO_Port;
 8001f6c:	4b9c      	ldr	r3, [pc, #624]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8001f6e:	4a9d      	ldr	r2, [pc, #628]	@ (80021e4 <txADS1ThreadInput+0x280>)
 8001f70:	61da      	str	r2, [r3, #28]
    externalADC1.csPin = CS1_Pin;
 8001f72:	4b9b      	ldr	r3, [pc, #620]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8001f74:	2220      	movs	r2, #32
 8001f76:	841a      	strh	r2, [r3, #32]
    externalADC1.startSyncPinPort = STARTSYNC_1_GPIO_Port;
 8001f78:	4b99      	ldr	r3, [pc, #612]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8001f7a:	4a9a      	ldr	r2, [pc, #616]	@ (80021e4 <txADS1ThreadInput+0x280>)
 8001f7c:	615a      	str	r2, [r3, #20]
    externalADC1.startSyncPin = STARTSYNC_1_Pin;
 8001f7e:	4b98      	ldr	r3, [pc, #608]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8001f80:	2210      	movs	r2, #16
 8001f82:	831a      	strh	r2, [r3, #24]
    externalADC1.resetPinPort = RESET1_GPIO_Port;
 8001f84:	4b96      	ldr	r3, [pc, #600]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8001f86:	4a98      	ldr	r2, [pc, #608]	@ (80021e8 <txADS1ThreadInput+0x284>)
 8001f88:	62da      	str	r2, [r3, #44]	@ 0x2c
    externalADC1.resetPin = RESET1_Pin;
 8001f8a:	4b95      	ldr	r3, [pc, #596]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	861a      	strh	r2, [r3, #48]	@ 0x30
    externalADC1.drdyPinPort = DRDY1_GPIO_Port;
 8001f90:	4b93      	ldr	r3, [pc, #588]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8001f92:	4a95      	ldr	r2, [pc, #596]	@ (80021e8 <txADS1ThreadInput+0x284>)
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24
    externalADC1.drdyPin = DRDY1_Pin;
 8001f96:	4b92      	ldr	r3, [pc, #584]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	851a      	strh	r2, [r3, #40]	@ 0x28

    externalADC2.csPinPort = CS2_GPIO_Port;
 8001f9c:	4b93      	ldr	r3, [pc, #588]	@ (80021ec <txADS1ThreadInput+0x288>)
 8001f9e:	4a94      	ldr	r2, [pc, #592]	@ (80021f0 <txADS1ThreadInput+0x28c>)
 8001fa0:	61da      	str	r2, [r3, #28]
    externalADC2.csPin = CS2_Pin;
 8001fa2:	4b92      	ldr	r3, [pc, #584]	@ (80021ec <txADS1ThreadInput+0x288>)
 8001fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa8:	841a      	strh	r2, [r3, #32]
    externalADC2.startSyncPinPort = STARTSYNC_2_GPIO_Port;
 8001faa:	4b90      	ldr	r3, [pc, #576]	@ (80021ec <txADS1ThreadInput+0x288>)
 8001fac:	4a90      	ldr	r2, [pc, #576]	@ (80021f0 <txADS1ThreadInput+0x28c>)
 8001fae:	615a      	str	r2, [r3, #20]
    externalADC2.startSyncPin = STARTSYNC_2_Pin;
 8001fb0:	4b8e      	ldr	r3, [pc, #568]	@ (80021ec <txADS1ThreadInput+0x288>)
 8001fb2:	2280      	movs	r2, #128	@ 0x80
 8001fb4:	831a      	strh	r2, [r3, #24]
    externalADC2.resetPinPort = RESET2_GPIO_Port;
 8001fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80021ec <txADS1ThreadInput+0x288>)
 8001fb8:	4a8d      	ldr	r2, [pc, #564]	@ (80021f0 <txADS1ThreadInput+0x28c>)
 8001fba:	62da      	str	r2, [r3, #44]	@ 0x2c
    externalADC2.resetPin = RESET2_Pin;
 8001fbc:	4b8b      	ldr	r3, [pc, #556]	@ (80021ec <txADS1ThreadInput+0x288>)
 8001fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fc2:	861a      	strh	r2, [r3, #48]	@ 0x30
    externalADC2.drdyPinPort = DRDY2_GPIO_Port;
 8001fc4:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <txADS1ThreadInput+0x288>)
 8001fc6:	4a8a      	ldr	r2, [pc, #552]	@ (80021f0 <txADS1ThreadInput+0x28c>)
 8001fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    externalADC2.drdyPin = DRDY2_Pin;
 8001fca:	4b88      	ldr	r3, [pc, #544]	@ (80021ec <txADS1ThreadInput+0x288>)
 8001fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd0:	851a      	strh	r2, [r3, #40]	@ 0x28

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	4883      	ldr	r0, [pc, #524]	@ (80021e4 <txADS1ThreadInput+0x280>)
 8001fd8:	f004 fc10 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, SET);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fe2:	4883      	ldr	r0, [pc, #524]	@ (80021f0 <txADS1ThreadInput+0x28c>)
 8001fe4:	f004 fc0a 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(STARTSYNC_1_GPIO_Port, STARTSYNC_1_Pin, RESET);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2110      	movs	r1, #16
 8001fec:	487d      	ldr	r0, [pc, #500]	@ (80021e4 <txADS1ThreadInput+0x280>)
 8001fee:	f004 fc05 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(STARTSYNC_2_GPIO_Port, STARTSYNC_2_Pin, RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2180      	movs	r1, #128	@ 0x80
 8001ff6:	487e      	ldr	r0, [pc, #504]	@ (80021f0 <txADS1ThreadInput+0x28c>)
 8001ff8:	f004 fc00 	bl	80067fc <HAL_GPIO_WritePin>
    // Delay to allow power supplies to settle
    tx_thread_sleep(5);
 8001ffc:	2005      	movs	r0, #5
 8001ffe:	f009 ff3b 	bl	800be78 <_tx_thread_sleep>

    // Set up registers
    StartUpRoutine(&externalADC1);
 8002002:	4877      	ldr	r0, [pc, #476]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8002004:	f000 fa8c 	bl	8002520 <StartUpRoutine>
    StartUpRoutine(&externalADC2);
 8002008:	4878      	ldr	r0, [pc, #480]	@ (80021ec <txADS1ThreadInput+0x288>)
 800200a:	f000 fa89 	bl	8002520 <StartUpRoutine>

//    WriteRegister(&externalADC1, STATUS_ADDR_MASK, data);
//
//    // Set the PGA
    uint8_t data = ADS_DELAY_14 + ADS_PGA_ENABLED + ADS_GAIN_64;
 800200e:	230e      	movs	r3, #14
 8002010:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    WriteRegister(&externalADC1, REG_ADDR_PGA, data);
 8002014:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002018:	461a      	mov	r2, r3
 800201a:	2103      	movs	r1, #3
 800201c:	4870      	ldr	r0, [pc, #448]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 800201e:	f000 fb17 	bl	8002650 <WriteRegister>
    WriteRegister(&externalADC2, REG_ADDR_PGA, data);
 8002022:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002026:	461a      	mov	r2, r3
 8002028:	2103      	movs	r1, #3
 800202a:	4870      	ldr	r0, [pc, #448]	@ (80021ec <txADS1ThreadInput+0x288>)
 800202c:	f000 fb10 	bl	8002650 <WriteRegister>
//
//    // Use single shot conversions/
    data = ADS_CONVMODE_SS + ADS_DR_4000 + ADS_FILTERTYPE_LL;
 8002030:	233d      	movs	r3, #61	@ 0x3d
 8002032:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    WriteRegister(&externalADC1, REG_ADDR_DATARATE, data);
 8002036:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800203a:	461a      	mov	r2, r3
 800203c:	2104      	movs	r1, #4
 800203e:	4868      	ldr	r0, [pc, #416]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8002040:	f000 fb06 	bl	8002650 <WriteRegister>
    WriteRegister(&externalADC2, REG_ADDR_DATARATE, data);
 8002044:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002048:	461a      	mov	r2, r3
 800204a:	2104      	movs	r1, #4
 800204c:	4867      	ldr	r0, [pc, #412]	@ (80021ec <txADS1ThreadInput+0x288>)
 800204e:	f000 faff 	bl	8002650 <WriteRegister>

    data = ADS_REFP_BYP_DISABLE + ADS_REFN_BYP_DISABLE + ADS_REFSEL_INT + ADS_REFINT_ON_PDWN;
 8002052:	2339      	movs	r3, #57	@ 0x39
 8002054:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    WriteRegister(&externalADC1, REG_ADDR_REF, data);
 8002058:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800205c:	461a      	mov	r2, r3
 800205e:	2105      	movs	r1, #5
 8002060:	485f      	ldr	r0, [pc, #380]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8002062:	f000 faf5 	bl	8002650 <WriteRegister>
    WriteRegister(&externalADC2, REG_ADDR_REF, data);
 8002066:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800206a:	461a      	mov	r2, r3
 800206c:	2105      	movs	r1, #5
 800206e:	485f      	ldr	r0, [pc, #380]	@ (80021ec <txADS1ThreadInput+0x288>)
 8002070:	f000 faee 	bl	8002650 <WriteRegister>

    data = ADS_P_AIN0 + ADS_N_AIN1;
 8002074:	2301      	movs	r3, #1
 8002076:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    WriteRegister(&externalADC1, REG_ADDR_INPMUX, data);
 800207a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800207e:	461a      	mov	r2, r3
 8002080:	2102      	movs	r1, #2
 8002082:	4857      	ldr	r0, [pc, #348]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 8002084:	f000 fae4 	bl	8002650 <WriteRegister>
    WriteRegister(&externalADC2, REG_ADDR_INPMUX, data);
 8002088:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800208c:	461a      	mov	r2, r3
 800208e:	2102      	movs	r1, #2
 8002090:	4856      	ldr	r0, [pc, #344]	@ (80021ec <txADS1ThreadInput+0x288>)
 8002092:	f000 fadd 	bl	8002650 <WriteRegister>
//        REGWR_OPCODE_MASK + INPMUX_ADDR_MASK,
//        0x00,
//        adcMuxStates[inputSet]
//    };
//    uint32_t combinedData[6];
   FDCAN_TxHeaderTypeDef exADC1Header = {
 8002096:	4b57      	ldr	r3, [pc, #348]	@ (80021f4 <txADS1ThreadInput+0x290>)
 8002098:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800209c:	461d      	mov	r5, r3
 800209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a6:	682b      	ldr	r3, [r5, #0]
 80020a8:	6023      	str	r3, [r4, #0]
       .FDFormat = FDCAN_FD_CAN,
       .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
       .MessageMarker = 0
   };

   FDCAN_TxHeaderTypeDef exADC2Header = {
 80020aa:	4b53      	ldr	r3, [pc, #332]	@ (80021f8 <txADS1ThreadInput+0x294>)
 80020ac:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 80020b0:	461d      	mov	r5, r3
 80020b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ba:	682b      	ldr	r3, [r5, #0]
 80020bc:	6023      	str	r3, [r4, #0]
       .FDFormat = FDCAN_FD_CAN,
       .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
       .MessageMarker = 0
   };
//    uint32_t thing = 0;
    uint8_t status[1] = {0};
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    uint32_t data1[6];
    uint32_t data2[6];

    while(1){

    	for(int i = 0; i < 6; i ++){
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80020ca:	e046      	b.n	800215a <txADS1ThreadInput+0x1f6>
    		WriteRegister(&externalADC1, REG_ADDR_INPMUX, adcMuxStates[i]);
 80020cc:	4a4b      	ldr	r2, [pc, #300]	@ (80021fc <txADS1ThreadInput+0x298>)
 80020ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	2102      	movs	r1, #2
 80020da:	4841      	ldr	r0, [pc, #260]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 80020dc:	f000 fab8 	bl	8002650 <WriteRegister>
			WriteRegister(&externalADC2, REG_ADDR_INPMUX, adcMuxStates[i]);
 80020e0:	4a46      	ldr	r2, [pc, #280]	@ (80021fc <txADS1ThreadInput+0x298>)
 80020e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	2102      	movs	r1, #2
 80020ee:	483f      	ldr	r0, [pc, #252]	@ (80021ec <txADS1ThreadInput+0x288>)
 80020f0:	f000 faae 	bl	8002650 <WriteRegister>
	        tx_thread_sleep(1);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f009 febf 	bl	800be78 <_tx_thread_sleep>
	        SendCommand(&externalADC1, OPCODE_START);
 80020fa:	2108      	movs	r1, #8
 80020fc:	4838      	ldr	r0, [pc, #224]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 80020fe:	f000 faf1 	bl	80026e4 <SendCommand>
	        SendCommand(&externalADC2, OPCODE_START);
 8002102:	2108      	movs	r1, #8
 8002104:	4839      	ldr	r0, [pc, #228]	@ (80021ec <txADS1ThreadInput+0x288>)
 8002106:	f000 faed 	bl	80026e4 <SendCommand>
	        tx_thread_sleep(1);
 800210a:	2001      	movs	r0, #1
 800210c:	f009 feb4 	bl	800be78 <_tx_thread_sleep>
	        data1[i] = ReadADCData(&externalADC1, status, COMMAND);
 8002110:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002114:	2201      	movs	r2, #1
 8002116:	4619      	mov	r1, r3
 8002118:	4831      	ldr	r0, [pc, #196]	@ (80021e0 <txADS1ThreadInput+0x27c>)
 800211a:	f000 fb09 	bl	8002730 <ReadADCData>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	33d0      	adds	r3, #208	@ 0xd0
 800212a:	443b      	add	r3, r7
 800212c:	f843 2c80 	str.w	r2, [r3, #-128]
	        data2[i] = ReadADCData(&externalADC2, status, COMMAND);
 8002130:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002134:	2201      	movs	r2, #1
 8002136:	4619      	mov	r1, r3
 8002138:	482c      	ldr	r0, [pc, #176]	@ (80021ec <txADS1ThreadInput+0x288>)
 800213a:	f000 faf9 	bl	8002730 <ReadADCData>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	33d0      	adds	r3, #208	@ 0xd0
 800214a:	443b      	add	r3, r7
 800214c:	f843 2c98 	str.w	r2, [r3, #-152]
    	for(int i = 0; i < 6; i ++){
 8002150:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002154:	3301      	adds	r3, #1
 8002156:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800215a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800215e:	2b05      	cmp	r3, #5
 8002160:	ddb4      	ble.n	80020cc <txADS1ThreadInput+0x168>
//        if(inputSet == 6){
//            inputSet = 0;
//        }
//        if(inputSet == 6){
		struct ucr_01_front_strain_gauges1_t set1 = {
			.gauge1 = data1[0],
 8002162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
		struct ucr_01_front_strain_gauges1_t set1 = {
 8002164:	623b      	str	r3, [r7, #32]
			.gauge2 = data1[1],
 8002166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
		struct ucr_01_front_strain_gauges1_t set1 = {
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
			.gauge3 = data1[2],
 800216a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
		struct ucr_01_front_strain_gauges1_t set1 = {
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
			.gauge4 = data1[3],
 800216e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
		struct ucr_01_front_strain_gauges1_t set1 = {
 8002170:	62fb      	str	r3, [r7, #44]	@ 0x2c
			.gauge5 = data1[4],
 8002172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
		struct ucr_01_front_strain_gauges1_t set1 = {
 8002174:	633b      	str	r3, [r7, #48]	@ 0x30
			.gauge6 = data1[5]
 8002176:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
		struct ucr_01_front_strain_gauges1_t set1 = {
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
		};

		struct ucr_01_front_strain_gauges2_t set2 = {
			.gauge1 = data2[0],
 800217a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
		struct ucr_01_front_strain_gauges2_t set2 = {
 800217c:	60bb      	str	r3, [r7, #8]
			.gauge2 = data2[1],
 800217e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
		struct ucr_01_front_strain_gauges2_t set2 = {
 8002180:	60fb      	str	r3, [r7, #12]
			.gauge3 = data2[2],
 8002182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
		struct ucr_01_front_strain_gauges2_t set2 = {
 8002184:	613b      	str	r3, [r7, #16]
			.gauge4 = data2[3],
 8002186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
		struct ucr_01_front_strain_gauges2_t set2 = {
 8002188:	617b      	str	r3, [r7, #20]
			.gauge5 = data2[4],
 800218a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
		struct ucr_01_front_strain_gauges2_t set2 = {
 800218c:	61bb      	str	r3, [r7, #24]
			.gauge6 = data2[5]
 800218e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
		struct ucr_01_front_strain_gauges2_t set2 = {
 8002190:	61fb      	str	r3, [r7, #28]
		};
		ucr_01_front_strain_gauges1_pack(canTxData, &set1, UCR_01_FRONT_STRAIN_GAUGES1_LENGTH);
 8002192:	f107 0120 	add.w	r1, r7, #32
 8002196:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800219a:	2214      	movs	r2, #20
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fdbb 	bl	8002d18 <ucr_01_front_strain_gauges1_pack>
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &exADC1Header, canTxData);
 80021a2:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80021a6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80021aa:	4619      	mov	r1, r3
 80021ac:	4814      	ldr	r0, [pc, #80]	@ (8002200 <txADS1ThreadInput+0x29c>)
 80021ae:	f003 fedd 	bl	8005f6c <HAL_FDCAN_AddMessageToTxFifoQ>
		ucr_01_front_strain_gauges2_pack(canTxData, &set2, UCR_01_FRONT_STRAIN_GAUGES1_LENGTH);
 80021b2:	f107 0108 	add.w	r1, r7, #8
 80021b6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80021ba:	2214      	movs	r2, #20
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fef1 	bl	8002fa4 <ucr_01_front_strain_gauges2_pack>
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &exADC2Header, canTxData);
 80021c2:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80021c6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021ca:	4619      	mov	r1, r3
 80021cc:	480c      	ldr	r0, [pc, #48]	@ (8002200 <txADS1ThreadInput+0x29c>)
 80021ce:	f003 fecd 	bl	8005f6c <HAL_FDCAN_AddMessageToTxFifoQ>
		tx_thread_sleep(3);
 80021d2:	2003      	movs	r0, #3
 80021d4:	f009 fe50 	bl	800be78 <_tx_thread_sleep>
////            .gauge6 = combinedData[5]
////        };
////        ucr_01_front_strain_gauges1_pack(canTxData, &stuff, UCR_01_FRONT_STRAIN_GAUGES1_LENGTH);
////        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &exADC1Header, canTxData);
//        }
        tx_thread_sleep(250);
 80021d8:	20fa      	movs	r0, #250	@ 0xfa
 80021da:	f009 fe4d 	bl	800be78 <_tx_thread_sleep>
    while(1){
 80021de:	e771      	b.n	80020c4 <txADS1ThreadInput+0x160>
 80021e0:	20010900 	.word	0x20010900
 80021e4:	48000800 	.word	0x48000800
 80021e8:	48000400 	.word	0x48000400
 80021ec:	20010934 	.word	0x20010934
 80021f0:	48001000 	.word	0x48001000
 80021f4:	0800d628 	.word	0x0800d628
 80021f8:	0800d64c 	.word	0x0800d64c
 80021fc:	0800d6d8 	.word	0x0800d6d8
 8002200:	200101fc 	.word	0x200101fc

08002204 <FrequencyInit>:
static uint8_t CalculateFrequency(
        frequency_t* channel,
        TIM_HandleTypeDef* htim
);

uint8_t FrequencyInit(void){
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af04      	add	r7, sp, #16
    uint8_t retVal = UCR_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	70fb      	strb	r3, [r7, #3]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	e016      	b.n	8002242 <FrequencyInit+0x3e>
        ChannelData[i].firstValue = 0;
 8002214:	4a35      	ldr	r2, [pc, #212]	@ (80022ec <FrequencyInit+0xe8>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	4413      	add	r3, r2
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
        ChannelData[i].secondValue = 0;
 8002220:	4a32      	ldr	r2, [pc, #200]	@ (80022ec <FrequencyInit+0xe8>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	019b      	lsls	r3, r3, #6
 8002226:	4413      	add	r3, r2
 8002228:	3304      	adds	r3, #4
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
        ChannelData[i].isFirstCapture = false;
 800222e:	4a2f      	ldr	r2, [pc, #188]	@ (80022ec <FrequencyInit+0xe8>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	019b      	lsls	r3, r3, #6
 8002234:	4413      	add	r3, r2
 8002236:	3308      	adds	r3, #8
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3301      	adds	r3, #1
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d9e5      	bls.n	8002214 <FrequencyInit+0x10>
//        ChannelData[i].zeroReset = true;
    }
    ChannelData[0].halChannel = TIM_CHANNEL_1;
 8002248:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <FrequencyInit+0xe8>)
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ChannelData[1].halChannel = TIM_CHANNEL_2;
 8002250:	4b26      	ldr	r3, [pc, #152]	@ (80022ec <FrequencyInit+0xe8>)
 8002252:	2204      	movs	r2, #4
 8002254:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    ChannelData[2].halChannel = TIM_CHANNEL_3;
 8002258:	4b24      	ldr	r3, [pc, #144]	@ (80022ec <FrequencyInit+0xe8>)
 800225a:	2208      	movs	r2, #8
 800225c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    ChannelData[3].halChannel = TIM_CHANNEL_4;
 8002260:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <FrequencyInit+0xe8>)
 8002262:	220c      	movs	r2, #12
 8002264:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

    tx_timer_create(&ChannelData[0].resetTimer, "resetTimer1", 
 8002268:	232c      	movs	r3, #44	@ 0x2c
 800226a:	9303      	str	r3, [sp, #12]
 800226c:	2300      	movs	r3, #0
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2300      	movs	r3, #0
 800227c:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <FrequencyInit+0xec>)
 800227e:	491d      	ldr	r1, [pc, #116]	@ (80022f4 <FrequencyInit+0xf0>)
 8002280:	481d      	ldr	r0, [pc, #116]	@ (80022f8 <FrequencyInit+0xf4>)
 8002282:	f00b f83f 	bl	800d304 <_txe_timer_create>
        timerExpirationFrequency, 0, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[1].resetTimer, "resetTimer2", 
 8002286:	232c      	movs	r3, #44	@ 0x2c
 8002288:	9303      	str	r3, [sp, #12]
 800228a:	2300      	movs	r3, #0
 800228c:	9302      	str	r3, [sp, #8]
 800228e:	2300      	movs	r3, #0
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2301      	movs	r3, #1
 800229a:	4a15      	ldr	r2, [pc, #84]	@ (80022f0 <FrequencyInit+0xec>)
 800229c:	4917      	ldr	r1, [pc, #92]	@ (80022fc <FrequencyInit+0xf8>)
 800229e:	4818      	ldr	r0, [pc, #96]	@ (8002300 <FrequencyInit+0xfc>)
 80022a0:	f00b f830 	bl	800d304 <_txe_timer_create>
        timerExpirationFrequency, 1, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[2].resetTimer, "resetTimer3", 
 80022a4:	232c      	movs	r3, #44	@ 0x2c
 80022a6:	9303      	str	r3, [sp, #12]
 80022a8:	2300      	movs	r3, #0
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2302      	movs	r3, #2
 80022b8:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <FrequencyInit+0xec>)
 80022ba:	4912      	ldr	r1, [pc, #72]	@ (8002304 <FrequencyInit+0x100>)
 80022bc:	4812      	ldr	r0, [pc, #72]	@ (8002308 <FrequencyInit+0x104>)
 80022be:	f00b f821 	bl	800d304 <_txe_timer_create>
        timerExpirationFrequency, 2, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[3].resetTimer, "resetTimer4", 
 80022c2:	232c      	movs	r3, #44	@ 0x2c
 80022c4:	9303      	str	r3, [sp, #12]
 80022c6:	2300      	movs	r3, #0
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2300      	movs	r3, #0
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2303      	movs	r3, #3
 80022d6:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <FrequencyInit+0xec>)
 80022d8:	490c      	ldr	r1, [pc, #48]	@ (800230c <FrequencyInit+0x108>)
 80022da:	480d      	ldr	r0, [pc, #52]	@ (8002310 <FrequencyInit+0x10c>)
 80022dc:	f00b f812 	bl	800d304 <_txe_timer_create>
        timerExpirationFrequency, 3, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    return retVal;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20010800 	.word	0x20010800
 80022f0:	08002475 	.word	0x08002475
 80022f4:	0800d670 	.word	0x0800d670
 80022f8:	2001080c 	.word	0x2001080c
 80022fc:	0800d67c 	.word	0x0800d67c
 8002300:	2001084c 	.word	0x2001084c
 8002304:	0800d688 	.word	0x0800d688
 8002308:	2001088c 	.word	0x2001088c
 800230c:	0800d694 	.word	0x0800d694
 8002310:	200108cc 	.word	0x200108cc

08002314 <HAL_TIM_IC_CaptureCallback>:
  * @param htim: Timer handle
  * @retval void
  */
void HAL_TIM_IC_CaptureCallback(
    TIM_HandleTypeDef* htim
){
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]
    switch (htim->Channel){
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7f1b      	ldrb	r3, [r3, #28]
 8002324:	3b01      	subs	r3, #1
 8002326:	2b07      	cmp	r3, #7
 8002328:	d827      	bhi.n	800237a <HAL_TIM_IC_CaptureCallback+0x66>
 800232a:	a201      	add	r2, pc, #4	@ (adr r2, 8002330 <HAL_TIM_IC_CaptureCallback+0x1c>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002351 	.word	0x08002351
 8002334:	08002357 	.word	0x08002357
 8002338:	0800237b 	.word	0x0800237b
 800233c:	0800235d 	.word	0x0800235d
 8002340:	0800237b 	.word	0x0800237b
 8002344:	0800237b 	.word	0x0800237b
 8002348:	0800237b 	.word	0x0800237b
 800234c:	08002363 	.word	0x08002363
        case HAL_TIM_ACTIVE_CHANNEL_1:
            channel = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
            break;
 8002354:	e008      	b.n	8002368 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_2:
            channel = 1;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
            break;
 800235a:	e005      	b.n	8002368 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            channel = 2;
 800235c:	2302      	movs	r3, #2
 800235e:	73fb      	strb	r3, [r7, #15]
            break;
 8002360:	e002      	b.n	8002368 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_4:
            channel = 3;
 8002362:	2303      	movs	r3, #3
 8002364:	73fb      	strb	r3, [r7, #15]
            break;
 8002366:	bf00      	nop
        default:
            return;
    }
    CalculateFrequency(&ChannelData[channel], htim);
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	019b      	lsls	r3, r3, #6
 800236c:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <HAL_TIM_IC_CaptureCallback+0x70>)
 800236e:	4413      	add	r3, r2
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f808 	bl	8002388 <CalculateFrequency>
 8002378:	e000      	b.n	800237c <HAL_TIM_IC_CaptureCallback+0x68>
            return;
 800237a:	bf00      	nop
}
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20010800 	.word	0x20010800

08002388 <CalculateFrequency>:

static uint8_t CalculateFrequency(
    frequency_t* channel,
    TIM_HandleTypeDef* htim
){
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
    uint8_t retVal = UCR_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
    // Check if first rising edge to begin capture
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 8002396:	2100      	movs	r1, #0
 8002398:	4835      	ldr	r0, [pc, #212]	@ (8002470 <CalculateFrequency+0xe8>)
 800239a:	f00a fe0d 	bl	800cfb8 <_txe_semaphore_get>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <CalculateFrequency+0x24>
        retVal = UCR_NOT_OK;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
        return retVal;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	e05c      	b.n	8002466 <CalculateFrequency+0xde>
    }

    if(!channel->isFirstCapture){
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7a1b      	ldrb	r3, [r3, #8]
 80023b0:	f083 0301 	eor.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d012      	beq.n	80023e0 <CalculateFrequency+0x58>
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	330c      	adds	r3, #12
 80023be:	4618      	mov	r0, r3
 80023c0:	f00a ff4c 	bl	800d25c <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
        channel->firstValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023ca:	4619      	mov	r1, r3
 80023cc:	6838      	ldr	r0, [r7, #0]
 80023ce:	f007 fd19 	bl	8009e04 <HAL_TIM_ReadCapturedValue>
 80023d2:	4602      	mov	r2, r0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	601a      	str	r2, [r3, #0]
        // Set flag to indicate next value will be second rising edge
        channel->isFirstCapture = true;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	721a      	strb	r2, [r3, #8]
 80023de:	e036      	b.n	800244e <CalculateFrequency+0xc6>
    }else{
        // Stop the reset timer
        if(TX_SUCCESS != tx_timer_deactivate(&channel->resetTimer)){
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	330c      	adds	r3, #12
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00b f839 	bl	800d45c <_txe_timer_deactivate>
            // ADD error handler stuff here;
        }
        channel->secondValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023f0:	4619      	mov	r1, r3
 80023f2:	6838      	ldr	r0, [r7, #0]
 80023f4:	f007 fd06 	bl	8009e04 <HAL_TIM_ReadCapturedValue>
 80023f8:	4602      	mov	r2, r0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	605a      	str	r2, [r3, #4]
        // Check if the first capture was before the second
        if(channel->secondValue > channel->firstValue){
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d907      	bls.n	800241a <CalculateFrequency+0x92>
            // Calculate the difference
            channel->difference = channel->secondValue - channel->firstValue;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1ad2      	subs	r2, r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002418:	e010      	b.n	800243c <CalculateFrequency+0xb4>
        } else if (channel->secondValue < channel->firstValue){
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d20a      	bcs.n	800243c <CalculateFrequency+0xb4>
            channel->difference = ((htim->Init.Period - channel->firstValue) + channel->secondValue) + 1;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4413      	add	r3, r2
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        // Reset the first capture state
        channel->firstValue = channel->secondValue;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	601a      	str	r2, [r3, #0]
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	330c      	adds	r3, #12
 8002448:	4618      	mov	r0, r3
 800244a:	f00a ff07 	bl	800d25c <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
    }
    // Release the semaphore
    if(TX_SUCCESS != tx_semaphore_put(&semaphoreFrequency)){
 800244e:	4808      	ldr	r0, [pc, #32]	@ (8002470 <CalculateFrequency+0xe8>)
 8002450:	f00a fdf4 	bl	800d03c <_txe_semaphore_put>
        // ADD error handler stuff here;
    }
    // Reset the timer;
    if(TX_SUCCESS != tx_timer_change(&channel->resetTimer, FREQUENCY_RESET_TIME, 0)){
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	330c      	adds	r3, #12
 8002458:	2200      	movs	r2, #0
 800245a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800245e:	4618      	mov	r0, r3
 8002460:	f00a ff1a 	bl	800d298 <_txe_timer_change>
        // ADD error handler stuff here;
    }
    return retVal;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20010790 	.word	0x20010790

08002474 <timerExpirationFrequency>:
  * @param channel: the number of the timer
  * @retval void
  */
void timerExpirationFrequency(
    ULONG channel
){
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    // Attempt to acquire the semaphore
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 800247c:	2100      	movs	r1, #0
 800247e:	4818      	ldr	r0, [pc, #96]	@ (80024e0 <timerExpirationFrequency+0x6c>)
 8002480:	f00a fd9a 	bl	800cfb8 <_txe_semaphore_get>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d126      	bne.n	80024d8 <timerExpirationFrequency+0x64>
        return;
    }
    // Set the first capture and difference to zero
    ChannelData[channel].isFirstCapture = false;
 800248a:	4a16      	ldr	r2, [pc, #88]	@ (80024e4 <timerExpirationFrequency+0x70>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	019b      	lsls	r3, r3, #6
 8002490:	4413      	add	r3, r2
 8002492:	3308      	adds	r3, #8
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
    ChannelData[channel].difference = 0;
 8002498:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <timerExpirationFrequency+0x70>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	4413      	add	r3, r2
 80024a0:	333c      	adds	r3, #60	@ 0x3c
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
    // Reset the timer
    tx_timer_deactivate(&ChannelData[channel].resetTimer);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	3308      	adds	r3, #8
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <timerExpirationFrequency+0x70>)
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	4618      	mov	r0, r3
 80024b4:	f00a ffd2 	bl	800d45c <_txe_timer_deactivate>
    tx_timer_change(&ChannelData[channel].resetTimer, FREQUENCY_RESET_TIME, 0);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	019b      	lsls	r3, r3, #6
 80024bc:	3308      	adds	r3, #8
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <timerExpirationFrequency+0x70>)
 80024c0:	4413      	add	r3, r2
 80024c2:	3304      	adds	r3, #4
 80024c4:	2200      	movs	r2, #0
 80024c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80024ca:	4618      	mov	r0, r3
 80024cc:	f00a fee4 	bl	800d298 <_txe_timer_change>
    // Release the semaphore
    tx_semaphore_put(&semaphoreFrequency);
 80024d0:	4803      	ldr	r0, [pc, #12]	@ (80024e0 <timerExpirationFrequency+0x6c>)
 80024d2:	f00a fdb3 	bl	800d03c <_txe_semaphore_put>
    return;
 80024d6:	e000      	b.n	80024da <timerExpirationFrequency+0x66>
        return;
 80024d8:	bf00      	nop
}
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20010790 	.word	0x20010790
 80024e4:	20010800 	.word	0x20010800

080024e8 <HAL_GPIO_EXTI_Callback>:
#include "exti.h"
#include "stdint.h"
#include "main.h"
#include "threadx.h"
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == DRDY1_Pin){
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d103      	bne.n	8002500 <HAL_GPIO_EXTI_Callback+0x18>
        tx_semaphore_put(&semaphoreExADC1);
 80024f8:	4807      	ldr	r0, [pc, #28]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x30>)
 80024fa:	f00a fd9f 	bl	800d03c <_txe_semaphore_put>
    }else if(GPIO_Pin == DRDY2_Pin){
        tx_semaphore_put(&semaphoreExADC2);
    }
}
 80024fe:	e006      	b.n	800250e <HAL_GPIO_EXTI_Callback+0x26>
    }else if(GPIO_Pin == DRDY2_Pin){
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002506:	d102      	bne.n	800250e <HAL_GPIO_EXTI_Callback+0x26>
        tx_semaphore_put(&semaphoreExADC2);
 8002508:	4804      	ldr	r0, [pc, #16]	@ (800251c <HAL_GPIO_EXTI_Callback+0x34>)
 800250a:	f00a fd97 	bl	800d03c <_txe_semaphore_put>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200107ac 	.word	0x200107ac
 800251c:	200107c8 	.word	0x200107c8

08002520 <StartUpRoutine>:
const uint8_t registerStates[] = {
    0x00

};

bool StartUpRoutine(ads124S08Control_t* device){
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    uint8_t initRegisterMap[NUM_REGISTERS] = {0};
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	819a      	strh	r2, [r3, #12]
    uint8_t status, i;

    // Delay for power supply settling
    HAL_Delay(10);
 800253a:	200a      	movs	r0, #10
 800253c:	f001 f87c 	bl	8003638 <HAL_Delay>

    // Toggle nReset pin to reset registers
    ToggleReset(device);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f822 	bl	800258a <ToggleReset>

    // Delay for post reset
    HAL_Delay(10);
 8002546:	200a      	movs	r0, #10
 8002548:	f001 f876 	bl	8003638 <HAL_Delay>

    // Check if device is ready
    status = ReadRegister(device, REG_ADDR_STATUS);
 800254c:	2101      	movs	r1, #1
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f836 	bl	80025c0 <ReadRegister>
 8002554:	4603      	mov	r3, r0
 8002556:	77fb      	strb	r3, [r7, #31]
    if(status & ADS_nRDY_MASK){
 8002558:	7ffb      	ldrb	r3, [r7, #31]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <StartUpRoutine+0x46>
        return false;
 8002562:	2300      	movs	r3, #0
 8002564:	e00d      	b.n	8002582 <StartUpRoutine+0x62>
    }

    // 
    RestoreRegisterDefaults(device);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa18 	bl	800299c <RestoreRegisterDefaults>

    // Clear Power on Reset flag
    WriteRegister(device, REG_ADDR_STATUS, 0x00);
 800256c:	2200      	movs	r2, #0
 800256e:	2101      	movs	r1, #1
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f86d 	bl	8002650 <WriteRegister>



    
    return status;
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ToggleReset>:

void ToggleReset(ads124S08Control_t* device){
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(device->resetPinPort, device->resetPin, RESET);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800259a:	2200      	movs	r2, #0
 800259c:	4619      	mov	r1, r3
 800259e:	f004 f92d 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_Delay(ADS_RESET_TIME);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f001 f848 	bl	8003638 <HAL_Delay>
    HAL_GPIO_WritePin(device->resetPinPort, device->resetPin, SET);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80025b0:	2201      	movs	r2, #1
 80025b2:	4619      	mov	r1, r3
 80025b4:	f004 f922 	bl	80067fc <HAL_GPIO_WritePin>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <ReadRegister>:

uint8_t ReadRegister(
    ads124S08Control_t* device,
    uint16_t address
){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
	uint8_t txData[COMMAND_LENGTH + 1] = { OPCODE_RREG | (address & OPCODE_RWREG_MASK), 0, 0 };
 80025cc:	887b      	ldrh	r3, [r7, #2]
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	f043 0320 	orr.w	r3, r3, #32
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	733b      	strb	r3, [r7, #12]
 80025e0:	2300      	movs	r3, #0
 80025e2:	737b      	strb	r3, [r7, #13]
 80025e4:	2300      	movs	r3, #0
 80025e6:	73bb      	strb	r3, [r7, #14]
	uint8_t rxData[COMMAND_LENGTH + 1] = {0, 0, 0};
 80025e8:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <ReadRegister+0x88>)
 80025ea:	f107 0308 	add.w	r3, r7, #8
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	4611      	mov	r1, r2
 80025f2:	8019      	strh	r1, [r3, #0]
 80025f4:	3302      	adds	r3, #2
 80025f6:	0c12      	lsrs	r2, r2, #16
 80025f8:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef thing;
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 0);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69d8      	ldr	r0, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	8c1b      	ldrh	r3, [r3, #32]
 8002602:	2200      	movs	r2, #0
 8002604:	4619      	mov	r1, r3
 8002606:	f004 f8f9 	bl	80067fc <HAL_GPIO_WritePin>
	thing = HAL_SPI_TransmitReceive(&hspi4, txData, rxData, COMMAND_LENGTH + 1, 500);
 800260a:	f107 0208 	add.w	r2, r7, #8
 800260e:	f107 010c 	add.w	r1, r7, #12
 8002612:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2303      	movs	r3, #3
 800261a:	480c      	ldr	r0, [pc, #48]	@ (800264c <ReadRegister+0x8c>)
 800261c:	f006 faea 	bl	8008bf4 <HAL_SPI_TransmitReceive>
 8002620:	4603      	mov	r3, r0
 8002622:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69d8      	ldr	r0, [r3, #28]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8c1b      	ldrh	r3, [r3, #32]
 800262c:	2201      	movs	r2, #1
 800262e:	4619      	mov	r1, r3
 8002630:	f004 f8e4 	bl	80067fc <HAL_GPIO_WritePin>
	device->registers[address] = rxData[COMMAND_LENGTH];
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	7ab9      	ldrb	r1, [r7, #10]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	54d1      	strb	r1, [r2, r3]
    return rxData[COMMAND_LENGTH];
 800263c:	7abb      	ldrb	r3, [r7, #10]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	0800d6a0 	.word	0x0800d6a0
 800264c:	20010308 	.word	0x20010308

08002650 <WriteRegister>:

uint8_t WriteRegister(
	ads124S08Control_t* device,
	uint16_t address,
	uint8_t data
){
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af02      	add	r7, sp, #8
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
	uint8_t retVal = UCR_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
	uint8_t txData[COMMAND_LENGTH + 1] = { OPCODE_WREG | (address & OPCODE_RWREG_MASK), 0, data};
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	b25b      	sxtb	r3, r3
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	b25b      	sxtb	r3, r3
 800266e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002672:	b25b      	sxtb	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	733b      	strb	r3, [r7, #12]
 8002678:	2300      	movs	r3, #0
 800267a:	737b      	strb	r3, [r7, #13]
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	73bb      	strb	r3, [r7, #14]
	uint8_t rxData[COMMAND_LENGTH + 1] = {0, 0, 0};
 8002680:	4a16      	ldr	r2, [pc, #88]	@ (80026dc <WriteRegister+0x8c>)
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	4611      	mov	r1, r2
 800268a:	8019      	strh	r1, [r3, #0]
 800268c:	3302      	adds	r3, #2
 800268e:	0c12      	lsrs	r2, r2, #16
 8002690:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 0);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69d8      	ldr	r0, [r3, #28]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8c1b      	ldrh	r3, [r3, #32]
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	f004 f8ad 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, txData, rxData, COMMAND_LENGTH + 1, 500);
 80026a2:	f107 0208 	add.w	r2, r7, #8
 80026a6:	f107 010c 	add.w	r1, r7, #12
 80026aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2303      	movs	r3, #3
 80026b2:	480b      	ldr	r0, [pc, #44]	@ (80026e0 <WriteRegister+0x90>)
 80026b4:	f006 fa9e 	bl	8008bf4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69d8      	ldr	r0, [r3, #28]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8c1b      	ldrh	r3, [r3, #32]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4619      	mov	r1, r3
 80026c4:	f004 f89a 	bl	80067fc <HAL_GPIO_WritePin>
	device->registers[address] = txData[COMMAND_LENGTH];
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	7bb9      	ldrb	r1, [r7, #14]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	54d1      	strb	r1, [r2, r3]
	return retVal;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	0800d6a0 	.word	0x0800d6a0
 80026e0:	20010308 	.word	0x20010308

080026e4 <SendCommand>:
}

uint8_t SendCommand(
	ads124S08Control_t* device,
	uint8_t command
){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]
	uint8_t retVal = UCR_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 0);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69d8      	ldr	r0, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8c1b      	ldrh	r3, [r3, #32]
 80026fc:	2200      	movs	r2, #0
 80026fe:	4619      	mov	r1, r3
 8002700:	f004 f87c 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi4, &command, 1, 500);
 8002704:	1cf9      	adds	r1, r7, #3
 8002706:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800270a:	2201      	movs	r2, #1
 800270c:	4807      	ldr	r0, [pc, #28]	@ (800272c <SendCommand+0x48>)
 800270e:	f006 f8fc 	bl	800890a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(device->csPinPort, device->csPin, 1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69d8      	ldr	r0, [r3, #28]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8c1b      	ldrh	r3, [r3, #32]
 800271a:	2201      	movs	r2, #1
 800271c:	4619      	mov	r1, r3
 800271e:	f004 f86d 	bl	80067fc <HAL_GPIO_WritePin>
	return retVal;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20010308 	.word	0x20010308

08002730 <ReadADCData>:

int32_t ReadADCData(
	ads124S08Control_t* device,
	uint8_t* deviceStatus,
	uint8_t mode
){
 8002730:	b580      	push	{r7, lr}
 8002732:	b092      	sub	sp, #72	@ 0x48
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	4613      	mov	r3, r2
 800273c:	71fb      	strb	r3, [r7, #7]
    uint8_t txData[RDATA_COMMAND_LENGTH + STATUS_LENGTH + DATA_LENGTH + CRC_LENGTH] = {0};
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	2300      	movs	r3, #0
 8002744:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t rxData[RDATA_COMMAND_LENGTH + STATUS_LENGTH + DATA_LENGTH + CRC_LENGTH] = {0};
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	2300      	movs	r3, #0
 800274c:	83bb      	strh	r3, [r7, #28]
    uint8_t byteLength;
    uint8_t dataPosition;
    uint8_t byteOptions;
    uint8_t data[5];
    bool statusByteEnabled = false;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    int32_t signByte, upperByte, middleByte, lowerByte;

    byteOptions = (device->registers[REG_ADDR_SYS] & ADS_SENDSTATUS_MASK << 1) 
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	7a5b      	ldrb	r3, [r3, #9]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                    | (device->registers[REG_ADDR_SYS] & ADS_CRC_MASK);

    switch(byteOptions){
 8002760:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002764:	2b03      	cmp	r3, #3
 8002766:	d82d      	bhi.n	80027c4 <ReadADCData+0x94>
 8002768:	a201      	add	r2, pc, #4	@ (adr r2, 8002770 <ReadADCData+0x40>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	08002781 	.word	0x08002781
 8002774:	0800278f 	.word	0x0800278f
 8002778:	0800279d 	.word	0x0800279d
 800277c:	080027b1 	.word	0x080027b1
        case 0:
            byteLength = DATA_LENGTH;
 8002780:	2303      	movs	r3, #3
 8002782:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            break;
 800278c:	e01a      	b.n	80027c4 <ReadADCData+0x94>
        case 1: 
            byteLength = DATA_LENGTH + CRC_LENGTH;
 800278e:	2304      	movs	r3, #4
 8002790:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            break;
 800279a:	e013      	b.n	80027c4 <ReadADCData+0x94>
        case 2:
            byteLength = STATUS_LENGTH + DATA_LENGTH;
 800279c:	2304      	movs	r3, #4
 800279e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 1;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            statusByteEnabled = true;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            break;
 80027ae:	e009      	b.n	80027c4 <ReadADCData+0x94>
        case 3:
            byteLength = STATUS_LENGTH + DATA_LENGTH + CRC_LENGTH;
 80027b0:	2305      	movs	r3, #5
 80027b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            statusByteEnabled = true;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            break;
 80027c2:	bf00      	nop
    }
    if(mode == COMMAND){
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10c      	bne.n	80027e4 <ReadADCData+0xb4>
        txData[0] = OPCODE_RDATA;
 80027ca:	2312      	movs	r3, #18
 80027cc:	f887 3020 	strb.w	r3, [r7, #32]
        byteLength ++;
 80027d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80027d4:	3301      	adds	r3, #1
 80027d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        dataPosition ++;
 80027da:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80027de:	3301      	adds	r3, #1
 80027e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    HAL_GPIO_WritePin(device->csPinPort, device->csPin, RESET);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	69d8      	ldr	r0, [r3, #28]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8c1b      	ldrh	r3, [r3, #32]
 80027ec:	2200      	movs	r2, #0
 80027ee:	4619      	mov	r1, r3
 80027f0:	f004 f804 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi4, txData, rxData, byteLength, 500);
 80027f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f107 0218 	add.w	r2, r7, #24
 80027fe:	f107 0120 	add.w	r1, r7, #32
 8002802:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002806:	9000      	str	r0, [sp, #0]
 8002808:	4863      	ldr	r0, [pc, #396]	@ (8002998 <ReadADCData+0x268>)
 800280a:	f006 f9f3 	bl	8008bf4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(device->csPinPort, device->csPin, SET);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	69d8      	ldr	r0, [r3, #28]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8c1b      	ldrh	r3, [r3, #32]
 8002816:	2201      	movs	r2, #1
 8002818:	4619      	mov	r1, r3
 800281a:	f003 ffef 	bl	80067fc <HAL_GPIO_WritePin>

    if(statusByteEnabled && deviceStatus){
 800281e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <ReadADCData+0x10e>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <ReadADCData+0x10e>
        deviceStatus[0] = rxData[dataPosition - 1];
 800282c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002830:	3b01      	subs	r3, #1
 8002832:	3340      	adds	r3, #64	@ 0x40
 8002834:	443b      	add	r3, r7
 8002836:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	701a      	strb	r2, [r3, #0]
    }

    if (rxData[dataPosition] & 0x80u ) {
 800283e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002842:	3340      	adds	r3, #64	@ 0x40
 8002844:	443b      	add	r3, r7
 8002846:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800284a:	b25b      	sxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	da03      	bge.n	8002858 <ReadADCData+0x128>
    	signByte = 0xFF000000; 
 8002850:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002854:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002856:	e001      	b.n	800285c <ReadADCData+0x12c>
    } else { 
    	signByte = 0x00000000; 
 8002858:	2300      	movs	r3, #0
 800285a:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if(device->registers[REG_ADDR_SYS] & ADS_CRC_MASK){
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	7a5b      	ldrb	r3, [r3, #9]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d073      	beq.n	8002950 <ReadADCData+0x220>
        if(device->registers[REG_ADDR_SYS] & ADS_SENDSTATUS_MASK){
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	7a5b      	ldrb	r3, [r3, #9]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d03a      	beq.n	80028ea <ReadADCData+0x1ba>
            data[0] = rxData[dataPosition - 1];
 8002874:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002878:	3b01      	subs	r3, #1
 800287a:	3340      	adds	r3, #64	@ 0x40
 800287c:	443b      	add	r3, r7
 800287e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002882:	743b      	strb	r3, [r7, #16]
            data[1] = rxData[dataPosition];
 8002884:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002888:	3340      	adds	r3, #64	@ 0x40
 800288a:	443b      	add	r3, r7
 800288c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002890:	747b      	strb	r3, [r7, #17]
            data[2] = rxData[dataPosition + 1];
 8002892:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002896:	3301      	adds	r3, #1
 8002898:	3340      	adds	r3, #64	@ 0x40
 800289a:	443b      	add	r3, r7
 800289c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028a0:	74bb      	strb	r3, [r7, #18]
            data[3] = rxData[dataPosition + 2];
 80028a2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80028a6:	3302      	adds	r3, #2
 80028a8:	3340      	adds	r3, #64	@ 0x40
 80028aa:	443b      	add	r3, r7
 80028ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028b0:	74fb      	strb	r3, [r7, #19]
            data[4] = rxData[dataPosition + 3];
 80028b2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80028b6:	3303      	adds	r3, #3
 80028b8:	3340      	adds	r3, #64	@ 0x40
 80028ba:	443b      	add	r3, r7
 80028bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028c0:	753b      	strb	r3, [r7, #20]

            bool error = (bool) getCRC(data, 5, CRC_INITIAL_SEED);
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	2200      	movs	r2, #0
 80028c8:	2105      	movs	r1, #5
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fdd4 	bl	8003478 <getCRC>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            if ( error ) {
 80028de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d034      	beq.n	8002950 <ReadADCData+0x220>
                // if error, report and handle the error
                while (1);
 80028e6:	bf00      	nop
 80028e8:	e7fd      	b.n	80028e6 <ReadADCData+0x1b6>
            }
        }else{
            data[0] = rxData[dataPosition];
 80028ea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80028ee:	3340      	adds	r3, #64	@ 0x40
 80028f0:	443b      	add	r3, r7
 80028f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028f6:	743b      	strb	r3, [r7, #16]
            data[1] = rxData[dataPosition + 1];
 80028f8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80028fc:	3301      	adds	r3, #1
 80028fe:	3340      	adds	r3, #64	@ 0x40
 8002900:	443b      	add	r3, r7
 8002902:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002906:	747b      	strb	r3, [r7, #17]
            data[2] = rxData[dataPosition + 2];
 8002908:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800290c:	3302      	adds	r3, #2
 800290e:	3340      	adds	r3, #64	@ 0x40
 8002910:	443b      	add	r3, r7
 8002912:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002916:	74bb      	strb	r3, [r7, #18]
            data[3] = rxData[dataPosition + 3];
 8002918:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800291c:	3303      	adds	r3, #3
 800291e:	3340      	adds	r3, #64	@ 0x40
 8002920:	443b      	add	r3, r7
 8002922:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002926:	74fb      	strb	r3, [r7, #19]
            bool error = (bool) getCRC(data, 4, CRC_INITIAL_SEED);
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	2200      	movs	r2, #0
 800292e:	2104      	movs	r1, #4
 8002930:	4618      	mov	r0, r3
 8002932:	f000 fda1 	bl	8003478 <getCRC>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

            if(error){
 8002944:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <ReadADCData+0x220>
                while(1);
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <ReadADCData+0x21c>
            }
        }
    }
    upperByte = ((uint32_t) rxData[dataPosition] & 0xFF) << 16;
 8002950:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002954:	3340      	adds	r3, #64	@ 0x40
 8002956:	443b      	add	r3, r7
 8002958:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	633b      	str	r3, [r7, #48]	@ 0x30
    middleByte = ((uint32_t) rxData[dataPosition + 1] & 0xFF) << 8;
 8002960:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002964:	3301      	adds	r3, #1
 8002966:	3340      	adds	r3, #64	@ 0x40
 8002968:	443b      	add	r3, r7
 800296a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lowerByte = ((uint32_t) rxData[dataPosition + 2] & 0xFF);
 8002972:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002976:	3302      	adds	r3, #2
 8002978:	3340      	adds	r3, #64	@ 0x40
 800297a:	443b      	add	r3, r7
 800297c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28

	return (signByte + upperByte + middleByte + lowerByte);
 8002982:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002986:	441a      	add	r2, r3
 8002988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298a:	441a      	add	r2, r3
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	4413      	add	r3, r2
}
 8002990:	4618      	mov	r0, r3
 8002992:	3740      	adds	r7, #64	@ 0x40
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20010308 	.word	0x20010308

0800299c <RestoreRegisterDefaults>:

void RestoreRegisterDefaults(
    ads124S08Control_t* device
){
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	/* Default register settings */
    device->registers[REG_ADDR_ID]       = ID_DEFAULT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
	device->registers[REG_ADDR_STATUS]   = STATUS_DEFAULT;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2280      	movs	r2, #128	@ 0x80
 80029ae:	705a      	strb	r2, [r3, #1]
	device->registers[REG_ADDR_INPMUX]   = INPMUX_DEFAULT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	709a      	strb	r2, [r3, #2]
	device->registers[REG_ADDR_PGA]      = PGA_DEFAULT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	70da      	strb	r2, [r3, #3]
	device->registers[REG_ADDR_DATARATE] = DATARATE_DEFAULT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2214      	movs	r2, #20
 80029c0:	711a      	strb	r2, [r3, #4]
	device->registers[REG_ADDR_REF]      = REF_DEFAULT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2210      	movs	r2, #16
 80029c6:	715a      	strb	r2, [r3, #5]
	device->registers[REG_ADDR_IDACMAG]  = IDACMAG_DEFAULT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	719a      	strb	r2, [r3, #6]
	device->registers[REG_ADDR_IDACMUX]  = IDACMUX_DEFAULT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	22ff      	movs	r2, #255	@ 0xff
 80029d2:	71da      	strb	r2, [r3, #7]
	device->registers[REG_ADDR_VBIAS]    = VBIAS_DEFAULT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	721a      	strb	r2, [r3, #8]
	device->registers[REG_ADDR_SYS]      = SYS_DEFAULT;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2210      	movs	r2, #16
 80029de:	725a      	strb	r2, [r3, #9]
	device->registers[REG_ADDR_OFCAL0]   = OFCAL0_DEFAULT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	729a      	strb	r2, [r3, #10]
	device->registers[REG_ADDR_OFCAL1]   = OFCAL1_DEFAULT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	72da      	strb	r2, [r3, #11]
	device->registers[REG_ADDR_OFCAL2]   = OFCAL2_DEFAULT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	731a      	strb	r2, [r3, #12]
	device->registers[REG_ADDR_FSCAL0]   = FSCAL0_DEFAULT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	735a      	strb	r2, [r3, #13]
	device->registers[REG_ADDR_FSCAL1]   = FSCAL1_DEFAULT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	739a      	strb	r2, [r3, #14]
	device->registers[REG_ADDR_FSCAL2]   = FSCAL2_DEFAULT;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2240      	movs	r2, #64	@ 0x40
 8002a02:	73da      	strb	r2, [r3, #15]
	device->registers[REG_ADDR_GPIODAT]  = GPIODAT_DEFAULT;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	741a      	strb	r2, [r3, #16]
	device->registers[REG_ADDR_GPIOCON]  = GPIOCON_DEFAULT;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	745a      	strb	r2, [r3, #17]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	80fb      	strh	r3, [r7, #6]
 8002a26:	460b      	mov	r3, r1
 8002a28:	717b      	strb	r3, [r7, #5]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	797b      	ldrb	r3, [r7, #5]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	793b      	ldrb	r3, [r7, #4]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	b2db      	uxtb	r3, r3
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <pack_left_shift_u32>:

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	70fb      	strb	r3, [r7, #3]
 8002a56:	4613      	mov	r3, r2
 8002a58:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	78bb      	ldrb	r3, [r7, #2]
 8002a66:	4013      	ands	r3, r2
 8002a68:	b2db      	uxtb	r3, r3
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	80fb      	strh	r3, [r7, #6]
 8002a80:	460b      	mov	r3, r1
 8002a82:	717b      	strb	r3, [r7, #5]
 8002a84:	4613      	mov	r3, r2
 8002a86:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8002a88:	88fa      	ldrh	r2, [r7, #6]
 8002a8a:	797b      	ldrb	r3, [r7, #5]
 8002a8c:	fa42 f303 	asr.w	r3, r2, r3
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	793b      	ldrb	r3, [r7, #4]
 8002a94:	4013      	ands	r3, r2
 8002a96:	b2db      	uxtb	r3, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <pack_right_shift_u32>:

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	78bb      	ldrb	r3, [r7, #2]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	b2db      	uxtb	r3, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <ucr_01_front_analog_pack>:

int ucr_01_front_analog_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_analog_t *src_p,
    size_t size)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
    if (size < 16u) {
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	d802      	bhi.n	8002ae8 <ucr_01_front_analog_pack+0x18>
        return (-EINVAL);
 8002ae2:	f06f 0315 	mvn.w	r3, #21
 8002ae6:	e113      	b.n	8002d10 <ucr_01_front_analog_pack+0x240>
    }

    memset(&dst_p[0], 0, 16);
 8002ae8:	2210      	movs	r2, #16
 8002aea:	2100      	movs	r1, #0
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f00a fcd3 	bl	800d498 <memset>

    dst_p[0] |= pack_left_shift_u16(src_p->analog1, 0u, 0xffu);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	22ff      	movs	r2, #255	@ 0xff
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff8e 	bl	8002a1c <pack_left_shift_u16>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(src_p->analog1, 8u, 0xffu);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	22ff      	movs	r2, #255	@ 0xff
 8002b16:	2108      	movs	r1, #8
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ffac 	bl	8002a76 <pack_right_shift_u16>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4619      	mov	r1, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3301      	adds	r3, #1
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u16(src_p->analog2, 0u, 0xffu);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	885b      	ldrh	r3, [r3, #2]
 8002b36:	22ff      	movs	r2, #255	@ 0xff
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff6e 	bl	8002a1c <pack_left_shift_u16>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3302      	adds	r3, #2
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->analog2, 8u, 0xffu);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	885b      	ldrh	r3, [r3, #2]
 8002b58:	22ff      	movs	r2, #255	@ 0xff
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff8a 	bl	8002a76 <pack_right_shift_u16>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4619      	mov	r1, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3303      	adds	r3, #3
 8002b6a:	781a      	ldrb	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3303      	adds	r3, #3
 8002b70:	430a      	orrs	r2, r1
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u16(src_p->analog3, 0u, 0xffu);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	889b      	ldrh	r3, [r3, #4]
 8002b7a:	22ff      	movs	r2, #255	@ 0xff
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff4c 	bl	8002a1c <pack_left_shift_u16>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4619      	mov	r1, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3304      	adds	r3, #4
 8002b92:	430a      	orrs	r2, r1
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(src_p->analog3, 8u, 0xffu);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	889b      	ldrh	r3, [r3, #4]
 8002b9c:	22ff      	movs	r2, #255	@ 0xff
 8002b9e:	2108      	movs	r1, #8
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff68 	bl	8002a76 <pack_right_shift_u16>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3305      	adds	r3, #5
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3305      	adds	r3, #5
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u16(src_p->analog4, 0u, 0xffu);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	88db      	ldrh	r3, [r3, #6]
 8002bbe:	22ff      	movs	r2, #255	@ 0xff
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff2a 	bl	8002a1c <pack_left_shift_u16>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3306      	adds	r3, #6
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3306      	adds	r3, #6
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(src_p->analog4, 8u, 0xffu);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	88db      	ldrh	r3, [r3, #6]
 8002be0:	22ff      	movs	r2, #255	@ 0xff
 8002be2:	2108      	movs	r1, #8
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff46 	bl	8002a76 <pack_right_shift_u16>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4619      	mov	r1, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3307      	adds	r3, #7
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3307      	adds	r3, #7
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_left_shift_u16(src_p->analog5, 0u, 0xffu);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	891b      	ldrh	r3, [r3, #8]
 8002c02:	22ff      	movs	r2, #255	@ 0xff
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ff08 	bl	8002a1c <pack_left_shift_u16>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4619      	mov	r1, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3308      	adds	r3, #8
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u16(src_p->analog5, 8u, 0xffu);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	891b      	ldrh	r3, [r3, #8]
 8002c24:	22ff      	movs	r2, #255	@ 0xff
 8002c26:	2108      	movs	r1, #8
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff24 	bl	8002a76 <pack_right_shift_u16>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4619      	mov	r1, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3309      	adds	r3, #9
 8002c36:	781a      	ldrb	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3309      	adds	r3, #9
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_left_shift_u16(src_p->analog6, 0u, 0xffu);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	895b      	ldrh	r3, [r3, #10]
 8002c46:	22ff      	movs	r2, #255	@ 0xff
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fee6 	bl	8002a1c <pack_left_shift_u16>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4619      	mov	r1, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	330a      	adds	r3, #10
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	330a      	adds	r3, #10
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u16(src_p->analog6, 8u, 0xffu);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	895b      	ldrh	r3, [r3, #10]
 8002c68:	22ff      	movs	r2, #255	@ 0xff
 8002c6a:	2108      	movs	r1, #8
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff02 	bl	8002a76 <pack_right_shift_u16>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4619      	mov	r1, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	330b      	adds	r3, #11
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	330b      	adds	r3, #11
 8002c80:	430a      	orrs	r2, r1
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u16(src_p->analog7, 0u, 0xffu);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	899b      	ldrh	r3, [r3, #12]
 8002c8a:	22ff      	movs	r2, #255	@ 0xff
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fec4 	bl	8002a1c <pack_left_shift_u16>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4619      	mov	r1, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u16(src_p->analog7, 8u, 0xffu);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	899b      	ldrh	r3, [r3, #12]
 8002cac:	22ff      	movs	r2, #255	@ 0xff
 8002cae:	2108      	movs	r1, #8
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fee0 	bl	8002a76 <pack_right_shift_u16>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4619      	mov	r1, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	330d      	adds	r3, #13
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	330d      	adds	r3, #13
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_left_shift_u16(src_p->analog8, 0u, 0xffu);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	89db      	ldrh	r3, [r3, #14]
 8002cce:	22ff      	movs	r2, #255	@ 0xff
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fea2 	bl	8002a1c <pack_left_shift_u16>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	330e      	adds	r3, #14
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	330e      	adds	r3, #14
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u16(src_p->analog8, 8u, 0xffu);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	89db      	ldrh	r3, [r3, #14]
 8002cf0:	22ff      	movs	r2, #255	@ 0xff
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff febe 	bl	8002a76 <pack_right_shift_u16>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	330f      	adds	r3, #15
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	330f      	adds	r3, #15
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    return (16);
 8002d0e:	2310      	movs	r3, #16
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <ucr_01_front_strain_gauges1_pack>:

int ucr_01_front_strain_gauges1_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_strain_gauges1_t *src_p,
    size_t size)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
    if (size < 20u) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b13      	cmp	r3, #19
 8002d28:	d802      	bhi.n	8002d30 <ucr_01_front_strain_gauges1_pack+0x18>
        return (-EINVAL);
 8002d2a:	f06f 0315 	mvn.w	r3, #21
 8002d2e:	e135      	b.n	8002f9c <ucr_01_front_strain_gauges1_pack+0x284>
    }

    memset(&dst_p[0], 0, 20);
 8002d30:	2214      	movs	r2, #20
 8002d32:	2100      	movs	r1, #0
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f00a fbaf 	bl	800d498 <memset>

    dst_p[0] |= pack_left_shift_u32(src_p->gauge1, 0u, 0xffu);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	22ff      	movs	r2, #255	@ 0xff
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fe81 	bl	8002a4a <pack_left_shift_u32>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(src_p->gauge1, 8u, 0xffu);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	22ff      	movs	r2, #255	@ 0xff
 8002d5e:	2108      	movs	r1, #8
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fe9f 	bl	8002aa4 <pack_right_shift_u32>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3301      	adds	r3, #1
 8002d74:	430a      	orrs	r2, r1
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(src_p->gauge1, 16u, 0xffu);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	22ff      	movs	r2, #255	@ 0xff
 8002d80:	2110      	movs	r1, #16
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fe8e 	bl	8002aa4 <pack_right_shift_u32>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3302      	adds	r3, #2
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3302      	adds	r3, #2
 8002d96:	430a      	orrs	r2, r1
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u32(src_p->gauge2, 0u, 0xffu);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	22ff      	movs	r2, #255	@ 0xff
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fe50 	bl	8002a4a <pack_left_shift_u32>
 8002daa:	4603      	mov	r3, r0
 8002dac:	4619      	mov	r1, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3303      	adds	r3, #3
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3303      	adds	r3, #3
 8002db8:	430a      	orrs	r2, r1
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u32(src_p->gauge2, 8u, 0xffu);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	22ff      	movs	r2, #255	@ 0xff
 8002dc4:	2108      	movs	r1, #8
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fe6c 	bl	8002aa4 <pack_right_shift_u32>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	781a      	ldrb	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(src_p->gauge2, 16u, 0xffu);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	22ff      	movs	r2, #255	@ 0xff
 8002de6:	2110      	movs	r1, #16
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fe5b 	bl	8002aa4 <pack_right_shift_u32>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3305      	adds	r3, #5
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3305      	adds	r3, #5
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u32(src_p->gauge3, 0u, 0xffu);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	22ff      	movs	r2, #255	@ 0xff
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fe1d 	bl	8002a4a <pack_left_shift_u32>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4619      	mov	r1, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3306      	adds	r3, #6
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3306      	adds	r3, #6
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(src_p->gauge3, 8u, 0xffu);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	22ff      	movs	r2, #255	@ 0xff
 8002e2a:	2108      	movs	r1, #8
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fe39 	bl	8002aa4 <pack_right_shift_u32>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4619      	mov	r1, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3307      	adds	r3, #7
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3307      	adds	r3, #7
 8002e40:	430a      	orrs	r2, r1
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_right_shift_u32(src_p->gauge3, 16u, 0xffu);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	22ff      	movs	r2, #255	@ 0xff
 8002e4c:	2110      	movs	r1, #16
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fe28 	bl	8002aa4 <pack_right_shift_u32>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4619      	mov	r1, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3308      	adds	r3, #8
 8002e62:	430a      	orrs	r2, r1
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_left_shift_u32(src_p->gauge4, 0u, 0xffu);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	22ff      	movs	r2, #255	@ 0xff
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fdea 	bl	8002a4a <pack_left_shift_u32>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4619      	mov	r1, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3309      	adds	r3, #9
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3309      	adds	r3, #9
 8002e84:	430a      	orrs	r2, r1
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(src_p->gauge4, 8u, 0xffu);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	22ff      	movs	r2, #255	@ 0xff
 8002e90:	2108      	movs	r1, #8
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fe06 	bl	8002aa4 <pack_right_shift_u32>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	330a      	adds	r3, #10
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	330a      	adds	r3, #10
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(src_p->gauge4, 16u, 0xffu);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	22ff      	movs	r2, #255	@ 0xff
 8002eb2:	2110      	movs	r1, #16
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fdf5 	bl	8002aa4 <pack_right_shift_u32>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	330b      	adds	r3, #11
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	330b      	adds	r3, #11
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u32(src_p->gauge5, 0u, 0xffu);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	22ff      	movs	r2, #255	@ 0xff
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fdb7 	bl	8002a4a <pack_left_shift_u32>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	430a      	orrs	r2, r1
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(src_p->gauge5, 8u, 0xffu);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	22ff      	movs	r2, #255	@ 0xff
 8002ef6:	2108      	movs	r1, #8
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fdd3 	bl	8002aa4 <pack_right_shift_u32>
 8002efe:	4603      	mov	r3, r0
 8002f00:	4619      	mov	r1, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	330d      	adds	r3, #13
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	330d      	adds	r3, #13
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(src_p->gauge5, 16u, 0xffu);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	22ff      	movs	r2, #255	@ 0xff
 8002f18:	2110      	movs	r1, #16
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fdc2 	bl	8002aa4 <pack_right_shift_u32>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4619      	mov	r1, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	330e      	adds	r3, #14
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	330e      	adds	r3, #14
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_left_shift_u32(src_p->gauge6, 0u, 0xffu);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	22ff      	movs	r2, #255	@ 0xff
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fd84 	bl	8002a4a <pack_left_shift_u32>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4619      	mov	r1, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	330f      	adds	r3, #15
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	330f      	adds	r3, #15
 8002f50:	430a      	orrs	r2, r1
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]
    dst_p[16] |= pack_right_shift_u32(src_p->gauge6, 8u, 0xffu);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	22ff      	movs	r2, #255	@ 0xff
 8002f5c:	2108      	movs	r1, #8
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fda0 	bl	8002aa4 <pack_right_shift_u32>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4619      	mov	r1, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3310      	adds	r3, #16
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3310      	adds	r3, #16
 8002f72:	430a      	orrs	r2, r1
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]
    dst_p[17] |= pack_right_shift_u32(src_p->gauge6, 16u, 0xffu);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	22ff      	movs	r2, #255	@ 0xff
 8002f7e:	2110      	movs	r1, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fd8f 	bl	8002aa4 <pack_right_shift_u32>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4619      	mov	r1, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3311      	adds	r3, #17
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3311      	adds	r3, #17
 8002f94:	430a      	orrs	r2, r1
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

    return (20);
 8002f9a:	2314      	movs	r3, #20
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <ucr_01_front_strain_gauges2_pack>:

int ucr_01_front_strain_gauges2_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_strain_gauges2_t *src_p,
    size_t size)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
    if (size < 20u) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b13      	cmp	r3, #19
 8002fb4:	d802      	bhi.n	8002fbc <ucr_01_front_strain_gauges2_pack+0x18>
        return (-EINVAL);
 8002fb6:	f06f 0315 	mvn.w	r3, #21
 8002fba:	e135      	b.n	8003228 <ucr_01_front_strain_gauges2_pack+0x284>
    }

    memset(&dst_p[0], 0, 20);
 8002fbc:	2214      	movs	r2, #20
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f00a fa69 	bl	800d498 <memset>

    dst_p[0] |= pack_left_shift_u32(src_p->gauge1, 0u, 0xffu);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	22ff      	movs	r2, #255	@ 0xff
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fd3b 	bl	8002a4a <pack_left_shift_u32>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(src_p->gauge1, 8u, 0xffu);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	22ff      	movs	r2, #255	@ 0xff
 8002fea:	2108      	movs	r1, #8
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fd59 	bl	8002aa4 <pack_right_shift_u32>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	430a      	orrs	r2, r1
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(src_p->gauge1, 16u, 0xffu);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	22ff      	movs	r2, #255	@ 0xff
 800300c:	2110      	movs	r1, #16
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fd48 	bl	8002aa4 <pack_right_shift_u32>
 8003014:	4603      	mov	r3, r0
 8003016:	4619      	mov	r1, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3302      	adds	r3, #2
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3302      	adds	r3, #2
 8003022:	430a      	orrs	r2, r1
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u32(src_p->gauge2, 0u, 0xffu);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	22ff      	movs	r2, #255	@ 0xff
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fd0a 	bl	8002a4a <pack_left_shift_u32>
 8003036:	4603      	mov	r3, r0
 8003038:	4619      	mov	r1, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3303      	adds	r3, #3
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3303      	adds	r3, #3
 8003044:	430a      	orrs	r2, r1
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u32(src_p->gauge2, 8u, 0xffu);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	22ff      	movs	r2, #255	@ 0xff
 8003050:	2108      	movs	r1, #8
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fd26 	bl	8002aa4 <pack_right_shift_u32>
 8003058:	4603      	mov	r3, r0
 800305a:	4619      	mov	r1, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3304      	adds	r3, #4
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3304      	adds	r3, #4
 8003066:	430a      	orrs	r2, r1
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(src_p->gauge2, 16u, 0xffu);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	22ff      	movs	r2, #255	@ 0xff
 8003072:	2110      	movs	r1, #16
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fd15 	bl	8002aa4 <pack_right_shift_u32>
 800307a:	4603      	mov	r3, r0
 800307c:	4619      	mov	r1, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3305      	adds	r3, #5
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3305      	adds	r3, #5
 8003088:	430a      	orrs	r2, r1
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u32(src_p->gauge3, 0u, 0xffu);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	22ff      	movs	r2, #255	@ 0xff
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fcd7 	bl	8002a4a <pack_left_shift_u32>
 800309c:	4603      	mov	r3, r0
 800309e:	4619      	mov	r1, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3306      	adds	r3, #6
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3306      	adds	r3, #6
 80030aa:	430a      	orrs	r2, r1
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(src_p->gauge3, 8u, 0xffu);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	22ff      	movs	r2, #255	@ 0xff
 80030b6:	2108      	movs	r1, #8
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fcf3 	bl	8002aa4 <pack_right_shift_u32>
 80030be:	4603      	mov	r3, r0
 80030c0:	4619      	mov	r1, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3307      	adds	r3, #7
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3307      	adds	r3, #7
 80030cc:	430a      	orrs	r2, r1
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_right_shift_u32(src_p->gauge3, 16u, 0xffu);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	22ff      	movs	r2, #255	@ 0xff
 80030d8:	2110      	movs	r1, #16
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fce2 	bl	8002aa4 <pack_right_shift_u32>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4619      	mov	r1, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3308      	adds	r3, #8
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3308      	adds	r3, #8
 80030ee:	430a      	orrs	r2, r1
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_left_shift_u32(src_p->gauge4, 0u, 0xffu);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	22ff      	movs	r2, #255	@ 0xff
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fca4 	bl	8002a4a <pack_left_shift_u32>
 8003102:	4603      	mov	r3, r0
 8003104:	4619      	mov	r1, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3309      	adds	r3, #9
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3309      	adds	r3, #9
 8003110:	430a      	orrs	r2, r1
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(src_p->gauge4, 8u, 0xffu);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	22ff      	movs	r2, #255	@ 0xff
 800311c:	2108      	movs	r1, #8
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fcc0 	bl	8002aa4 <pack_right_shift_u32>
 8003124:	4603      	mov	r3, r0
 8003126:	4619      	mov	r1, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	330a      	adds	r3, #10
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	330a      	adds	r3, #10
 8003132:	430a      	orrs	r2, r1
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(src_p->gauge4, 16u, 0xffu);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	22ff      	movs	r2, #255	@ 0xff
 800313e:	2110      	movs	r1, #16
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fcaf 	bl	8002aa4 <pack_right_shift_u32>
 8003146:	4603      	mov	r3, r0
 8003148:	4619      	mov	r1, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	330b      	adds	r3, #11
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	330b      	adds	r3, #11
 8003154:	430a      	orrs	r2, r1
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u32(src_p->gauge5, 0u, 0xffu);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	22ff      	movs	r2, #255	@ 0xff
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fc71 	bl	8002a4a <pack_left_shift_u32>
 8003168:	4603      	mov	r3, r0
 800316a:	4619      	mov	r1, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	330c      	adds	r3, #12
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	330c      	adds	r3, #12
 8003176:	430a      	orrs	r2, r1
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(src_p->gauge5, 8u, 0xffu);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	22ff      	movs	r2, #255	@ 0xff
 8003182:	2108      	movs	r1, #8
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fc8d 	bl	8002aa4 <pack_right_shift_u32>
 800318a:	4603      	mov	r3, r0
 800318c:	4619      	mov	r1, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	330d      	adds	r3, #13
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	330d      	adds	r3, #13
 8003198:	430a      	orrs	r2, r1
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(src_p->gauge5, 16u, 0xffu);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	22ff      	movs	r2, #255	@ 0xff
 80031a4:	2110      	movs	r1, #16
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fc7c 	bl	8002aa4 <pack_right_shift_u32>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4619      	mov	r1, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	330e      	adds	r3, #14
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	330e      	adds	r3, #14
 80031ba:	430a      	orrs	r2, r1
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_left_shift_u32(src_p->gauge6, 0u, 0xffu);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	22ff      	movs	r2, #255	@ 0xff
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fc3e 	bl	8002a4a <pack_left_shift_u32>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4619      	mov	r1, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	330f      	adds	r3, #15
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	330f      	adds	r3, #15
 80031dc:	430a      	orrs	r2, r1
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]
    dst_p[16] |= pack_right_shift_u32(src_p->gauge6, 8u, 0xffu);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	22ff      	movs	r2, #255	@ 0xff
 80031e8:	2108      	movs	r1, #8
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fc5a 	bl	8002aa4 <pack_right_shift_u32>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4619      	mov	r1, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3310      	adds	r3, #16
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3310      	adds	r3, #16
 80031fe:	430a      	orrs	r2, r1
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]
    dst_p[17] |= pack_right_shift_u32(src_p->gauge6, 16u, 0xffu);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	22ff      	movs	r2, #255	@ 0xff
 800320a:	2110      	movs	r1, #16
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fc49 	bl	8002aa4 <pack_right_shift_u32>
 8003212:	4603      	mov	r3, r0
 8003214:	4619      	mov	r1, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3311      	adds	r3, #17
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3311      	adds	r3, #17
 8003220:	430a      	orrs	r2, r1
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

    return (20);
 8003226:	2314      	movs	r3, #20
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <ucr_01_front_frequency_pack>:

int ucr_01_front_frequency_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_frequency_t *src_p,
    size_t size)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
    uint32_t freq1;
    uint32_t freq2;
    uint32_t freq3;
    uint32_t freq4;

    if (size < 16u) {
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b0f      	cmp	r3, #15
 8003240:	d802      	bhi.n	8003248 <ucr_01_front_frequency_pack+0x18>
        return (-EINVAL);
 8003242:	f06f 0315 	mvn.w	r3, #21
 8003246:	e112      	b.n	800346e <ucr_01_front_frequency_pack+0x23e>
    }

    memset(&dst_p[0], 0, 16);
 8003248:	2210      	movs	r2, #16
 800324a:	2100      	movs	r1, #0
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f00a f923 	bl	800d498 <memset>

    memcpy(&freq1, &src_p->freq1, sizeof(freq1));
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61fb      	str	r3, [r7, #28]
    dst_p[0] |= pack_left_shift_u32(freq1, 0u, 0xffu);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	22ff      	movs	r2, #255	@ 0xff
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fbf3 	bl	8002a4a <pack_left_shift_u32>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(freq1, 8u, 0xffu);
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	22ff      	movs	r2, #255	@ 0xff
 8003278:	2108      	movs	r1, #8
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fc12 	bl	8002aa4 <pack_right_shift_u32>
 8003280:	4603      	mov	r3, r0
 8003282:	4619      	mov	r1, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3301      	adds	r3, #1
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3301      	adds	r3, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(freq1, 16u, 0xffu);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	22ff      	movs	r2, #255	@ 0xff
 8003298:	2110      	movs	r1, #16
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fc02 	bl	8002aa4 <pack_right_shift_u32>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4619      	mov	r1, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3302      	adds	r3, #2
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3302      	adds	r3, #2
 80032ae:	430a      	orrs	r2, r1
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u32(freq1, 24u, 0xffu);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	22ff      	movs	r2, #255	@ 0xff
 80032b8:	2118      	movs	r1, #24
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fbf2 	bl	8002aa4 <pack_right_shift_u32>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4619      	mov	r1, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3303      	adds	r3, #3
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3303      	adds	r3, #3
 80032ce:	430a      	orrs	r2, r1
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]
    memcpy(&freq2, &src_p->freq2, sizeof(freq2));
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	3304      	adds	r3, #4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	61bb      	str	r3, [r7, #24]
    dst_p[4] |= pack_left_shift_u32(freq2, 0u, 0xffu);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	22ff      	movs	r2, #255	@ 0xff
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fbb1 	bl	8002a4a <pack_left_shift_u32>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4619      	mov	r1, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3304      	adds	r3, #4
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3304      	adds	r3, #4
 80032f6:	430a      	orrs	r2, r1
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(freq2, 8u, 0xffu);
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	22ff      	movs	r2, #255	@ 0xff
 8003300:	2108      	movs	r1, #8
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fbce 	bl	8002aa4 <pack_right_shift_u32>
 8003308:	4603      	mov	r3, r0
 800330a:	4619      	mov	r1, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3305      	adds	r3, #5
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3305      	adds	r3, #5
 8003316:	430a      	orrs	r2, r1
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u32(freq2, 16u, 0xffu);
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	22ff      	movs	r2, #255	@ 0xff
 8003320:	2110      	movs	r1, #16
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fbbe 	bl	8002aa4 <pack_right_shift_u32>
 8003328:	4603      	mov	r3, r0
 800332a:	4619      	mov	r1, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3306      	adds	r3, #6
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3306      	adds	r3, #6
 8003336:	430a      	orrs	r2, r1
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(freq2, 24u, 0xffu);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	22ff      	movs	r2, #255	@ 0xff
 8003340:	2118      	movs	r1, #24
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fbae 	bl	8002aa4 <pack_right_shift_u32>
 8003348:	4603      	mov	r3, r0
 800334a:	4619      	mov	r1, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3307      	adds	r3, #7
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3307      	adds	r3, #7
 8003356:	430a      	orrs	r2, r1
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
    memcpy(&freq3, &src_p->freq3, sizeof(freq3));
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	3308      	adds	r3, #8
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	617b      	str	r3, [r7, #20]
    dst_p[8] |= pack_left_shift_u32(freq3, 0u, 0xffu);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	22ff      	movs	r2, #255	@ 0xff
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fb6d 	bl	8002a4a <pack_left_shift_u32>
 8003370:	4603      	mov	r3, r0
 8003372:	4619      	mov	r1, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3308      	adds	r3, #8
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3308      	adds	r3, #8
 800337e:	430a      	orrs	r2, r1
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u32(freq3, 8u, 0xffu);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	22ff      	movs	r2, #255	@ 0xff
 8003388:	2108      	movs	r1, #8
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fb8a 	bl	8002aa4 <pack_right_shift_u32>
 8003390:	4603      	mov	r3, r0
 8003392:	4619      	mov	r1, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3309      	adds	r3, #9
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3309      	adds	r3, #9
 800339e:	430a      	orrs	r2, r1
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(freq3, 16u, 0xffu);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	22ff      	movs	r2, #255	@ 0xff
 80033a8:	2110      	movs	r1, #16
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fb7a 	bl	8002aa4 <pack_right_shift_u32>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4619      	mov	r1, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	330a      	adds	r3, #10
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	330a      	adds	r3, #10
 80033be:	430a      	orrs	r2, r1
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(freq3, 24u, 0xffu);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	22ff      	movs	r2, #255	@ 0xff
 80033c8:	2118      	movs	r1, #24
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fb6a 	bl	8002aa4 <pack_right_shift_u32>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4619      	mov	r1, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	330b      	adds	r3, #11
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	330b      	adds	r3, #11
 80033de:	430a      	orrs	r2, r1
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]
    memcpy(&freq4, &src_p->freq4, sizeof(freq4));
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	330c      	adds	r3, #12
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	613b      	str	r3, [r7, #16]
    dst_p[12] |= pack_left_shift_u32(freq4, 0u, 0xffu);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	22ff      	movs	r2, #255	@ 0xff
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fb29 	bl	8002a4a <pack_left_shift_u32>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4619      	mov	r1, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	330c      	adds	r3, #12
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	330c      	adds	r3, #12
 8003406:	430a      	orrs	r2, r1
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(freq4, 8u, 0xffu);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	22ff      	movs	r2, #255	@ 0xff
 8003410:	2108      	movs	r1, #8
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fb46 	bl	8002aa4 <pack_right_shift_u32>
 8003418:	4603      	mov	r3, r0
 800341a:	4619      	mov	r1, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	330d      	adds	r3, #13
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	330d      	adds	r3, #13
 8003426:	430a      	orrs	r2, r1
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(freq4, 16u, 0xffu);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	22ff      	movs	r2, #255	@ 0xff
 8003430:	2110      	movs	r1, #16
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fb36 	bl	8002aa4 <pack_right_shift_u32>
 8003438:	4603      	mov	r3, r0
 800343a:	4619      	mov	r1, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	330e      	adds	r3, #14
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	330e      	adds	r3, #14
 8003446:	430a      	orrs	r2, r1
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u32(freq4, 24u, 0xffu);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	22ff      	movs	r2, #255	@ 0xff
 8003450:	2118      	movs	r1, #24
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fb26 	bl	8002aa4 <pack_right_shift_u32>
 8003458:	4603      	mov	r3, r0
 800345a:	4619      	mov	r1, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	330f      	adds	r3, #15
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	330f      	adds	r3, #15
 8003466:	430a      	orrs	r2, r1
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]

    return (16);
 800346c:	2310      	movs	r3, #16
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <getCRC>:
 *      bool error = (bool) getCRC(data, 4, CRC_INITIAL_SEED);
 *
 * @endcode
 */
CRCWORD getCRC(const uint8_t dataBytes[], uint8_t numberBytes, CRCWORD initialValue)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
 8003484:	4613      	mov	r3, r2
 8003486:	70bb      	strb	r3, [r7, #2]
#ifdef CRC_CALCULATION
    return calculateCRC(dataBytes, numberBytes, initialValue);
#endif

#ifdef CRC_LOOKUP
    if (!initialized) { initTable(); }
 8003488:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <getCRC+0x38>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <getCRC+0x22>
 8003496:	f000 f80d 	bl	80034b4 <initTable>
    return lookupCRC(dataBytes, numberBytes, initialValue);
 800349a:	78ba      	ldrb	r2, [r7, #2]
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f82b 	bl	80034fc <lookupCRC>
 80034a6:	4603      	mov	r3, r0
#endif
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20010968 	.word	0x20010968

080034b4 <initTable>:
 *
 * @return      None
 *
 */
static void initTable(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
    uint8_t value;
    unsigned int i;
    for (i = 0; i < 256; ++i)
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	e012      	b.n	80034e6 <initTable+0x32>
    {
        value = (uint8_t) i;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	70fb      	strb	r3, [r7, #3]
        crcLookupTable[i] = calculateCRC(&value, 1, 0x00);
 80034c6:	1cfb      	adds	r3, r7, #3
 80034c8:	2200      	movs	r2, #0
 80034ca:	2101      	movs	r1, #1
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f83d 	bl	800354c <calculateCRC>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4619      	mov	r1, r3
 80034d6:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <initTable+0x44>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	460a      	mov	r2, r1
 80034de:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 256; ++i)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3301      	adds	r3, #1
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2bff      	cmp	r3, #255	@ 0xff
 80034ea:	d9e9      	bls.n	80034c0 <initTable+0xc>
    }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	2001096c 	.word	0x2001096c

080034fc <lookupCRC>:
 *
 * @return     CRCWORD       of the calculation
 *
 */
static CRCWORD lookupCRC(const uint8_t dataBytes[], uint8_t numberBytes, CRCWORD initialValue)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	70fb      	strb	r3, [r7, #3]
 8003508:	4613      	mov	r3, r2
 800350a:	70bb      	strb	r3, [r7, #2]
    CRCWORD crc = initialValue;
 800350c:	78bb      	ldrb	r3, [r7, #2]
 800350e:	73fb      	strb	r3, [r7, #15]
    unsigned int i;
    for (i = 0; i < numberBytes; ++i)
 8003510:	2300      	movs	r3, #0
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	e00d      	b.n	8003532 <lookupCRC+0x36>
    {

        crc = crcLookupTable[crc ^ dataBytes[i]];
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4413      	add	r3, r2
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	4053      	eors	r3, r2
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <lookupCRC+0x4c>)
 8003528:	5c9b      	ldrb	r3, [r3, r2]
 800352a:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < numberBytes; ++i)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3301      	adds	r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d3ed      	bcc.n	8003516 <lookupCRC+0x1a>

    }
    return crc;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	2001096c 	.word	0x2001096c

0800354c <calculateCRC>:
 *
 * @return     CRCWORD       of the calculation
 *
 */
static CRCWORD calculateCRC(const uint8_t dataBytes[], uint8_t numberBytes, CRCWORD initialValue)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
 8003558:	4613      	mov	r3, r2
 800355a:	70bb      	strb	r3, [r7, #2]
    int         bitIndex, byteIndex;
    bool        dataMSb;                        /* Most significant bit of data byte */
    bool        crcMSb;                         /* Most significant bit of crc byte  */

    // Initial value of crc register
    CRCWORD crc = initialValue;
 800355c:	78bb      	ldrb	r3, [r7, #2]
 800355e:	73fb      	strb	r3, [r7, #15]

    // Loop through all bytes in the dataBytes[] array
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e027      	b.n	80035b6 <calculateCRC+0x6a>
    {
        // Point to most significant bit
        bitIndex = 0x80u;
 8003566:	2380      	movs	r3, #128	@ 0x80
 8003568:	617b      	str	r3, [r7, #20]

        // Loop through all bits in the current byte
        while (bitIndex > 0)
 800356a:	e01e      	b.n	80035aa <calculateCRC+0x5e>
        {
            // Check MSB's of data and crc
            dataMSb = (bool) (dataBytes[byteIndex] & bitIndex);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	73bb      	strb	r3, [r7, #14]


            crcMSb  = (bool) (crc & 0x80u);
 8003584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	09db      	lsrs	r3, r3, #7
 800358c:	737b      	strb	r3, [r7, #13]


            // Update crc register
            crc <<= 1;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
            if (dataMSb ^ crcMSb) { crc ^= CRC_POLYNOMIAL; }
 8003594:	7bba      	ldrb	r2, [r7, #14]
 8003596:	7b7b      	ldrb	r3, [r7, #13]
 8003598:	429a      	cmp	r2, r3
 800359a:	d003      	beq.n	80035a4 <calculateCRC+0x58>
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	f083 0307 	eor.w	r3, r3, #7
 80035a2:	73fb      	strb	r3, [r7, #15]

            // Shift MSb pointer to the next data bit
            bitIndex >>= 1;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	105b      	asrs	r3, r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
        while (bitIndex > 0)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	dcdd      	bgt.n	800356c <calculateCRC+0x20>
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	3301      	adds	r3, #1
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	dbd3      	blt.n	8003566 <calculateCRC+0x1a>
        }
    }

    return crc;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d6:	2003      	movs	r0, #3
 80035d8:	f001 ff39 	bl	800544e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035dc:	200f      	movs	r0, #15
 80035de:	f7fd ffc5 	bl	800156c <HAL_InitTick>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	71fb      	strb	r3, [r7, #7]
 80035ec:	e001      	b.n	80035f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035ee:	f7fd ff95 	bl	800151c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035f2:	79fb      	ldrb	r3, [r7, #7]

}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_IncTick+0x1c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <HAL_IncTick+0x20>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4413      	add	r3, r2
 800360a:	4a03      	ldr	r2, [pc, #12]	@ (8003618 <HAL_IncTick+0x1c>)
 800360c:	6013      	str	r3, [r2, #0]
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	20010a6c 	.word	0x20010a6c
 800361c:	20000048 	.word	0x20000048

08003620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return uwTick;
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <HAL_GetTick+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20010a6c 	.word	0x20010a6c

08003638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003640:	f7ff ffee 	bl	8003620 <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d004      	beq.n	800365c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_Delay+0x40>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800365c:	bf00      	nop
 800365e:	f7ff ffdf 	bl	8003620 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	429a      	cmp	r2, r3
 800366c:	d8f7      	bhi.n	800365e <HAL_Delay+0x26>
  {
  }
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000048 	.word	0x20000048

0800367c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 0202 	bic.w	r2, r3, #2
 800368c:	4904      	ldr	r1, [pc, #16]	@ (80036a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40010030 	.word	0x40010030

080036a4 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010030 	.word	0x40010030

080036c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	609a      	str	r2, [r3, #8]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3360      	adds	r3, #96	@ 0x60
 800373e:	461a      	mov	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <LL_ADC_SetOffset+0x44>)
 800374e:	4013      	ands	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003764:	bf00      	nop
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	03fff000 	.word	0x03fff000

08003774 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3360      	adds	r3, #96	@ 0x60
 8003782:	461a      	mov	r2, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3360      	adds	r3, #96	@ 0x60
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b087      	sub	sp, #28
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3360      	adds	r3, #96	@ 0x60
 80037e6:	461a      	mov	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	3360      	adds	r3, #96	@ 0x60
 800381c:	461a      	mov	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	431a      	orrs	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	615a      	str	r2, [r3, #20]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800388e:	b480      	push	{r7}
 8003890:	b087      	sub	sp, #28
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3330      	adds	r3, #48	@ 0x30
 800389e:	461a      	mov	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	4413      	add	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	211f      	movs	r1, #31
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	401a      	ands	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	0e9b      	lsrs	r3, r3, #26
 80038c6:	f003 011f 	and.w	r1, r3, #31
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	431a      	orrs	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3314      	adds	r3, #20
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	0e5b      	lsrs	r3, r3, #25
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	4413      	add	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	0d1b      	lsrs	r3, r3, #20
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	2107      	movs	r1, #7
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	401a      	ands	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	0d1b      	lsrs	r3, r3, #20
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	fa01 f303 	lsl.w	r3, r1, r3
 8003950:	431a      	orrs	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397c:	43db      	mvns	r3, r3
 800397e:	401a      	ands	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f003 0318 	and.w	r3, r3, #24
 8003986:	4908      	ldr	r1, [pc, #32]	@ (80039a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003988:	40d9      	lsrs	r1, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	400b      	ands	r3, r1
 800398e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003992:	431a      	orrs	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	0007ffff 	.word	0x0007ffff

080039ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 031f 	and.w	r3, r3, #31
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80039f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6093      	str	r3, [r2, #8]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a1c:	d101      	bne.n	8003a22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003a40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a6c:	d101      	bne.n	8003a72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a94:	f043 0201 	orr.w	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <LL_ADC_IsEnabled+0x18>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <LL_ADC_IsEnabled+0x1a>
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ade:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d101      	bne.n	8003b0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d101      	bne.n	8003b34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b089      	sub	sp, #36	@ 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e1a9      	b.n	8003eb2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fc ff69 	bl	8000a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff3f 	bl	8003a08 <LL_ADC_IsDeepPowerDownEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff ff25 	bl	80039e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ff5a 	bl	8003a58 <LL_ADC_IsInternalRegulatorEnabled>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d115      	bne.n	8003bd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ff3e 	bl	8003a30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8003e28 <HAL_ADC_Init+0x2e4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	4a9c      	ldr	r2, [pc, #624]	@ (8003e2c <HAL_ADC_Init+0x2e8>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	099b      	lsrs	r3, r3, #6
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003bc8:	e002      	b.n	8003bd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f9      	bne.n	8003bca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ff3c 	bl	8003a58 <LL_ADC_IsInternalRegulatorEnabled>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bea:	f043 0210 	orr.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff ff75 	bl	8003af6 <LL_ADC_REG_IsConversionOngoing>
 8003c0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 8142 	bne.w	8003ea0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f040 813e 	bne.w	8003ea0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003c2c:	f043 0202 	orr.w	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff35 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d141      	bne.n	8003cc8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADC_Init+0x114>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a77      	ldr	r2, [pc, #476]	@ (8003e30 <HAL_ADC_Init+0x2ec>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10f      	bne.n	8003c78 <HAL_ADC_Init+0x134>
 8003c58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c5c:	f7ff ff24 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003c60:	4604      	mov	r4, r0
 8003c62:	4873      	ldr	r0, [pc, #460]	@ (8003e30 <HAL_ADC_Init+0x2ec>)
 8003c64:	f7ff ff20 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	4323      	orrs	r3, r4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e012      	b.n	8003c9e <HAL_ADC_Init+0x15a>
 8003c78:	486e      	ldr	r0, [pc, #440]	@ (8003e34 <HAL_ADC_Init+0x2f0>)
 8003c7a:	f7ff ff15 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003c7e:	4604      	mov	r4, r0
 8003c80:	486d      	ldr	r0, [pc, #436]	@ (8003e38 <HAL_ADC_Init+0x2f4>)
 8003c82:	f7ff ff11 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003c86:	4603      	mov	r3, r0
 8003c88:	431c      	orrs	r4, r3
 8003c8a:	486c      	ldr	r0, [pc, #432]	@ (8003e3c <HAL_ADC_Init+0x2f8>)
 8003c8c:	f7ff ff0c 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4323      	orrs	r3, r4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d012      	beq.n	8003cc8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003caa:	d004      	beq.n	8003cb6 <HAL_ADC_Init+0x172>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5f      	ldr	r2, [pc, #380]	@ (8003e30 <HAL_ADC_Init+0x2ec>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_Init+0x176>
 8003cb6:	4a62      	ldr	r2, [pc, #392]	@ (8003e40 <HAL_ADC_Init+0x2fc>)
 8003cb8:	e000      	b.n	8003cbc <HAL_ADC_Init+0x178>
 8003cba:	4a62      	ldr	r2, [pc, #392]	@ (8003e44 <HAL_ADC_Init+0x300>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7ff fcfe 	bl	80036c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7f5b      	ldrb	r3, [r3, #29]
 8003ccc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cd2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003cd8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003cde:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ce6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d106      	bne.n	8003d04 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	045b      	lsls	r3, r3, #17
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d009      	beq.n	8003d20 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	4b48      	ldr	r3, [pc, #288]	@ (8003e48 <HAL_ADC_Init+0x304>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	69b9      	ldr	r1, [r7, #24]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fee4 	bl	8003b1c <LL_ADC_INJ_IsConversionOngoing>
 8003d54:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d17f      	bne.n	8003e5c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d17c      	bne.n	8003e5c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d66:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d7e:	f023 0302 	bic.w	r3, r3, #2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d017      	beq.n	8003dc4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003da2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003dac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003db0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6911      	ldr	r1, [r2, #16]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003dc2:	e013      	b.n	8003dec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003dd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003de4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003de8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d12a      	bne.n	8003e4c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e0c:	4311      	orrs	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	611a      	str	r2, [r3, #16]
 8003e26:	e019      	b.n	8003e5c <HAL_ADC_Init+0x318>
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	053e2d63 	.word	0x053e2d63
 8003e30:	50000100 	.word	0x50000100
 8003e34:	50000400 	.word	0x50000400
 8003e38:	50000500 	.word	0x50000500
 8003e3c:	50000600 	.word	0x50000600
 8003e40:	50000300 	.word	0x50000300
 8003e44:	50000700 	.word	0x50000700
 8003e48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d10c      	bne.n	8003e7e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f023 010f 	bic.w	r1, r3, #15
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e7c:	e007      	b.n	8003e8e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 020f 	bic.w	r2, r2, #15
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e9e:	e007      	b.n	8003eb0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	f043 0210 	orr.w	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	@ 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd90      	pop	{r4, r7, pc}
 8003eba:	bf00      	nop

08003ebc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ed0:	d004      	beq.n	8003edc <HAL_ADC_Start_DMA+0x20>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8004040 <HAL_ADC_Start_DMA+0x184>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_Start_DMA+0x24>
 8003edc:	4b59      	ldr	r3, [pc, #356]	@ (8004044 <HAL_ADC_Start_DMA+0x188>)
 8003ede:	e000      	b.n	8003ee2 <HAL_ADC_Start_DMA+0x26>
 8003ee0:	4b59      	ldr	r3, [pc, #356]	@ (8004048 <HAL_ADC_Start_DMA+0x18c>)
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fd62 	bl	80039ac <LL_ADC_GetMultimode>
 8003ee8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fe01 	bl	8003af6 <LL_ADC_REG_IsConversionOngoing>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 809b 	bne.w	8004032 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_ADC_Start_DMA+0x4e>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e096      	b.n	8004038 <HAL_ADC_Start_DMA+0x17c>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4d      	ldr	r2, [pc, #308]	@ (800404c <HAL_ADC_Start_DMA+0x190>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d008      	beq.n	8003f2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b05      	cmp	r3, #5
 8003f26:	d002      	beq.n	8003f2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b09      	cmp	r3, #9
 8003f2c:	d17a      	bne.n	8004024 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 ff56 	bl	8004de0 <ADC_Enable>
 8003f34:	4603      	mov	r3, r0
 8003f36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d16d      	bne.n	800401a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a3a      	ldr	r2, [pc, #232]	@ (8004040 <HAL_ADC_Start_DMA+0x184>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d009      	beq.n	8003f70 <HAL_ADC_Start_DMA+0xb4>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3b      	ldr	r2, [pc, #236]	@ (8004050 <HAL_ADC_Start_DMA+0x194>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d002      	beq.n	8003f6c <HAL_ADC_Start_DMA+0xb0>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	e003      	b.n	8003f74 <HAL_ADC_Start_DMA+0xb8>
 8003f6c:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <HAL_ADC_Start_DMA+0x198>)
 8003f6e:	e001      	b.n	8003f74 <HAL_ADC_Start_DMA+0xb8>
 8003f70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d002      	beq.n	8003f82 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d105      	bne.n	8003f8e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d006      	beq.n	8003fa8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9e:	f023 0206 	bic.w	r2, r3, #6
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	661a      	str	r2, [r3, #96]	@ 0x60
 8003fa6:	e002      	b.n	8003fae <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb2:	4a29      	ldr	r2, [pc, #164]	@ (8004058 <HAL_ADC_Start_DMA+0x19c>)
 8003fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fba:	4a28      	ldr	r2, [pc, #160]	@ (800405c <HAL_ADC_Start_DMA+0x1a0>)
 8003fbc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc2:	4a27      	ldr	r2, [pc, #156]	@ (8004060 <HAL_ADC_Start_DMA+0x1a4>)
 8003fc4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	221c      	movs	r2, #28
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0210 	orr.w	r2, r2, #16
 8003fe4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3340      	adds	r3, #64	@ 0x40
 8004000:	4619      	mov	r1, r3
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f001 fbef 	bl	80057e8 <HAL_DMA_Start_IT>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fd5b 	bl	8003ace <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004018:	e00d      	b.n	8004036 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004022:	e008      	b.n	8004036 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004030:	e001      	b.n	8004036 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004032:	2302      	movs	r3, #2
 8004034:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004036:	7dfb      	ldrb	r3, [r7, #23]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	50000100 	.word	0x50000100
 8004044:	50000300 	.word	0x50000300
 8004048:	50000700 	.word	0x50000700
 800404c:	50000600 	.word	0x50000600
 8004050:	50000500 	.word	0x50000500
 8004054:	50000400 	.word	0x50000400
 8004058:	08004f0d 	.word	0x08004f0d
 800405c:	08004fe5 	.word	0x08004fe5
 8004060:	08005001 	.word	0x08005001

08004064 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	@ 0x28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800406c:	2300      	movs	r3, #0
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004088:	d004      	beq.n	8004094 <HAL_ADC_IRQHandler+0x30>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a8e      	ldr	r2, [pc, #568]	@ (80042c8 <HAL_ADC_IRQHandler+0x264>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_ADC_IRQHandler+0x34>
 8004094:	4b8d      	ldr	r3, [pc, #564]	@ (80042cc <HAL_ADC_IRQHandler+0x268>)
 8004096:	e000      	b.n	800409a <HAL_ADC_IRQHandler+0x36>
 8004098:	4b8d      	ldr	r3, [pc, #564]	@ (80042d0 <HAL_ADC_IRQHandler+0x26c>)
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fc86 	bl	80039ac <LL_ADC_GetMultimode>
 80040a0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d017      	beq.n	80040dc <HAL_ADC_IRQHandler+0x78>
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d012      	beq.n	80040dc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fffe 	bl	80050d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2202      	movs	r2, #2
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_ADC_IRQHandler+0x8c>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8094 	beq.w	8004224 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 808e 	beq.w	8004224 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fb9f 	bl	8003868 <LL_ADC_REG_IsTriggerSourceSWStart>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d072      	beq.n	8004216 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a64      	ldr	r2, [pc, #400]	@ (80042c8 <HAL_ADC_IRQHandler+0x264>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_ADC_IRQHandler+0xea>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a65      	ldr	r2, [pc, #404]	@ (80042d4 <HAL_ADC_IRQHandler+0x270>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d002      	beq.n	800414a <HAL_ADC_IRQHandler+0xe6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	e003      	b.n	8004152 <HAL_ADC_IRQHandler+0xee>
 800414a:	4b63      	ldr	r3, [pc, #396]	@ (80042d8 <HAL_ADC_IRQHandler+0x274>)
 800414c:	e001      	b.n	8004152 <HAL_ADC_IRQHandler+0xee>
 800414e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	4293      	cmp	r3, r2
 8004158:	d008      	beq.n	800416c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b05      	cmp	r3, #5
 8004164:	d002      	beq.n	800416c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b09      	cmp	r3, #9
 800416a:	d104      	bne.n	8004176 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	623b      	str	r3, [r7, #32]
 8004174:	e014      	b.n	80041a0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a53      	ldr	r2, [pc, #332]	@ (80042c8 <HAL_ADC_IRQHandler+0x264>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_ADC_IRQHandler+0x130>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a53      	ldr	r2, [pc, #332]	@ (80042d4 <HAL_ADC_IRQHandler+0x270>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d002      	beq.n	8004190 <HAL_ADC_IRQHandler+0x12c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	e003      	b.n	8004198 <HAL_ADC_IRQHandler+0x134>
 8004190:	4b51      	ldr	r3, [pc, #324]	@ (80042d8 <HAL_ADC_IRQHandler+0x274>)
 8004192:	e001      	b.n	8004198 <HAL_ADC_IRQHandler+0x134>
 8004194:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004198:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d135      	bne.n	8004216 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d12e      	bne.n	8004216 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fc9a 	bl	8003af6 <LL_ADC_REG_IsConversionOngoing>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d11a      	bne.n	80041fe <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 020c 	bic.w	r2, r2, #12
 80041d6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d112      	bne.n	8004216 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041fc:	e00b      	b.n	8004216 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	f043 0210 	orr.w	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420e:	f043 0201 	orr.w	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd fc34 	bl	8001a84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	220c      	movs	r2, #12
 8004222:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d004      	beq.n	8004238 <HAL_ADC_IRQHandler+0x1d4>
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80b3 	beq.w	80043aa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80ad 	beq.w	80043aa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004260:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fb3a 	bl	80038e6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004272:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff faf5 	bl	8003868 <LL_ADC_REG_IsTriggerSourceSWStart>
 800427e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a10      	ldr	r2, [pc, #64]	@ (80042c8 <HAL_ADC_IRQHandler+0x264>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_ADC_IRQHandler+0x23a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a11      	ldr	r2, [pc, #68]	@ (80042d4 <HAL_ADC_IRQHandler+0x270>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d002      	beq.n	800429a <HAL_ADC_IRQHandler+0x236>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	e003      	b.n	80042a2 <HAL_ADC_IRQHandler+0x23e>
 800429a:	4b0f      	ldr	r3, [pc, #60]	@ (80042d8 <HAL_ADC_IRQHandler+0x274>)
 800429c:	e001      	b.n	80042a2 <HAL_ADC_IRQHandler+0x23e>
 800429e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d008      	beq.n	80042bc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b06      	cmp	r3, #6
 80042b4:	d002      	beq.n	80042bc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b07      	cmp	r3, #7
 80042ba:	d10f      	bne.n	80042dc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	623b      	str	r3, [r7, #32]
 80042c4:	e01f      	b.n	8004306 <HAL_ADC_IRQHandler+0x2a2>
 80042c6:	bf00      	nop
 80042c8:	50000100 	.word	0x50000100
 80042cc:	50000300 	.word	0x50000300
 80042d0:	50000700 	.word	0x50000700
 80042d4:	50000500 	.word	0x50000500
 80042d8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a8b      	ldr	r2, [pc, #556]	@ (8004510 <HAL_ADC_IRQHandler+0x4ac>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_ADC_IRQHandler+0x296>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a8a      	ldr	r2, [pc, #552]	@ (8004514 <HAL_ADC_IRQHandler+0x4b0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d002      	beq.n	80042f6 <HAL_ADC_IRQHandler+0x292>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	e003      	b.n	80042fe <HAL_ADC_IRQHandler+0x29a>
 80042f6:	4b88      	ldr	r3, [pc, #544]	@ (8004518 <HAL_ADC_IRQHandler+0x4b4>)
 80042f8:	e001      	b.n	80042fe <HAL_ADC_IRQHandler+0x29a>
 80042fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80042fe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d047      	beq.n	800439c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_ADC_IRQHandler+0x2c2>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d03f      	beq.n	800439c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004322:	2b00      	cmp	r3, #0
 8004324:	d13a      	bne.n	800439c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b40      	cmp	r3, #64	@ 0x40
 8004332:	d133      	bne.n	800439c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d12e      	bne.n	800439c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fbea 	bl	8003b1c <LL_ADC_INJ_IsConversionOngoing>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d11a      	bne.n	8004384 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800435c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004362:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d112      	bne.n	800439c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004382:	e00b      	b.n	800439c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004388:	f043 0210 	orr.w	r2, r3, #16
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fe6f 	bl	8005080 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2260      	movs	r2, #96	@ 0x60
 80043a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d011      	beq.n	80043d8 <HAL_ADC_IRQHandler+0x374>
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00c      	beq.n	80043d8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8b4 	bl	8004538 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2280      	movs	r2, #128	@ 0x80
 80043d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d012      	beq.n	8004408 <HAL_ADC_IRQHandler+0x3a4>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fe55 	bl	80050a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800440e:	2b00      	cmp	r3, #0
 8004410:	d012      	beq.n	8004438 <HAL_ADC_IRQHandler+0x3d4>
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00d      	beq.n	8004438 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004420:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fe47 	bl	80050bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004436:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	d043      	beq.n	80044ca <HAL_ADC_IRQHandler+0x466>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d03e      	beq.n	80044ca <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004454:	2301      	movs	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
 8004458:	e021      	b.n	800449e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004468:	d004      	beq.n	8004474 <HAL_ADC_IRQHandler+0x410>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a28      	ldr	r2, [pc, #160]	@ (8004510 <HAL_ADC_IRQHandler+0x4ac>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <HAL_ADC_IRQHandler+0x414>
 8004474:	4b29      	ldr	r3, [pc, #164]	@ (800451c <HAL_ADC_IRQHandler+0x4b8>)
 8004476:	e000      	b.n	800447a <HAL_ADC_IRQHandler+0x416>
 8004478:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <HAL_ADC_IRQHandler+0x4bc>)
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff faa4 	bl	80039c8 <LL_ADC_GetMultiDMATransfer>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004486:	2301      	movs	r3, #1
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
 800448a:	e008      	b.n	800449e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800449a:	2301      	movs	r3, #1
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d10e      	bne.n	80044c2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b4:	f043 0202 	orr.w	r2, r3, #2
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f845 	bl	800454c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2210      	movs	r2, #16
 80044c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d018      	beq.n	8004506 <HAL_ADC_IRQHandler+0x4a2>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d013      	beq.n	8004506 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ee:	f043 0208 	orr.w	r2, r3, #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044fe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fdc7 	bl	8005094 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004506:	bf00      	nop
 8004508:	3728      	adds	r7, #40	@ 0x28
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	50000100 	.word	0x50000100
 8004514:	50000500 	.word	0x50000500
 8004518:	50000400 	.word	0x50000400
 800451c:	50000300 	.word	0x50000300
 8004520:	50000700 	.word	0x50000700

08004524 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b0b6      	sub	sp, #216	@ 0xd8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800457a:	2b01      	cmp	r3, #1
 800457c:	d102      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x24>
 800457e:	2302      	movs	r3, #2
 8004580:	f000 bc13 	b.w	8004daa <HAL_ADC_ConfigChannel+0x84a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fab0 	bl	8003af6 <LL_ADC_REG_IsConversionOngoing>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	f040 83f3 	bne.w	8004d84 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6859      	ldr	r1, [r3, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7ff f96f 	bl	800388e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fa9e 	bl	8003af6 <LL_ADC_REG_IsConversionOngoing>
 80045ba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff faaa 	bl	8003b1c <LL_ADC_INJ_IsConversionOngoing>
 80045c8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 81d9 	bne.w	8004988 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 81d4 	bne.w	8004988 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045e8:	d10f      	bne.n	800460a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	4619      	mov	r1, r3
 80045f6:	f7ff f989 	bl	800390c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff f91d 	bl	8003842 <LL_ADC_SetSamplingTimeCommonConfig>
 8004608:	e00e      	b.n	8004628 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	461a      	mov	r2, r3
 8004618:	f7ff f978 	bl	800390c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2100      	movs	r1, #0
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff f90d 	bl	8003842 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	08db      	lsrs	r3, r3, #3
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d022      	beq.n	8004690 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6919      	ldr	r1, [r3, #16]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800465a:	f7ff f867 	bl	800372c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6919      	ldr	r1, [r3, #16]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	461a      	mov	r2, r3
 800466c:	f7ff f8b3 	bl	80037d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800467c:	2b01      	cmp	r3, #1
 800467e:	d102      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x126>
 8004680:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004684:	e000      	b.n	8004688 <HAL_ADC_ConfigChannel+0x128>
 8004686:	2300      	movs	r3, #0
 8004688:	461a      	mov	r2, r3
 800468a:	f7ff f8bf 	bl	800380c <LL_ADC_SetOffsetSaturation>
 800468e:	e17b      	b.n	8004988 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2100      	movs	r1, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff f86c 	bl	8003774 <LL_ADC_GetOffsetChannel>
 800469c:	4603      	mov	r3, r0
 800469e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x15c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff f861 	bl	8003774 <LL_ADC_GetOffsetChannel>
 80046b2:	4603      	mov	r3, r0
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	f003 021f 	and.w	r2, r3, #31
 80046ba:	e01e      	b.n	80046fa <HAL_ADC_ConfigChannel+0x19a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff f856 	bl	8003774 <LL_ADC_GetOffsetChannel>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80046de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80046ea:	2320      	movs	r3, #32
 80046ec:	e004      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80046ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x1b2>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	0e9b      	lsrs	r3, r3, #26
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	e018      	b.n	8004744 <HAL_ADC_ConfigChannel+0x1e4>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800471e:	fa93 f3a3 	rbit	r3, r3
 8004722:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800472a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800472e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004736:	2320      	movs	r3, #32
 8004738:	e004      	b.n	8004744 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800473a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004744:	429a      	cmp	r2, r3
 8004746:	d106      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2200      	movs	r2, #0
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff f825 	bl	80037a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff f809 	bl	8003774 <LL_ADC_GetOffsetChannel>
 8004762:	4603      	mov	r3, r0
 8004764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x222>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2101      	movs	r1, #1
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe fffe 	bl	8003774 <LL_ADC_GetOffsetChannel>
 8004778:	4603      	mov	r3, r0
 800477a:	0e9b      	lsrs	r3, r3, #26
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	e01e      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x260>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2101      	movs	r1, #1
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe fff3 	bl	8003774 <LL_ADC_GetOffsetChannel>
 800478e:	4603      	mov	r3, r0
 8004790:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004794:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004798:	fa93 f3a3 	rbit	r3, r3
 800479c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80047a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80047a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80047b0:	2320      	movs	r3, #32
 80047b2:	e004      	b.n	80047be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80047b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047b8:	fab3 f383 	clz	r3, r3
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x278>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0e9b      	lsrs	r3, r3, #26
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	e018      	b.n	800480a <HAL_ADC_ConfigChannel+0x2aa>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047e4:	fa93 f3a3 	rbit	r3, r3
 80047e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80047ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80047f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80047fc:	2320      	movs	r3, #32
 80047fe:	e004      	b.n	800480a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004800:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800480a:	429a      	cmp	r2, r3
 800480c:	d106      	bne.n	800481c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	2101      	movs	r1, #1
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe ffc2 	bl	80037a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2102      	movs	r1, #2
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe ffa6 	bl	8003774 <LL_ADC_GetOffsetChannel>
 8004828:	4603      	mov	r3, r0
 800482a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x2e8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2102      	movs	r1, #2
 8004838:	4618      	mov	r0, r3
 800483a:	f7fe ff9b 	bl	8003774 <LL_ADC_GetOffsetChannel>
 800483e:	4603      	mov	r3, r0
 8004840:	0e9b      	lsrs	r3, r3, #26
 8004842:	f003 021f 	and.w	r2, r3, #31
 8004846:	e01e      	b.n	8004886 <HAL_ADC_ConfigChannel+0x326>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2102      	movs	r1, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe ff90 	bl	8003774 <LL_ADC_GetOffsetChannel>
 8004854:	4603      	mov	r3, r0
 8004856:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004866:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800486a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800486e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004876:	2320      	movs	r3, #32
 8004878:	e004      	b.n	8004884 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800487a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488e:	2b00      	cmp	r3, #0
 8004890:	d105      	bne.n	800489e <HAL_ADC_ConfigChannel+0x33e>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	0e9b      	lsrs	r3, r3, #26
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	e016      	b.n	80048cc <HAL_ADC_ConfigChannel+0x36c>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80048b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80048b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80048be:	2320      	movs	r3, #32
 80048c0:	e004      	b.n	80048cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80048c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d106      	bne.n	80048de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe ff61 	bl	80037a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2103      	movs	r1, #3
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe ff45 	bl	8003774 <LL_ADC_GetOffsetChannel>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <HAL_ADC_ConfigChannel+0x3aa>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2103      	movs	r1, #3
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe ff3a 	bl	8003774 <LL_ADC_GetOffsetChannel>
 8004900:	4603      	mov	r3, r0
 8004902:	0e9b      	lsrs	r3, r3, #26
 8004904:	f003 021f 	and.w	r2, r3, #31
 8004908:	e017      	b.n	800493a <HAL_ADC_ConfigChannel+0x3da>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2103      	movs	r1, #3
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe ff2f 	bl	8003774 <LL_ADC_GetOffsetChannel>
 8004916:	4603      	mov	r3, r0
 8004918:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004924:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004926:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800492c:	2320      	movs	r3, #32
 800492e:	e003      	b.n	8004938 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004930:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004942:	2b00      	cmp	r3, #0
 8004944:	d105      	bne.n	8004952 <HAL_ADC_ConfigChannel+0x3f2>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	0e9b      	lsrs	r3, r3, #26
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	e011      	b.n	8004976 <HAL_ADC_ConfigChannel+0x416>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800495a:	fa93 f3a3 	rbit	r3, r3
 800495e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004962:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800496a:	2320      	movs	r3, #32
 800496c:	e003      	b.n	8004976 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800496e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004976:	429a      	cmp	r2, r3
 8004978:	d106      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	2103      	movs	r1, #3
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe ff0c 	bl	80037a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff f88b 	bl	8003aa8 <LL_ADC_IsEnabled>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	f040 813d 	bne.w	8004c14 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6819      	ldr	r1, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f7fe ffdc 	bl	8003964 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4aa2      	ldr	r2, [pc, #648]	@ (8004c3c <HAL_ADC_ConfigChannel+0x6dc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f040 812e 	bne.w	8004c14 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10b      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x480>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	0e9b      	lsrs	r3, r3, #26
 80049ce:	3301      	adds	r3, #1
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	2b09      	cmp	r3, #9
 80049d6:	bf94      	ite	ls
 80049d8:	2301      	movls	r3, #1
 80049da:	2300      	movhi	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e019      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x4b4>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80049ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80049f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80049f8:	2320      	movs	r3, #32
 80049fa:	e003      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80049fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	3301      	adds	r3, #1
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2b09      	cmp	r3, #9
 8004a0c:	bf94      	ite	ls
 8004a0e:	2301      	movls	r3, #1
 8004a10:	2300      	movhi	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d079      	beq.n	8004b0c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d107      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x4d4>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	0e9b      	lsrs	r3, r3, #26
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	069b      	lsls	r3, r3, #26
 8004a2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a32:	e015      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x500>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a3c:	fa93 f3a3 	rbit	r3, r3
 8004a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	e003      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	069b      	lsls	r3, r3, #26
 8004a5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x520>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	0e9b      	lsrs	r3, r3, #26
 8004a72:	3301      	adds	r3, #1
 8004a74:	f003 031f 	and.w	r3, r3, #31
 8004a78:	2101      	movs	r1, #1
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	e017      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x550>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a88:	fa93 f3a3 	rbit	r3, r3
 8004a8c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a90:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004a98:	2320      	movs	r3, #32
 8004a9a:	e003      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a9e:	fab3 f383 	clz	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2101      	movs	r1, #1
 8004aac:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab0:	ea42 0103 	orr.w	r1, r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x576>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	0e9b      	lsrs	r3, r3, #26
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f003 021f 	and.w	r2, r3, #31
 8004acc:	4613      	mov	r3, r2
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	4413      	add	r3, r2
 8004ad2:	051b      	lsls	r3, r3, #20
 8004ad4:	e018      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x5a8>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004aee:	2320      	movs	r3, #32
 8004af0:	e003      	b.n	8004afa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af4:	fab3 f383 	clz	r3, r3
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	3301      	adds	r3, #1
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	4613      	mov	r3, r2
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	4413      	add	r3, r2
 8004b06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	e07e      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x5c8>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	0e9b      	lsrs	r3, r3, #26
 8004b1e:	3301      	adds	r3, #1
 8004b20:	069b      	lsls	r3, r3, #26
 8004b22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b26:	e015      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x5f4>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b30:	fa93 f3a3 	rbit	r3, r3
 8004b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b38:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004b40:	2320      	movs	r3, #32
 8004b42:	e003      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	fab3 f383 	clz	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	069b      	lsls	r3, r3, #26
 8004b50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x614>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	0e9b      	lsrs	r3, r3, #26
 8004b66:	3301      	adds	r3, #1
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b72:	e017      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x644>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	fa93 f3a3 	rbit	r3, r3
 8004b80:	61fb      	str	r3, [r7, #28]
  return result;
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	e003      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	3301      	adds	r3, #1
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba4:	ea42 0103 	orr.w	r1, r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10d      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x670>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	0e9b      	lsrs	r3, r3, #26
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f003 021f 	and.w	r2, r3, #31
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3b1e      	subs	r3, #30
 8004bc8:	051b      	lsls	r3, r3, #20
 8004bca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004bce:	e01b      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x6a8>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	fa93 f3a3 	rbit	r3, r3
 8004bdc:	613b      	str	r3, [r7, #16]
  return result;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004be8:	2320      	movs	r3, #32
 8004bea:	e003      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	fab3 f383 	clz	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f003 021f 	and.w	r2, r3, #31
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	4413      	add	r3, r2
 8004c00:	3b1e      	subs	r3, #30
 8004c02:	051b      	lsls	r3, r3, #20
 8004c04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c08:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f7fe fe7c 	bl	800390c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4b09      	ldr	r3, [pc, #36]	@ (8004c40 <HAL_ADC_ConfigChannel+0x6e0>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80be 	beq.w	8004d9e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c2a:	d004      	beq.n	8004c36 <HAL_ADC_ConfigChannel+0x6d6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a04      	ldr	r2, [pc, #16]	@ (8004c44 <HAL_ADC_ConfigChannel+0x6e4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d10a      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x6ec>
 8004c36:	4b04      	ldr	r3, [pc, #16]	@ (8004c48 <HAL_ADC_ConfigChannel+0x6e8>)
 8004c38:	e009      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x6ee>
 8004c3a:	bf00      	nop
 8004c3c:	407f0000 	.word	0x407f0000
 8004c40:	80080000 	.word	0x80080000
 8004c44:	50000100 	.word	0x50000100
 8004c48:	50000300 	.word	0x50000300
 8004c4c:	4b59      	ldr	r3, [pc, #356]	@ (8004db4 <HAL_ADC_ConfigChannel+0x854>)
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fd5e 	bl	8003710 <LL_ADC_GetCommonPathInternalCh>
 8004c54:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a56      	ldr	r2, [pc, #344]	@ (8004db8 <HAL_ADC_ConfigChannel+0x858>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_ADC_ConfigChannel+0x70c>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a55      	ldr	r2, [pc, #340]	@ (8004dbc <HAL_ADC_ConfigChannel+0x85c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d13a      	bne.n	8004ce2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d134      	bne.n	8004ce2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c80:	d005      	beq.n	8004c8e <HAL_ADC_ConfigChannel+0x72e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a4e      	ldr	r2, [pc, #312]	@ (8004dc0 <HAL_ADC_ConfigChannel+0x860>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	f040 8085 	bne.w	8004d98 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c96:	d004      	beq.n	8004ca2 <HAL_ADC_ConfigChannel+0x742>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a49      	ldr	r2, [pc, #292]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x864>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x746>
 8004ca2:	4a49      	ldr	r2, [pc, #292]	@ (8004dc8 <HAL_ADC_ConfigChannel+0x868>)
 8004ca4:	e000      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x748>
 8004ca6:	4a43      	ldr	r2, [pc, #268]	@ (8004db4 <HAL_ADC_ConfigChannel+0x854>)
 8004ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7fe fd19 	bl	80036ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cb8:	4b44      	ldr	r3, [pc, #272]	@ (8004dcc <HAL_ADC_ConfigChannel+0x86c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	4a44      	ldr	r2, [pc, #272]	@ (8004dd0 <HAL_ADC_ConfigChannel+0x870>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	099b      	lsrs	r3, r3, #6
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	4613      	mov	r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004cd2:	e002      	b.n	8004cda <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f9      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ce0:	e05a      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8004dd4 <HAL_ADC_ConfigChannel+0x874>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d125      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11f      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a31      	ldr	r2, [pc, #196]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x864>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d104      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x7ac>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a34      	ldr	r2, [pc, #208]	@ (8004dd8 <HAL_ADC_ConfigChannel+0x878>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d047      	beq.n	8004d9c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d14:	d004      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x7c0>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x864>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d101      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x7c4>
 8004d20:	4a29      	ldr	r2, [pc, #164]	@ (8004dc8 <HAL_ADC_ConfigChannel+0x868>)
 8004d22:	e000      	b.n	8004d26 <HAL_ADC_ConfigChannel+0x7c6>
 8004d24:	4a23      	ldr	r2, [pc, #140]	@ (8004db4 <HAL_ADC_ConfigChannel+0x854>)
 8004d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f7fe fcda 	bl	80036ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d36:	e031      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a27      	ldr	r2, [pc, #156]	@ (8004ddc <HAL_ADC_ConfigChannel+0x87c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d12d      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d127      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x864>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d022      	beq.n	8004d9e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d60:	d004      	beq.n	8004d6c <HAL_ADC_ConfigChannel+0x80c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a17      	ldr	r2, [pc, #92]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x864>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d101      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x810>
 8004d6c:	4a16      	ldr	r2, [pc, #88]	@ (8004dc8 <HAL_ADC_ConfigChannel+0x868>)
 8004d6e:	e000      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x812>
 8004d70:	4a10      	ldr	r2, [pc, #64]	@ (8004db4 <HAL_ADC_ConfigChannel+0x854>)
 8004d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f7fe fcb4 	bl	80036ea <LL_ADC_SetCommonPathInternalCh>
 8004d82:	e00c      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004d96:	e002      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004da6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	37d8      	adds	r7, #216	@ 0xd8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	50000700 	.word	0x50000700
 8004db8:	c3210000 	.word	0xc3210000
 8004dbc:	90c00010 	.word	0x90c00010
 8004dc0:	50000600 	.word	0x50000600
 8004dc4:	50000100 	.word	0x50000100
 8004dc8:	50000300 	.word	0x50000300
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	053e2d63 	.word	0x053e2d63
 8004dd4:	c7520000 	.word	0xc7520000
 8004dd8:	50000500 	.word	0x50000500
 8004ddc:	cb840000 	.word	0xcb840000

08004de0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fe fe59 	bl	8003aa8 <LL_ADC_IsEnabled>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d176      	bne.n	8004eea <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	4b3c      	ldr	r3, [pc, #240]	@ (8004ef4 <ADC_Enable+0x114>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00d      	beq.n	8004e26 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0e:	f043 0210 	orr.w	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e1a:	f043 0201 	orr.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e062      	b.n	8004eec <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fe28 	bl	8003a80 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e38:	d004      	beq.n	8004e44 <ADC_Enable+0x64>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef8 <ADC_Enable+0x118>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <ADC_Enable+0x68>
 8004e44:	4b2d      	ldr	r3, [pc, #180]	@ (8004efc <ADC_Enable+0x11c>)
 8004e46:	e000      	b.n	8004e4a <ADC_Enable+0x6a>
 8004e48:	4b2d      	ldr	r3, [pc, #180]	@ (8004f00 <ADC_Enable+0x120>)
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fc60 	bl	8003710 <LL_ADC_GetCommonPathInternalCh>
 8004e50:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d013      	beq.n	8004e82 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004f04 <ADC_Enable+0x124>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	099b      	lsrs	r3, r3, #6
 8004e60:	4a29      	ldr	r2, [pc, #164]	@ (8004f08 <ADC_Enable+0x128>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e74:	e002      	b.n	8004e7c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f9      	bne.n	8004e76 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e82:	f7fe fbcd 	bl	8003620 <HAL_GetTick>
 8004e86:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e88:	e028      	b.n	8004edc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe fe0a 	bl	8003aa8 <LL_ADC_IsEnabled>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fdee 	bl	8003a80 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ea4:	f7fe fbbc 	bl	8003620 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d914      	bls.n	8004edc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d00d      	beq.n	8004edc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec4:	f043 0210 	orr.w	r2, r3, #16
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed0:	f043 0201 	orr.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e007      	b.n	8004eec <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d1cf      	bne.n	8004e8a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	8000003f 	.word	0x8000003f
 8004ef8:	50000100 	.word	0x50000100
 8004efc:	50000300 	.word	0x50000300
 8004f00:	50000700 	.word	0x50000700
 8004f04:	20000000 	.word	0x20000000
 8004f08:	053e2d63 	.word	0x053e2d63

08004f0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d14b      	bne.n	8004fbe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d021      	beq.n	8004f84 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fe fc8f 	bl	8003868 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d032      	beq.n	8004fb6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d12b      	bne.n	8004fb6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d11f      	bne.n	8004fb6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f82:	e018      	b.n	8004fb6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d111      	bne.n	8004fb6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d105      	bne.n	8004fb6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7fc fd64 	bl	8001a84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fbc:	e00e      	b.n	8004fdc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7ff fabe 	bl	800454c <HAL_ADC_ErrorCallback>
}
 8004fd0:	e004      	b.n	8004fdc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff fa96 	bl	8004524 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005012:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800501e:	f043 0204 	orr.w	r2, r3, #4
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff fa90 	bl	800454c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <LL_ADC_IsEnabled>:
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <LL_ADC_IsEnabled+0x18>
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <LL_ADC_IsEnabled+0x1a>
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_ADC_REG_IsConversionOngoing>:
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b04      	cmp	r3, #4
 800506c:	d101      	bne.n	8005072 <LL_ADC_REG_IsConversionOngoing+0x18>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b0a1      	sub	sp, #132	@ 0x84
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050fe:	2302      	movs	r3, #2
 8005100:	e0e7      	b.n	80052d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800510a:	2300      	movs	r3, #0
 800510c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800510e:	2300      	movs	r3, #0
 8005110:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800511a:	d102      	bne.n	8005122 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800511c:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	e009      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a6e      	ldr	r2, [pc, #440]	@ (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d102      	bne.n	8005132 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800512c:	4b6d      	ldr	r3, [pc, #436]	@ (80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	e001      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0be      	b.n	80052d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff ff7f 	bl	800505a <LL_ADC_REG_IsConversionOngoing>
 800515c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff ff79 	bl	800505a <LL_ADC_REG_IsConversionOngoing>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 80a0 	bne.w	80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 809c 	bne.w	80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005180:	d004      	beq.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a55      	ldr	r2, [pc, #340]	@ (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d101      	bne.n	8005190 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800518c:	4b56      	ldr	r3, [pc, #344]	@ (80052e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800518e:	e000      	b.n	8005192 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005190:	4b56      	ldr	r3, [pc, #344]	@ (80052ec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005192:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d04b      	beq.n	8005234 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800519c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6859      	ldr	r1, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80051ae:	035b      	lsls	r3, r3, #13
 80051b0:	430b      	orrs	r3, r1
 80051b2:	431a      	orrs	r2, r3
 80051b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051c0:	d004      	beq.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a45      	ldr	r2, [pc, #276]	@ (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10f      	bne.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80051cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051d0:	f7ff ff30 	bl	8005034 <LL_ADC_IsEnabled>
 80051d4:	4604      	mov	r4, r0
 80051d6:	4841      	ldr	r0, [pc, #260]	@ (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051d8:	f7ff ff2c 	bl	8005034 <LL_ADC_IsEnabled>
 80051dc:	4603      	mov	r3, r0
 80051de:	4323      	orrs	r3, r4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e012      	b.n	8005212 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80051ec:	483c      	ldr	r0, [pc, #240]	@ (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051ee:	f7ff ff21 	bl	8005034 <LL_ADC_IsEnabled>
 80051f2:	4604      	mov	r4, r0
 80051f4:	483b      	ldr	r0, [pc, #236]	@ (80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051f6:	f7ff ff1d 	bl	8005034 <LL_ADC_IsEnabled>
 80051fa:	4603      	mov	r3, r0
 80051fc:	431c      	orrs	r4, r3
 80051fe:	483c      	ldr	r0, [pc, #240]	@ (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005200:	f7ff ff18 	bl	8005034 <LL_ADC_IsEnabled>
 8005204:	4603      	mov	r3, r0
 8005206:	4323      	orrs	r3, r4
 8005208:	2b00      	cmp	r3, #0
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d056      	beq.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800521e:	f023 030f 	bic.w	r3, r3, #15
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	6811      	ldr	r1, [r2, #0]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	6892      	ldr	r2, [r2, #8]
 800522a:	430a      	orrs	r2, r1
 800522c:	431a      	orrs	r2, r3
 800522e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005230:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005232:	e047      	b.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005234:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800523c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800523e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005248:	d004      	beq.n	8005254 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a23      	ldr	r2, [pc, #140]	@ (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10f      	bne.n	8005274 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005254:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005258:	f7ff feec 	bl	8005034 <LL_ADC_IsEnabled>
 800525c:	4604      	mov	r4, r0
 800525e:	481f      	ldr	r0, [pc, #124]	@ (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005260:	f7ff fee8 	bl	8005034 <LL_ADC_IsEnabled>
 8005264:	4603      	mov	r3, r0
 8005266:	4323      	orrs	r3, r4
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e012      	b.n	800529a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005274:	481a      	ldr	r0, [pc, #104]	@ (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005276:	f7ff fedd 	bl	8005034 <LL_ADC_IsEnabled>
 800527a:	4604      	mov	r4, r0
 800527c:	4819      	ldr	r0, [pc, #100]	@ (80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800527e:	f7ff fed9 	bl	8005034 <LL_ADC_IsEnabled>
 8005282:	4603      	mov	r3, r0
 8005284:	431c      	orrs	r4, r3
 8005286:	481a      	ldr	r0, [pc, #104]	@ (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005288:	f7ff fed4 	bl	8005034 <LL_ADC_IsEnabled>
 800528c:	4603      	mov	r3, r0
 800528e:	4323      	orrs	r3, r4
 8005290:	2b00      	cmp	r3, #0
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d012      	beq.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800529e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80052a6:	f023 030f 	bic.w	r3, r3, #15
 80052aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80052ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052ae:	e009      	b.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80052c2:	e000      	b.n	80052c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80052ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3784      	adds	r7, #132	@ 0x84
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	50000100 	.word	0x50000100
 80052e0:	50000400 	.word	0x50000400
 80052e4:	50000500 	.word	0x50000500
 80052e8:	50000300 	.word	0x50000300
 80052ec:	50000700 	.word	0x50000700
 80052f0:	50000600 	.word	0x50000600

080052f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005304:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <__NVIC_SetPriorityGrouping+0x44>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005310:	4013      	ands	r3, r2
 8005312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800531c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005326:	4a04      	ldr	r2, [pc, #16]	@ (8005338 <__NVIC_SetPriorityGrouping+0x44>)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	60d3      	str	r3, [r2, #12]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000ed00 	.word	0xe000ed00

0800533c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005340:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <__NVIC_GetPriorityGrouping+0x18>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	f003 0307 	and.w	r3, r3, #7
}
 800534a:	4618      	mov	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	e000ed00 	.word	0xe000ed00

08005358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005366:	2b00      	cmp	r3, #0
 8005368:	db0b      	blt.n	8005382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	f003 021f 	and.w	r2, r3, #31
 8005370:	4907      	ldr	r1, [pc, #28]	@ (8005390 <__NVIC_EnableIRQ+0x38>)
 8005372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	2001      	movs	r0, #1
 800537a:	fa00 f202 	lsl.w	r2, r0, r2
 800537e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	e000e100 	.word	0xe000e100

08005394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	6039      	str	r1, [r7, #0]
 800539e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	db0a      	blt.n	80053be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	490c      	ldr	r1, [pc, #48]	@ (80053e0 <__NVIC_SetPriority+0x4c>)
 80053ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b2:	0112      	lsls	r2, r2, #4
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	440b      	add	r3, r1
 80053b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053bc:	e00a      	b.n	80053d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	4908      	ldr	r1, [pc, #32]	@ (80053e4 <__NVIC_SetPriority+0x50>)
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	3b04      	subs	r3, #4
 80053cc:	0112      	lsls	r2, r2, #4
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	440b      	add	r3, r1
 80053d2:	761a      	strb	r2, [r3, #24]
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	e000e100 	.word	0xe000e100
 80053e4:	e000ed00 	.word	0xe000ed00

080053e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b089      	sub	sp, #36	@ 0x24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f1c3 0307 	rsb	r3, r3, #7
 8005402:	2b04      	cmp	r3, #4
 8005404:	bf28      	it	cs
 8005406:	2304      	movcs	r3, #4
 8005408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3304      	adds	r3, #4
 800540e:	2b06      	cmp	r3, #6
 8005410:	d902      	bls.n	8005418 <NVIC_EncodePriority+0x30>
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3b03      	subs	r3, #3
 8005416:	e000      	b.n	800541a <NVIC_EncodePriority+0x32>
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800541c:	f04f 32ff 	mov.w	r2, #4294967295
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43da      	mvns	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	401a      	ands	r2, r3
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005430:	f04f 31ff 	mov.w	r1, #4294967295
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	fa01 f303 	lsl.w	r3, r1, r3
 800543a:	43d9      	mvns	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005440:	4313      	orrs	r3, r2
         );
}
 8005442:	4618      	mov	r0, r3
 8005444:	3724      	adds	r7, #36	@ 0x24
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ff4c 	bl	80052f4 <__NVIC_SetPriorityGrouping>
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005472:	f7ff ff63 	bl	800533c <__NVIC_GetPriorityGrouping>
 8005476:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	6978      	ldr	r0, [r7, #20]
 800547e:	f7ff ffb3 	bl	80053e8 <NVIC_EncodePriority>
 8005482:	4602      	mov	r2, r0
 8005484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ff82 	bl	8005394 <__NVIC_SetPriority>
}
 8005490:	bf00      	nop
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff ff56 	bl	8005358 <__NVIC_EnableIRQ>
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e054      	b.n	8005570 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7f5b      	ldrb	r3, [r3, #29]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fb fbd2 	bl	8000c80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	791b      	ldrb	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10c      	bne.n	8005504 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a22      	ldr	r2, [pc, #136]	@ (8005578 <HAL_CRC_Init+0xc4>)
 80054f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0218 	bic.w	r2, r2, #24
 8005500:	609a      	str	r2, [r3, #8]
 8005502:	e00c      	b.n	800551e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6899      	ldr	r1, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	461a      	mov	r2, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f834 	bl	800557c <HAL_CRCEx_Polynomial_Set>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e028      	b.n	8005570 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	795b      	ldrb	r3, [r3, #5]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f04f 32ff 	mov.w	r2, #4294967295
 800552e:	611a      	str	r2, [r3, #16]
 8005530:	e004      	b.n	800553c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6912      	ldr	r2, [r2, #16]
 800553a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	04c11db7 	.word	0x04c11db7

0800557c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800558c:	231f      	movs	r3, #31
 800558e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	75fb      	strb	r3, [r7, #23]
 800559e:	e063      	b.n	8005668 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80055a0:	bf00      	nop
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1e5a      	subs	r2, r3, #1
 80055a6:	613a      	str	r2, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d009      	beq.n	80055c0 <HAL_CRCEx_Polynomial_Set+0x44>
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b18      	cmp	r3, #24
 80055c4:	d846      	bhi.n	8005654 <HAL_CRCEx_Polynomial_Set+0xd8>
 80055c6:	a201      	add	r2, pc, #4	@ (adr r2, 80055cc <HAL_CRCEx_Polynomial_Set+0x50>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	0800565b 	.word	0x0800565b
 80055d0:	08005655 	.word	0x08005655
 80055d4:	08005655 	.word	0x08005655
 80055d8:	08005655 	.word	0x08005655
 80055dc:	08005655 	.word	0x08005655
 80055e0:	08005655 	.word	0x08005655
 80055e4:	08005655 	.word	0x08005655
 80055e8:	08005655 	.word	0x08005655
 80055ec:	08005649 	.word	0x08005649
 80055f0:	08005655 	.word	0x08005655
 80055f4:	08005655 	.word	0x08005655
 80055f8:	08005655 	.word	0x08005655
 80055fc:	08005655 	.word	0x08005655
 8005600:	08005655 	.word	0x08005655
 8005604:	08005655 	.word	0x08005655
 8005608:	08005655 	.word	0x08005655
 800560c:	0800563d 	.word	0x0800563d
 8005610:	08005655 	.word	0x08005655
 8005614:	08005655 	.word	0x08005655
 8005618:	08005655 	.word	0x08005655
 800561c:	08005655 	.word	0x08005655
 8005620:	08005655 	.word	0x08005655
 8005624:	08005655 	.word	0x08005655
 8005628:	08005655 	.word	0x08005655
 800562c:	08005631 	.word	0x08005631
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b06      	cmp	r3, #6
 8005634:	d913      	bls.n	800565e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800563a:	e010      	b.n	800565e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b07      	cmp	r3, #7
 8005640:	d90f      	bls.n	8005662 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005646:	e00c      	b.n	8005662 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d90b      	bls.n	8005666 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005652:	e008      	b.n	8005666 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	75fb      	strb	r3, [r7, #23]
        break;
 8005658:	e006      	b.n	8005668 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800565a:	bf00      	nop
 800565c:	e004      	b.n	8005668 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800565e:	bf00      	nop
 8005660:	e002      	b.n	8005668 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005662:	bf00      	nop
 8005664:	e000      	b.n	8005668 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005666:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10d      	bne.n	800568a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f023 0118 	bic.w	r1, r3, #24
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	430a      	orrs	r2, r1
 8005688:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800568a:	7dfb      	ldrb	r3, [r7, #23]
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e08d      	b.n	80057c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b47      	ldr	r3, [pc, #284]	@ (80057d0 <HAL_DMA_Init+0x138>)
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d80f      	bhi.n	80056d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	4b45      	ldr	r3, [pc, #276]	@ (80057d4 <HAL_DMA_Init+0x13c>)
 80056be:	4413      	add	r3, r2
 80056c0:	4a45      	ldr	r2, [pc, #276]	@ (80057d8 <HAL_DMA_Init+0x140>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	091b      	lsrs	r3, r3, #4
 80056c8:	009a      	lsls	r2, r3, #2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a42      	ldr	r2, [pc, #264]	@ (80057dc <HAL_DMA_Init+0x144>)
 80056d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80056d4:	e00e      	b.n	80056f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	4b40      	ldr	r3, [pc, #256]	@ (80057e0 <HAL_DMA_Init+0x148>)
 80056de:	4413      	add	r3, r2
 80056e0:	4a3d      	ldr	r2, [pc, #244]	@ (80057d8 <HAL_DMA_Init+0x140>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	009a      	lsls	r2, r3, #2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a3c      	ldr	r2, [pc, #240]	@ (80057e4 <HAL_DMA_Init+0x14c>)
 80056f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800570a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa2c 	bl	8005ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005754:	d102      	bne.n	800575c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005770:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d010      	beq.n	800579c <HAL_DMA_Init+0x104>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b04      	cmp	r3, #4
 8005780:	d80c      	bhi.n	800579c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa4c 	bl	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	e008      	b.n	80057ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40020407 	.word	0x40020407
 80057d4:	bffdfff8 	.word	0xbffdfff8
 80057d8:	cccccccd 	.word	0xcccccccd
 80057dc:	40020000 	.word	0x40020000
 80057e0:	bffdfbf8 	.word	0xbffdfbf8
 80057e4:	40020400 	.word	0x40020400

080057e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_DMA_Start_IT+0x20>
 8005804:	2302      	movs	r3, #2
 8005806:	e066      	b.n	80058d6 <HAL_DMA_Start_IT+0xee>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d155      	bne.n	80058c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0201 	bic.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f970 	bl	8005b26 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 020e 	orr.w	r2, r2, #14
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e00f      	b.n	8005880 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0204 	bic.w	r2, r2, #4
 800586e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 020a 	orr.w	r2, r2, #10
 800587e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800589c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d007      	beq.n	80058b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e005      	b.n	80058d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80058d0:	2302      	movs	r3, #2
 80058d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d00d      	beq.n	8005912 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2204      	movs	r2, #4
 80058fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e047      	b.n	80059a2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 020e 	bic.w	r2, r2, #14
 8005920:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800593c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005940:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005946:	f003 021f 	and.w	r2, r3, #31
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	2101      	movs	r1, #1
 8005950:	fa01 f202 	lsl.w	r2, r1, r2
 8005954:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800595e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00c      	beq.n	8005982 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005972:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005976:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005980:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4798      	blx	r3
    }
  }
  return status;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	2204      	movs	r2, #4
 80059ce:	409a      	lsls	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d026      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x7a>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d021      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d107      	bne.n	8005a00 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0204 	bic.w	r2, r2, #4
 80059fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a04:	f003 021f 	and.w	r2, r3, #31
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	2104      	movs	r1, #4
 8005a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a12:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d071      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005a24:	e06c      	b.n	8005b00 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	2202      	movs	r2, #2
 8005a30:	409a      	lsls	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d02e      	beq.n	8005a98 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d029      	beq.n	8005a98 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 020a 	bic.w	r2, r2, #10
 8005a60:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6e:	f003 021f 	and.w	r2, r3, #31
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	2102      	movs	r1, #2
 8005a78:	fa01 f202 	lsl.w	r2, r1, r2
 8005a7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d038      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a96:	e033      	b.n	8005b00 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d02a      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d025      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 020e 	bic.w	r2, r2, #14
 8005ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aca:	f003 021f 	and.w	r2, r3, #31
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
}
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b18:	b2db      	uxtb	r3, r3
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b3c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b4e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b54:	f003 021f 	and.w	r2, r3, #31
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d108      	bne.n	8005b86 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b84:	e007      	b.n	8005b96 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	60da      	str	r2, [r3, #12]
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4b16      	ldr	r3, [pc, #88]	@ (8005c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d802      	bhi.n	8005bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005bb8:	4b15      	ldr	r3, [pc, #84]	@ (8005c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e001      	b.n	8005bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005bbe:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005bc0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	3b08      	subs	r3, #8
 8005bce:	4a12      	ldr	r2, [pc, #72]	@ (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bdc:	089b      	lsrs	r3, r3, #2
 8005bde:	009a      	lsls	r2, r3, #2
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	461a      	mov	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a0b      	ldr	r2, [pc, #44]	@ (8005c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005bee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	409a      	lsls	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005bfe:	bf00      	nop
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40020407 	.word	0x40020407
 8005c10:	40020800 	.word	0x40020800
 8005c14:	40020820 	.word	0x40020820
 8005c18:	cccccccd 	.word	0xcccccccd
 8005c1c:	40020880 	.word	0x40020880

08005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a08      	ldr	r2, [pc, #32]	@ (8005c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005c42:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	1000823f 	.word	0x1000823f
 8005c64:	40020940 	.word	0x40020940

08005c68 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e147      	b.n	8005f0a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fb f888 	bl	8000da4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0210 	bic.w	r2, r2, #16
 8005ca2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ca4:	f7fd fcbc 	bl	8003620 <HAL_GetTick>
 8005ca8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005caa:	e012      	b.n	8005cd2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005cac:	f7fd fcb8 	bl	8003620 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b0a      	cmp	r3, #10
 8005cb8:	d90b      	bls.n	8005cd2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cbe:	f043 0201 	orr.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2203      	movs	r2, #3
 8005cca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e11b      	b.n	8005f0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d0e5      	beq.n	8005cac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cf0:	f7fd fc96 	bl	8003620 <HAL_GetTick>
 8005cf4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005cf6:	e012      	b.n	8005d1e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005cf8:	f7fd fc92 	bl	8003620 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b0a      	cmp	r3, #10
 8005d04:	d90b      	bls.n	8005d1e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0a:	f043 0201 	orr.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2203      	movs	r2, #3
 8005d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e0f5      	b.n	8005f0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0e5      	beq.n	8005cf8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0202 	orr.w	r2, r2, #2
 8005d3a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a74      	ldr	r2, [pc, #464]	@ (8005f14 <HAL_FDCAN_Init+0x2ac>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d103      	bne.n	8005d4e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005d46:	4a74      	ldr	r2, [pc, #464]	@ (8005f18 <HAL_FDCAN_Init+0x2b0>)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	7c1b      	ldrb	r3, [r3, #16]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d108      	bne.n	8005d68 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d64:	619a      	str	r2, [r3, #24]
 8005d66:	e007      	b.n	8005d78 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d76:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	7c5b      	ldrb	r3, [r3, #17]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d108      	bne.n	8005d92 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d8e:	619a      	str	r2, [r3, #24]
 8005d90:	e007      	b.n	8005da2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005da0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7c9b      	ldrb	r3, [r3, #18]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d108      	bne.n	8005dbc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005db8:	619a      	str	r2, [r3, #24]
 8005dba:	e007      	b.n	8005dcc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005dca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005df0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0210 	bic.w	r2, r2, #16
 8005e00:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d108      	bne.n	8005e1c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0204 	orr.w	r2, r2, #4
 8005e18:	619a      	str	r2, [r3, #24]
 8005e1a:	e02c      	b.n	8005e76 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d028      	beq.n	8005e76 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d01c      	beq.n	8005e66 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e3a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0210 	orr.w	r2, r2, #16
 8005e4a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d110      	bne.n	8005e76 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0220 	orr.w	r2, r2, #32
 8005e62:	619a      	str	r2, [r3, #24]
 8005e64:	e007      	b.n	8005e76 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0220 	orr.w	r2, r2, #32
 8005e74:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e86:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e8e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e9e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ea0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eaa:	d115      	bne.n	8005ed8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005eba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005ec4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ed4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ed6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fa1a 	bl	8006328 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40006400 	.word	0x40006400
 8005f18:	40006500 	.word	0x40006500

08005f1c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d110      	bne.n	8005f52 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e006      	b.n	8005f60 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d12c      	bne.n	8005fde <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e023      	b.n	8005fec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fa20 	bl	8006400 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fcc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e006      	b.n	8005fec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe2:	f043 0208 	orr.w	r2, r3, #8
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
  }
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08c      	sub	sp, #48	@ 0x30
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006002:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006010:	4013      	ands	r3, r2
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006028:	4013      	ands	r3, r2
 800602a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006040:	4013      	ands	r3, r2
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800604e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006056:	6a3a      	ldr	r2, [r7, #32]
 8006058:	4013      	ands	r3, r2
 800605a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006062:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006066:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	4013      	ands	r3, r2
 8006072:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006082:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d006      	beq.n	80060a6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2240      	movs	r2, #64	@ 0x40
 800609e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f921 	bl	80062e8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d019      	beq.n	80060e4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d014      	beq.n	80060e4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80060c2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4013      	ands	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80060dc:	6939      	ldr	r1, [r7, #16]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f8e3 	bl	80062aa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80060e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060f0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80060f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f8a2 	bl	800623e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006106:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8a2 	bl	8006254 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800611c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800611e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f8a2 	bl	800626a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00c      	beq.n	800614a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006142:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f89b 	bl	8006280 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006150:	2b00      	cmp	r3, #0
 8006152:	d018      	beq.n	8006186 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615a:	2b00      	cmp	r3, #0
 800615c:	d013      	beq.n	8006186 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006166:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4013      	ands	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2280      	movs	r2, #128	@ 0x80
 800617c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f887 	bl	8006294 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80061a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f88b 	bl	80062c0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80061c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f883 	bl	80062d4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00f      	beq.n	80061f8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80061ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006206:	69f9      	ldr	r1, [r7, #28]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f881 	bl	8006310 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d009      	beq.n	8006228 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6a3a      	ldr	r2, [r7, #32]
 800621a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f863 	bl	80062fc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006236:	bf00      	nop
 8006238:	3730      	adds	r7, #48	@ 0x30
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006330:	4b30      	ldr	r3, [pc, #192]	@ (80063f4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006332:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a2f      	ldr	r2, [pc, #188]	@ (80063f8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d103      	bne.n	8006346 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006344:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a2c      	ldr	r2, [pc, #176]	@ (80063fc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d103      	bne.n	8006358 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8006356:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006366:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800636e:	041a      	lsls	r2, r3, #16
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006394:	061a      	lsls	r2, r3, #24
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e005      	b.n	80063da <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3304      	adds	r3, #4
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d3f3      	bcc.n	80063ce <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	4000a400 	.word	0x4000a400
 80063f8:	40006800 	.word	0x40006800
 80063fc:	40006c00 	.word	0x40006c00

08006400 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006400:	b480      	push	{r7}
 8006402:	b089      	sub	sp, #36	@ 0x24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800641e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006426:	4313      	orrs	r3, r2
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	e00a      	b.n	8006442 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006434:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800643a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800643c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006440:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800644c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006452:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006458:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	4613      	mov	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4413      	add	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	440b      	add	r3, r1
 8006474:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	3304      	adds	r3, #4
 8006480:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	3304      	adds	r3, #4
 800648c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e020      	b.n	80064d6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	3303      	adds	r3, #3
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	4413      	add	r3, r2
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	3302      	adds	r3, #2
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	440b      	add	r3, r1
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064ac:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	3301      	adds	r3, #1
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	440b      	add	r3, r1
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064ba:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	440a      	add	r2, r1
 80064c2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064c4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	3304      	adds	r3, #4
 80064ce:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3304      	adds	r3, #4
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	4a06      	ldr	r2, [pc, #24]	@ (80064f4 <FDCAN_CopyMessageToRAM+0xf4>)
 80064dc:	5cd3      	ldrb	r3, [r2, r3]
 80064de:	461a      	mov	r2, r3
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d3d6      	bcc.n	8006494 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	3724      	adds	r7, #36	@ 0x24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	0800d6e0 	.word	0x0800d6e0

080064f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006506:	e15a      	b.n	80067be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	2101      	movs	r1, #1
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	fa01 f303 	lsl.w	r3, r1, r3
 8006514:	4013      	ands	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 814c 	beq.w	80067b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	2b01      	cmp	r3, #1
 800652a:	d005      	beq.n	8006538 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006534:	2b02      	cmp	r3, #2
 8006536:	d130      	bne.n	800659a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	2203      	movs	r2, #3
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4013      	ands	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800656e:	2201      	movs	r2, #1
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	43db      	mvns	r3, r3
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	091b      	lsrs	r3, r3, #4
 8006584:	f003 0201 	and.w	r2, r3, #1
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d017      	beq.n	80065d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	2203      	movs	r2, #3
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43db      	mvns	r3, r3
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4013      	ands	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d123      	bne.n	800662a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	08da      	lsrs	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3208      	adds	r2, #8
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	220f      	movs	r2, #15
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4013      	ands	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	08da      	lsrs	r2, r3, #3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3208      	adds	r2, #8
 8006624:	6939      	ldr	r1, [r7, #16]
 8006626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	2203      	movs	r2, #3
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43db      	mvns	r3, r3
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4013      	ands	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 0203 	and.w	r2, r3, #3
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 80a6 	beq.w	80067b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800666c:	4b5b      	ldr	r3, [pc, #364]	@ (80067dc <HAL_GPIO_Init+0x2e4>)
 800666e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006670:	4a5a      	ldr	r2, [pc, #360]	@ (80067dc <HAL_GPIO_Init+0x2e4>)
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	6613      	str	r3, [r2, #96]	@ 0x60
 8006678:	4b58      	ldr	r3, [pc, #352]	@ (80067dc <HAL_GPIO_Init+0x2e4>)
 800667a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006684:	4a56      	ldr	r2, [pc, #344]	@ (80067e0 <HAL_GPIO_Init+0x2e8>)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	089b      	lsrs	r3, r3, #2
 800668a:	3302      	adds	r3, #2
 800668c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	220f      	movs	r2, #15
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4013      	ands	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80066ae:	d01f      	beq.n	80066f0 <HAL_GPIO_Init+0x1f8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a4c      	ldr	r2, [pc, #304]	@ (80067e4 <HAL_GPIO_Init+0x2ec>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d019      	beq.n	80066ec <HAL_GPIO_Init+0x1f4>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a4b      	ldr	r2, [pc, #300]	@ (80067e8 <HAL_GPIO_Init+0x2f0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <HAL_GPIO_Init+0x1f0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a4a      	ldr	r2, [pc, #296]	@ (80067ec <HAL_GPIO_Init+0x2f4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00d      	beq.n	80066e4 <HAL_GPIO_Init+0x1ec>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a49      	ldr	r2, [pc, #292]	@ (80067f0 <HAL_GPIO_Init+0x2f8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <HAL_GPIO_Init+0x1e8>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a48      	ldr	r2, [pc, #288]	@ (80067f4 <HAL_GPIO_Init+0x2fc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d101      	bne.n	80066dc <HAL_GPIO_Init+0x1e4>
 80066d8:	2305      	movs	r3, #5
 80066da:	e00a      	b.n	80066f2 <HAL_GPIO_Init+0x1fa>
 80066dc:	2306      	movs	r3, #6
 80066de:	e008      	b.n	80066f2 <HAL_GPIO_Init+0x1fa>
 80066e0:	2304      	movs	r3, #4
 80066e2:	e006      	b.n	80066f2 <HAL_GPIO_Init+0x1fa>
 80066e4:	2303      	movs	r3, #3
 80066e6:	e004      	b.n	80066f2 <HAL_GPIO_Init+0x1fa>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e002      	b.n	80066f2 <HAL_GPIO_Init+0x1fa>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <HAL_GPIO_Init+0x1fa>
 80066f0:	2300      	movs	r3, #0
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	f002 0203 	and.w	r2, r2, #3
 80066f8:	0092      	lsls	r2, r2, #2
 80066fa:	4093      	lsls	r3, r2
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006702:	4937      	ldr	r1, [pc, #220]	@ (80067e0 <HAL_GPIO_Init+0x2e8>)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	089b      	lsrs	r3, r3, #2
 8006708:	3302      	adds	r3, #2
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006710:	4b39      	ldr	r3, [pc, #228]	@ (80067f8 <HAL_GPIO_Init+0x300>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	43db      	mvns	r3, r3
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4013      	ands	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006734:	4a30      	ldr	r2, [pc, #192]	@ (80067f8 <HAL_GPIO_Init+0x300>)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800673a:	4b2f      	ldr	r3, [pc, #188]	@ (80067f8 <HAL_GPIO_Init+0x300>)
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	43db      	mvns	r3, r3
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4013      	ands	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800675e:	4a26      	ldr	r2, [pc, #152]	@ (80067f8 <HAL_GPIO_Init+0x300>)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006764:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <HAL_GPIO_Init+0x300>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	43db      	mvns	r3, r3
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4013      	ands	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006788:	4a1b      	ldr	r2, [pc, #108]	@ (80067f8 <HAL_GPIO_Init+0x300>)
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800678e:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <HAL_GPIO_Init+0x300>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	43db      	mvns	r3, r3
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4013      	ands	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067b2:	4a11      	ldr	r2, [pc, #68]	@ (80067f8 <HAL_GPIO_Init+0x300>)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3301      	adds	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f47f ae9d 	bne.w	8006508 <HAL_GPIO_Init+0x10>
  }
}
 80067ce:	bf00      	nop
 80067d0:	bf00      	nop
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40010000 	.word	0x40010000
 80067e4:	48000400 	.word	0x48000400
 80067e8:	48000800 	.word	0x48000800
 80067ec:	48000c00 	.word	0x48000c00
 80067f0:	48001000 	.word	0x48001000
 80067f4:	48001400 	.word	0x48001400
 80067f8:	40010400 	.word	0x40010400

080067fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
 8006808:	4613      	mov	r3, r2
 800680a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800680c:	787b      	ldrb	r3, [r7, #1]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006812:	887a      	ldrh	r2, [r7, #2]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006818:	e002      	b.n	8006820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800681a:	887a      	ldrh	r2, [r7, #2]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800683e:	887a      	ldrh	r2, [r7, #2]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4013      	ands	r3, r2
 8006844:	041a      	lsls	r2, r3, #16
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	43d9      	mvns	r1, r3
 800684a:	887b      	ldrh	r3, [r7, #2]
 800684c:	400b      	ands	r3, r1
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	619a      	str	r2, [r3, #24]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800686a:	4b08      	ldr	r3, [pc, #32]	@ (800688c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	4013      	ands	r3, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006876:	4a05      	ldr	r2, [pc, #20]	@ (800688c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	4618      	mov	r0, r3
 8006880:	f7fb fe32 	bl	80024e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40010400 	.word	0x40010400

08006890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e08d      	b.n	80069be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fa fc56 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2224      	movs	r2, #36	@ 0x24
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80068e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d107      	bne.n	800690a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006906:	609a      	str	r2, [r3, #8]
 8006908:	e006      	b.n	8006918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d108      	bne.n	8006932 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	e007      	b.n	8006942 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006954:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691a      	ldr	r2, [r3, #16]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	69d9      	ldr	r1, [r3, #28]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1a      	ldr	r2, [r3, #32]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	68f9      	ldr	r1, [r7, #12]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
  }
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b086      	sub	sp, #24
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00f      	beq.n	8006a3c <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2a:	f043 0201 	orr.w	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00f      	beq.n	8006a66 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a54:	f043 0208 	orr.w	r2, r3, #8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a64:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00f      	beq.n	8006a90 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7e:	f043 0202 	orr.w	r2, r3, #2
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a8e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 030b 	and.w	r3, r3, #11
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fbd6 	bl	8007254 <I2C_ITError>
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b40:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <I2C_Slave_ISR_IT+0x24>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e0e2      	b.n	8006d1a <I2C_Slave_ISR_IT+0x1ea>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006b70:	6939      	ldr	r1, [r7, #16]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f9b6 	bl	8006ee4 <I2C_ITSlaveCplt>
 8006b78:	e0ca      	b.n	8006d10 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d04b      	beq.n	8006c1c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d046      	beq.n	8006c1c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d128      	bne.n	8006bea <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b28      	cmp	r3, #40	@ 0x28
 8006ba2:	d108      	bne.n	8006bb6 <I2C_Slave_ISR_IT+0x86>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006baa:	d104      	bne.n	8006bb6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006bac:	6939      	ldr	r1, [r7, #16]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fafc 	bl	80071ac <I2C_ITListenCplt>
 8006bb4:	e031      	b.n	8006c1a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b29      	cmp	r3, #41	@ 0x29
 8006bc0:	d10e      	bne.n	8006be0 <I2C_Slave_ISR_IT+0xb0>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bc8:	d00a      	beq.n	8006be0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2210      	movs	r2, #16
 8006bd0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fc55 	bl	8007482 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f926 	bl	8006e2a <I2C_ITSlaveSeqCplt>
 8006bde:	e01c      	b.n	8006c1a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2210      	movs	r2, #16
 8006be6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006be8:	e08f      	b.n	8006d0a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2210      	movs	r2, #16
 8006bf0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf6:	f043 0204 	orr.w	r2, r3, #4
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <I2C_Slave_ISR_IT+0xdc>
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c0a:	d17e      	bne.n	8006d0a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c10:	4619      	mov	r1, r3
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fb1e 	bl	8007254 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006c18:	e077      	b.n	8006d0a <I2C_Slave_ISR_IT+0x1da>
 8006c1a:	e076      	b.n	8006d0a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d02f      	beq.n	8006c86 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d02a      	beq.n	8006c86 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d018      	beq.n	8006c6c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d14b      	bne.n	8006d0e <I2C_Slave_ISR_IT+0x1de>
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c7c:	d047      	beq.n	8006d0e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f8d3 	bl	8006e2a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006c84:	e043      	b.n	8006d0e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006c9a:	6939      	ldr	r1, [r7, #16]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f840 	bl	8006d22 <I2C_ITAddrCplt>
 8006ca2:	e035      	b.n	8006d10 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d030      	beq.n	8006d10 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d02b      	beq.n	8006d10 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d018      	beq.n	8006cf4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006cf2:	e00d      	b.n	8006d10 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cfa:	d002      	beq.n	8006d02 <I2C_Slave_ISR_IT+0x1d2>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f891 	bl	8006e2a <I2C_ITSlaveSeqCplt>
 8006d08:	e002      	b.n	8006d10 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006d0e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d38:	2b28      	cmp	r3, #40	@ 0x28
 8006d3a:	d16a      	bne.n	8006e12 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	0c1b      	lsrs	r3, r3, #16
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006d5a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d68:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006d76:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d138      	bne.n	8006df2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006d80:	897b      	ldrh	r3, [r7, #10]
 8006d82:	09db      	lsrs	r3, r3, #7
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	89bb      	ldrh	r3, [r7, #12]
 8006d88:	4053      	eors	r3, r2
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f003 0306 	and.w	r3, r3, #6
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d11c      	bne.n	8006dce <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006d94:	897b      	ldrh	r3, [r7, #10]
 8006d96:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d13b      	bne.n	8006e22 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2208      	movs	r2, #8
 8006db6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006dc0:	89ba      	ldrh	r2, [r7, #12]
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff fe86 	bl	8006ad8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006dcc:	e029      	b.n	8006e22 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006dce:	893b      	ldrh	r3, [r7, #8]
 8006dd0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006dd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb95 	bl	8007506 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006de4:	89ba      	ldrh	r2, [r7, #12]
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff fe74 	bl	8006ad8 <HAL_I2C_AddrCallback>
}
 8006df0:	e017      	b.n	8006e22 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006df2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fb85 	bl	8007506 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e04:	89ba      	ldrh	r2, [r7, #12]
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fe64 	bl	8006ad8 <HAL_I2C_AddrCallback>
}
 8006e10:	e007      	b.n	8006e22 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2208      	movs	r2, #8
 8006e18:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006e22:	bf00      	nop
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e00c      	b.n	8006e78 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e76:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b29      	cmp	r3, #41	@ 0x29
 8006e82:	d112      	bne.n	8006eaa <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2228      	movs	r2, #40	@ 0x28
 8006e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2221      	movs	r2, #33	@ 0x21
 8006e90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e92:	2101      	movs	r1, #1
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb36 	bl	8007506 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff fe04 	bl	8006ab0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ea8:	e017      	b.n	8006eda <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eb4:	d111      	bne.n	8006eda <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2228      	movs	r2, #40	@ 0x28
 8006eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2222      	movs	r2, #34	@ 0x22
 8006ec2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ec4:	2102      	movs	r1, #2
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fb1d 	bl	8007506 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff fdf5 	bl	8006ac4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006eda:	bf00      	nop
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f06:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f10:	7afb      	ldrb	r3, [r7, #11]
 8006f12:	2b21      	cmp	r3, #33	@ 0x21
 8006f14:	d002      	beq.n	8006f1c <I2C_ITSlaveCplt+0x38>
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	2b29      	cmp	r3, #41	@ 0x29
 8006f1a:	d108      	bne.n	8006f2e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006f1c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 faf0 	bl	8007506 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2221      	movs	r2, #33	@ 0x21
 8006f2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f2c:	e019      	b.n	8006f62 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	2b22      	cmp	r3, #34	@ 0x22
 8006f32:	d002      	beq.n	8006f3a <I2C_ITSlaveCplt+0x56>
 8006f34:	7afb      	ldrb	r3, [r7, #11]
 8006f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f38:	d108      	bne.n	8006f4c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006f3a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fae1 	bl	8007506 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2222      	movs	r2, #34	@ 0x22
 8006f48:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f4a:	e00a      	b.n	8006f62 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	2b28      	cmp	r3, #40	@ 0x28
 8006f50:	d107      	bne.n	8006f62 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006f52:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fad5 	bl	8007506 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f70:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6859      	ldr	r1, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	4b89      	ldr	r3, [pc, #548]	@ (80071a4 <I2C_ITSlaveCplt+0x2c0>)
 8006f7e:	400b      	ands	r3, r1
 8006f80:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa7d 	bl	8007482 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d013      	beq.n	8006fba <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006fa0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01f      	beq.n	8006fea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fb8:	e017      	b.n	8006fea <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d012      	beq.n	8006fea <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fd2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d006      	beq.n	8006fea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d020      	beq.n	8007036 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f023 0304 	bic.w	r3, r3, #4
 8006ffa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00c      	beq.n	8007036 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007044:	f043 0204 	orr.w	r2, r3, #4
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f003 0310 	and.w	r3, r3, #16
 8007052:	2b00      	cmp	r3, #0
 8007054:	d049      	beq.n	80070ea <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800705c:	2b00      	cmp	r3, #0
 800705e:	d044      	beq.n	80070ea <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d128      	bne.n	80070bc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b28      	cmp	r3, #40	@ 0x28
 8007074:	d108      	bne.n	8007088 <I2C_ITSlaveCplt+0x1a4>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800707c:	d104      	bne.n	8007088 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800707e:	6979      	ldr	r1, [r7, #20]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f893 	bl	80071ac <I2C_ITListenCplt>
 8007086:	e030      	b.n	80070ea <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b29      	cmp	r3, #41	@ 0x29
 8007092:	d10e      	bne.n	80070b2 <I2C_ITSlaveCplt+0x1ce>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800709a:	d00a      	beq.n	80070b2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2210      	movs	r2, #16
 80070a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f9ec 	bl	8007482 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff febd 	bl	8006e2a <I2C_ITSlaveSeqCplt>
 80070b0:	e01b      	b.n	80070ea <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2210      	movs	r2, #16
 80070b8:	61da      	str	r2, [r3, #28]
 80070ba:	e016      	b.n	80070ea <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2210      	movs	r2, #16
 80070c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c8:	f043 0204 	orr.w	r2, r3, #4
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <I2C_ITSlaveCplt+0x1fa>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070dc:	d105      	bne.n	80070ea <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f8b5 	bl	8007254 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d010      	beq.n	8007122 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f8a4 	bl	8007254 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b28      	cmp	r3, #40	@ 0x28
 8007116:	d141      	bne.n	800719c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f846 	bl	80071ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007120:	e03c      	b.n	800719c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007126:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800712a:	d014      	beq.n	8007156 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fe7c 	bl	8006e2a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a1c      	ldr	r2, [pc, #112]	@ (80071a8 <I2C_ITSlaveCplt+0x2c4>)
 8007136:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fcd0 	bl	8006af4 <HAL_I2C_ListenCpltCallback>
}
 8007154:	e022      	b.n	800719c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b22      	cmp	r3, #34	@ 0x22
 8007160:	d10e      	bne.n	8007180 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fca3 	bl	8006ac4 <HAL_I2C_SlaveRxCpltCallback>
}
 800717e:	e00d      	b.n	800719c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff fc8a 	bl	8006ab0 <HAL_I2C_SlaveTxCpltCallback>
}
 800719c:	bf00      	nop
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	fe00e800 	.word	0xfe00e800
 80071a8:	ffff0000 	.word	0xffff0000

080071ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a25      	ldr	r2, [pc, #148]	@ (8007250 <I2C_ITListenCplt+0xa4>)
 80071ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d022      	beq.n	8007228 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d012      	beq.n	8007228 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007220:	f043 0204 	orr.w	r2, r3, #4
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007228:	f248 0103 	movw	r1, #32771	@ 0x8003
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f96a 	bl	8007506 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2210      	movs	r2, #16
 8007238:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff fc56 	bl	8006af4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	ffff0000 	.word	0xffff0000

08007254 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007264:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a6d      	ldr	r2, [pc, #436]	@ (8007428 <I2C_ITError+0x1d4>)
 8007272:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	2b28      	cmp	r3, #40	@ 0x28
 800728a:	d005      	beq.n	8007298 <I2C_ITError+0x44>
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	2b29      	cmp	r3, #41	@ 0x29
 8007290:	d002      	beq.n	8007298 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b2a      	cmp	r3, #42	@ 0x2a
 8007296:	d10b      	bne.n	80072b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007298:	2103      	movs	r1, #3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f933 	bl	8007506 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2228      	movs	r2, #40	@ 0x28
 80072a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a60      	ldr	r2, [pc, #384]	@ (800742c <I2C_ITError+0x1d8>)
 80072ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80072ae:	e030      	b.n	8007312 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80072b0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f926 	bl	8007506 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8e1 	bl	8007482 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b60      	cmp	r3, #96	@ 0x60
 80072ca:	d01f      	beq.n	800730c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d114      	bne.n	800730c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b10      	cmp	r3, #16
 80072ee:	d109      	bne.n	8007304 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2210      	movs	r2, #16
 80072f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072fc:	f043 0204 	orr.w	r2, r3, #4
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2220      	movs	r2, #32
 800730a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007316:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731c:	2b00      	cmp	r3, #0
 800731e:	d039      	beq.n	8007394 <I2C_ITError+0x140>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b11      	cmp	r3, #17
 8007324:	d002      	beq.n	800732c <I2C_ITError+0xd8>
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b21      	cmp	r3, #33	@ 0x21
 800732a:	d133      	bne.n	8007394 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800733a:	d107      	bne.n	800734c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800734a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe fbda 	bl	8005b0a <HAL_DMA_GetState>
 8007356:	4603      	mov	r3, r0
 8007358:	2b01      	cmp	r3, #1
 800735a:	d017      	beq.n	800738c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007360:	4a33      	ldr	r2, [pc, #204]	@ (8007430 <I2C_ITError+0x1dc>)
 8007362:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fab4 	bl	80058de <HAL_DMA_Abort_IT>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d04d      	beq.n	8007418 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007386:	4610      	mov	r0, r2
 8007388:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800738a:	e045      	b.n	8007418 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f851 	bl	8007434 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007392:	e041      	b.n	8007418 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d039      	beq.n	8007410 <I2C_ITError+0x1bc>
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b12      	cmp	r3, #18
 80073a0:	d002      	beq.n	80073a8 <I2C_ITError+0x154>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b22      	cmp	r3, #34	@ 0x22
 80073a6:	d133      	bne.n	8007410 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073b6:	d107      	bne.n	80073c8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fb9c 	bl	8005b0a <HAL_DMA_GetState>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d017      	beq.n	8007408 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073dc:	4a14      	ldr	r2, [pc, #80]	@ (8007430 <I2C_ITError+0x1dc>)
 80073de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fa76 	bl	80058de <HAL_DMA_Abort_IT>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d011      	beq.n	800741c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007402:	4610      	mov	r0, r2
 8007404:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007406:	e009      	b.n	800741c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f813 	bl	8007434 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800740e:	e005      	b.n	800741c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f80f 	bl	8007434 <I2C_TreatErrorCallback>
  }
}
 8007416:	e002      	b.n	800741e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007418:	bf00      	nop
 800741a:	e000      	b.n	800741e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800741c:	bf00      	nop
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	ffff0000 	.word	0xffff0000
 800742c:	08006b31 	.word	0x08006b31
 8007430:	080074cb 	.word	0x080074cb

08007434 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b60      	cmp	r3, #96	@ 0x60
 8007446:	d10e      	bne.n	8007466 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7ff fb5c 	bl	8006b1c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007464:	e009      	b.n	800747a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fb47 	bl	8006b08 <HAL_I2C_ErrorCallback>
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b02      	cmp	r3, #2
 8007496:	d103      	bne.n	80074a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2200      	movs	r2, #0
 800749e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d007      	beq.n	80074be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	699a      	ldr	r2, [r3, #24]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0201 	orr.w	r2, r2, #1
 80074bc:	619a      	str	r2, [r3, #24]
  }
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e4:	2200      	movs	r2, #0
 80074e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f4:	2200      	movs	r2, #0
 80074f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff ff9b 	bl	8007434 <I2C_TreatErrorCallback>
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007506:	b480      	push	{r7}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007516:	887b      	ldrh	r3, [r7, #2]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00f      	beq.n	8007540 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007526:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800752e:	b2db      	uxtb	r3, r3
 8007530:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007534:	2b28      	cmp	r3, #40	@ 0x28
 8007536:	d003      	beq.n	8007540 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800753e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007540:	887b      	ldrh	r3, [r7, #2]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00f      	beq.n	800756a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007550:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800755e:	2b28      	cmp	r3, #40	@ 0x28
 8007560:	d003      	beq.n	800756a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007568:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800756a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800756e:	2b00      	cmp	r3, #0
 8007570:	da03      	bge.n	800757a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007578:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800757a:	887b      	ldrh	r3, [r7, #2]
 800757c:	2b10      	cmp	r3, #16
 800757e:	d103      	bne.n	8007588 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007586:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007588:	887b      	ldrh	r3, [r7, #2]
 800758a:	2b20      	cmp	r3, #32
 800758c:	d103      	bne.n	8007596 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f043 0320 	orr.w	r3, r3, #32
 8007594:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007596:	887b      	ldrh	r3, [r7, #2]
 8007598:	2b40      	cmp	r3, #64	@ 0x40
 800759a:	d103      	bne.n	80075a4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075a2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6819      	ldr	r1, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	43da      	mvns	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	400a      	ands	r2, r1
 80075b4:	601a      	str	r2, [r3, #0]
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d138      	bne.n	800764a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e032      	b.n	800764c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2224      	movs	r2, #36	@ 0x24
 80075f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007614:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6819      	ldr	r1, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f042 0201 	orr.w	r2, r2, #1
 8007634:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	e000      	b.n	800764c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800764a:	2302      	movs	r3, #2
  }
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b20      	cmp	r3, #32
 800766c:	d139      	bne.n	80076e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007678:	2302      	movs	r3, #2
 800767a:	e033      	b.n	80076e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2224      	movs	r2, #36	@ 0x24
 8007688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0201 	orr.w	r2, r2, #1
 80076cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	e000      	b.n	80076e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076e2:	2302      	movs	r3, #2
  }
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d141      	bne.n	8007782 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80076fe:	4b4b      	ldr	r3, [pc, #300]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800770a:	d131      	bne.n	8007770 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800770c:	4b47      	ldr	r3, [pc, #284]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800770e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007712:	4a46      	ldr	r2, [pc, #280]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007718:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800771c:	4b43      	ldr	r3, [pc, #268]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007724:	4a41      	ldr	r2, [pc, #260]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800772a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800772c:	4b40      	ldr	r3, [pc, #256]	@ (8007830 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2232      	movs	r2, #50	@ 0x32
 8007732:	fb02 f303 	mul.w	r3, r2, r3
 8007736:	4a3f      	ldr	r2, [pc, #252]	@ (8007834 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007738:	fba2 2303 	umull	r2, r3, r2, r3
 800773c:	0c9b      	lsrs	r3, r3, #18
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007742:	e002      	b.n	800774a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3b01      	subs	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800774a:	4b38      	ldr	r3, [pc, #224]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007756:	d102      	bne.n	800775e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f2      	bne.n	8007744 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800775e:	4b33      	ldr	r3, [pc, #204]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776a:	d158      	bne.n	800781e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e057      	b.n	8007820 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007770:	4b2e      	ldr	r3, [pc, #184]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007776:	4a2d      	ldr	r2, [pc, #180]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800777c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007780:	e04d      	b.n	800781e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007788:	d141      	bne.n	800780e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800778a:	4b28      	ldr	r3, [pc, #160]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007796:	d131      	bne.n	80077fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007798:	4b24      	ldr	r3, [pc, #144]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800779a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800779e:	4a23      	ldr	r2, [pc, #140]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80077a8:	4b20      	ldr	r3, [pc, #128]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80077b0:	4a1e      	ldr	r2, [pc, #120]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80077b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80077b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007830 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2232      	movs	r2, #50	@ 0x32
 80077be:	fb02 f303 	mul.w	r3, r2, r3
 80077c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007834 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80077c4:	fba2 2303 	umull	r2, r3, r2, r3
 80077c8:	0c9b      	lsrs	r3, r3, #18
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077ce:	e002      	b.n	80077d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077d6:	4b15      	ldr	r3, [pc, #84]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077e2:	d102      	bne.n	80077ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1f2      	bne.n	80077d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80077ea:	4b10      	ldr	r3, [pc, #64]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f6:	d112      	bne.n	800781e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e011      	b.n	8007820 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077fc:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007802:	4a0a      	ldr	r2, [pc, #40]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007808:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800780c:	e007      	b.n	800781e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800780e:	4b07      	ldr	r3, [pc, #28]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007816:	4a05      	ldr	r2, [pc, #20]	@ (800782c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007818:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800781c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	40007000 	.word	0x40007000
 8007830:	20000000 	.word	0x20000000
 8007834:	431bde83 	.word	0x431bde83

08007838 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800783c:	4b05      	ldr	r3, [pc, #20]	@ (8007854 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a04      	ldr	r2, [pc, #16]	@ (8007854 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007846:	6093      	str	r3, [r2, #8]
}
 8007848:	bf00      	nop
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	40007000 	.word	0x40007000

08007858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e2fe      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d075      	beq.n	8007962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007876:	4b97      	ldr	r3, [pc, #604]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 030c 	and.w	r3, r3, #12
 800787e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007880:	4b94      	ldr	r3, [pc, #592]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b0c      	cmp	r3, #12
 800788e:	d102      	bne.n	8007896 <HAL_RCC_OscConfig+0x3e>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2b03      	cmp	r3, #3
 8007894:	d002      	beq.n	800789c <HAL_RCC_OscConfig+0x44>
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b08      	cmp	r3, #8
 800789a:	d10b      	bne.n	80078b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800789c:	4b8d      	ldr	r3, [pc, #564]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d05b      	beq.n	8007960 <HAL_RCC_OscConfig+0x108>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d157      	bne.n	8007960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e2d9      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078bc:	d106      	bne.n	80078cc <HAL_RCC_OscConfig+0x74>
 80078be:	4b85      	ldr	r3, [pc, #532]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a84      	ldr	r2, [pc, #528]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80078c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	e01d      	b.n	8007908 <HAL_RCC_OscConfig+0xb0>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078d4:	d10c      	bne.n	80078f0 <HAL_RCC_OscConfig+0x98>
 80078d6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a7e      	ldr	r2, [pc, #504]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80078dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	4b7c      	ldr	r3, [pc, #496]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a7b      	ldr	r2, [pc, #492]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80078e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e00b      	b.n	8007908 <HAL_RCC_OscConfig+0xb0>
 80078f0:	4b78      	ldr	r3, [pc, #480]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a77      	ldr	r2, [pc, #476]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80078f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	4b75      	ldr	r3, [pc, #468]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a74      	ldr	r2, [pc, #464]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d013      	beq.n	8007938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007910:	f7fb fe86 	bl	8003620 <HAL_GetTick>
 8007914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007916:	e008      	b.n	800792a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007918:	f7fb fe82 	bl	8003620 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b64      	cmp	r3, #100	@ 0x64
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e29e      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800792a:	4b6a      	ldr	r3, [pc, #424]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f0      	beq.n	8007918 <HAL_RCC_OscConfig+0xc0>
 8007936:	e014      	b.n	8007962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fb fe72 	bl	8003620 <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007940:	f7fb fe6e 	bl	8003620 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b64      	cmp	r3, #100	@ 0x64
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e28a      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007952:	4b60      	ldr	r3, [pc, #384]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f0      	bne.n	8007940 <HAL_RCC_OscConfig+0xe8>
 800795e:	e000      	b.n	8007962 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d075      	beq.n	8007a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800796e:	4b59      	ldr	r3, [pc, #356]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 030c 	and.w	r3, r3, #12
 8007976:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007978:	4b56      	ldr	r3, [pc, #344]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f003 0303 	and.w	r3, r3, #3
 8007980:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b0c      	cmp	r3, #12
 8007986:	d102      	bne.n	800798e <HAL_RCC_OscConfig+0x136>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d002      	beq.n	8007994 <HAL_RCC_OscConfig+0x13c>
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b04      	cmp	r3, #4
 8007992:	d11f      	bne.n	80079d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007994:	4b4f      	ldr	r3, [pc, #316]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <HAL_RCC_OscConfig+0x154>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e25d      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ac:	4b49      	ldr	r3, [pc, #292]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	061b      	lsls	r3, r3, #24
 80079ba:	4946      	ldr	r1, [pc, #280]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80079c0:	4b45      	ldr	r3, [pc, #276]	@ (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7f9 fdd1 	bl	800156c <HAL_InitTick>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d043      	beq.n	8007a58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e249      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d023      	beq.n	8007a24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079dc:	4b3d      	ldr	r3, [pc, #244]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 80079e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e8:	f7fb fe1a 	bl	8003620 <HAL_GetTick>
 80079ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079f0:	f7fb fe16 	bl	8003620 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e232      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a02:	4b34      	ldr	r3, [pc, #208]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0f0      	beq.n	80079f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a0e:	4b31      	ldr	r3, [pc, #196]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	061b      	lsls	r3, r3, #24
 8007a1c:	492d      	ldr	r1, [pc, #180]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	604b      	str	r3, [r1, #4]
 8007a22:	e01a      	b.n	8007a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a24:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a2a      	ldr	r2, [pc, #168]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007a2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fb fdf6 	bl	8003620 <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a36:	e008      	b.n	8007a4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a38:	f7fb fdf2 	bl	8003620 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e20e      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a4a:	4b22      	ldr	r3, [pc, #136]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1f0      	bne.n	8007a38 <HAL_RCC_OscConfig+0x1e0>
 8007a56:	e000      	b.n	8007a5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d041      	beq.n	8007aea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01c      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a6e:	4b19      	ldr	r3, [pc, #100]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a74:	4a17      	ldr	r2, [pc, #92]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007a76:	f043 0301 	orr.w	r3, r3, #1
 8007a7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a7e:	f7fb fdcf 	bl	8003620 <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a86:	f7fb fdcb 	bl	8003620 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e1e7      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a98:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0ef      	beq.n	8007a86 <HAL_RCC_OscConfig+0x22e>
 8007aa6:	e020      	b.n	8007aea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aae:	4a09      	ldr	r2, [pc, #36]	@ (8007ad4 <HAL_RCC_OscConfig+0x27c>)
 8007ab0:	f023 0301 	bic.w	r3, r3, #1
 8007ab4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab8:	f7fb fdb2 	bl	8003620 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007abe:	e00d      	b.n	8007adc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ac0:	f7fb fdae 	bl	8003620 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d906      	bls.n	8007adc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e1ca      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
 8007ad2:	bf00      	nop
 8007ad4:	40021000 	.word	0x40021000
 8007ad8:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007adc:	4b8c      	ldr	r3, [pc, #560]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1ea      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 80a6 	beq.w	8007c44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007af8:	2300      	movs	r3, #0
 8007afa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007afc:	4b84      	ldr	r3, [pc, #528]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_RCC_OscConfig+0x2b4>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e000      	b.n	8007b0e <HAL_RCC_OscConfig+0x2b6>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00d      	beq.n	8007b2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b12:	4b7f      	ldr	r3, [pc, #508]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b16:	4a7e      	ldr	r2, [pc, #504]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b2e:	4b79      	ldr	r3, [pc, #484]	@ (8007d14 <HAL_RCC_OscConfig+0x4bc>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d118      	bne.n	8007b6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b3a:	4b76      	ldr	r3, [pc, #472]	@ (8007d14 <HAL_RCC_OscConfig+0x4bc>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a75      	ldr	r2, [pc, #468]	@ (8007d14 <HAL_RCC_OscConfig+0x4bc>)
 8007b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b46:	f7fb fd6b 	bl	8003620 <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b4e:	f7fb fd67 	bl	8003620 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e183      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b60:	4b6c      	ldr	r3, [pc, #432]	@ (8007d14 <HAL_RCC_OscConfig+0x4bc>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d108      	bne.n	8007b86 <HAL_RCC_OscConfig+0x32e>
 8007b74:	4b66      	ldr	r3, [pc, #408]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b7a:	4a65      	ldr	r2, [pc, #404]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b84:	e024      	b.n	8007bd0 <HAL_RCC_OscConfig+0x378>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b05      	cmp	r3, #5
 8007b8c:	d110      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x358>
 8007b8e:	4b60      	ldr	r3, [pc, #384]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b94:	4a5e      	ldr	r2, [pc, #376]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007b96:	f043 0304 	orr.w	r3, r3, #4
 8007b9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba4:	4a5a      	ldr	r2, [pc, #360]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007ba6:	f043 0301 	orr.w	r3, r3, #1
 8007baa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bae:	e00f      	b.n	8007bd0 <HAL_RCC_OscConfig+0x378>
 8007bb0:	4b57      	ldr	r3, [pc, #348]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb6:	4a56      	ldr	r2, [pc, #344]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007bb8:	f023 0301 	bic.w	r3, r3, #1
 8007bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bc0:	4b53      	ldr	r3, [pc, #332]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc6:	4a52      	ldr	r2, [pc, #328]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007bc8:	f023 0304 	bic.w	r3, r3, #4
 8007bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d016      	beq.n	8007c06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd8:	f7fb fd22 	bl	8003620 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bde:	e00a      	b.n	8007bf6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007be0:	f7fb fd1e 	bl	8003620 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e138      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bf6:	4b46      	ldr	r3, [pc, #280]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0ed      	beq.n	8007be0 <HAL_RCC_OscConfig+0x388>
 8007c04:	e015      	b.n	8007c32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c06:	f7fb fd0b 	bl	8003620 <HAL_GetTick>
 8007c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c0c:	e00a      	b.n	8007c24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c0e:	f7fb fd07 	bl	8003620 <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d901      	bls.n	8007c24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e121      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c24:	4b3a      	ldr	r3, [pc, #232]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1ed      	bne.n	8007c0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c32:	7ffb      	ldrb	r3, [r7, #31]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d105      	bne.n	8007c44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c38:	4b35      	ldr	r3, [pc, #212]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c3c:	4a34      	ldr	r2, [pc, #208]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c42:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d03c      	beq.n	8007cca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01c      	beq.n	8007c92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c58:	4b2d      	ldr	r3, [pc, #180]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007c60:	f043 0301 	orr.w	r3, r3, #1
 8007c64:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c68:	f7fb fcda 	bl	8003620 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c70:	f7fb fcd6 	bl	8003620 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e0f2      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c82:	4b23      	ldr	r3, [pc, #140]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0ef      	beq.n	8007c70 <HAL_RCC_OscConfig+0x418>
 8007c90:	e01b      	b.n	8007cca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c92:	4b1f      	ldr	r3, [pc, #124]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c98:	4a1d      	ldr	r2, [pc, #116]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007c9a:	f023 0301 	bic.w	r3, r3, #1
 8007c9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca2:	f7fb fcbd 	bl	8003620 <HAL_GetTick>
 8007ca6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ca8:	e008      	b.n	8007cbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007caa:	f7fb fcb9 	bl	8003620 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e0d5      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007cbc:	4b14      	ldr	r3, [pc, #80]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1ef      	bne.n	8007caa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 80c9 	beq.w	8007e66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f003 030c 	and.w	r3, r3, #12
 8007cdc:	2b0c      	cmp	r3, #12
 8007cde:	f000 8083 	beq.w	8007de8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d15e      	bne.n	8007da8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cea:	4b09      	ldr	r3, [pc, #36]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a08      	ldr	r2, [pc, #32]	@ (8007d10 <HAL_RCC_OscConfig+0x4b8>)
 8007cf0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf6:	f7fb fc93 	bl	8003620 <HAL_GetTick>
 8007cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cfc:	e00c      	b.n	8007d18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cfe:	f7fb fc8f 	bl	8003620 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d905      	bls.n	8007d18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e0ab      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
 8007d10:	40021000 	.word	0x40021000
 8007d14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d18:	4b55      	ldr	r3, [pc, #340]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1ec      	bne.n	8007cfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d24:	4b52      	ldr	r3, [pc, #328]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	4b52      	ldr	r3, [pc, #328]	@ (8007e74 <HAL_RCC_OscConfig+0x61c>)
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6a11      	ldr	r1, [r2, #32]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d34:	3a01      	subs	r2, #1
 8007d36:	0112      	lsls	r2, r2, #4
 8007d38:	4311      	orrs	r1, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007d3e:	0212      	lsls	r2, r2, #8
 8007d40:	4311      	orrs	r1, r2
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007d46:	0852      	lsrs	r2, r2, #1
 8007d48:	3a01      	subs	r2, #1
 8007d4a:	0552      	lsls	r2, r2, #21
 8007d4c:	4311      	orrs	r1, r2
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007d52:	0852      	lsrs	r2, r2, #1
 8007d54:	3a01      	subs	r2, #1
 8007d56:	0652      	lsls	r2, r2, #25
 8007d58:	4311      	orrs	r1, r2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007d5e:	06d2      	lsls	r2, r2, #27
 8007d60:	430a      	orrs	r2, r1
 8007d62:	4943      	ldr	r1, [pc, #268]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d68:	4b41      	ldr	r3, [pc, #260]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a40      	ldr	r2, [pc, #256]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d74:	4b3e      	ldr	r3, [pc, #248]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	4a3d      	ldr	r2, [pc, #244]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d80:	f7fb fc4e 	bl	8003620 <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d88:	f7fb fc4a 	bl	8003620 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e066      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d9a:	4b35      	ldr	r3, [pc, #212]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0f0      	beq.n	8007d88 <HAL_RCC_OscConfig+0x530>
 8007da6:	e05e      	b.n	8007e66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007da8:	4b31      	ldr	r3, [pc, #196]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a30      	ldr	r2, [pc, #192]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db4:	f7fb fc34 	bl	8003620 <HAL_GetTick>
 8007db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dbc:	f7fb fc30 	bl	8003620 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e04c      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dce:	4b28      	ldr	r3, [pc, #160]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f0      	bne.n	8007dbc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007dda:	4b25      	ldr	r3, [pc, #148]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	4924      	ldr	r1, [pc, #144]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007de0:	4b25      	ldr	r3, [pc, #148]	@ (8007e78 <HAL_RCC_OscConfig+0x620>)
 8007de2:	4013      	ands	r3, r2
 8007de4:	60cb      	str	r3, [r1, #12]
 8007de6:	e03e      	b.n	8007e66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e039      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007df4:	4b1e      	ldr	r3, [pc, #120]	@ (8007e70 <HAL_RCC_OscConfig+0x618>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f003 0203 	and.w	r2, r3, #3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d12c      	bne.n	8007e62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e12:	3b01      	subs	r3, #1
 8007e14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d123      	bne.n	8007e62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d11b      	bne.n	8007e62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d113      	bne.n	8007e62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	3b01      	subs	r3, #1
 8007e48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d109      	bne.n	8007e62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e58:	085b      	lsrs	r3, r3, #1
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d001      	beq.n	8007e66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e000      	b.n	8007e68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3720      	adds	r7, #32
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	40021000 	.word	0x40021000
 8007e74:	019f800c 	.word	0x019f800c
 8007e78:	feeefffc 	.word	0xfeeefffc

08007e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e11e      	b.n	80080d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e94:	4b91      	ldr	r3, [pc, #580]	@ (80080dc <HAL_RCC_ClockConfig+0x260>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d910      	bls.n	8007ec4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea2:	4b8e      	ldr	r3, [pc, #568]	@ (80080dc <HAL_RCC_ClockConfig+0x260>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f023 020f 	bic.w	r2, r3, #15
 8007eaa:	498c      	ldr	r1, [pc, #560]	@ (80080dc <HAL_RCC_ClockConfig+0x260>)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb2:	4b8a      	ldr	r3, [pc, #552]	@ (80080dc <HAL_RCC_ClockConfig+0x260>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d001      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e106      	b.n	80080d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d073      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d129      	bne.n	8007f2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ed8:	4b81      	ldr	r3, [pc, #516]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e0f4      	b.n	80080d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007ee8:	f000 f9d0 	bl	800828c <RCC_GetSysClockFreqFromPLLSource>
 8007eec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	4a7c      	ldr	r2, [pc, #496]	@ (80080e4 <HAL_RCC_ClockConfig+0x268>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d93f      	bls.n	8007f76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d033      	beq.n	8007f76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d12f      	bne.n	8007f76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007f16:	4b72      	ldr	r3, [pc, #456]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f1e:	4a70      	ldr	r2, [pc, #448]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007f26:	2380      	movs	r3, #128	@ 0x80
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	e024      	b.n	8007f76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d107      	bne.n	8007f44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f34:	4b6a      	ldr	r3, [pc, #424]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d109      	bne.n	8007f54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e0c6      	b.n	80080d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f44:	4b66      	ldr	r3, [pc, #408]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e0be      	b.n	80080d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007f54:	f000 f8ce 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 8007f58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	4a61      	ldr	r2, [pc, #388]	@ (80080e4 <HAL_RCC_ClockConfig+0x268>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d909      	bls.n	8007f76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007f62:	4b5f      	ldr	r3, [pc, #380]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f6a:	4a5d      	ldr	r2, [pc, #372]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007f72:	2380      	movs	r3, #128	@ 0x80
 8007f74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f76:	4b5a      	ldr	r3, [pc, #360]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f023 0203 	bic.w	r2, r3, #3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	4957      	ldr	r1, [pc, #348]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f88:	f7fb fb4a 	bl	8003620 <HAL_GetTick>
 8007f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f8e:	e00a      	b.n	8007fa6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f90:	f7fb fb46 	bl	8003620 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e095      	b.n	80080d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f003 020c 	and.w	r2, r3, #12
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d1eb      	bne.n	8007f90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d023      	beq.n	800800c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fd0:	4b43      	ldr	r3, [pc, #268]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	4a42      	ldr	r2, [pc, #264]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007fd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007fda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ff0:	4a3b      	ldr	r2, [pc, #236]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007ff2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007ff6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ff8:	4b39      	ldr	r3, [pc, #228]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	4936      	ldr	r1, [pc, #216]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8008006:	4313      	orrs	r3, r2
 8008008:	608b      	str	r3, [r1, #8]
 800800a:	e008      	b.n	800801e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b80      	cmp	r3, #128	@ 0x80
 8008010:	d105      	bne.n	800801e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008012:	4b33      	ldr	r3, [pc, #204]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	4a32      	ldr	r2, [pc, #200]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8008018:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800801c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800801e:	4b2f      	ldr	r3, [pc, #188]	@ (80080dc <HAL_RCC_ClockConfig+0x260>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d21d      	bcs.n	8008068 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800802c:	4b2b      	ldr	r3, [pc, #172]	@ (80080dc <HAL_RCC_ClockConfig+0x260>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f023 020f 	bic.w	r2, r3, #15
 8008034:	4929      	ldr	r1, [pc, #164]	@ (80080dc <HAL_RCC_ClockConfig+0x260>)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	4313      	orrs	r3, r2
 800803a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800803c:	f7fb faf0 	bl	8003620 <HAL_GetTick>
 8008040:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008042:	e00a      	b.n	800805a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008044:	f7fb faec 	bl	8003620 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008052:	4293      	cmp	r3, r2
 8008054:	d901      	bls.n	800805a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e03b      	b.n	80080d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800805a:	4b20      	ldr	r3, [pc, #128]	@ (80080dc <HAL_RCC_ClockConfig+0x260>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 030f 	and.w	r3, r3, #15
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	429a      	cmp	r2, r3
 8008066:	d1ed      	bne.n	8008044 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d008      	beq.n	8008086 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008074:	4b1a      	ldr	r3, [pc, #104]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	4917      	ldr	r1, [pc, #92]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8008082:	4313      	orrs	r3, r2
 8008084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008092:	4b13      	ldr	r3, [pc, #76]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	490f      	ldr	r1, [pc, #60]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80080a6:	f000 f825 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 80080aa:	4602      	mov	r2, r0
 80080ac:	4b0c      	ldr	r3, [pc, #48]	@ (80080e0 <HAL_RCC_ClockConfig+0x264>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	490c      	ldr	r1, [pc, #48]	@ (80080e8 <HAL_RCC_ClockConfig+0x26c>)
 80080b8:	5ccb      	ldrb	r3, [r1, r3]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	fa22 f303 	lsr.w	r3, r2, r3
 80080c2:	4a0a      	ldr	r2, [pc, #40]	@ (80080ec <HAL_RCC_ClockConfig+0x270>)
 80080c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80080c6:	4b0a      	ldr	r3, [pc, #40]	@ (80080f0 <HAL_RCC_ClockConfig+0x274>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7f9 fa4e 	bl	800156c <HAL_InitTick>
 80080d0:	4603      	mov	r3, r0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	40022000 	.word	0x40022000
 80080e0:	40021000 	.word	0x40021000
 80080e4:	04c4b400 	.word	0x04c4b400
 80080e8:	0800d6b8 	.word	0x0800d6b8
 80080ec:	20000000 	.word	0x20000000
 80080f0:	20000044 	.word	0x20000044

080080f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80080fa:	4b2c      	ldr	r3, [pc, #176]	@ (80081ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f003 030c 	and.w	r3, r3, #12
 8008102:	2b04      	cmp	r3, #4
 8008104:	d102      	bne.n	800810c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008106:	4b2a      	ldr	r3, [pc, #168]	@ (80081b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	e047      	b.n	800819c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800810c:	4b27      	ldr	r3, [pc, #156]	@ (80081ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 030c 	and.w	r3, r3, #12
 8008114:	2b08      	cmp	r3, #8
 8008116:	d102      	bne.n	800811e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008118:	4b26      	ldr	r3, [pc, #152]	@ (80081b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	e03e      	b.n	800819c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800811e:	4b23      	ldr	r3, [pc, #140]	@ (80081ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 030c 	and.w	r3, r3, #12
 8008126:	2b0c      	cmp	r3, #12
 8008128:	d136      	bne.n	8008198 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800812a:	4b20      	ldr	r3, [pc, #128]	@ (80081ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008134:	4b1d      	ldr	r3, [pc, #116]	@ (80081ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	091b      	lsrs	r3, r3, #4
 800813a:	f003 030f 	and.w	r3, r3, #15
 800813e:	3301      	adds	r3, #1
 8008140:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d10c      	bne.n	8008162 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008148:	4a1a      	ldr	r2, [pc, #104]	@ (80081b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008150:	4a16      	ldr	r2, [pc, #88]	@ (80081ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008152:	68d2      	ldr	r2, [r2, #12]
 8008154:	0a12      	lsrs	r2, r2, #8
 8008156:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800815a:	fb02 f303 	mul.w	r3, r2, r3
 800815e:	617b      	str	r3, [r7, #20]
      break;
 8008160:	e00c      	b.n	800817c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008162:	4a13      	ldr	r2, [pc, #76]	@ (80081b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	fbb2 f3f3 	udiv	r3, r2, r3
 800816a:	4a10      	ldr	r2, [pc, #64]	@ (80081ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800816c:	68d2      	ldr	r2, [r2, #12]
 800816e:	0a12      	lsrs	r2, r2, #8
 8008170:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008174:	fb02 f303 	mul.w	r3, r2, r3
 8008178:	617b      	str	r3, [r7, #20]
      break;
 800817a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800817c:	4b0b      	ldr	r3, [pc, #44]	@ (80081ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	0e5b      	lsrs	r3, r3, #25
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	3301      	adds	r3, #1
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	fbb2 f3f3 	udiv	r3, r2, r3
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	e001      	b.n	800819c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800819c:	693b      	ldr	r3, [r7, #16]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40021000 	.word	0x40021000
 80081b0:	00f42400 	.word	0x00f42400
 80081b4:	016e3600 	.word	0x016e3600

080081b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081bc:	4b03      	ldr	r3, [pc, #12]	@ (80081cc <HAL_RCC_GetHCLKFreq+0x14>)
 80081be:	681b      	ldr	r3, [r3, #0]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	20000000 	.word	0x20000000

080081d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80081d4:	f7ff fff0 	bl	80081b8 <HAL_RCC_GetHCLKFreq>
 80081d8:	4602      	mov	r2, r0
 80081da:	4b06      	ldr	r3, [pc, #24]	@ (80081f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	0a1b      	lsrs	r3, r3, #8
 80081e0:	f003 0307 	and.w	r3, r3, #7
 80081e4:	4904      	ldr	r1, [pc, #16]	@ (80081f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081e6:	5ccb      	ldrb	r3, [r1, r3]
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	40021000 	.word	0x40021000
 80081f8:	0800d6c8 	.word	0x0800d6c8

080081fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008200:	f7ff ffda 	bl	80081b8 <HAL_RCC_GetHCLKFreq>
 8008204:	4602      	mov	r2, r0
 8008206:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	0adb      	lsrs	r3, r3, #11
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	4904      	ldr	r1, [pc, #16]	@ (8008224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008212:	5ccb      	ldrb	r3, [r1, r3]
 8008214:	f003 031f 	and.w	r3, r3, #31
 8008218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800821c:	4618      	mov	r0, r3
 800821e:	bd80      	pop	{r7, pc}
 8008220:	40021000 	.word	0x40021000
 8008224:	0800d6c8 	.word	0x0800d6c8

08008228 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	220f      	movs	r2, #15
 8008236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008238:	4b12      	ldr	r3, [pc, #72]	@ (8008284 <HAL_RCC_GetClockConfig+0x5c>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f003 0203 	and.w	r2, r3, #3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008244:	4b0f      	ldr	r3, [pc, #60]	@ (8008284 <HAL_RCC_GetClockConfig+0x5c>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008250:	4b0c      	ldr	r3, [pc, #48]	@ (8008284 <HAL_RCC_GetClockConfig+0x5c>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800825c:	4b09      	ldr	r3, [pc, #36]	@ (8008284 <HAL_RCC_GetClockConfig+0x5c>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	08db      	lsrs	r3, r3, #3
 8008262:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800826a:	4b07      	ldr	r3, [pc, #28]	@ (8008288 <HAL_RCC_GetClockConfig+0x60>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 020f 	and.w	r2, r3, #15
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	601a      	str	r2, [r3, #0]
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	40021000 	.word	0x40021000
 8008288:	40022000 	.word	0x40022000

0800828c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008292:	4b1e      	ldr	r3, [pc, #120]	@ (800830c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800829c:	4b1b      	ldr	r3, [pc, #108]	@ (800830c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	091b      	lsrs	r3, r3, #4
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	3301      	adds	r3, #1
 80082a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d10c      	bne.n	80082ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082b0:	4a17      	ldr	r2, [pc, #92]	@ (8008310 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b8:	4a14      	ldr	r2, [pc, #80]	@ (800830c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082ba:	68d2      	ldr	r2, [r2, #12]
 80082bc:	0a12      	lsrs	r2, r2, #8
 80082be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082c2:	fb02 f303 	mul.w	r3, r2, r3
 80082c6:	617b      	str	r3, [r7, #20]
    break;
 80082c8:	e00c      	b.n	80082e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082ca:	4a12      	ldr	r2, [pc, #72]	@ (8008314 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d2:	4a0e      	ldr	r2, [pc, #56]	@ (800830c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082d4:	68d2      	ldr	r2, [r2, #12]
 80082d6:	0a12      	lsrs	r2, r2, #8
 80082d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082dc:	fb02 f303 	mul.w	r3, r2, r3
 80082e0:	617b      	str	r3, [r7, #20]
    break;
 80082e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80082e4:	4b09      	ldr	r3, [pc, #36]	@ (800830c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	0e5b      	lsrs	r3, r3, #25
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	3301      	adds	r3, #1
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80082fe:	687b      	ldr	r3, [r7, #4]
}
 8008300:	4618      	mov	r0, r3
 8008302:	371c      	adds	r7, #28
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	40021000 	.word	0x40021000
 8008310:	016e3600 	.word	0x016e3600
 8008314:	00f42400 	.word	0x00f42400

08008318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008320:	2300      	movs	r3, #0
 8008322:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008324:	2300      	movs	r3, #0
 8008326:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8098 	beq.w	8008466 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008336:	2300      	movs	r3, #0
 8008338:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800833a:	4b43      	ldr	r3, [pc, #268]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800833c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800833e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10d      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008346:	4b40      	ldr	r3, [pc, #256]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800834a:	4a3f      	ldr	r2, [pc, #252]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800834c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008350:	6593      	str	r3, [r2, #88]	@ 0x58
 8008352:	4b3d      	ldr	r3, [pc, #244]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800835a:	60bb      	str	r3, [r7, #8]
 800835c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800835e:	2301      	movs	r3, #1
 8008360:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008362:	4b3a      	ldr	r3, [pc, #232]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a39      	ldr	r2, [pc, #228]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800836c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800836e:	f7fb f957 	bl	8003620 <HAL_GetTick>
 8008372:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008374:	e009      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008376:	f7fb f953 	bl	8003620 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d902      	bls.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	74fb      	strb	r3, [r7, #19]
        break;
 8008388:	e005      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800838a:	4b30      	ldr	r3, [pc, #192]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0ef      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008396:	7cfb      	ldrb	r3, [r7, #19]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d159      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800839c:	4b2a      	ldr	r3, [pc, #168]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800839e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01e      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d019      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80083b8:	4b23      	ldr	r3, [pc, #140]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083c4:	4b20      	ldr	r3, [pc, #128]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083da:	4a1b      	ldr	r2, [pc, #108]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80083e4:	4a18      	ldr	r2, [pc, #96]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d016      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f6:	f7fb f913 	bl	8003620 <HAL_GetTick>
 80083fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083fc:	e00b      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083fe:	f7fb f90f 	bl	8003620 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800840c:	4293      	cmp	r3, r2
 800840e:	d902      	bls.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	74fb      	strb	r3, [r7, #19]
            break;
 8008414:	e006      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008416:	4b0c      	ldr	r3, [pc, #48]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0ec      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008424:	7cfb      	ldrb	r3, [r7, #19]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10b      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800842a:	4b07      	ldr	r3, [pc, #28]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800842c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008438:	4903      	ldr	r1, [pc, #12]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800843a:	4313      	orrs	r3, r2
 800843c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008440:	e008      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008442:	7cfb      	ldrb	r3, [r7, #19]
 8008444:	74bb      	strb	r3, [r7, #18]
 8008446:	e005      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008448:	40021000 	.word	0x40021000
 800844c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008450:	7cfb      	ldrb	r3, [r7, #19]
 8008452:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008454:	7c7b      	ldrb	r3, [r7, #17]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d105      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800845a:	4ba7      	ldr	r3, [pc, #668]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800845c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845e:	4aa6      	ldr	r2, [pc, #664]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008464:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008472:	4ba1      	ldr	r3, [pc, #644]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008478:	f023 0203 	bic.w	r2, r3, #3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	499d      	ldr	r1, [pc, #628]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008494:	4b98      	ldr	r3, [pc, #608]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849a:	f023 020c 	bic.w	r2, r3, #12
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	4995      	ldr	r1, [pc, #596]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084b6:	4b90      	ldr	r3, [pc, #576]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	498c      	ldr	r1, [pc, #560]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084d8:	4b87      	ldr	r3, [pc, #540]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	4984      	ldr	r1, [pc, #528]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0310 	and.w	r3, r3, #16
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084fa:	4b7f      	ldr	r3, [pc, #508]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	497b      	ldr	r1, [pc, #492]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0320 	and.w	r3, r3, #32
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800851c:	4b76      	ldr	r3, [pc, #472]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800851e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008522:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	4973      	ldr	r1, [pc, #460]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800853e:	4b6e      	ldr	r3, [pc, #440]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008544:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	496a      	ldr	r1, [pc, #424]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008560:	4b65      	ldr	r3, [pc, #404]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008566:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	4962      	ldr	r1, [pc, #392]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008582:	4b5d      	ldr	r3, [pc, #372]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008588:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008590:	4959      	ldr	r1, [pc, #356]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008592:	4313      	orrs	r3, r2
 8008594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085a4:	4b54      	ldr	r3, [pc, #336]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085aa:	f023 0203 	bic.w	r2, r3, #3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	4951      	ldr	r1, [pc, #324]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085c6:	4b4c      	ldr	r3, [pc, #304]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	4948      	ldr	r1, [pc, #288]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d015      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085e8:	4b43      	ldr	r3, [pc, #268]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f6:	4940      	ldr	r1, [pc, #256]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008606:	d105      	bne.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008608:	4b3b      	ldr	r3, [pc, #236]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	4a3a      	ldr	r2, [pc, #232]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800860e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008612:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800861c:	2b00      	cmp	r3, #0
 800861e:	d015      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008620:	4b35      	ldr	r3, [pc, #212]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008626:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800862e:	4932      	ldr	r1, [pc, #200]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008630:	4313      	orrs	r3, r2
 8008632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800863a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800863e:	d105      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008640:	4b2d      	ldr	r3, [pc, #180]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	4a2c      	ldr	r2, [pc, #176]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800864a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d015      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008658:	4b27      	ldr	r3, [pc, #156]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800865a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800865e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008666:	4924      	ldr	r1, [pc, #144]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008668:	4313      	orrs	r3, r2
 800866a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008676:	d105      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008678:	4b1f      	ldr	r3, [pc, #124]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	4a1e      	ldr	r2, [pc, #120]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800867e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008682:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d015      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008690:	4b19      	ldr	r3, [pc, #100]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008696:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869e:	4916      	ldr	r1, [pc, #88]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086ae:	d105      	bne.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086b0:	4b11      	ldr	r3, [pc, #68]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	4a10      	ldr	r2, [pc, #64]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d019      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086c8:	4b0b      	ldr	r3, [pc, #44]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d6:	4908      	ldr	r1, [pc, #32]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086e6:	d109      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086e8:	4b03      	ldr	r3, [pc, #12]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	4a02      	ldr	r2, [pc, #8]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086f2:	60d3      	str	r3, [r2, #12]
 80086f4:	e002      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80086f6:	bf00      	nop
 80086f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d015      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008708:	4b29      	ldr	r3, [pc, #164]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800870a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800870e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008716:	4926      	ldr	r1, [pc, #152]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008718:	4313      	orrs	r3, r2
 800871a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008722:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008726:	d105      	bne.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008728:	4b21      	ldr	r3, [pc, #132]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	4a20      	ldr	r2, [pc, #128]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800872e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008732:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d015      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008740:	4b1b      	ldr	r3, [pc, #108]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008746:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800874e:	4918      	ldr	r1, [pc, #96]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008750:	4313      	orrs	r3, r2
 8008752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800875e:	d105      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008760:	4b13      	ldr	r3, [pc, #76]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	4a12      	ldr	r2, [pc, #72]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800876a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d015      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008778:	4b0d      	ldr	r3, [pc, #52]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800877a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800877e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008786:	490a      	ldr	r1, [pc, #40]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008788:	4313      	orrs	r3, r2
 800878a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008796:	d105      	bne.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008798:	4b05      	ldr	r3, [pc, #20]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	4a04      	ldr	r2, [pc, #16]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800879e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80087a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	40021000 	.word	0x40021000

080087b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e09d      	b.n	8008902 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d108      	bne.n	80087e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087d6:	d009      	beq.n	80087ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	61da      	str	r2, [r3, #28]
 80087de:	e005      	b.n	80087ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7f8 fe3c 	bl	8001484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008822:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800882c:	d902      	bls.n	8008834 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	e002      	b.n	800883a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008838:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008842:	d007      	beq.n	8008854 <HAL_SPI_Init+0xa0>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800884c:	d002      	beq.n	8008854 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	431a      	orrs	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800888c:	431a      	orrs	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008896:	ea42 0103 	orr.w	r1, r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	0c1b      	lsrs	r3, r3, #16
 80088b0:	f003 0204 	and.w	r2, r3, #4
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	431a      	orrs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	431a      	orrs	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80088d0:	ea42 0103 	orr.w	r1, r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80088f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b088      	sub	sp, #32
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	603b      	str	r3, [r7, #0]
 8008916:	4613      	mov	r3, r2
 8008918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008924:	2b01      	cmp	r3, #1
 8008926:	d101      	bne.n	800892c <HAL_SPI_Transmit+0x22>
 8008928:	2302      	movs	r3, #2
 800892a:	e15f      	b.n	8008bec <HAL_SPI_Transmit+0x2e2>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008934:	f7fa fe74 	bl	8003620 <HAL_GetTick>
 8008938:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b01      	cmp	r3, #1
 8008948:	d002      	beq.n	8008950 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800894a:	2302      	movs	r3, #2
 800894c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800894e:	e148      	b.n	8008be2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <HAL_SPI_Transmit+0x52>
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d102      	bne.n	8008962 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008960:	e13f      	b.n	8008be2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2203      	movs	r2, #3
 8008966:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	88fa      	ldrh	r2, [r7, #6]
 800897a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	88fa      	ldrh	r2, [r7, #6]
 8008980:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089ac:	d10f      	bne.n	80089ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d8:	2b40      	cmp	r3, #64	@ 0x40
 80089da:	d007      	beq.n	80089ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089f4:	d94f      	bls.n	8008a96 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <HAL_SPI_Transmit+0xfa>
 80089fe:	8afb      	ldrh	r3, [r7, #22]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d142      	bne.n	8008a8a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a08:	881a      	ldrh	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a14:	1c9a      	adds	r2, r3, #2
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a28:	e02f      	b.n	8008a8a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d112      	bne.n	8008a5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3c:	881a      	ldrh	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a48:	1c9a      	adds	r2, r3, #2
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a5c:	e015      	b.n	8008a8a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a5e:	f7fa fddf 	bl	8003620 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d803      	bhi.n	8008a76 <HAL_SPI_Transmit+0x16c>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a74:	d102      	bne.n	8008a7c <HAL_SPI_Transmit+0x172>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008a88:	e0ab      	b.n	8008be2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1ca      	bne.n	8008a2a <HAL_SPI_Transmit+0x120>
 8008a94:	e080      	b.n	8008b98 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d002      	beq.n	8008aa4 <HAL_SPI_Transmit+0x19a>
 8008a9e:	8afb      	ldrh	r3, [r7, #22]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d174      	bne.n	8008b8e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d912      	bls.n	8008ad4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab2:	881a      	ldrh	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008abe:	1c9a      	adds	r2, r3, #2
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b02      	subs	r3, #2
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ad2:	e05c      	b.n	8008b8e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	7812      	ldrb	r2, [r2, #0]
 8008ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae6:	1c5a      	adds	r2, r3, #1
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008afa:	e048      	b.n	8008b8e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d12b      	bne.n	8008b62 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d912      	bls.n	8008b3a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b18:	881a      	ldrh	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b24:	1c9a      	adds	r2, r3, #2
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b02      	subs	r3, #2
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b38:	e029      	b.n	8008b8e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	330c      	adds	r3, #12
 8008b44:	7812      	ldrb	r2, [r2, #0]
 8008b46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b60:	e015      	b.n	8008b8e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b62:	f7fa fd5d 	bl	8003620 <HAL_GetTick>
 8008b66:	4602      	mov	r2, r0
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d803      	bhi.n	8008b7a <HAL_SPI_Transmit+0x270>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b78:	d102      	bne.n	8008b80 <HAL_SPI_Transmit+0x276>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008b8c:	e029      	b.n	8008be2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1b1      	bne.n	8008afc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 fc7d 	bl	800949c <SPI_EndRxTxTransaction>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2220      	movs	r2, #32
 8008bac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10a      	bne.n	8008bcc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	613b      	str	r3, [r7, #16]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	613b      	str	r3, [r7, #16]
 8008bca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	77fb      	strb	r3, [r7, #31]
 8008bd8:	e003      	b.n	8008be2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008bea:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08a      	sub	sp, #40	@ 0x28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c02:	2301      	movs	r3, #1
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d101      	bne.n	8008c1a <HAL_SPI_TransmitReceive+0x26>
 8008c16:	2302      	movs	r3, #2
 8008c18:	e20a      	b.n	8009030 <HAL_SPI_TransmitReceive+0x43c>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c22:	f7fa fcfd 	bl	8003620 <HAL_GetTick>
 8008c26:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c2e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008c36:	887b      	ldrh	r3, [r7, #2]
 8008c38:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008c3a:	887b      	ldrh	r3, [r7, #2]
 8008c3c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c3e:	7efb      	ldrb	r3, [r7, #27]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d00e      	beq.n	8008c62 <HAL_SPI_TransmitReceive+0x6e>
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c4a:	d106      	bne.n	8008c5a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d102      	bne.n	8008c5a <HAL_SPI_TransmitReceive+0x66>
 8008c54:	7efb      	ldrb	r3, [r7, #27]
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d003      	beq.n	8008c62 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008c60:	e1e0      	b.n	8009024 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <HAL_SPI_TransmitReceive+0x80>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <HAL_SPI_TransmitReceive+0x80>
 8008c6e:	887b      	ldrh	r3, [r7, #2]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d103      	bne.n	8008c7c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008c7a:	e1d3      	b.n	8009024 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d003      	beq.n	8008c90 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	887a      	ldrh	r2, [r7, #2]
 8008ca0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	887a      	ldrh	r2, [r7, #2]
 8008ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	887a      	ldrh	r2, [r7, #2]
 8008cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	887a      	ldrh	r2, [r7, #2]
 8008cbc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008cd2:	d802      	bhi.n	8008cda <HAL_SPI_TransmitReceive+0xe6>
 8008cd4:	8a3b      	ldrh	r3, [r7, #16]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d908      	bls.n	8008cec <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	e007      	b.n	8008cfc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008cfa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d06:	2b40      	cmp	r3, #64	@ 0x40
 8008d08:	d007      	beq.n	8008d1a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d22:	f240 8081 	bls.w	8008e28 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <HAL_SPI_TransmitReceive+0x140>
 8008d2e:	8a7b      	ldrh	r3, [r7, #18]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d16d      	bne.n	8008e10 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d38:	881a      	ldrh	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d44:	1c9a      	adds	r2, r3, #2
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d58:	e05a      	b.n	8008e10 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d11b      	bne.n	8008da0 <HAL_SPI_TransmitReceive+0x1ac>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d016      	beq.n	8008da0 <HAL_SPI_TransmitReceive+0x1ac>
 8008d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d113      	bne.n	8008da0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7c:	881a      	ldrh	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d88:	1c9a      	adds	r2, r3, #2
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d11c      	bne.n	8008de8 <HAL_SPI_TransmitReceive+0x1f4>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d016      	beq.n	8008de8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc4:	b292      	uxth	r2, r2
 8008dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dcc:	1c9a      	adds	r2, r3, #2
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008de4:	2301      	movs	r3, #1
 8008de6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008de8:	f7fa fc1a 	bl	8003620 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d80b      	bhi.n	8008e10 <HAL_SPI_TransmitReceive+0x21c>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfe:	d007      	beq.n	8008e10 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008e0e:	e109      	b.n	8009024 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d19f      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x166>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d199      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x166>
 8008e26:	e0e3      	b.n	8008ff0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d003      	beq.n	8008e38 <HAL_SPI_TransmitReceive+0x244>
 8008e30:	8a7b      	ldrh	r3, [r7, #18]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	f040 80cf 	bne.w	8008fd6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d912      	bls.n	8008e68 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e46:	881a      	ldrh	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e52:	1c9a      	adds	r2, r3, #2
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b02      	subs	r3, #2
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e66:	e0b6      	b.n	8008fd6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	330c      	adds	r3, #12
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	3b01      	subs	r3, #1
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e8e:	e0a2      	b.n	8008fd6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d134      	bne.n	8008f08 <HAL_SPI_TransmitReceive+0x314>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d02f      	beq.n	8008f08 <HAL_SPI_TransmitReceive+0x314>
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d12c      	bne.n	8008f08 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d912      	bls.n	8008ede <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ebc:	881a      	ldrh	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec8:	1c9a      	adds	r2, r3, #2
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	3b02      	subs	r3, #2
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008edc:	e012      	b.n	8008f04 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	330c      	adds	r3, #12
 8008ee8:	7812      	ldrb	r2, [r2, #0]
 8008eea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d148      	bne.n	8008fa8 <HAL_SPI_TransmitReceive+0x3b4>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d042      	beq.n	8008fa8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d923      	bls.n	8008f76 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f38:	b292      	uxth	r2, r2
 8008f3a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f40:	1c9a      	adds	r2, r3, #2
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b02      	subs	r3, #2
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d81f      	bhi.n	8008fa4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f72:	605a      	str	r2, [r3, #4]
 8008f74:	e016      	b.n	8008fa4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f103 020c 	add.w	r2, r3, #12
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f82:	7812      	ldrb	r2, [r2, #0]
 8008f84:	b2d2      	uxtb	r2, r2
 8008f86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fa8:	f7fa fb3a 	bl	8003620 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d803      	bhi.n	8008fc0 <HAL_SPI_TransmitReceive+0x3cc>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbe:	d102      	bne.n	8008fc6 <HAL_SPI_TransmitReceive+0x3d2>
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d107      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008fd4:	e026      	b.n	8009024 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f47f af57 	bne.w	8008e90 <HAL_SPI_TransmitReceive+0x29c>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f47f af50 	bne.w	8008e90 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 fa51 	bl	800949c <SPI_EndRxTxTransaction>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2220      	movs	r2, #32
 800900a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800901a:	e003      	b.n	8009024 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800902c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009030:	4618      	mov	r0, r3
 8009032:	3728      	adds	r7, #40	@ 0x28
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10e      	bne.n	8009078 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009060:	2b00      	cmp	r3, #0
 8009062:	d009      	beq.n	8009078 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d004      	beq.n	8009078 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
    return;
 8009076:	e0ce      	b.n	8009216 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d009      	beq.n	8009096 <HAL_SPI_IRQHandler+0x5e>
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009088:	2b00      	cmp	r3, #0
 800908a:	d004      	beq.n	8009096 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	4798      	blx	r3
    return;
 8009094:	e0bf      	b.n	8009216 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	f003 0320 	and.w	r3, r3, #32
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <HAL_SPI_IRQHandler+0x7e>
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80b0 	beq.w	8009216 <HAL_SPI_IRQHandler+0x1de>
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	f003 0320 	and.w	r3, r3, #32
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 80aa 	beq.w	8009216 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d023      	beq.n	8009114 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d011      	beq.n	80090fc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090dc:	f043 0204 	orr.w	r2, r3, #4
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090e4:	2300      	movs	r3, #0
 80090e6:	617b      	str	r3, [r7, #20]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	e00b      	b.n	8009114 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090fc:	2300      	movs	r3, #0
 80090fe:	613b      	str	r3, [r7, #16]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	613b      	str	r3, [r7, #16]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	613b      	str	r3, [r7, #16]
 8009110:	693b      	ldr	r3, [r7, #16]
        return;
 8009112:	e080      	b.n	8009216 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	2b00      	cmp	r3, #0
 800911c:	d014      	beq.n	8009148 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009122:	f043 0201 	orr.w	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800912a:	2300      	movs	r3, #0
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00c      	beq.n	800916c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009156:	f043 0208 	orr.w	r2, r3, #8
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800915e:	2300      	movs	r3, #0
 8009160:	60bb      	str	r3, [r7, #8]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009170:	2b00      	cmp	r3, #0
 8009172:	d04f      	beq.n	8009214 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009182:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d104      	bne.n	80091a0 <HAL_SPI_IRQHandler+0x168>
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d034      	beq.n	800920a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0203 	bic.w	r2, r2, #3
 80091ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d011      	beq.n	80091dc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091bc:	4a17      	ldr	r2, [pc, #92]	@ (800921c <HAL_SPI_IRQHandler+0x1e4>)
 80091be:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fc fb8a 	bl	80058de <HAL_DMA_Abort_IT>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d005      	beq.n	80091dc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d016      	beq.n	8009212 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e8:	4a0c      	ldr	r2, [pc, #48]	@ (800921c <HAL_SPI_IRQHandler+0x1e4>)
 80091ea:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fc fb74 	bl	80058de <HAL_DMA_Abort_IT>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00a      	beq.n	8009212 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009200:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009208:	e003      	b.n	8009212 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f808 	bl	8009220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009210:	e000      	b.n	8009214 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009212:	bf00      	nop
    return;
 8009214:	bf00      	nop
  }
}
 8009216:	3720      	adds	r7, #32
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	08009235 	.word	0x08009235

08009220 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009240:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f7ff ffe5 	bl	8009220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009256:	bf00      	nop
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b088      	sub	sp, #32
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	4613      	mov	r3, r2
 800926e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009270:	f7fa f9d6 	bl	8003620 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009278:	1a9b      	subs	r3, r3, r2
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4413      	add	r3, r2
 800927e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009280:	f7fa f9ce 	bl	8003620 <HAL_GetTick>
 8009284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009286:	4b39      	ldr	r3, [pc, #228]	@ (800936c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	015b      	lsls	r3, r3, #5
 800928c:	0d1b      	lsrs	r3, r3, #20
 800928e:	69fa      	ldr	r2, [r7, #28]
 8009290:	fb02 f303 	mul.w	r3, r2, r3
 8009294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009296:	e054      	b.n	8009342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929e:	d050      	beq.n	8009342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092a0:	f7fa f9be 	bl	8003620 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d902      	bls.n	80092b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d13d      	bne.n	8009332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092ce:	d111      	bne.n	80092f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092d8:	d004      	beq.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092e2:	d107      	bne.n	80092f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092fc:	d10f      	bne.n	800931e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800931c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e017      	b.n	8009362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	3b01      	subs	r3, #1
 8009340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4013      	ands	r3, r2
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	429a      	cmp	r2, r3
 8009350:	bf0c      	ite	eq
 8009352:	2301      	moveq	r3, #1
 8009354:	2300      	movne	r3, #0
 8009356:	b2db      	uxtb	r3, r3
 8009358:	461a      	mov	r2, r3
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	429a      	cmp	r2, r3
 800935e:	d19b      	bne.n	8009298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3720      	adds	r7, #32
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000000 	.word	0x20000000

08009370 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08a      	sub	sp, #40	@ 0x28
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009382:	f7fa f94d 	bl	8003620 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	4413      	add	r3, r2
 8009390:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009392:	f7fa f945 	bl	8003620 <HAL_GetTick>
 8009396:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	330c      	adds	r3, #12
 800939e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80093a0:	4b3d      	ldr	r3, [pc, #244]	@ (8009498 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	00da      	lsls	r2, r3, #3
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	0d1b      	lsrs	r3, r3, #20
 80093b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093b2:	fb02 f303 	mul.w	r3, r2, r3
 80093b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80093b8:	e060      	b.n	800947c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093c0:	d107      	bne.n	80093d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d8:	d050      	beq.n	800947c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093da:	f7fa f921 	bl	8003620 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d902      	bls.n	80093f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d13d      	bne.n	800946c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009408:	d111      	bne.n	800942e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009412:	d004      	beq.n	800941e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800941c:	d107      	bne.n	800942e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800942c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009436:	d10f      	bne.n	8009458 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009456:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e010      	b.n	800948e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	3b01      	subs	r3, #1
 800947a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689a      	ldr	r2, [r3, #8]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	4013      	ands	r3, r2
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	429a      	cmp	r2, r3
 800948a:	d196      	bne.n	80093ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3728      	adds	r7, #40	@ 0x28
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20000000 	.word	0x20000000

0800949c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7ff ff5b 	bl	8009370 <SPI_WaitFifoStateUntilTimeout>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d007      	beq.n	80094d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094c4:	f043 0220 	orr.w	r2, r3, #32
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e027      	b.n	8009520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2200      	movs	r2, #0
 80094d8:	2180      	movs	r1, #128	@ 0x80
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7ff fec0 	bl	8009260 <SPI_WaitFlagStateUntilTimeout>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ea:	f043 0220 	orr.w	r2, r3, #32
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e014      	b.n	8009520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f7ff ff34 	bl	8009370 <SPI_WaitFifoStateUntilTimeout>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009512:	f043 0220 	orr.w	r2, r3, #32
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e000      	b.n	8009520 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e049      	b.n	80095ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f841 	bl	80095d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f000 fcae 	bl	8009ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
	...

080095ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d001      	beq.n	8009604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e054      	b.n	80096ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f042 0201 	orr.w	r2, r2, #1
 800961a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a26      	ldr	r2, [pc, #152]	@ (80096bc <HAL_TIM_Base_Start_IT+0xd0>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d022      	beq.n	800966c <HAL_TIM_Base_Start_IT+0x80>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800962e:	d01d      	beq.n	800966c <HAL_TIM_Base_Start_IT+0x80>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a22      	ldr	r2, [pc, #136]	@ (80096c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d018      	beq.n	800966c <HAL_TIM_Base_Start_IT+0x80>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a21      	ldr	r2, [pc, #132]	@ (80096c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d013      	beq.n	800966c <HAL_TIM_Base_Start_IT+0x80>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a1f      	ldr	r2, [pc, #124]	@ (80096c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00e      	beq.n	800966c <HAL_TIM_Base_Start_IT+0x80>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a1e      	ldr	r2, [pc, #120]	@ (80096cc <HAL_TIM_Base_Start_IT+0xe0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d009      	beq.n	800966c <HAL_TIM_Base_Start_IT+0x80>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a1c      	ldr	r2, [pc, #112]	@ (80096d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d004      	beq.n	800966c <HAL_TIM_Base_Start_IT+0x80>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a1b      	ldr	r2, [pc, #108]	@ (80096d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d115      	bne.n	8009698 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689a      	ldr	r2, [r3, #8]
 8009672:	4b19      	ldr	r3, [pc, #100]	@ (80096d8 <HAL_TIM_Base_Start_IT+0xec>)
 8009674:	4013      	ands	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b06      	cmp	r3, #6
 800967c:	d015      	beq.n	80096aa <HAL_TIM_Base_Start_IT+0xbe>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009684:	d011      	beq.n	80096aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f042 0201 	orr.w	r2, r2, #1
 8009694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009696:	e008      	b.n	80096aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	e000      	b.n	80096ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	40012c00 	.word	0x40012c00
 80096c0:	40000400 	.word	0x40000400
 80096c4:	40000800 	.word	0x40000800
 80096c8:	40000c00 	.word	0x40000c00
 80096cc:	40013400 	.word	0x40013400
 80096d0:	40014000 	.word	0x40014000
 80096d4:	40015000 	.word	0x40015000
 80096d8:	00010007 	.word	0x00010007

080096dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e049      	b.n	8009782 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7f8 f8a8 	bl	8001858 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3304      	adds	r3, #4
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f000 fbd4 	bl	8009ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <HAL_TIM_IC_Start_IT+0x1e>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	e023      	b.n	80097f2 <HAL_TIM_IC_Start_IT+0x66>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d104      	bne.n	80097ba <HAL_TIM_IC_Start_IT+0x2e>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	e01b      	b.n	80097f2 <HAL_TIM_IC_Start_IT+0x66>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d104      	bne.n	80097ca <HAL_TIM_IC_Start_IT+0x3e>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	e013      	b.n	80097f2 <HAL_TIM_IC_Start_IT+0x66>
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2b0c      	cmp	r3, #12
 80097ce:	d104      	bne.n	80097da <HAL_TIM_IC_Start_IT+0x4e>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	e00b      	b.n	80097f2 <HAL_TIM_IC_Start_IT+0x66>
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b10      	cmp	r3, #16
 80097de:	d104      	bne.n	80097ea <HAL_TIM_IC_Start_IT+0x5e>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	e003      	b.n	80097f2 <HAL_TIM_IC_Start_IT+0x66>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <HAL_TIM_IC_Start_IT+0x78>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009800:	b2db      	uxtb	r3, r3
 8009802:	e013      	b.n	800982c <HAL_TIM_IC_Start_IT+0xa0>
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2b04      	cmp	r3, #4
 8009808:	d104      	bne.n	8009814 <HAL_TIM_IC_Start_IT+0x88>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009810:	b2db      	uxtb	r3, r3
 8009812:	e00b      	b.n	800982c <HAL_TIM_IC_Start_IT+0xa0>
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b08      	cmp	r3, #8
 8009818:	d104      	bne.n	8009824 <HAL_TIM_IC_Start_IT+0x98>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009820:	b2db      	uxtb	r3, r3
 8009822:	e003      	b.n	800982c <HAL_TIM_IC_Start_IT+0xa0>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800982a:	b2db      	uxtb	r3, r3
 800982c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800982e:	7bbb      	ldrb	r3, [r7, #14]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d102      	bne.n	800983a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009834:	7b7b      	ldrb	r3, [r7, #13]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d001      	beq.n	800983e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e0e2      	b.n	8009a04 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d104      	bne.n	800984e <HAL_TIM_IC_Start_IT+0xc2>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800984c:	e023      	b.n	8009896 <HAL_TIM_IC_Start_IT+0x10a>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b04      	cmp	r3, #4
 8009852:	d104      	bne.n	800985e <HAL_TIM_IC_Start_IT+0xd2>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800985c:	e01b      	b.n	8009896 <HAL_TIM_IC_Start_IT+0x10a>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b08      	cmp	r3, #8
 8009862:	d104      	bne.n	800986e <HAL_TIM_IC_Start_IT+0xe2>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2202      	movs	r2, #2
 8009868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800986c:	e013      	b.n	8009896 <HAL_TIM_IC_Start_IT+0x10a>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	2b0c      	cmp	r3, #12
 8009872:	d104      	bne.n	800987e <HAL_TIM_IC_Start_IT+0xf2>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800987c:	e00b      	b.n	8009896 <HAL_TIM_IC_Start_IT+0x10a>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b10      	cmp	r3, #16
 8009882:	d104      	bne.n	800988e <HAL_TIM_IC_Start_IT+0x102>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800988c:	e003      	b.n	8009896 <HAL_TIM_IC_Start_IT+0x10a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2202      	movs	r2, #2
 8009892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d104      	bne.n	80098a6 <HAL_TIM_IC_Start_IT+0x11a>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2202      	movs	r2, #2
 80098a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098a4:	e013      	b.n	80098ce <HAL_TIM_IC_Start_IT+0x142>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d104      	bne.n	80098b6 <HAL_TIM_IC_Start_IT+0x12a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098b4:	e00b      	b.n	80098ce <HAL_TIM_IC_Start_IT+0x142>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b08      	cmp	r3, #8
 80098ba:	d104      	bne.n	80098c6 <HAL_TIM_IC_Start_IT+0x13a>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098c4:	e003      	b.n	80098ce <HAL_TIM_IC_Start_IT+0x142>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2202      	movs	r2, #2
 80098ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b0c      	cmp	r3, #12
 80098d2:	d841      	bhi.n	8009958 <HAL_TIM_IC_Start_IT+0x1cc>
 80098d4:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <HAL_TIM_IC_Start_IT+0x150>)
 80098d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098da:	bf00      	nop
 80098dc:	08009911 	.word	0x08009911
 80098e0:	08009959 	.word	0x08009959
 80098e4:	08009959 	.word	0x08009959
 80098e8:	08009959 	.word	0x08009959
 80098ec:	08009923 	.word	0x08009923
 80098f0:	08009959 	.word	0x08009959
 80098f4:	08009959 	.word	0x08009959
 80098f8:	08009959 	.word	0x08009959
 80098fc:	08009935 	.word	0x08009935
 8009900:	08009959 	.word	0x08009959
 8009904:	08009959 	.word	0x08009959
 8009908:	08009959 	.word	0x08009959
 800990c:	08009947 	.word	0x08009947
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f042 0202 	orr.w	r2, r2, #2
 800991e:	60da      	str	r2, [r3, #12]
      break;
 8009920:	e01d      	b.n	800995e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68da      	ldr	r2, [r3, #12]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f042 0204 	orr.w	r2, r2, #4
 8009930:	60da      	str	r2, [r3, #12]
      break;
 8009932:	e014      	b.n	800995e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f042 0208 	orr.w	r2, r2, #8
 8009942:	60da      	str	r2, [r3, #12]
      break;
 8009944:	e00b      	b.n	800995e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f042 0210 	orr.w	r2, r2, #16
 8009954:	60da      	str	r2, [r3, #12]
      break;
 8009956:	e002      	b.n	800995e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	73fb      	strb	r3, [r7, #15]
      break;
 800995c:	bf00      	nop
  }

  if (status == HAL_OK)
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d14e      	bne.n	8009a02 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2201      	movs	r2, #1
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fc89 	bl	800a284 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a25      	ldr	r2, [pc, #148]	@ (8009a0c <HAL_TIM_IC_Start_IT+0x280>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d022      	beq.n	80099c2 <HAL_TIM_IC_Start_IT+0x236>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009984:	d01d      	beq.n	80099c2 <HAL_TIM_IC_Start_IT+0x236>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a21      	ldr	r2, [pc, #132]	@ (8009a10 <HAL_TIM_IC_Start_IT+0x284>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d018      	beq.n	80099c2 <HAL_TIM_IC_Start_IT+0x236>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a1f      	ldr	r2, [pc, #124]	@ (8009a14 <HAL_TIM_IC_Start_IT+0x288>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d013      	beq.n	80099c2 <HAL_TIM_IC_Start_IT+0x236>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a1e      	ldr	r2, [pc, #120]	@ (8009a18 <HAL_TIM_IC_Start_IT+0x28c>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d00e      	beq.n	80099c2 <HAL_TIM_IC_Start_IT+0x236>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a1c      	ldr	r2, [pc, #112]	@ (8009a1c <HAL_TIM_IC_Start_IT+0x290>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d009      	beq.n	80099c2 <HAL_TIM_IC_Start_IT+0x236>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a20 <HAL_TIM_IC_Start_IT+0x294>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d004      	beq.n	80099c2 <HAL_TIM_IC_Start_IT+0x236>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a19      	ldr	r2, [pc, #100]	@ (8009a24 <HAL_TIM_IC_Start_IT+0x298>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d115      	bne.n	80099ee <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	4b17      	ldr	r3, [pc, #92]	@ (8009a28 <HAL_TIM_IC_Start_IT+0x29c>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b06      	cmp	r3, #6
 80099d2:	d015      	beq.n	8009a00 <HAL_TIM_IC_Start_IT+0x274>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099da:	d011      	beq.n	8009a00 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0201 	orr.w	r2, r2, #1
 80099ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ec:	e008      	b.n	8009a00 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f042 0201 	orr.w	r2, r2, #1
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	e000      	b.n	8009a02 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a00:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	40012c00 	.word	0x40012c00
 8009a10:	40000400 	.word	0x40000400
 8009a14:	40000800 	.word	0x40000800
 8009a18:	40000c00 	.word	0x40000c00
 8009a1c:	40013400 	.word	0x40013400
 8009a20:	40014000 	.word	0x40014000
 8009a24:	40015000 	.word	0x40015000
 8009a28:	00010007 	.word	0x00010007

08009a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d020      	beq.n	8009a90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d01b      	beq.n	8009a90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f06f 0202 	mvn.w	r2, #2
 8009a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7f8 fc4c 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8009a7c:	e005      	b.n	8009a8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa04 	bl	8009e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fa0b 	bl	8009ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f003 0304 	and.w	r3, r3, #4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d020      	beq.n	8009adc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f003 0304 	and.w	r3, r3, #4
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01b      	beq.n	8009adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f06f 0204 	mvn.w	r2, #4
 8009aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7f8 fc26 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8009ac8:	e005      	b.n	8009ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f9de 	bl	8009e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f9e5 	bl	8009ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f003 0308 	and.w	r3, r3, #8
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d020      	beq.n	8009b28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f003 0308 	and.w	r3, r3, #8
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01b      	beq.n	8009b28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f06f 0208 	mvn.w	r2, #8
 8009af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2204      	movs	r2, #4
 8009afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	69db      	ldr	r3, [r3, #28]
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7f8 fc00 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8009b14:	e005      	b.n	8009b22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f9b8 	bl	8009e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f9bf 	bl	8009ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f003 0310 	and.w	r3, r3, #16
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d020      	beq.n	8009b74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f003 0310 	and.w	r3, r3, #16
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01b      	beq.n	8009b74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f06f 0210 	mvn.w	r2, #16
 8009b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2208      	movs	r2, #8
 8009b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7f8 fbda 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8009b60:	e005      	b.n	8009b6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f992 	bl	8009e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f999 	bl	8009ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00c      	beq.n	8009b98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d007      	beq.n	8009b98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f06f 0201 	mvn.w	r2, #1
 8009b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7f7 fc20 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d104      	bne.n	8009bac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00c      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d007      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fc25 	bl	800a410 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00c      	beq.n	8009bea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d007      	beq.n	8009bea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fc1d 	bl	800a424 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00c      	beq.n	8009c0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d007      	beq.n	8009c0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f953 	bl	8009eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00c      	beq.n	8009c32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f06f 0220 	mvn.w	r2, #32
 8009c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fbe5 	bl	800a3fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00c      	beq.n	8009c56 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d007      	beq.n	8009c56 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fbf1 	bl	800a438 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00c      	beq.n	8009c7a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d007      	beq.n	8009c7a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fbe9 	bl	800a44c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00c      	beq.n	8009c9e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d007      	beq.n	8009c9e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fbe1 	bl	800a460 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00c      	beq.n	8009cc2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d007      	beq.n	8009cc2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fbd9 	bl	800a474 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cc2:	bf00      	nop
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b086      	sub	sp, #24
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d101      	bne.n	8009ce8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e088      	b.n	8009dfa <HAL_TIM_IC_ConfigChannel+0x130>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d11b      	bne.n	8009d2e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009d06:	f000 f993 	bl	800a030 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	699a      	ldr	r2, [r3, #24]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 020c 	bic.w	r2, r2, #12
 8009d18:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6999      	ldr	r1, [r3, #24]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	619a      	str	r2, [r3, #24]
 8009d2c:	e060      	b.n	8009df0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	d11c      	bne.n	8009d6e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009d44:	f000 f9e8 	bl	800a118 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009d56:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6999      	ldr	r1, [r3, #24]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	021a      	lsls	r2, r3, #8
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	619a      	str	r2, [r3, #24]
 8009d6c:	e040      	b.n	8009df0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b08      	cmp	r3, #8
 8009d72:	d11b      	bne.n	8009dac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009d84:	f000 fa05 	bl	800a192 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69da      	ldr	r2, [r3, #28]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f022 020c 	bic.w	r2, r2, #12
 8009d96:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	69d9      	ldr	r1, [r3, #28]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	689a      	ldr	r2, [r3, #8]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	61da      	str	r2, [r3, #28]
 8009daa:	e021      	b.n	8009df0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b0c      	cmp	r3, #12
 8009db0:	d11c      	bne.n	8009dec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009dc2:	f000 fa22 	bl	800a20a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69da      	ldr	r2, [r3, #28]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009dd4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69d9      	ldr	r1, [r3, #28]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	021a      	lsls	r2, r3, #8
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	61da      	str	r2, [r3, #28]
 8009dea:	e001      	b.n	8009df0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b0c      	cmp	r3, #12
 8009e16:	d831      	bhi.n	8009e7c <HAL_TIM_ReadCapturedValue+0x78>
 8009e18:	a201      	add	r2, pc, #4	@ (adr r2, 8009e20 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1e:	bf00      	nop
 8009e20:	08009e55 	.word	0x08009e55
 8009e24:	08009e7d 	.word	0x08009e7d
 8009e28:	08009e7d 	.word	0x08009e7d
 8009e2c:	08009e7d 	.word	0x08009e7d
 8009e30:	08009e5f 	.word	0x08009e5f
 8009e34:	08009e7d 	.word	0x08009e7d
 8009e38:	08009e7d 	.word	0x08009e7d
 8009e3c:	08009e7d 	.word	0x08009e7d
 8009e40:	08009e69 	.word	0x08009e69
 8009e44:	08009e7d 	.word	0x08009e7d
 8009e48:	08009e7d 	.word	0x08009e7d
 8009e4c:	08009e7d 	.word	0x08009e7d
 8009e50:	08009e73 	.word	0x08009e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e5a:	60fb      	str	r3, [r7, #12]

      break;
 8009e5c:	e00f      	b.n	8009e7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e64:	60fb      	str	r3, [r7, #12]

      break;
 8009e66:	e00a      	b.n	8009e7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e6e:	60fb      	str	r3, [r7, #12]

      break;
 8009e70:	e005      	b.n	8009e7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e78:	60fb      	str	r3, [r7, #12]

      break;
 8009e7a:	e000      	b.n	8009e7e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009e7c:	bf00      	nop
  }

  return tmpreg;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a4c      	ldr	r2, [pc, #304]	@ (800a00c <TIM_Base_SetConfig+0x144>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d017      	beq.n	8009f10 <TIM_Base_SetConfig+0x48>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee6:	d013      	beq.n	8009f10 <TIM_Base_SetConfig+0x48>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a49      	ldr	r2, [pc, #292]	@ (800a010 <TIM_Base_SetConfig+0x148>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d00f      	beq.n	8009f10 <TIM_Base_SetConfig+0x48>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a48      	ldr	r2, [pc, #288]	@ (800a014 <TIM_Base_SetConfig+0x14c>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00b      	beq.n	8009f10 <TIM_Base_SetConfig+0x48>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a47      	ldr	r2, [pc, #284]	@ (800a018 <TIM_Base_SetConfig+0x150>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d007      	beq.n	8009f10 <TIM_Base_SetConfig+0x48>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a46      	ldr	r2, [pc, #280]	@ (800a01c <TIM_Base_SetConfig+0x154>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d003      	beq.n	8009f10 <TIM_Base_SetConfig+0x48>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a45      	ldr	r2, [pc, #276]	@ (800a020 <TIM_Base_SetConfig+0x158>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d108      	bne.n	8009f22 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a39      	ldr	r2, [pc, #228]	@ (800a00c <TIM_Base_SetConfig+0x144>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d023      	beq.n	8009f72 <TIM_Base_SetConfig+0xaa>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f30:	d01f      	beq.n	8009f72 <TIM_Base_SetConfig+0xaa>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a36      	ldr	r2, [pc, #216]	@ (800a010 <TIM_Base_SetConfig+0x148>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d01b      	beq.n	8009f72 <TIM_Base_SetConfig+0xaa>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a35      	ldr	r2, [pc, #212]	@ (800a014 <TIM_Base_SetConfig+0x14c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d017      	beq.n	8009f72 <TIM_Base_SetConfig+0xaa>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a34      	ldr	r2, [pc, #208]	@ (800a018 <TIM_Base_SetConfig+0x150>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d013      	beq.n	8009f72 <TIM_Base_SetConfig+0xaa>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a33      	ldr	r2, [pc, #204]	@ (800a01c <TIM_Base_SetConfig+0x154>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d00f      	beq.n	8009f72 <TIM_Base_SetConfig+0xaa>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a33      	ldr	r2, [pc, #204]	@ (800a024 <TIM_Base_SetConfig+0x15c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d00b      	beq.n	8009f72 <TIM_Base_SetConfig+0xaa>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a32      	ldr	r2, [pc, #200]	@ (800a028 <TIM_Base_SetConfig+0x160>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d007      	beq.n	8009f72 <TIM_Base_SetConfig+0xaa>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a31      	ldr	r2, [pc, #196]	@ (800a02c <TIM_Base_SetConfig+0x164>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <TIM_Base_SetConfig+0xaa>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a2c      	ldr	r2, [pc, #176]	@ (800a020 <TIM_Base_SetConfig+0x158>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d108      	bne.n	8009f84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a18      	ldr	r2, [pc, #96]	@ (800a00c <TIM_Base_SetConfig+0x144>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d013      	beq.n	8009fd8 <TIM_Base_SetConfig+0x110>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800a01c <TIM_Base_SetConfig+0x154>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d00f      	beq.n	8009fd8 <TIM_Base_SetConfig+0x110>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a1a      	ldr	r2, [pc, #104]	@ (800a024 <TIM_Base_SetConfig+0x15c>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d00b      	beq.n	8009fd8 <TIM_Base_SetConfig+0x110>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a19      	ldr	r2, [pc, #100]	@ (800a028 <TIM_Base_SetConfig+0x160>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d007      	beq.n	8009fd8 <TIM_Base_SetConfig+0x110>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a18      	ldr	r2, [pc, #96]	@ (800a02c <TIM_Base_SetConfig+0x164>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d003      	beq.n	8009fd8 <TIM_Base_SetConfig+0x110>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a13      	ldr	r2, [pc, #76]	@ (800a020 <TIM_Base_SetConfig+0x158>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d103      	bne.n	8009fe0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	691a      	ldr	r2, [r3, #16]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d105      	bne.n	8009ffe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	f023 0201 	bic.w	r2, r3, #1
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	611a      	str	r2, [r3, #16]
  }
}
 8009ffe:	bf00      	nop
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	40012c00 	.word	0x40012c00
 800a010:	40000400 	.word	0x40000400
 800a014:	40000800 	.word	0x40000800
 800a018:	40000c00 	.word	0x40000c00
 800a01c:	40013400 	.word	0x40013400
 800a020:	40015000 	.word	0x40015000
 800a024:	40014000 	.word	0x40014000
 800a028:	40014400 	.word	0x40014400
 800a02c:	40014800 	.word	0x40014800

0800a030 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a030:	b480      	push	{r7}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a1b      	ldr	r3, [r3, #32]
 800a048:	f023 0201 	bic.w	r2, r3, #1
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4a28      	ldr	r2, [pc, #160]	@ (800a0fc <TIM_TI1_SetConfig+0xcc>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d01b      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a064:	d017      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4a25      	ldr	r2, [pc, #148]	@ (800a100 <TIM_TI1_SetConfig+0xd0>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d013      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4a24      	ldr	r2, [pc, #144]	@ (800a104 <TIM_TI1_SetConfig+0xd4>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00f      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4a23      	ldr	r2, [pc, #140]	@ (800a108 <TIM_TI1_SetConfig+0xd8>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00b      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4a22      	ldr	r2, [pc, #136]	@ (800a10c <TIM_TI1_SetConfig+0xdc>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d007      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	4a21      	ldr	r2, [pc, #132]	@ (800a110 <TIM_TI1_SetConfig+0xe0>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d003      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4a20      	ldr	r2, [pc, #128]	@ (800a114 <TIM_TI1_SetConfig+0xe4>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d101      	bne.n	800a09a <TIM_TI1_SetConfig+0x6a>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <TIM_TI1_SetConfig+0x6c>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d008      	beq.n	800a0b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	e003      	b.n	800a0ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f043 0301 	orr.w	r3, r3, #1
 800a0b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	011b      	lsls	r3, r3, #4
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f023 030a 	bic.w	r3, r3, #10
 800a0d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f003 030a 	and.w	r3, r3, #10
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	621a      	str	r2, [r3, #32]
}
 800a0ee:	bf00      	nop
 800a0f0:	371c      	adds	r7, #28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	40012c00 	.word	0x40012c00
 800a100:	40000400 	.word	0x40000400
 800a104:	40000800 	.word	0x40000800
 800a108:	40000c00 	.word	0x40000c00
 800a10c:	40013400 	.word	0x40013400
 800a110:	40014000 	.word	0x40014000
 800a114:	40015000 	.word	0x40015000

0800a118 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	f023 0210 	bic.w	r2, r3, #16
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	021b      	lsls	r3, r3, #8
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	031b      	lsls	r3, r3, #12
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	4313      	orrs	r3, r2
 800a162:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a16a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	011b      	lsls	r3, r3, #4
 800a170:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	4313      	orrs	r3, r2
 800a178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	621a      	str	r2, [r3, #32]
}
 800a186:	bf00      	nop
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a192:	b480      	push	{r7}
 800a194:	b087      	sub	sp, #28
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	607a      	str	r2, [r7, #4]
 800a19e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f023 0303 	bic.w	r3, r3, #3
 800a1be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	011b      	lsls	r3, r3, #4
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a1e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	021b      	lsls	r3, r3, #8
 800a1e8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	621a      	str	r2, [r3, #32]
}
 800a1fe:	bf00      	nop
 800a200:	371c      	adds	r7, #28
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b087      	sub	sp, #28
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a236:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	021b      	lsls	r3, r3, #8
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	4313      	orrs	r3, r2
 800a240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a248:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	031b      	lsls	r3, r3, #12
 800a24e:	b29b      	uxth	r3, r3
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	4313      	orrs	r3, r2
 800a254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a25c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	031b      	lsls	r3, r3, #12
 800a262:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	4313      	orrs	r3, r2
 800a26a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	621a      	str	r2, [r3, #32]
}
 800a278:	bf00      	nop
 800a27a:	371c      	adds	r7, #28
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	f003 031f 	and.w	r3, r3, #31
 800a296:	2201      	movs	r2, #1
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a1a      	ldr	r2, [r3, #32]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	43db      	mvns	r3, r3
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6a1a      	ldr	r2, [r3, #32]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f003 031f 	and.w	r3, r3, #31
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	621a      	str	r2, [r3, #32]
}
 800a2c2:	bf00      	nop
 800a2c4:	371c      	adds	r7, #28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d101      	bne.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	e074      	b.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a34      	ldr	r2, [pc, #208]	@ (800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d009      	beq.n	800a326 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a33      	ldr	r2, [pc, #204]	@ (800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d004      	beq.n	800a326 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a31      	ldr	r2, [pc, #196]	@ (800a3e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d108      	bne.n	800a338 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a32c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	4313      	orrs	r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a33e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a21      	ldr	r2, [pc, #132]	@ (800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d022      	beq.n	800a3a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a368:	d01d      	beq.n	800a3a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a1f      	ldr	r2, [pc, #124]	@ (800a3ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d018      	beq.n	800a3a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d013      	beq.n	800a3a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a1c      	ldr	r2, [pc, #112]	@ (800a3f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d00e      	beq.n	800a3a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a15      	ldr	r2, [pc, #84]	@ (800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d009      	beq.n	800a3a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a18      	ldr	r2, [pc, #96]	@ (800a3f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d004      	beq.n	800a3a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a11      	ldr	r2, [pc, #68]	@ (800a3e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d10c      	bne.n	800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	40012c00 	.word	0x40012c00
 800a3e4:	40013400 	.word	0x40013400
 800a3e8:	40015000 	.word	0x40015000
 800a3ec:	40000400 	.word	0x40000400
 800a3f0:	40000800 	.word	0x40000800
 800a3f4:	40000c00 	.word	0x40000c00
 800a3f8:	40014000 	.word	0x40014000

0800a3fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a418:	bf00      	nop
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e042      	b.n	800a520 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d106      	bne.n	800a4b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7f7 fa67 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2224      	movs	r2, #36	@ 0x24
 800a4b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0201 	bic.w	r2, r2, #1
 800a4c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fb24 	bl	800ab20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f825 	bl	800a528 <UART_SetConfig>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d101      	bne.n	800a4e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e01b      	b.n	800a520 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0201 	orr.w	r2, r2, #1
 800a516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fba3 	bl	800ac64 <UART_CheckIdleState>
 800a51e:	4603      	mov	r3, r0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a52c:	b08c      	sub	sp, #48	@ 0x30
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	431a      	orrs	r2, r3
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	431a      	orrs	r2, r3
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	69db      	ldr	r3, [r3, #28]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	4baa      	ldr	r3, [pc, #680]	@ (800a800 <UART_SetConfig+0x2d8>)
 800a558:	4013      	ands	r3, r2
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a560:	430b      	orrs	r3, r1
 800a562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	68da      	ldr	r2, [r3, #12]
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a9f      	ldr	r2, [pc, #636]	@ (800a804 <UART_SetConfig+0x2dc>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d004      	beq.n	800a594 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a590:	4313      	orrs	r3, r2
 800a592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a59e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	6812      	ldr	r2, [r2, #0]
 800a5a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5a8:	430b      	orrs	r3, r1
 800a5aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b2:	f023 010f 	bic.w	r1, r3, #15
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a90      	ldr	r2, [pc, #576]	@ (800a808 <UART_SetConfig+0x2e0>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d125      	bne.n	800a618 <UART_SetConfig+0xf0>
 800a5cc:	4b8f      	ldr	r3, [pc, #572]	@ (800a80c <UART_SetConfig+0x2e4>)
 800a5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5d2:	f003 0303 	and.w	r3, r3, #3
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d81a      	bhi.n	800a610 <UART_SetConfig+0xe8>
 800a5da:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e0 <UART_SetConfig+0xb8>)
 800a5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e0:	0800a5f1 	.word	0x0800a5f1
 800a5e4:	0800a601 	.word	0x0800a601
 800a5e8:	0800a5f9 	.word	0x0800a5f9
 800a5ec:	0800a609 	.word	0x0800a609
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5f6:	e116      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5fe:	e112      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a600:	2304      	movs	r3, #4
 800a602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a606:	e10e      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a608:	2308      	movs	r3, #8
 800a60a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a60e:	e10a      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a610:	2310      	movs	r3, #16
 800a612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a616:	e106      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a7c      	ldr	r2, [pc, #496]	@ (800a810 <UART_SetConfig+0x2e8>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d138      	bne.n	800a694 <UART_SetConfig+0x16c>
 800a622:	4b7a      	ldr	r3, [pc, #488]	@ (800a80c <UART_SetConfig+0x2e4>)
 800a624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a628:	f003 030c 	and.w	r3, r3, #12
 800a62c:	2b0c      	cmp	r3, #12
 800a62e:	d82d      	bhi.n	800a68c <UART_SetConfig+0x164>
 800a630:	a201      	add	r2, pc, #4	@ (adr r2, 800a638 <UART_SetConfig+0x110>)
 800a632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a636:	bf00      	nop
 800a638:	0800a66d 	.word	0x0800a66d
 800a63c:	0800a68d 	.word	0x0800a68d
 800a640:	0800a68d 	.word	0x0800a68d
 800a644:	0800a68d 	.word	0x0800a68d
 800a648:	0800a67d 	.word	0x0800a67d
 800a64c:	0800a68d 	.word	0x0800a68d
 800a650:	0800a68d 	.word	0x0800a68d
 800a654:	0800a68d 	.word	0x0800a68d
 800a658:	0800a675 	.word	0x0800a675
 800a65c:	0800a68d 	.word	0x0800a68d
 800a660:	0800a68d 	.word	0x0800a68d
 800a664:	0800a68d 	.word	0x0800a68d
 800a668:	0800a685 	.word	0x0800a685
 800a66c:	2300      	movs	r3, #0
 800a66e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a672:	e0d8      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a674:	2302      	movs	r3, #2
 800a676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a67a:	e0d4      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a67c:	2304      	movs	r3, #4
 800a67e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a682:	e0d0      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a684:	2308      	movs	r3, #8
 800a686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a68a:	e0cc      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a68c:	2310      	movs	r3, #16
 800a68e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a692:	e0c8      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a5e      	ldr	r2, [pc, #376]	@ (800a814 <UART_SetConfig+0x2ec>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d125      	bne.n	800a6ea <UART_SetConfig+0x1c2>
 800a69e:	4b5b      	ldr	r3, [pc, #364]	@ (800a80c <UART_SetConfig+0x2e4>)
 800a6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a6a8:	2b30      	cmp	r3, #48	@ 0x30
 800a6aa:	d016      	beq.n	800a6da <UART_SetConfig+0x1b2>
 800a6ac:	2b30      	cmp	r3, #48	@ 0x30
 800a6ae:	d818      	bhi.n	800a6e2 <UART_SetConfig+0x1ba>
 800a6b0:	2b20      	cmp	r3, #32
 800a6b2:	d00a      	beq.n	800a6ca <UART_SetConfig+0x1a2>
 800a6b4:	2b20      	cmp	r3, #32
 800a6b6:	d814      	bhi.n	800a6e2 <UART_SetConfig+0x1ba>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <UART_SetConfig+0x19a>
 800a6bc:	2b10      	cmp	r3, #16
 800a6be:	d008      	beq.n	800a6d2 <UART_SetConfig+0x1aa>
 800a6c0:	e00f      	b.n	800a6e2 <UART_SetConfig+0x1ba>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6c8:	e0ad      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6d0:	e0a9      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a6d2:	2304      	movs	r3, #4
 800a6d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6d8:	e0a5      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a6da:	2308      	movs	r3, #8
 800a6dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6e0:	e0a1      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a6e2:	2310      	movs	r3, #16
 800a6e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6e8:	e09d      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a4a      	ldr	r2, [pc, #296]	@ (800a818 <UART_SetConfig+0x2f0>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d125      	bne.n	800a740 <UART_SetConfig+0x218>
 800a6f4:	4b45      	ldr	r3, [pc, #276]	@ (800a80c <UART_SetConfig+0x2e4>)
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a6fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800a700:	d016      	beq.n	800a730 <UART_SetConfig+0x208>
 800a702:	2bc0      	cmp	r3, #192	@ 0xc0
 800a704:	d818      	bhi.n	800a738 <UART_SetConfig+0x210>
 800a706:	2b80      	cmp	r3, #128	@ 0x80
 800a708:	d00a      	beq.n	800a720 <UART_SetConfig+0x1f8>
 800a70a:	2b80      	cmp	r3, #128	@ 0x80
 800a70c:	d814      	bhi.n	800a738 <UART_SetConfig+0x210>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <UART_SetConfig+0x1f0>
 800a712:	2b40      	cmp	r3, #64	@ 0x40
 800a714:	d008      	beq.n	800a728 <UART_SetConfig+0x200>
 800a716:	e00f      	b.n	800a738 <UART_SetConfig+0x210>
 800a718:	2300      	movs	r3, #0
 800a71a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a71e:	e082      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a720:	2302      	movs	r3, #2
 800a722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a726:	e07e      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a728:	2304      	movs	r3, #4
 800a72a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a72e:	e07a      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a730:	2308      	movs	r3, #8
 800a732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a736:	e076      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a738:	2310      	movs	r3, #16
 800a73a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a73e:	e072      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a35      	ldr	r2, [pc, #212]	@ (800a81c <UART_SetConfig+0x2f4>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d12a      	bne.n	800a7a0 <UART_SetConfig+0x278>
 800a74a:	4b30      	ldr	r3, [pc, #192]	@ (800a80c <UART_SetConfig+0x2e4>)
 800a74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a750:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a754:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a758:	d01a      	beq.n	800a790 <UART_SetConfig+0x268>
 800a75a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a75e:	d81b      	bhi.n	800a798 <UART_SetConfig+0x270>
 800a760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a764:	d00c      	beq.n	800a780 <UART_SetConfig+0x258>
 800a766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a76a:	d815      	bhi.n	800a798 <UART_SetConfig+0x270>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d003      	beq.n	800a778 <UART_SetConfig+0x250>
 800a770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a774:	d008      	beq.n	800a788 <UART_SetConfig+0x260>
 800a776:	e00f      	b.n	800a798 <UART_SetConfig+0x270>
 800a778:	2300      	movs	r3, #0
 800a77a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a77e:	e052      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a780:	2302      	movs	r3, #2
 800a782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a786:	e04e      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a788:	2304      	movs	r3, #4
 800a78a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a78e:	e04a      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a790:	2308      	movs	r3, #8
 800a792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a796:	e046      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a798:	2310      	movs	r3, #16
 800a79a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a79e:	e042      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a17      	ldr	r2, [pc, #92]	@ (800a804 <UART_SetConfig+0x2dc>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d13a      	bne.n	800a820 <UART_SetConfig+0x2f8>
 800a7aa:	4b18      	ldr	r3, [pc, #96]	@ (800a80c <UART_SetConfig+0x2e4>)
 800a7ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a7b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7b8:	d01a      	beq.n	800a7f0 <UART_SetConfig+0x2c8>
 800a7ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7be:	d81b      	bhi.n	800a7f8 <UART_SetConfig+0x2d0>
 800a7c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7c4:	d00c      	beq.n	800a7e0 <UART_SetConfig+0x2b8>
 800a7c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7ca:	d815      	bhi.n	800a7f8 <UART_SetConfig+0x2d0>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <UART_SetConfig+0x2b0>
 800a7d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7d4:	d008      	beq.n	800a7e8 <UART_SetConfig+0x2c0>
 800a7d6:	e00f      	b.n	800a7f8 <UART_SetConfig+0x2d0>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7de:	e022      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7e6:	e01e      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a7e8:	2304      	movs	r3, #4
 800a7ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ee:	e01a      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a7f0:	2308      	movs	r3, #8
 800a7f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7f6:	e016      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7fe:	e012      	b.n	800a826 <UART_SetConfig+0x2fe>
 800a800:	cfff69f3 	.word	0xcfff69f3
 800a804:	40008000 	.word	0x40008000
 800a808:	40013800 	.word	0x40013800
 800a80c:	40021000 	.word	0x40021000
 800a810:	40004400 	.word	0x40004400
 800a814:	40004800 	.word	0x40004800
 800a818:	40004c00 	.word	0x40004c00
 800a81c:	40005000 	.word	0x40005000
 800a820:	2310      	movs	r3, #16
 800a822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4aae      	ldr	r2, [pc, #696]	@ (800aae4 <UART_SetConfig+0x5bc>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	f040 8097 	bne.w	800a960 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a832:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a836:	2b08      	cmp	r3, #8
 800a838:	d823      	bhi.n	800a882 <UART_SetConfig+0x35a>
 800a83a:	a201      	add	r2, pc, #4	@ (adr r2, 800a840 <UART_SetConfig+0x318>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a883 	.word	0x0800a883
 800a848:	0800a86d 	.word	0x0800a86d
 800a84c:	0800a883 	.word	0x0800a883
 800a850:	0800a873 	.word	0x0800a873
 800a854:	0800a883 	.word	0x0800a883
 800a858:	0800a883 	.word	0x0800a883
 800a85c:	0800a883 	.word	0x0800a883
 800a860:	0800a87b 	.word	0x0800a87b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a864:	f7fd fcb4 	bl	80081d0 <HAL_RCC_GetPCLK1Freq>
 800a868:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a86a:	e010      	b.n	800a88e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a86c:	4b9e      	ldr	r3, [pc, #632]	@ (800aae8 <UART_SetConfig+0x5c0>)
 800a86e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a870:	e00d      	b.n	800a88e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a872:	f7fd fc3f 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 800a876:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a878:	e009      	b.n	800a88e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a87a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a87e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a880:	e005      	b.n	800a88e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a882:	2300      	movs	r3, #0
 800a884:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a88c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 8130 	beq.w	800aaf6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89a:	4a94      	ldr	r2, [pc, #592]	@ (800aaec <UART_SetConfig+0x5c4>)
 800a89c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	4413      	add	r3, r2
 800a8b4:	69ba      	ldr	r2, [r7, #24]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d305      	bcc.n	800a8c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d903      	bls.n	800a8ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8cc:	e113      	b.n	800aaf6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	60bb      	str	r3, [r7, #8]
 800a8d4:	60fa      	str	r2, [r7, #12]
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8da:	4a84      	ldr	r2, [pc, #528]	@ (800aaec <UART_SetConfig+0x5c4>)
 800a8dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	603b      	str	r3, [r7, #0]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8f0:	f7f5 fdb2 	bl	8000458 <__aeabi_uldivmod>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	f04f 0200 	mov.w	r2, #0
 800a900:	f04f 0300 	mov.w	r3, #0
 800a904:	020b      	lsls	r3, r1, #8
 800a906:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a90a:	0202      	lsls	r2, r0, #8
 800a90c:	6979      	ldr	r1, [r7, #20]
 800a90e:	6849      	ldr	r1, [r1, #4]
 800a910:	0849      	lsrs	r1, r1, #1
 800a912:	2000      	movs	r0, #0
 800a914:	460c      	mov	r4, r1
 800a916:	4605      	mov	r5, r0
 800a918:	eb12 0804 	adds.w	r8, r2, r4
 800a91c:	eb43 0905 	adc.w	r9, r3, r5
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	469a      	mov	sl, r3
 800a928:	4693      	mov	fp, r2
 800a92a:	4652      	mov	r2, sl
 800a92c:	465b      	mov	r3, fp
 800a92e:	4640      	mov	r0, r8
 800a930:	4649      	mov	r1, r9
 800a932:	f7f5 fd91 	bl	8000458 <__aeabi_uldivmod>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4613      	mov	r3, r2
 800a93c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a944:	d308      	bcc.n	800a958 <UART_SetConfig+0x430>
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a94c:	d204      	bcs.n	800a958 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	6a3a      	ldr	r2, [r7, #32]
 800a954:	60da      	str	r2, [r3, #12]
 800a956:	e0ce      	b.n	800aaf6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a95e:	e0ca      	b.n	800aaf6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a968:	d166      	bne.n	800aa38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a96a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a96e:	2b08      	cmp	r3, #8
 800a970:	d827      	bhi.n	800a9c2 <UART_SetConfig+0x49a>
 800a972:	a201      	add	r2, pc, #4	@ (adr r2, 800a978 <UART_SetConfig+0x450>)
 800a974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a978:	0800a99d 	.word	0x0800a99d
 800a97c:	0800a9a5 	.word	0x0800a9a5
 800a980:	0800a9ad 	.word	0x0800a9ad
 800a984:	0800a9c3 	.word	0x0800a9c3
 800a988:	0800a9b3 	.word	0x0800a9b3
 800a98c:	0800a9c3 	.word	0x0800a9c3
 800a990:	0800a9c3 	.word	0x0800a9c3
 800a994:	0800a9c3 	.word	0x0800a9c3
 800a998:	0800a9bb 	.word	0x0800a9bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a99c:	f7fd fc18 	bl	80081d0 <HAL_RCC_GetPCLK1Freq>
 800a9a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9a2:	e014      	b.n	800a9ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9a4:	f7fd fc2a 	bl	80081fc <HAL_RCC_GetPCLK2Freq>
 800a9a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9aa:	e010      	b.n	800a9ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9ac:	4b4e      	ldr	r3, [pc, #312]	@ (800aae8 <UART_SetConfig+0x5c0>)
 800a9ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9b0:	e00d      	b.n	800a9ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9b2:	f7fd fb9f 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 800a9b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9b8:	e009      	b.n	800a9ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9c0:	e005      	b.n	800a9ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a9cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 8090 	beq.w	800aaf6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9da:	4a44      	ldr	r2, [pc, #272]	@ (800aaec <UART_SetConfig+0x5c4>)
 800a9dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9e8:	005a      	lsls	r2, r3, #1
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	085b      	lsrs	r3, r3, #1
 800a9f0:	441a      	add	r2, r3
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	2b0f      	cmp	r3, #15
 800aa00:	d916      	bls.n	800aa30 <UART_SetConfig+0x508>
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa08:	d212      	bcs.n	800aa30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	f023 030f 	bic.w	r3, r3, #15
 800aa12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	085b      	lsrs	r3, r3, #1
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	f003 0307 	and.w	r3, r3, #7
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	8bfb      	ldrh	r3, [r7, #30]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	8bfa      	ldrh	r2, [r7, #30]
 800aa2c:	60da      	str	r2, [r3, #12]
 800aa2e:	e062      	b.n	800aaf6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa36:	e05e      	b.n	800aaf6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d828      	bhi.n	800aa92 <UART_SetConfig+0x56a>
 800aa40:	a201      	add	r2, pc, #4	@ (adr r2, 800aa48 <UART_SetConfig+0x520>)
 800aa42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa46:	bf00      	nop
 800aa48:	0800aa6d 	.word	0x0800aa6d
 800aa4c:	0800aa75 	.word	0x0800aa75
 800aa50:	0800aa7d 	.word	0x0800aa7d
 800aa54:	0800aa93 	.word	0x0800aa93
 800aa58:	0800aa83 	.word	0x0800aa83
 800aa5c:	0800aa93 	.word	0x0800aa93
 800aa60:	0800aa93 	.word	0x0800aa93
 800aa64:	0800aa93 	.word	0x0800aa93
 800aa68:	0800aa8b 	.word	0x0800aa8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa6c:	f7fd fbb0 	bl	80081d0 <HAL_RCC_GetPCLK1Freq>
 800aa70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa72:	e014      	b.n	800aa9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa74:	f7fd fbc2 	bl	80081fc <HAL_RCC_GetPCLK2Freq>
 800aa78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa7a:	e010      	b.n	800aa9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa7c:	4b1a      	ldr	r3, [pc, #104]	@ (800aae8 <UART_SetConfig+0x5c0>)
 800aa7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa80:	e00d      	b.n	800aa9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa82:	f7fd fb37 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 800aa86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa88:	e009      	b.n	800aa9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa90:	e005      	b.n	800aa9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aa92:	2300      	movs	r3, #0
 800aa94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa9c:	bf00      	nop
    }

    if (pclk != 0U)
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d028      	beq.n	800aaf6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa8:	4a10      	ldr	r2, [pc, #64]	@ (800aaec <UART_SetConfig+0x5c4>)
 800aaaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaae:	461a      	mov	r2, r3
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	085b      	lsrs	r3, r3, #1
 800aabc:	441a      	add	r2, r3
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	2b0f      	cmp	r3, #15
 800aacc:	d910      	bls.n	800aaf0 <UART_SetConfig+0x5c8>
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aad4:	d20c      	bcs.n	800aaf0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	b29a      	uxth	r2, r3
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	60da      	str	r2, [r3, #12]
 800aae0:	e009      	b.n	800aaf6 <UART_SetConfig+0x5ce>
 800aae2:	bf00      	nop
 800aae4:	40008000 	.word	0x40008000
 800aae8:	00f42400 	.word	0x00f42400
 800aaec:	0800d6f0 	.word	0x0800d6f0
      }
      else
      {
        ret = HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3730      	adds	r7, #48	@ 0x30
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ab20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2c:	f003 0308 	and.w	r3, r3, #8
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00a      	beq.n	800ab4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	430a      	orrs	r2, r1
 800ab48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00a      	beq.n	800ab6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	430a      	orrs	r2, r1
 800ab6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00a      	beq.n	800ab8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab92:	f003 0304 	and.w	r3, r3, #4
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00a      	beq.n	800abb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	430a      	orrs	r2, r1
 800abae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb4:	f003 0310 	and.w	r3, r3, #16
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00a      	beq.n	800abd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	430a      	orrs	r2, r1
 800abd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd6:	f003 0320 	and.w	r3, r3, #32
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00a      	beq.n	800abf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	430a      	orrs	r2, r1
 800abf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d01a      	beq.n	800ac36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	430a      	orrs	r2, r1
 800ac14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac1e:	d10a      	bne.n	800ac36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00a      	beq.n	800ac58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	430a      	orrs	r2, r1
 800ac56:	605a      	str	r2, [r3, #4]
  }
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b098      	sub	sp, #96	@ 0x60
 800ac68:	af02      	add	r7, sp, #8
 800ac6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac74:	f7f8 fcd4 	bl	8003620 <HAL_GetTick>
 800ac78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0308 	and.w	r3, r3, #8
 800ac84:	2b08      	cmp	r3, #8
 800ac86:	d12f      	bne.n	800ace8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac90:	2200      	movs	r2, #0
 800ac92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f88e 	bl	800adb8 <UART_WaitOnFlagUntilTimeout>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d022      	beq.n	800ace8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acaa:	e853 3f00 	ldrex	r3, [r3]
 800acae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acb6:	653b      	str	r3, [r7, #80]	@ 0x50
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acc0:	647b      	str	r3, [r7, #68]	@ 0x44
 800acc2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acc8:	e841 2300 	strex	r3, r2, [r1]
 800accc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e6      	bne.n	800aca2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2220      	movs	r2, #32
 800acd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e063      	b.n	800adb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0304 	and.w	r3, r3, #4
 800acf2:	2b04      	cmp	r3, #4
 800acf4:	d149      	bne.n	800ad8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acf6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acfe:	2200      	movs	r2, #0
 800ad00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f857 	bl	800adb8 <UART_WaitOnFlagUntilTimeout>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d03c      	beq.n	800ad8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	623b      	str	r3, [r7, #32]
   return(result);
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e6      	bne.n	800ad10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3308      	adds	r3, #8
 800ad48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	e853 3f00 	ldrex	r3, [r3]
 800ad50:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f023 0301 	bic.w	r3, r3, #1
 800ad58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad62:	61fa      	str	r2, [r7, #28]
 800ad64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	69b9      	ldr	r1, [r7, #24]
 800ad68:	69fa      	ldr	r2, [r7, #28]
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	617b      	str	r3, [r7, #20]
   return(result);
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e5      	bne.n	800ad42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2220      	movs	r2, #32
 800ad7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e012      	b.n	800adb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2220      	movs	r2, #32
 800ad96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3758      	adds	r7, #88	@ 0x58
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	603b      	str	r3, [r7, #0]
 800adc4:	4613      	mov	r3, r2
 800adc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adc8:	e04f      	b.n	800ae6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add0:	d04b      	beq.n	800ae6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800add2:	f7f8 fc25 	bl	8003620 <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d302      	bcc.n	800ade8 <UART_WaitOnFlagUntilTimeout+0x30>
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	e04e      	b.n	800ae8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0304 	and.w	r3, r3, #4
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d037      	beq.n	800ae6a <UART_WaitOnFlagUntilTimeout+0xb2>
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b80      	cmp	r3, #128	@ 0x80
 800adfe:	d034      	beq.n	800ae6a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b40      	cmp	r3, #64	@ 0x40
 800ae04:	d031      	beq.n	800ae6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	f003 0308 	and.w	r3, r3, #8
 800ae10:	2b08      	cmp	r3, #8
 800ae12:	d110      	bne.n	800ae36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2208      	movs	r2, #8
 800ae1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 f838 	bl	800ae92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2208      	movs	r2, #8
 800ae26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e029      	b.n	800ae8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae44:	d111      	bne.n	800ae6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 f81e 	bl	800ae92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2220      	movs	r2, #32
 800ae5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e00f      	b.n	800ae8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69da      	ldr	r2, [r3, #28]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	4013      	ands	r3, r2
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	bf0c      	ite	eq
 800ae7a:	2301      	moveq	r3, #1
 800ae7c:	2300      	movne	r3, #0
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	461a      	mov	r2, r3
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d0a0      	beq.n	800adca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b095      	sub	sp, #84	@ 0x54
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea2:	e853 3f00 	ldrex	r3, [r3]
 800aea6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aeae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800aeba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aebe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e6      	bne.n	800ae9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3308      	adds	r3, #8
 800aed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	e853 3f00 	ldrex	r3, [r3]
 800aeda:	61fb      	str	r3, [r7, #28]
   return(result);
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aee2:	f023 0301 	bic.w	r3, r3, #1
 800aee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3308      	adds	r3, #8
 800aeee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aef8:	e841 2300 	strex	r3, r2, [r1]
 800aefc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e3      	bne.n	800aecc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d118      	bne.n	800af3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	60bb      	str	r3, [r7, #8]
   return(result);
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f023 0310 	bic.w	r3, r3, #16
 800af20:	647b      	str	r3, [r7, #68]	@ 0x44
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af2a:	61bb      	str	r3, [r7, #24]
 800af2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2e:	6979      	ldr	r1, [r7, #20]
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	e841 2300 	strex	r3, r2, [r1]
 800af36:	613b      	str	r3, [r7, #16]
   return(result);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1e6      	bne.n	800af0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af52:	bf00      	nop
 800af54:	3754      	adds	r7, #84	@ 0x54
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af5e:	b480      	push	{r7}
 800af60:	b085      	sub	sp, #20
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d101      	bne.n	800af74 <HAL_UARTEx_DisableFifoMode+0x16>
 800af70:	2302      	movs	r3, #2
 800af72:	e027      	b.n	800afc4 <HAL_UARTEx_DisableFifoMode+0x66>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2224      	movs	r2, #36	@ 0x24
 800af80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f022 0201 	bic.w	r2, r2, #1
 800af9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800afa2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2220      	movs	r2, #32
 800afb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d101      	bne.n	800afe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800afe4:	2302      	movs	r3, #2
 800afe6:	e02d      	b.n	800b044 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2224      	movs	r2, #36	@ 0x24
 800aff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f022 0201 	bic.w	r2, r2, #1
 800b00e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	430a      	orrs	r2, r1
 800b022:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f84f 	bl	800b0c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2220      	movs	r2, #32
 800b036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d101      	bne.n	800b064 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b060:	2302      	movs	r3, #2
 800b062:	e02d      	b.n	800b0c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2224      	movs	r2, #36	@ 0x24
 800b070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f022 0201 	bic.w	r2, r2, #1
 800b08a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	683a      	ldr	r2, [r7, #0]
 800b09c:	430a      	orrs	r2, r1
 800b09e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f811 	bl	800b0c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d108      	bne.n	800b0ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0e8:	e031      	b.n	800b14e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0ea:	2308      	movs	r3, #8
 800b0ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0ee:	2308      	movs	r3, #8
 800b0f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	0e5b      	lsrs	r3, r3, #25
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	f003 0307 	and.w	r3, r3, #7
 800b100:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	0f5b      	lsrs	r3, r3, #29
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	f003 0307 	and.w	r3, r3, #7
 800b110:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b112:	7bbb      	ldrb	r3, [r7, #14]
 800b114:	7b3a      	ldrb	r2, [r7, #12]
 800b116:	4911      	ldr	r1, [pc, #68]	@ (800b15c <UARTEx_SetNbDataToProcess+0x94>)
 800b118:	5c8a      	ldrb	r2, [r1, r2]
 800b11a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b11e:	7b3a      	ldrb	r2, [r7, #12]
 800b120:	490f      	ldr	r1, [pc, #60]	@ (800b160 <UARTEx_SetNbDataToProcess+0x98>)
 800b122:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b124:	fb93 f3f2 	sdiv	r3, r3, r2
 800b128:	b29a      	uxth	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	7b7a      	ldrb	r2, [r7, #13]
 800b134:	4909      	ldr	r1, [pc, #36]	@ (800b15c <UARTEx_SetNbDataToProcess+0x94>)
 800b136:	5c8a      	ldrb	r2, [r1, r2]
 800b138:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b13c:	7b7a      	ldrb	r2, [r7, #13]
 800b13e:	4908      	ldr	r1, [pc, #32]	@ (800b160 <UARTEx_SetNbDataToProcess+0x98>)
 800b140:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b142:	fb93 f3f2 	sdiv	r3, r3, r2
 800b146:	b29a      	uxth	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b14e:	bf00      	nop
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	0800d708 	.word	0x0800d708
 800b160:	0800d710 	.word	0x0800d710

0800b164 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b096      	sub	sp, #88	@ 0x58
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
 800b170:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3303      	adds	r3, #3
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b17c:	f3ef 8310 	mrs	r3, PRIMASK
 800b180:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800b182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800b184:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b186:	b672      	cpsid	i
#endif
    return(int_posture);
 800b188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800b18a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b18c:	4b55      	ldr	r3, [pc, #340]	@ (800b2e4 <_tx_byte_allocate+0x180>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800b192:	2300      	movs	r3, #0
 800b194:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b19a:	621a      	str	r2, [r3, #32]
 800b19c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b19e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	f383 8810 	msr	PRIMASK, r3
}
 800b1a6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800b1a8:	6879      	ldr	r1, [r7, #4]
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f000 f9b2 	bl	800b514 <_tx_byte_pool_search>
 800b1b0:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b1ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1bc:	b672      	cpsid	i
    return(int_posture);
 800b1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800b1c0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800b1c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1cc:	e006      	b.n	800b1dc <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d101      	bne.n	800b1dc <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800b1dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0d9      	beq.n	800b196 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1e6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800b1e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d008      	beq.n	800b200 <_tx_byte_allocate+0x9c>
 800b1ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1f0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1f2:	6a3b      	ldr	r3, [r7, #32]
 800b1f4:	f383 8810 	msr	PRIMASK, r3
}
 800b1f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1fe:	e06c      	b.n	800b2da <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d061      	beq.n	800b2ca <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b206:	4b38      	ldr	r3, [pc, #224]	@ (800b2e8 <_tx_byte_allocate+0x184>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d007      	beq.n	800b21e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800b20e:	2310      	movs	r3, #16
 800b210:	653b      	str	r3, [r7, #80]	@ 0x50
 800b212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b214:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	f383 8810 	msr	PRIMASK, r3
}
 800b21c:	e05d      	b.n	800b2da <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800b21e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b220:	4a32      	ldr	r2, [pc, #200]	@ (800b2ec <_tx_byte_allocate+0x188>)
 800b222:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800b224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800b22a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800b230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b238:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b240:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b248:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b256:	2b00      	cmp	r3, #0
 800b258:	d109      	bne.n	800b26e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b25e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b264:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b26a:	675a      	str	r2, [r3, #116]	@ 0x74
 800b26c:	e011      	b.n	800b292 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b272:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b276:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b278:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b27a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b27e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b284:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b28a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b28e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b290:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800b292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b294:	2209      	movs	r2, #9
 800b296:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b29a:	2201      	movs	r2, #1
 800b29c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b29e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b2a4:	4b10      	ldr	r3, [pc, #64]	@ (800b2e8 <_tx_byte_allocate+0x184>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	4a0f      	ldr	r2, [pc, #60]	@ (800b2e8 <_tx_byte_allocate+0x184>)
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2b0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	f383 8810 	msr	PRIMASK, r3
}
 800b2b8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b2ba:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b2bc:	f000 ff96 	bl	800c1ec <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b2c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2c8:	e007      	b.n	800b2da <_tx_byte_allocate+0x176>
 800b2ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2cc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f383 8810 	msr	PRIMASK, r3
}
 800b2d4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800b2d6:	2310      	movs	r3, #16
 800b2d8:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800b2da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3758      	adds	r7, #88	@ 0x58
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	20010aa8 	.word	0x20010aa8
 800b2e8:	20010b40 	.word	0x20010b40
 800b2ec:	0800b2f1 	.word	0x0800b2f1

0800b2f0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b08e      	sub	sp, #56	@ 0x38
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b2fe:	623b      	str	r3, [r7, #32]
    return(posture);
 800b300:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b302:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b304:	b672      	cpsid	i
    return(int_posture);
 800b306:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800b308:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b30e:	4a33      	ldr	r2, [pc, #204]	@ (800b3dc <_tx_byte_pool_cleanup+0xec>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d158      	bne.n	800b3c6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d152      	bne.n	800b3c6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b324:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800b326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d04c      	beq.n	800b3c6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a2b      	ldr	r2, [pc, #172]	@ (800b3e0 <_tx_byte_pool_cleanup+0xf0>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d147      	bne.n	800b3c6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800b336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d043      	beq.n	800b3c6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800b344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b348:	1e5a      	subs	r2, r3, #1
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b352:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d103      	bne.n	800b362 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800b35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35c:	2200      	movs	r2, #0
 800b35e:	625a      	str	r2, [r3, #36]	@ 0x24
 800b360:	e013      	b.n	800b38a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b366:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b36c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b372:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b378:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	429a      	cmp	r2, r3
 800b382:	d102      	bne.n	800b38a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800b384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b388:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b38e:	2b09      	cmp	r3, #9
 800b390:	d119      	bne.n	800b3c6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2210      	movs	r2, #16
 800b396:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b39a:	4b12      	ldr	r3, [pc, #72]	@ (800b3e4 <_tx_byte_pool_cleanup+0xf4>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	4a10      	ldr	r2, [pc, #64]	@ (800b3e4 <_tx_byte_pool_cleanup+0xf4>)
 800b3a2:	6013      	str	r3, [r2, #0]
 800b3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	f383 8810 	msr	PRIMASK, r3
}
 800b3ae:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fe1b 	bl	800bfec <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b3bc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b3be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3c0:	b672      	cpsid	i
    return(int_posture);
 800b3c2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f383 8810 	msr	PRIMASK, r3
}
 800b3d0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b3d2:	bf00      	nop
 800b3d4:	3738      	adds	r7, #56	@ 0x38
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	0800b2f1 	.word	0x0800b2f1
 800b3e0:	42595445 	.word	0x42595445
 800b3e4:	20010b40 	.word	0x20010b40

0800b3e8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08e      	sub	sp, #56	@ 0x38
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b3f6:	2234      	movs	r2, #52	@ 0x34
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f002 f84c 	bl	800d498 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	f023 0303 	bic.w	r3, r3, #3
 800b406:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	f1a3 0208 	sub.w	r2, r3, #8
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2202      	movs	r2, #2
 800b434:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b43a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	4413      	add	r3, r2
 800b440:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b444:	3b04      	subs	r3, #4
 800b446:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b454:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b458:	3b04      	subs	r3, #4
 800b45a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800b46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b470:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b472:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47a:	3304      	adds	r3, #4
 800b47c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b480:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b484:	4a1f      	ldr	r2, [pc, #124]	@ (800b504 <_tx_byte_pool_create+0x11c>)
 800b486:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b48e:	f3ef 8310 	mrs	r3, PRIMASK
 800b492:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b494:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b496:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b498:	b672      	cpsid	i
    return(int_posture);
 800b49a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b49c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	4a19      	ldr	r2, [pc, #100]	@ (800b508 <_tx_byte_pool_create+0x120>)
 800b4a2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b4a4:	4b19      	ldr	r3, [pc, #100]	@ (800b50c <_tx_byte_pool_create+0x124>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d109      	bne.n	800b4c0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b4ac:	4a18      	ldr	r2, [pc, #96]	@ (800b510 <_tx_byte_pool_create+0x128>)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b4be:	e011      	b.n	800b4e4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b4c0:	4b13      	ldr	r3, [pc, #76]	@ (800b510 <_tx_byte_pool_create+0x128>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ca:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b4cc:	6a3b      	ldr	r3, [r7, #32]
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	69fa      	ldr	r2, [r7, #28]
 800b4dc:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6a3a      	ldr	r2, [r7, #32]
 800b4e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b4e4:	4b09      	ldr	r3, [pc, #36]	@ (800b50c <_tx_byte_pool_create+0x124>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	4a08      	ldr	r2, [pc, #32]	@ (800b50c <_tx_byte_pool_create+0x124>)
 800b4ec:	6013      	str	r3, [r2, #0]
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	f383 8810 	msr	PRIMASK, r3
}
 800b4f8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3738      	adds	r7, #56	@ 0x38
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	ffffeeee 	.word	0xffffeeee
 800b508:	42595445 	.word	0x42595445
 800b50c:	20010a9c 	.word	0x20010a9c
 800b510:	20010a98 	.word	0x20010a98

0800b514 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b514:	b480      	push	{r7}
 800b516:	b097      	sub	sp, #92	@ 0x5c
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800b51e:	2300      	movs	r3, #0
 800b520:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b522:	f3ef 8310 	mrs	r3, PRIMASK
 800b526:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800b52a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b52c:	b672      	cpsid	i
    return(int_posture);
 800b52e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800b530:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	689a      	ldr	r2, [r3, #8]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	3b02      	subs	r3, #2
 800b53c:	00db      	lsls	r3, r3, #3
 800b53e:	4413      	add	r3, r2
 800b540:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b546:	429a      	cmp	r2, r3
 800b548:	d308      	bcc.n	800b55c <_tx_byte_pool_search+0x48>
 800b54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b54c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	f383 8810 	msr	PRIMASK, r3
}
 800b554:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800b556:	2300      	movs	r3, #0
 800b558:	653b      	str	r3, [r7, #80]	@ 0x50
 800b55a:	e0dd      	b.n	800b718 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b55c:	4b72      	ldr	r3, [pc, #456]	@ (800b728 <_tx_byte_pool_search+0x214>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b566:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	3301      	adds	r3, #1
 800b574:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800b576:	2300      	movs	r3, #0
 800b578:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b57a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b57c:	3304      	adds	r3, #4
 800b57e:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b582:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a68      	ldr	r2, [pc, #416]	@ (800b72c <_tx_byte_pool_search+0x218>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d143      	bne.n	800b616 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800b58e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b590:	2b00      	cmp	r3, #0
 800b592:	d104      	bne.n	800b59e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b598:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800b59a:	2301      	movs	r3, #1
 800b59c:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b59e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5a0:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b5a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b5b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5b2:	3b08      	subs	r3, #8
 800b5b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800b5b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d257      	bcs.n	800b66e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800b5be:	2300      	movs	r3, #0
 800b5c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ca:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a56      	ldr	r2, [pc, #344]	@ (800b72c <_tx_byte_pool_search+0x218>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d113      	bne.n	800b5fe <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800b5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	1e5a      	subs	r2, r3, #1
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d114      	bne.n	800b620 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b5fa:	615a      	str	r2, [r3, #20]
 800b5fc:	e010      	b.n	800b620 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b600:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800b602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800b608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d008      	beq.n	800b620 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800b60e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b610:	3b01      	subs	r3, #1
 800b612:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b614:	e004      	b.n	800b620 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b618:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800b61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800b620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800b626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b628:	3b01      	subs	r3, #1
 800b62a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b62c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b62e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	f383 8810 	msr	PRIMASK, r3
}
 800b636:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b638:	f3ef 8310 	mrs	r3, PRIMASK
 800b63c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b63e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b640:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b642:	b672      	cpsid	i
    return(int_posture);
 800b644:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800b646:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b64e:	429a      	cmp	r2, r3
 800b650:	d009      	beq.n	800b666 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	3301      	adds	r3, #1
 800b65e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b664:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800b666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d186      	bne.n	800b57a <_tx_byte_pool_search+0x66>
 800b66c:	e000      	b.n	800b670 <_tx_byte_pool_search+0x15c>
                    break;
 800b66e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800b670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b672:	2b00      	cmp	r3, #0
 800b674:	d048      	beq.n	800b708 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800b676:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	2b13      	cmp	r3, #19
 800b67e:	d91e      	bls.n	800b6be <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	3308      	adds	r3, #8
 800b684:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b686:	4413      	add	r3, r2
 800b688:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68c:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b68e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b690:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b698:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b69c:	3304      	adds	r3, #4
 800b69e:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a2:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800b6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a6:	4a21      	ldr	r2, [pc, #132]	@ (800b72c <_tx_byte_pool_search+0x218>)
 800b6a8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6b8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b6be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c6:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	689a      	ldr	r2, [r3, #8]
 800b6d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	f1a3 0208 	sub.w	r2, r3, #8
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d105      	bne.n	800b6f4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6ea:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	615a      	str	r2, [r3, #20]
 800b6f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6f6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f383 8810 	msr	PRIMASK, r3
}
 800b6fe:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b702:	3308      	adds	r3, #8
 800b704:	653b      	str	r3, [r7, #80]	@ 0x50
 800b706:	e007      	b.n	800b718 <_tx_byte_pool_search+0x204>
 800b708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b70a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	f383 8810 	msr	PRIMASK, r3
}
 800b712:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b714:	2300      	movs	r3, #0
 800b716:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	375c      	adds	r7, #92	@ 0x5c
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	20010aa8 	.word	0x20010aa8
 800b72c:	ffffeeee 	.word	0xffffeeee

0800b730 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b734:	f000 fb18 	bl	800bd68 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b738:	f001 f880 	bl	800c83c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b73c:	4b12      	ldr	r3, [pc, #72]	@ (800b788 <_tx_initialize_high_level+0x58>)
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
 800b742:	4b12      	ldr	r3, [pc, #72]	@ (800b78c <_tx_initialize_high_level+0x5c>)
 800b744:	2200      	movs	r2, #0
 800b746:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b748:	4b11      	ldr	r3, [pc, #68]	@ (800b790 <_tx_initialize_high_level+0x60>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	4b11      	ldr	r3, [pc, #68]	@ (800b794 <_tx_initialize_high_level+0x64>)
 800b750:	2200      	movs	r2, #0
 800b752:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b754:	4b10      	ldr	r3, [pc, #64]	@ (800b798 <_tx_initialize_high_level+0x68>)
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	4b10      	ldr	r3, [pc, #64]	@ (800b79c <_tx_initialize_high_level+0x6c>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b760:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a0 <_tx_initialize_high_level+0x70>)
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a4 <_tx_initialize_high_level+0x74>)
 800b768:	2200      	movs	r2, #0
 800b76a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b76c:	4b0e      	ldr	r3, [pc, #56]	@ (800b7a8 <_tx_initialize_high_level+0x78>)
 800b76e:	2200      	movs	r2, #0
 800b770:	601a      	str	r2, [r3, #0]
 800b772:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ac <_tx_initialize_high_level+0x7c>)
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b778:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b0 <_tx_initialize_high_level+0x80>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]
 800b77e:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b4 <_tx_initialize_high_level+0x84>)
 800b780:	2200      	movs	r2, #0
 800b782:	601a      	str	r2, [r3, #0]
#endif
}
 800b784:	bf00      	nop
 800b786:	bd80      	pop	{r7, pc}
 800b788:	20010a70 	.word	0x20010a70
 800b78c:	20010a74 	.word	0x20010a74
 800b790:	20010a78 	.word	0x20010a78
 800b794:	20010a7c 	.word	0x20010a7c
 800b798:	20010a80 	.word	0x20010a80
 800b79c:	20010a84 	.word	0x20010a84
 800b7a0:	20010a90 	.word	0x20010a90
 800b7a4:	20010a94 	.word	0x20010a94
 800b7a8:	20010a98 	.word	0x20010a98
 800b7ac:	20010a9c 	.word	0x20010a9c
 800b7b0:	20010a88 	.word	0x20010a88
 800b7b4:	20010a8c 	.word	0x20010a8c

0800b7b8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b7bc:	4b10      	ldr	r3, [pc, #64]	@ (800b800 <_tx_initialize_kernel_enter+0x48>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800b7c4:	d00c      	beq.n	800b7e0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b7c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b800 <_tx_initialize_kernel_enter+0x48>)
 800b7c8:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800b7cc:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b7ce:	f7f4 fd27 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b7d2:	f7ff ffad 	bl	800b730 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b804 <_tx_initialize_kernel_enter+0x4c>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	4a09      	ldr	r2, [pc, #36]	@ (800b804 <_tx_initialize_kernel_enter+0x4c>)
 800b7de:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b7e0:	4b07      	ldr	r3, [pc, #28]	@ (800b800 <_tx_initialize_kernel_enter+0x48>)
 800b7e2:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800b7e6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b7e8:	4b07      	ldr	r3, [pc, #28]	@ (800b808 <_tx_initialize_kernel_enter+0x50>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7f4 ffab 	bl	8000748 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b7f2:	4b03      	ldr	r3, [pc, #12]	@ (800b800 <_tx_initialize_kernel_enter+0x48>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b7f8:	f7f4 fd52 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b7fc:	bf00      	nop
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	2000004c 	.word	0x2000004c
 800b804:	20010b40 	.word	0x20010b40
 800b808:	20010aa0 	.word	0x20010aa0

0800b80c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08e      	sub	sp, #56	@ 0x38
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b816:	f3ef 8310 	mrs	r3, PRIMASK
 800b81a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b81c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b81e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b820:	b672      	cpsid	i
    return(int_posture);
 800b822:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800b824:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b82a:	4a33      	ldr	r2, [pc, #204]	@ (800b8f8 <_tx_semaphore_cleanup+0xec>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d158      	bne.n	800b8e2 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d152      	bne.n	800b8e2 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b840:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800b842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b844:	2b00      	cmp	r3, #0
 800b846:	d04c      	beq.n	800b8e2 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800b848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a2b      	ldr	r2, [pc, #172]	@ (800b8fc <_tx_semaphore_cleanup+0xf0>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d147      	bne.n	800b8e2 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800b852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d043      	beq.n	800b8e2 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2200      	movs	r2, #0
 800b85e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800b860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	1e5a      	subs	r2, r3, #1
 800b866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b868:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b872:	2b00      	cmp	r3, #0
 800b874:	d103      	bne.n	800b87e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b878:	2200      	movs	r2, #0
 800b87a:	60da      	str	r2, [r3, #12]
 800b87c:	e013      	b.n	800b8a6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b882:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b888:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b88e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b894:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d102      	bne.n	800b8a6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8a4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8aa:	2b06      	cmp	r3, #6
 800b8ac:	d119      	bne.n	800b8e2 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	220d      	movs	r2, #13
 800b8b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b8b6:	4b12      	ldr	r3, [pc, #72]	@ (800b900 <_tx_semaphore_cleanup+0xf4>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	4a10      	ldr	r2, [pc, #64]	@ (800b900 <_tx_semaphore_cleanup+0xf4>)
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	f383 8810 	msr	PRIMASK, r3
}
 800b8ca:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fb8d 	bl	800bfec <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b8d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b8da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8dc:	b672      	cpsid	i
    return(int_posture);
 800b8de:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b8e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f383 8810 	msr	PRIMASK, r3
}
 800b8ec:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b8ee:	bf00      	nop
 800b8f0:	3738      	adds	r7, #56	@ 0x38
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	0800b80d 	.word	0x0800b80d
 800b8fc:	53454d41 	.word	0x53454d41
 800b900:	20010b40 	.word	0x20010b40

0800b904 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	@ 0x28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800b910:	221c      	movs	r2, #28
 800b912:	2100      	movs	r1, #0
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f001 fdbf 	bl	800d498 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b926:	f3ef 8310 	mrs	r3, PRIMASK
 800b92a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b92c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b92e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b930:	b672      	cpsid	i
    return(int_posture);
 800b932:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800b934:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	4a18      	ldr	r2, [pc, #96]	@ (800b99c <_tx_semaphore_create+0x98>)
 800b93a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800b93c:	4b18      	ldr	r3, [pc, #96]	@ (800b9a0 <_tx_semaphore_create+0x9c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d109      	bne.n	800b958 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800b944:	4a17      	ldr	r2, [pc, #92]	@ (800b9a4 <_tx_semaphore_create+0xa0>)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	619a      	str	r2, [r3, #24]
 800b956:	e011      	b.n	800b97c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800b958:	4b12      	ldr	r3, [pc, #72]	@ (800b9a4 <_tx_semaphore_create+0xa0>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	69fa      	ldr	r2, [r7, #28]
 800b974:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6a3a      	ldr	r2, [r7, #32]
 800b97a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800b97c:	4b08      	ldr	r3, [pc, #32]	@ (800b9a0 <_tx_semaphore_create+0x9c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3301      	adds	r3, #1
 800b982:	4a07      	ldr	r2, [pc, #28]	@ (800b9a0 <_tx_semaphore_create+0x9c>)
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b988:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	f383 8810 	msr	PRIMASK, r3
}
 800b990:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3728      	adds	r7, #40	@ 0x28
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	53454d41 	.word	0x53454d41
 800b9a0:	20010a74 	.word	0x20010a74
 800b9a4:	20010a70 	.word	0x20010a70

0800b9a8 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08e      	sub	sp, #56	@ 0x38
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ba:	623b      	str	r3, [r7, #32]
    return(posture);
 800b9bc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b9be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9c0:	b672      	cpsid	i
    return(int_posture);
 800b9c2:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800b9c4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	1e5a      	subs	r2, r3, #1
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	609a      	str	r2, [r3, #8]
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	f383 8810 	msr	PRIMASK, r3
}
 800b9e2:	e068      	b.n	800bab6 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d05d      	beq.n	800baa6 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b9ea:	4b35      	ldr	r3, [pc, #212]	@ (800bac0 <_tx_semaphore_get+0x118>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d008      	beq.n	800ba04 <_tx_semaphore_get+0x5c>
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f383 8810 	msr	PRIMASK, r3
}
 800b9fc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800b9fe:	230d      	movs	r3, #13
 800ba00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba02:	e058      	b.n	800bab6 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ba04:	4b2f      	ldr	r3, [pc, #188]	@ (800bac4 <_tx_semaphore_get+0x11c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800ba0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba0c:	4a2e      	ldr	r2, [pc, #184]	@ (800bac8 <_tx_semaphore_get+0x120>)
 800ba0e:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800ba10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800ba16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ba1c:	1c5a      	adds	r2, r3, #1
 800ba1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba20:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d109      	bne.n	800ba40 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba30:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800ba32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba36:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800ba38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba3c:	675a      	str	r2, [r3, #116]	@ 0x74
 800ba3e:	e011      	b.n	800ba64 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ba46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba4a:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ba4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ba52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba56:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ba58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba5c:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ba5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba62:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	1c5a      	adds	r2, r3, #1
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800ba6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba70:	2206      	movs	r2, #6
 800ba72:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ba74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba76:	2201      	movs	r2, #1
 800ba78:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ba7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ba80:	4b0f      	ldr	r3, [pc, #60]	@ (800bac0 <_tx_semaphore_get+0x118>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	3301      	adds	r3, #1
 800ba86:	4a0e      	ldr	r2, [pc, #56]	@ (800bac0 <_tx_semaphore_get+0x118>)
 800ba88:	6013      	str	r3, [r2, #0]
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	f383 8810 	msr	PRIMASK, r3
}
 800ba94:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ba96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba98:	f000 fba8 	bl	800c1ec <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ba9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baa2:	637b      	str	r3, [r7, #52]	@ 0x34
 800baa4:	e007      	b.n	800bab6 <_tx_semaphore_get+0x10e>
 800baa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f383 8810 	msr	PRIMASK, r3
}
 800bab0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800bab2:	230d      	movs	r3, #13
 800bab4:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800bab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3738      	adds	r7, #56	@ 0x38
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20010b40 	.word	0x20010b40
 800bac4:	20010aa8 	.word	0x20010aa8
 800bac8:	0800b80d 	.word	0x0800b80d

0800bacc <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08c      	sub	sp, #48	@ 0x30
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bad4:	f3ef 8310 	mrs	r3, PRIMASK
 800bad8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bada:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800badc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bade:	b672      	cpsid	i
    return(int_posture);
 800bae0:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800bae2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800baea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	1c5a      	adds	r2, r3, #1
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	609a      	str	r2, [r3, #8]
 800bafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	f383 8810 	msr	PRIMASK, r3
}
 800bb04:	e033      	b.n	800bb6e <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800bb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d103      	bne.n	800bb20 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	60da      	str	r2, [r3, #12]
 800bb1e:	e00e      	b.n	800bb3e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb24:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a3a      	ldr	r2, [r7, #32]
 800bb2a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb30:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bb32:	6a3b      	ldr	r3, [r7, #32]
 800bb34:	69fa      	ldr	r2, [r7, #28]
 800bb36:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	6a3a      	ldr	r2, [r7, #32]
 800bb3c:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb42:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb46:	2200      	movs	r2, #0
 800bb48:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800bb52:	4b09      	ldr	r3, [pc, #36]	@ (800bb78 <_tx_semaphore_put+0xac>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3301      	adds	r3, #1
 800bb58:	4a07      	ldr	r2, [pc, #28]	@ (800bb78 <_tx_semaphore_put+0xac>)
 800bb5a:	6013      	str	r3, [r2, #0]
 800bb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f383 8810 	msr	PRIMASK, r3
}
 800bb66:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800bb68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb6a:	f000 fa3f 	bl	800bfec <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3730      	adds	r7, #48	@ 0x30
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	20010b40 	.word	0x20010b40

0800bb7c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b092      	sub	sp, #72	@ 0x48
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800bb8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bb90:	21ef      	movs	r1, #239	@ 0xef
 800bb92:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bb94:	f001 fc80 	bl	800d498 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800bb98:	22b0      	movs	r2, #176	@ 0xb0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f001 fc7b 	bl	800d498 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bbb8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bbbe:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bbd2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bbd8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800bbe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800bbe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bbec:	4413      	add	r3, r2
 800bbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bbf4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800bbf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d007      	beq.n	800bc0e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800bc0c:	e006      	b.n	800bc1c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc12:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2203      	movs	r2, #3
 800bc20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4a48      	ldr	r2, [pc, #288]	@ (800bd48 <_tx_thread_create+0x1cc>)
 800bc26:	655a      	str	r2, [r3, #84]	@ 0x54
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800bc2e:	4947      	ldr	r1, [pc, #284]	@ (800bd4c <_tx_thread_create+0x1d0>)
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f7f4 fb95 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc36:	f3ef 8310 	mrs	r3, PRIMASK
 800bc3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bc3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc40:	b672      	cpsid	i
    return(int_posture);
 800bc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800bc44:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4a41      	ldr	r2, [pc, #260]	@ (800bd50 <_tx_thread_create+0x1d4>)
 800bc4a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800bc4c:	4b41      	ldr	r3, [pc, #260]	@ (800bd54 <_tx_thread_create+0x1d8>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10b      	bne.n	800bc6c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800bc54:	4a40      	ldr	r2, [pc, #256]	@ (800bd58 <_tx_thread_create+0x1dc>)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800bc6a:	e016      	b.n	800bc9a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800bc6c:	4b3a      	ldr	r3, [pc, #232]	@ (800bd58 <_tx_thread_create+0x1dc>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800bc72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc78:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800bc7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800bc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800bc9a:	4b2e      	ldr	r3, [pc, #184]	@ (800bd54 <_tx_thread_create+0x1d8>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	4a2c      	ldr	r2, [pc, #176]	@ (800bd54 <_tx_thread_create+0x1d8>)
 800bca2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bca4:	4b2d      	ldr	r3, [pc, #180]	@ (800bd5c <_tx_thread_create+0x1e0>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	4a2c      	ldr	r2, [pc, #176]	@ (800bd5c <_tx_thread_create+0x1e0>)
 800bcac:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800bcae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d129      	bne.n	800bd08 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bcb4:	f3ef 8305 	mrs	r3, IPSR
 800bcb8:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800bcba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800bcbc:	4b28      	ldr	r3, [pc, #160]	@ (800bd60 <_tx_thread_create+0x1e4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bcc6:	d30d      	bcc.n	800bce4 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800bcc8:	4b26      	ldr	r3, [pc, #152]	@ (800bd64 <_tx_thread_create+0x1e8>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800bcce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d009      	beq.n	800bce8 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800bcd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcd8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800bcda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bce0:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bce2:	e001      	b.n	800bce8 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800bce4:	2300      	movs	r3, #0
 800bce6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	f383 8810 	msr	PRIMASK, r3
}
 800bcf2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f000 f979 	bl	800bfec <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800bcfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d01e      	beq.n	800bd3e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800bd00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd04:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bd06:	e01a      	b.n	800bd3e <_tx_thread_create+0x1c2>
 800bd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	f383 8810 	msr	PRIMASK, r3
}
 800bd12:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd14:	f3ef 8310 	mrs	r3, PRIMASK
 800bd18:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bd1a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bd1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd1e:	b672      	cpsid	i
    return(int_posture);
 800bd20:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800bd22:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800bd24:	4b0d      	ldr	r3, [pc, #52]	@ (800bd5c <_tx_thread_create+0x1e0>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	4a0c      	ldr	r2, [pc, #48]	@ (800bd5c <_tx_thread_create+0x1e0>)
 800bd2c:	6013      	str	r3, [r2, #0]
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd30:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	f383 8810 	msr	PRIMASK, r3
}
 800bd38:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bd3a:	f000 f91d 	bl	800bf78 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3748      	adds	r7, #72	@ 0x48
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	0800c4c1 	.word	0x0800c4c1
 800bd4c:	0800bde1 	.word	0x0800bde1
 800bd50:	54485244 	.word	0x54485244
 800bd54:	20010ab4 	.word	0x20010ab4
 800bd58:	20010ab0 	.word	0x20010ab0
 800bd5c:	20010b40 	.word	0x20010b40
 800bd60:	2000004c 	.word	0x2000004c
 800bd64:	20010aac 	.word	0x20010aac

0800bd68 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800bd6c:	4b12      	ldr	r3, [pc, #72]	@ (800bdb8 <_tx_thread_initialize+0x50>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800bd72:	4b12      	ldr	r3, [pc, #72]	@ (800bdbc <_tx_thread_initialize+0x54>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800bd78:	4b11      	ldr	r3, [pc, #68]	@ (800bdc0 <_tx_thread_initialize+0x58>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bd7e:	4b11      	ldr	r3, [pc, #68]	@ (800bdc4 <_tx_thread_initialize+0x5c>)
 800bd80:	2220      	movs	r2, #32
 800bd82:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800bd84:	2280      	movs	r2, #128	@ 0x80
 800bd86:	2100      	movs	r1, #0
 800bd88:	480f      	ldr	r0, [pc, #60]	@ (800bdc8 <_tx_thread_initialize+0x60>)
 800bd8a:	f001 fb85 	bl	800d498 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	@ (800bdcc <_tx_thread_initialize+0x64>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800bd94:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd0 <_tx_thread_initialize+0x68>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800bd9a:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd4 <_tx_thread_initialize+0x6c>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800bda0:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd8 <_tx_thread_initialize+0x70>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800bda6:	4b0d      	ldr	r3, [pc, #52]	@ (800bddc <_tx_thread_initialize+0x74>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800bdae:	4a0b      	ldr	r2, [pc, #44]	@ (800bddc <_tx_thread_initialize+0x74>)
 800bdb0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800bdb2:	bf00      	nop
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20010aa8 	.word	0x20010aa8
 800bdbc:	20010aac 	.word	0x20010aac
 800bdc0:	20010ab8 	.word	0x20010ab8
 800bdc4:	20010abc 	.word	0x20010abc
 800bdc8:	20010ac0 	.word	0x20010ac0
 800bdcc:	20010ab0 	.word	0x20010ab0
 800bdd0:	20010ab4 	.word	0x20010ab4
 800bdd4:	20010b40 	.word	0x20010b40
 800bdd8:	20010b44 	.word	0x20010b44
 800bddc:	20010b48 	.word	0x20010b48

0800bde0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b088      	sub	sp, #32
 800bde4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bde6:	4b21      	ldr	r3, [pc, #132]	@ (800be6c <_tx_thread_shell_entry+0x8c>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdf0:	69fa      	ldr	r2, [r7, #28]
 800bdf2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800bdf8:	4b1d      	ldr	r3, [pc, #116]	@ (800be70 <_tx_thread_shell_entry+0x90>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800be00:	4b1b      	ldr	r3, [pc, #108]	@ (800be70 <_tx_thread_shell_entry+0x90>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	69f8      	ldr	r0, [r7, #28]
 800be06:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be08:	f3ef 8310 	mrs	r3, PRIMASK
 800be0c:	607b      	str	r3, [r7, #4]
    return(posture);
 800be0e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800be10:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be12:	b672      	cpsid	i
    return(int_posture);
 800be14:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800be16:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	2201      	movs	r2, #1
 800be1c:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	2201      	movs	r2, #1
 800be22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	2200      	movs	r2, #0
 800be28:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800be2a:	4b12      	ldr	r3, [pc, #72]	@ (800be74 <_tx_thread_shell_entry+0x94>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	3301      	adds	r3, #1
 800be30:	4a10      	ldr	r2, [pc, #64]	@ (800be74 <_tx_thread_shell_entry+0x94>)
 800be32:	6013      	str	r3, [r2, #0]
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f383 8810 	msr	PRIMASK, r3
}
 800be3e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800be40:	f3ef 8314 	mrs	r3, CONTROL
 800be44:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800be46:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f023 0304 	bic.w	r3, r3, #4
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	f383 8814 	msr	CONTROL, r3
}
 800be5c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800be5e:	69f8      	ldr	r0, [r7, #28]
 800be60:	f000 f9c4 	bl	800c1ec <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800be64:	bf00      	nop
 800be66:	3720      	adds	r7, #32
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	20010aa8 	.word	0x20010aa8
 800be70:	20010b44 	.word	0x20010b44
 800be74:	20010b40 	.word	0x20010b40

0800be78 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b08e      	sub	sp, #56	@ 0x38
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be80:	f3ef 8310 	mrs	r3, PRIMASK
 800be84:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800be86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800be88:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800be8a:	b672      	cpsid	i
    return(int_posture);
 800be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800be8e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800be90:	4b35      	ldr	r3, [pc, #212]	@ (800bf68 <_tx_thread_sleep+0xf0>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800be96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d108      	bne.n	800beae <_tx_thread_sleep+0x36>
 800be9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bea0:	6a3b      	ldr	r3, [r7, #32]
 800bea2:	f383 8810 	msr	PRIMASK, r3
}
 800bea6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800bea8:	2313      	movs	r3, #19
 800beaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800beac:	e056      	b.n	800bf5c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800beae:	f3ef 8305 	mrs	r3, IPSR
 800beb2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800beb4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800beb6:	4b2d      	ldr	r3, [pc, #180]	@ (800bf6c <_tx_thread_sleep+0xf4>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4313      	orrs	r3, r2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d008      	beq.n	800bed2 <_tx_thread_sleep+0x5a>
 800bec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	f383 8810 	msr	PRIMASK, r3
}
 800beca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800becc:	2313      	movs	r3, #19
 800bece:	637b      	str	r3, [r7, #52]	@ 0x34
 800bed0:	e044      	b.n	800bf5c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800bed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed4:	4a26      	ldr	r2, [pc, #152]	@ (800bf70 <_tx_thread_sleep+0xf8>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d108      	bne.n	800beec <_tx_thread_sleep+0x74>
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	f383 8810 	msr	PRIMASK, r3
}
 800bee4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800bee6:	2313      	movs	r3, #19
 800bee8:	637b      	str	r3, [r7, #52]	@ 0x34
 800beea:	e037      	b.n	800bf5c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d108      	bne.n	800bf04 <_tx_thread_sleep+0x8c>
 800bef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	f383 8810 	msr	PRIMASK, r3
}
 800befc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800befe:	2300      	movs	r3, #0
 800bf00:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf02:	e02b      	b.n	800bf5c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bf04:	4b1b      	ldr	r3, [pc, #108]	@ (800bf74 <_tx_thread_sleep+0xfc>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d008      	beq.n	800bf1e <_tx_thread_sleep+0xa6>
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f383 8810 	msr	PRIMASK, r3
}
 800bf16:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800bf18:	2313      	movs	r3, #19
 800bf1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf1c:	e01e      	b.n	800bf5c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800bf1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf20:	2204      	movs	r2, #4
 800bf22:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bf24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf26:	2201      	movs	r2, #1
 800bf28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bf2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800bf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bf38:	4b0e      	ldr	r3, [pc, #56]	@ (800bf74 <_tx_thread_sleep+0xfc>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	4a0d      	ldr	r2, [pc, #52]	@ (800bf74 <_tx_thread_sleep+0xfc>)
 800bf40:	6013      	str	r3, [r2, #0]
 800bf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf44:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	f383 8810 	msr	PRIMASK, r3
}
 800bf4c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bf4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf50:	f000 f94c 	bl	800c1ec <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf5a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3738      	adds	r7, #56	@ 0x38
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	20010aa8 	.word	0x20010aa8
 800bf6c:	2000004c 	.word	0x2000004c
 800bf70:	20010bf0 	.word	0x20010bf0
 800bf74:	20010b40 	.word	0x20010b40

0800bf78 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b089      	sub	sp, #36	@ 0x24
 800bf7c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bf7e:	4b17      	ldr	r3, [pc, #92]	@ (800bfdc <_tx_thread_system_preempt_check+0x64>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d121      	bne.n	800bfce <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800bf8a:	4b15      	ldr	r3, [pc, #84]	@ (800bfe0 <_tx_thread_system_preempt_check+0x68>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800bf90:	4b14      	ldr	r3, [pc, #80]	@ (800bfe4 <_tx_thread_system_preempt_check+0x6c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d017      	beq.n	800bfce <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bf9e:	4b12      	ldr	r3, [pc, #72]	@ (800bfe8 <_tx_thread_system_preempt_check+0x70>)
 800bfa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfa4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bfa6:	f3ef 8305 	mrs	r3, IPSR
 800bfaa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800bfac:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10c      	bne.n	800bfcc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfb2:	f3ef 8310 	mrs	r3, PRIMASK
 800bfb6:	60fb      	str	r3, [r7, #12]
    return(posture);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800bfba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bfbc:	b662      	cpsie	i
}
 800bfbe:	bf00      	nop
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f383 8810 	msr	PRIMASK, r3
}
 800bfca:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800bfcc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800bfce:	bf00      	nop
 800bfd0:	3724      	adds	r7, #36	@ 0x24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	20010b40 	.word	0x20010b40
 800bfe0:	20010aa8 	.word	0x20010aa8
 800bfe4:	20010aac 	.word	0x20010aac
 800bfe8:	e000ed04 	.word	0xe000ed04

0800bfec <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b096      	sub	sp, #88	@ 0x58
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bff4:	f3ef 8310 	mrs	r3, PRIMASK
 800bff8:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800bffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800bffc:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800bffe:	b672      	cpsid	i
    return(int_posture);
 800c000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800c002:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	334c      	adds	r3, #76	@ 0x4c
 800c010:	4618      	mov	r0, r3
 800c012:	f000 fcf1 	bl	800c9f8 <_tx_timer_system_deactivate>
 800c016:	e002      	b.n	800c01e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c01e:	4b6c      	ldr	r3, [pc, #432]	@ (800c1d0 <_tx_thread_system_resume+0x1e4>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3b01      	subs	r3, #1
 800c024:	4a6a      	ldr	r2, [pc, #424]	@ (800c1d0 <_tx_thread_system_resume+0x1e4>)
 800c026:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f040 8083 	bne.w	800c138 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 8097 	beq.w	800c16a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c040:	2b00      	cmp	r3, #0
 800c042:	d172      	bne.n	800c12a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c04e:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800c050:	4a60      	ldr	r2, [pc, #384]	@ (800c1d4 <_tx_thread_system_resume+0x1e8>)
 800c052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c058:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800c05a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d154      	bne.n	800c10a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800c060:	495c      	ldr	r1, [pc, #368]	@ (800c1d4 <_tx_thread_system_resume+0x1e8>)
 800c062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800c076:	2201      	movs	r2, #1
 800c078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c07a:	fa02 f303 	lsl.w	r3, r2, r3
 800c07e:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800c080:	4b55      	ldr	r3, [pc, #340]	@ (800c1d8 <_tx_thread_system_resume+0x1ec>)
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c086:	4313      	orrs	r3, r2
 800c088:	4a53      	ldr	r2, [pc, #332]	@ (800c1d8 <_tx_thread_system_resume+0x1ec>)
 800c08a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800c08c:	4b53      	ldr	r3, [pc, #332]	@ (800c1dc <_tx_thread_system_resume+0x1f0>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c092:	429a      	cmp	r2, r3
 800c094:	d269      	bcs.n	800c16a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800c096:	4a51      	ldr	r2, [pc, #324]	@ (800c1dc <_tx_thread_system_resume+0x1f0>)
 800c098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c09a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800c09c:	4b50      	ldr	r3, [pc, #320]	@ (800c1e0 <_tx_thread_system_resume+0x1f4>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800c0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d103      	bne.n	800c0b0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c0a8:	4a4d      	ldr	r2, [pc, #308]	@ (800c1e0 <_tx_thread_system_resume+0x1f4>)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6013      	str	r3, [r2, #0]
 800c0ae:	e05c      	b.n	800c16a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800c0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d257      	bcs.n	800c16a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800c0ba:	4a49      	ldr	r2, [pc, #292]	@ (800c1e0 <_tx_thread_system_resume+0x1f4>)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6013      	str	r3, [r2, #0]
 800c0c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c6:	f383 8810 	msr	PRIMASK, r3
}
 800c0ca:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c0cc:	4b40      	ldr	r3, [pc, #256]	@ (800c1d0 <_tx_thread_system_resume+0x1e4>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800c0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d174      	bne.n	800c1c2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c0d8:	4b42      	ldr	r3, [pc, #264]	@ (800c1e4 <_tx_thread_system_resume+0x1f8>)
 800c0da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0de:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0e0:	f3ef 8305 	mrs	r3, IPSR
 800c0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800c0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10c      	bne.n	800c106 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c0ec:	f3ef 8310 	mrs	r3, PRIMASK
 800c0f0:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800c0f4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c0f6:	b662      	cpsie	i
}
 800c0f8:	bf00      	nop
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	f383 8810 	msr	PRIMASK, r3
}
 800c104:	bf00      	nop
}
 800c106:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800c108:	e05b      	b.n	800c1c2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800c10a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10e:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800c110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800c116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c120:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c126:	621a      	str	r2, [r3, #32]
 800c128:	e01f      	b.n	800c16a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2203      	movs	r2, #3
 800c134:	631a      	str	r2, [r3, #48]	@ 0x30
 800c136:	e018      	b.n	800c16a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d014      	beq.n	800c16a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c144:	2b02      	cmp	r3, #2
 800c146:	d010      	beq.n	800c16a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d106      	bne.n	800c15e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	631a      	str	r2, [r3, #48]	@ 0x30
 800c15c:	e005      	b.n	800c16a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2203      	movs	r2, #3
 800c168:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c16a:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e8 <_tx_thread_system_resume+0x1fc>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c172:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	f383 8810 	msr	PRIMASK, r3
}
 800c17a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c17c:	4b18      	ldr	r3, [pc, #96]	@ (800c1e0 <_tx_thread_system_resume+0x1f4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c182:	429a      	cmp	r2, r3
 800c184:	d020      	beq.n	800c1c8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c186:	4b12      	ldr	r3, [pc, #72]	@ (800c1d0 <_tx_thread_system_resume+0x1e4>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800c18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d11a      	bne.n	800c1c8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c192:	4b14      	ldr	r3, [pc, #80]	@ (800c1e4 <_tx_thread_system_resume+0x1f8>)
 800c194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c198:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c19a:	f3ef 8305 	mrs	r3, IPSR
 800c19e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c1a0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d10f      	bne.n	800c1c6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800c1aa:	613b      	str	r3, [r7, #16]
    return(posture);
 800c1ac:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800c1ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c1b0:	b662      	cpsie	i
}
 800c1b2:	bf00      	nop
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	f383 8810 	msr	PRIMASK, r3
}
 800c1be:	bf00      	nop
}
 800c1c0:	e001      	b.n	800c1c6 <_tx_thread_system_resume+0x1da>
                                return;
 800c1c2:	bf00      	nop
 800c1c4:	e000      	b.n	800c1c8 <_tx_thread_system_resume+0x1dc>
 800c1c6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800c1c8:	3758      	adds	r7, #88	@ 0x58
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20010b40 	.word	0x20010b40
 800c1d4:	20010ac0 	.word	0x20010ac0
 800c1d8:	20010ab8 	.word	0x20010ab8
 800c1dc:	20010abc 	.word	0x20010abc
 800c1e0:	20010aac 	.word	0x20010aac
 800c1e4:	e000ed04 	.word	0xe000ed04
 800c1e8:	20010aa8 	.word	0x20010aa8

0800c1ec <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b09e      	sub	sp, #120	@ 0x78
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c1f4:	4b81      	ldr	r3, [pc, #516]	@ (800c3fc <_tx_thread_system_suspend+0x210>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1fa:	f3ef 8310 	mrs	r3, PRIMASK
 800c1fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800c200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800c202:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800c204:	b672      	cpsid	i
    return(int_posture);
 800c206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c208:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c20e:	429a      	cmp	r2, r3
 800c210:	d112      	bne.n	800c238 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c216:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800c218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d008      	beq.n	800c230 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800c21e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c224:	d004      	beq.n	800c230 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	334c      	adds	r3, #76	@ 0x4c
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 fb82 	bl	800c934 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	69db      	ldr	r3, [r3, #28]
 800c234:	4a72      	ldr	r2, [pc, #456]	@ (800c400 <_tx_thread_system_suspend+0x214>)
 800c236:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c238:	4b72      	ldr	r3, [pc, #456]	@ (800c404 <_tx_thread_system_suspend+0x218>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	4a71      	ldr	r2, [pc, #452]	@ (800c404 <_tx_thread_system_suspend+0x218>)
 800c240:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c246:	2b01      	cmp	r3, #1
 800c248:	f040 80a6 	bne.w	800c398 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c256:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800c25e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	429a      	cmp	r2, r3
 800c264:	d015      	beq.n	800c292 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c26a:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800c26c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c26e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c270:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800c272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c274:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c276:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800c278:	4a63      	ldr	r2, [pc, #396]	@ (800c408 <_tx_thread_system_suspend+0x21c>)
 800c27a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	429a      	cmp	r2, r3
 800c284:	d157      	bne.n	800c336 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800c286:	4960      	ldr	r1, [pc, #384]	@ (800c408 <_tx_thread_system_suspend+0x21c>)
 800c288:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c28a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c28c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c290:	e051      	b.n	800c336 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800c292:	4a5d      	ldr	r2, [pc, #372]	@ (800c408 <_tx_thread_system_suspend+0x21c>)
 800c294:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c296:	2100      	movs	r1, #0
 800c298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800c29c:	2201      	movs	r2, #1
 800c29e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a4:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800c2a6:	4b59      	ldr	r3, [pc, #356]	@ (800c40c <_tx_thread_system_suspend+0x220>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2ac:	43db      	mvns	r3, r3
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	4a56      	ldr	r2, [pc, #344]	@ (800c40c <_tx_thread_system_suspend+0x220>)
 800c2b2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800c2b8:	4b54      	ldr	r3, [pc, #336]	@ (800c40c <_tx_thread_system_suspend+0x220>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800c2be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d12b      	bne.n	800c31c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c2c4:	4b52      	ldr	r3, [pc, #328]	@ (800c410 <_tx_thread_system_suspend+0x224>)
 800c2c6:	2220      	movs	r2, #32
 800c2c8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800c2ca:	4b52      	ldr	r3, [pc, #328]	@ (800c414 <_tx_thread_system_suspend+0x228>)
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c2d2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2d6:	f383 8810 	msr	PRIMASK, r3
}
 800c2da:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c2dc:	4b49      	ldr	r3, [pc, #292]	@ (800c404 <_tx_thread_system_suspend+0x218>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800c2e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f040 8081 	bne.w	800c3ec <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c2ea:	4b4b      	ldr	r3, [pc, #300]	@ (800c418 <_tx_thread_system_suspend+0x22c>)
 800c2ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2f2:	f3ef 8305 	mrs	r3, IPSR
 800c2f6:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800c2f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10c      	bne.n	800c318 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c302:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800c304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800c306:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c308:	b662      	cpsie	i
}
 800c30a:	bf00      	nop
 800c30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30e:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c312:	f383 8810 	msr	PRIMASK, r3
}
 800c316:	bf00      	nop
}
 800c318:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800c31a:	e067      	b.n	800c3ec <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800c31c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c31e:	fa93 f3a3 	rbit	r3, r3
 800c322:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c324:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c326:	fab3 f383 	clz	r3, r3
 800c32a:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800c32c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c32e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c330:	4413      	add	r3, r2
 800c332:	4a37      	ldr	r2, [pc, #220]	@ (800c410 <_tx_thread_system_suspend+0x224>)
 800c334:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800c336:	4b37      	ldr	r3, [pc, #220]	@ (800c414 <_tx_thread_system_suspend+0x228>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d12b      	bne.n	800c398 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c340:	4b33      	ldr	r3, [pc, #204]	@ (800c410 <_tx_thread_system_suspend+0x224>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a30      	ldr	r2, [pc, #192]	@ (800c408 <_tx_thread_system_suspend+0x21c>)
 800c346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c34a:	4a32      	ldr	r2, [pc, #200]	@ (800c414 <_tx_thread_system_suspend+0x228>)
 800c34c:	6013      	str	r3, [r2, #0]
 800c34e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c350:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c354:	f383 8810 	msr	PRIMASK, r3
}
 800c358:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c35a:	4b2a      	ldr	r3, [pc, #168]	@ (800c404 <_tx_thread_system_suspend+0x218>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800c360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c362:	2b00      	cmp	r3, #0
 800c364:	d144      	bne.n	800c3f0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c366:	4b2c      	ldr	r3, [pc, #176]	@ (800c418 <_tx_thread_system_suspend+0x22c>)
 800c368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c36c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c36e:	f3ef 8305 	mrs	r3, IPSR
 800c372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800c374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10c      	bne.n	800c394 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c37a:	f3ef 8310 	mrs	r3, PRIMASK
 800c37e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800c382:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c384:	b662      	cpsie	i
}
 800c386:	bf00      	nop
 800c388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c38c:	6a3b      	ldr	r3, [r7, #32]
 800c38e:	f383 8810 	msr	PRIMASK, r3
}
 800c392:	bf00      	nop
}
 800c394:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800c396:	e02b      	b.n	800c3f0 <_tx_thread_system_suspend+0x204>
 800c398:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c39a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	f383 8810 	msr	PRIMASK, r3
}
 800c3a2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c3a4:	4b1b      	ldr	r3, [pc, #108]	@ (800c414 <_tx_thread_system_suspend+0x228>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d022      	beq.n	800c3f4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c3ae:	4b15      	ldr	r3, [pc, #84]	@ (800c404 <_tx_thread_system_suspend+0x218>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800c3b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d11c      	bne.n	800c3f4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c3ba:	4b17      	ldr	r3, [pc, #92]	@ (800c418 <_tx_thread_system_suspend+0x22c>)
 800c3bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3c0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c3c2:	f3ef 8305 	mrs	r3, IPSR
 800c3c6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c3c8:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10c      	bne.n	800c3e8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3ce:	f3ef 8310 	mrs	r3, PRIMASK
 800c3d2:	617b      	str	r3, [r7, #20]
    return(posture);
 800c3d4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800c3d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c3d8:	b662      	cpsie	i
}
 800c3da:	bf00      	nop
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f383 8810 	msr	PRIMASK, r3
}
 800c3e6:	bf00      	nop
}
 800c3e8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800c3ea:	e003      	b.n	800c3f4 <_tx_thread_system_suspend+0x208>
                return;
 800c3ec:	bf00      	nop
 800c3ee:	e002      	b.n	800c3f6 <_tx_thread_system_suspend+0x20a>
            return;
 800c3f0:	bf00      	nop
 800c3f2:	e000      	b.n	800c3f6 <_tx_thread_system_suspend+0x20a>
    return;
 800c3f4:	bf00      	nop
}
 800c3f6:	3778      	adds	r7, #120	@ 0x78
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20010aa8 	.word	0x20010aa8
 800c400:	200110ac 	.word	0x200110ac
 800c404:	20010b40 	.word	0x20010b40
 800c408:	20010ac0 	.word	0x20010ac0
 800c40c:	20010ab8 	.word	0x20010ab8
 800c410:	20010abc 	.word	0x20010abc
 800c414:	20010aac 	.word	0x20010aac
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b087      	sub	sp, #28
 800c420:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c422:	4b21      	ldr	r3, [pc, #132]	@ (800c4a8 <_tx_thread_time_slice+0x8c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c428:	f3ef 8310 	mrs	r3, PRIMASK
 800c42c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c42e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c430:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c432:	b672      	cpsid	i
    return(int_posture);
 800c434:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800c436:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c438:	4b1c      	ldr	r3, [pc, #112]	@ (800c4ac <_tx_thread_time_slice+0x90>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d024      	beq.n	800c48e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d120      	bne.n	800c48e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	69da      	ldr	r2, [r3, #28]
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	699b      	ldr	r3, [r3, #24]
 800c458:	4a15      	ldr	r2, [pc, #84]	@ (800c4b0 <_tx_thread_time_slice+0x94>)
 800c45a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	6a1b      	ldr	r3, [r3, #32]
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	429a      	cmp	r2, r3
 800c464:	d013      	beq.n	800c48e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c46e:	429a      	cmp	r2, r3
 800c470:	d10d      	bne.n	800c48e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	6a12      	ldr	r2, [r2, #32]
 800c47a:	490e      	ldr	r1, [pc, #56]	@ (800c4b4 <_tx_thread_time_slice+0x98>)
 800c47c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c480:	4b0d      	ldr	r3, [pc, #52]	@ (800c4b8 <_tx_thread_time_slice+0x9c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a0b      	ldr	r2, [pc, #44]	@ (800c4b4 <_tx_thread_time_slice+0x98>)
 800c486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c48a:	4a0c      	ldr	r2, [pc, #48]	@ (800c4bc <_tx_thread_time_slice+0xa0>)
 800c48c:	6013      	str	r3, [r2, #0]
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f383 8810 	msr	PRIMASK, r3
}
 800c498:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800c49a:	bf00      	nop
 800c49c:	371c      	adds	r7, #28
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop
 800c4a8:	20010aa8 	.word	0x20010aa8
 800c4ac:	20010b50 	.word	0x20010b50
 800c4b0:	200110ac 	.word	0x200110ac
 800c4b4:	20010ac0 	.word	0x20010ac0
 800c4b8:	20010abc 	.word	0x20010abc
 800c4bc:	20010aac 	.word	0x20010aac

0800c4c0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08a      	sub	sp, #40	@ 0x28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c4d0:	617b      	str	r3, [r7, #20]
    return(posture);
 800c4d2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c4d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4d6:	b672      	cpsid	i
    return(int_posture);
 800c4d8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800c4da:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4e0:	2b04      	cmp	r3, #4
 800c4e2:	d10e      	bne.n	800c502 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800c4e4:	4b13      	ldr	r3, [pc, #76]	@ (800c534 <_tx_thread_timeout+0x74>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	4a12      	ldr	r2, [pc, #72]	@ (800c534 <_tx_thread_timeout+0x74>)
 800c4ec:	6013      	str	r3, [r2, #0]
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f383 8810 	msr	PRIMASK, r3
}
 800c4f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c4fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4fc:	f7ff fd76 	bl	800bfec <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c500:	e013      	b.n	800c52a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c506:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800c508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c50a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c50e:	61bb      	str	r3, [r7, #24]
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f383 8810 	msr	PRIMASK, r3
}
 800c51a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	69b9      	ldr	r1, [r7, #24]
 800c526:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c528:	4798      	blx	r3
}
 800c52a:	bf00      	nop
 800c52c:	3728      	adds	r7, #40	@ 0x28
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20010b40 	.word	0x20010b40

0800c538 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b088      	sub	sp, #32
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c540:	f3ef 8310 	mrs	r3, PRIMASK
 800c544:	617b      	str	r3, [r7, #20]
    return(posture);
 800c546:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c548:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c54a:	b672      	cpsid	i
    return(int_posture);
 800c54c:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c54e:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6a1b      	ldr	r3, [r3, #32]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d002      	beq.n	800c55e <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800c558:	2317      	movs	r3, #23
 800c55a:	61fb      	str	r3, [r7, #28]
 800c55c:	e00d      	b.n	800c57a <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d102      	bne.n	800c56c <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800c566:	2317      	movs	r3, #23
 800c568:	61fb      	str	r3, [r7, #28]
 800c56a:	e006      	b.n	800c57a <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3308      	adds	r3, #8
 800c570:	4618      	mov	r0, r3
 800c572:	f000 f9df 	bl	800c934 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800c576:	2300      	movs	r3, #0
 800c578:	61fb      	str	r3, [r7, #28]
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f383 8810 	msr	PRIMASK, r3
}
 800c584:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800c586:	69fb      	ldr	r3, [r7, #28]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3720      	adds	r7, #32
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800c590:	b480      	push	{r7}
 800c592:	b089      	sub	sp, #36	@ 0x24
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c59c:	f3ef 8310 	mrs	r3, PRIMASK
 800c5a0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c5a2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c5a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5a6:	b672      	cpsid	i
    return(int_posture);
 800c5a8:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c5aa:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6a1b      	ldr	r3, [r3, #32]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d105      	bne.n	800c5c0 <_tx_timer_change+0x30>
    {

        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	60da      	str	r2, [r3, #12]
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	f383 8810 	msr	PRIMASK, r3
}
 800c5ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3724      	adds	r7, #36	@ 0x24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
	...

0800c5dc <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08a      	sub	sp, #40	@ 0x28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
 800c5e8:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800c5ea:	222c      	movs	r2, #44	@ 0x2c
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f000 ff52 	bl	800d498 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5fe:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c604:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c612:	f3ef 8310 	mrs	r3, PRIMASK
 800c616:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c618:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c61a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c61c:	b672      	cpsid	i
    return(int_posture);
 800c61e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c620:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	4a1c      	ldr	r2, [pc, #112]	@ (800c698 <_tx_timer_create+0xbc>)
 800c626:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800c628:	4b1c      	ldr	r3, [pc, #112]	@ (800c69c <_tx_timer_create+0xc0>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d109      	bne.n	800c644 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800c630:	4a1b      	ldr	r2, [pc, #108]	@ (800c6a0 <_tx_timer_create+0xc4>)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	625a      	str	r2, [r3, #36]	@ 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	629a      	str	r2, [r3, #40]	@ 0x28
 800c642:	e011      	b.n	800c668 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800c644:	4b16      	ldr	r3, [pc, #88]	@ (800c6a0 <_tx_timer_create+0xc4>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c64e:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800c650:	6a3b      	ldr	r3, [r7, #32]
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	69fa      	ldr	r2, [r7, #28]
 800c660:	629a      	str	r2, [r3, #40]	@ 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6a3a      	ldr	r2, [r7, #32]
 800c666:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800c668:	4b0c      	ldr	r3, [pc, #48]	@ (800c69c <_tx_timer_create+0xc0>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	3301      	adds	r3, #1
 800c66e:	4a0b      	ldr	r2, [pc, #44]	@ (800c69c <_tx_timer_create+0xc0>)
 800c670:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800c672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c674:	2b01      	cmp	r3, #1
 800c676:	d104      	bne.n	800c682 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3308      	adds	r3, #8
 800c67c:	4618      	mov	r0, r3
 800c67e:	f000 f959 	bl	800c934 <_tx_timer_system_activate>
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	f383 8810 	msr	PRIMASK, r3
}
 800c68c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c68e:	2300      	movs	r3, #0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3728      	adds	r7, #40	@ 0x28
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	4154494d 	.word	0x4154494d
 800c69c:	20010be8 	.word	0x20010be8
 800c6a0:	20010be4 	.word	0x20010be4

0800c6a4 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b08d      	sub	sp, #52	@ 0x34
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6b2:	f3ef 8310 	mrs	r3, PRIMASK
 800c6b6:	613b      	str	r3, [r7, #16]
    return(posture);
 800c6b8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800c6ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6bc:	b672      	cpsid	i
    return(int_posture);
 800c6be:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 800c6c0:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d07f      	beq.n	800c7ce <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 800c6d2:	4b45      	ldr	r3, [pc, #276]	@ (800c7e8 <_tx_timer_deactivate+0x144>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69fa      	ldr	r2, [r7, #28]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d306      	bcc.n	800c6ea <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800c6dc:	4b43      	ldr	r3, [pc, #268]	@ (800c7ec <_tx_timer_deactivate+0x148>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	69fa      	ldr	r2, [r7, #28]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d201      	bcs.n	800c6ea <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800c6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d12e      	bne.n	800c74e <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 800c6f0:	4b3f      	ldr	r3, [pc, #252]	@ (800c7f0 <_tx_timer_deactivate+0x14c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	69fa      	ldr	r2, [r7, #28]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d307      	bcc.n	800c70a <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800c6fa:	4b3d      	ldr	r3, [pc, #244]	@ (800c7f0 <_tx_timer_deactivate+0x14c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	69fa      	ldr	r2, [r7, #28]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	109b      	asrs	r3, r3, #2
 800c704:	3301      	adds	r3, #1
 800c706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c708:	e010      	b.n	800c72c <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800c70a:	4b37      	ldr	r3, [pc, #220]	@ (800c7e8 <_tx_timer_deactivate+0x144>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	69fa      	ldr	r2, [r7, #28]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	109b      	asrs	r3, r3, #2
 800c714:	62fb      	str	r3, [r7, #44]	@ 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800c716:	4b35      	ldr	r3, [pc, #212]	@ (800c7ec <_tx_timer_deactivate+0x148>)
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	4b35      	ldr	r3, [pc, #212]	@ (800c7f0 <_tx_timer_deactivate+0x14c>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	1ad3      	subs	r3, r2, r3
 800c720:	109b      	asrs	r3, r3, #2
 800c722:	461a      	mov	r2, r3
 800c724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c726:	4413      	add	r3, r2
 800c728:	3301      	adds	r3, #1
 800c72a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b20      	cmp	r3, #32
 800c732:	d908      	bls.n	800c746 <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800c734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c73a:	4413      	add	r3, r2
 800c73c:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 800c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	e01c      	b.n	800c780 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 800c746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c74a:	601a      	str	r2, [r3, #0]
 800c74c:	e018      	b.n	800c780 <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800c74e:	4b29      	ldr	r3, [pc, #164]	@ (800c7f4 <_tx_timer_deactivate+0x150>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c754:	429a      	cmp	r2, r3
 800c756:	d00f      	beq.n	800c778 <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b20      	cmp	r3, #32
 800c75e:	d906      	bls.n	800c76e <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 800c768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76a:	601a      	str	r2, [r3, #0]
 800c76c:	e008      	b.n	800c780 <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800c76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	e003      	b.n	800c780 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 800c786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d108      	bne.n	800c7a0 <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c794:	429a      	cmp	r2, r3
 800c796:	d117      	bne.n	800c7c8 <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	2200      	movs	r2, #0
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	e013      	b.n	800c7c8 <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a2:	695b      	ldr	r3, [r3, #20]
 800c7a4:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	69ba      	ldr	r2, [r7, #24]
 800c7b0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d105      	bne.n	800c7c8 <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	69fa      	ldr	r2, [r7, #28]
 800c7c0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	69ba      	ldr	r2, [r7, #24]
 800c7c6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	619a      	str	r2, [r3, #24]
 800c7ce:	6a3b      	ldr	r3, [r7, #32]
 800c7d0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	f383 8810 	msr	PRIMASK, r3
}
 800c7d8:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3734      	adds	r7, #52	@ 0x34
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	20010bd4 	.word	0x20010bd4
 800c7ec:	20010bd8 	.word	0x20010bd8
 800c7f0:	20010bdc 	.word	0x20010bdc
 800c7f4:	20010bec 	.word	0x20010bec

0800c7f8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c802:	607b      	str	r3, [r7, #4]
    return(posture);
 800c804:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c806:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c808:	b672      	cpsid	i
    return(int_posture);
 800c80a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800c80c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800c80e:	4b09      	ldr	r3, [pc, #36]	@ (800c834 <_tx_timer_expiration_process+0x3c>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3301      	adds	r3, #1
 800c814:	4a07      	ldr	r2, [pc, #28]	@ (800c834 <_tx_timer_expiration_process+0x3c>)
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	f383 8810 	msr	PRIMASK, r3
}
 800c822:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800c824:	4804      	ldr	r0, [pc, #16]	@ (800c838 <_tx_timer_expiration_process+0x40>)
 800c826:	f7ff fbe1 	bl	800bfec <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c82a:	bf00      	nop
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	20010b40 	.word	0x20010b40
 800c838:	20010bf0 	.word	0x20010bf0

0800c83c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800c83c:	b590      	push	{r4, r7, lr}
 800c83e:	b089      	sub	sp, #36	@ 0x24
 800c840:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800c842:	4b28      	ldr	r3, [pc, #160]	@ (800c8e4 <_tx_timer_initialize+0xa8>)
 800c844:	2200      	movs	r2, #0
 800c846:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800c848:	4b27      	ldr	r3, [pc, #156]	@ (800c8e8 <_tx_timer_initialize+0xac>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c84e:	4b27      	ldr	r3, [pc, #156]	@ (800c8ec <_tx_timer_initialize+0xb0>)
 800c850:	2200      	movs	r2, #0
 800c852:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800c854:	4b26      	ldr	r3, [pc, #152]	@ (800c8f0 <_tx_timer_initialize+0xb4>)
 800c856:	2200      	movs	r2, #0
 800c858:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800c85a:	4b26      	ldr	r3, [pc, #152]	@ (800c8f4 <_tx_timer_initialize+0xb8>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800c860:	2280      	movs	r2, #128	@ 0x80
 800c862:	2100      	movs	r1, #0
 800c864:	4824      	ldr	r0, [pc, #144]	@ (800c8f8 <_tx_timer_initialize+0xbc>)
 800c866:	f000 fe17 	bl	800d498 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800c86a:	4b24      	ldr	r3, [pc, #144]	@ (800c8fc <_tx_timer_initialize+0xc0>)
 800c86c:	4a22      	ldr	r2, [pc, #136]	@ (800c8f8 <_tx_timer_initialize+0xbc>)
 800c86e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800c870:	4b23      	ldr	r3, [pc, #140]	@ (800c900 <_tx_timer_initialize+0xc4>)
 800c872:	4a21      	ldr	r2, [pc, #132]	@ (800c8f8 <_tx_timer_initialize+0xbc>)
 800c874:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800c876:	4b23      	ldr	r3, [pc, #140]	@ (800c904 <_tx_timer_initialize+0xc8>)
 800c878:	4a23      	ldr	r2, [pc, #140]	@ (800c908 <_tx_timer_initialize+0xcc>)
 800c87a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800c87c:	4b21      	ldr	r3, [pc, #132]	@ (800c904 <_tx_timer_initialize+0xc8>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	3304      	adds	r3, #4
 800c882:	4a20      	ldr	r2, [pc, #128]	@ (800c904 <_tx_timer_initialize+0xc8>)
 800c884:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800c886:	4b21      	ldr	r3, [pc, #132]	@ (800c90c <_tx_timer_initialize+0xd0>)
 800c888:	4a21      	ldr	r2, [pc, #132]	@ (800c910 <_tx_timer_initialize+0xd4>)
 800c88a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800c88c:	4b21      	ldr	r3, [pc, #132]	@ (800c914 <_tx_timer_initialize+0xd8>)
 800c88e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c892:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800c894:	4b20      	ldr	r3, [pc, #128]	@ (800c918 <_tx_timer_initialize+0xdc>)
 800c896:	2200      	movs	r2, #0
 800c898:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800c89a:	4b1c      	ldr	r3, [pc, #112]	@ (800c90c <_tx_timer_initialize+0xd0>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a1d      	ldr	r2, [pc, #116]	@ (800c914 <_tx_timer_initialize+0xd8>)
 800c8a0:	6812      	ldr	r2, [r2, #0]
 800c8a2:	491d      	ldr	r1, [pc, #116]	@ (800c918 <_tx_timer_initialize+0xdc>)
 800c8a4:	6809      	ldr	r1, [r1, #0]
 800c8a6:	481c      	ldr	r0, [pc, #112]	@ (800c918 <_tx_timer_initialize+0xdc>)
 800c8a8:	6800      	ldr	r0, [r0, #0]
 800c8aa:	2400      	movs	r4, #0
 800c8ac:	9405      	str	r4, [sp, #20]
 800c8ae:	2400      	movs	r4, #0
 800c8b0:	9404      	str	r4, [sp, #16]
 800c8b2:	9003      	str	r0, [sp, #12]
 800c8b4:	9102      	str	r1, [sp, #8]
 800c8b6:	9201      	str	r2, [sp, #4]
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	4b18      	ldr	r3, [pc, #96]	@ (800c91c <_tx_timer_initialize+0xe0>)
 800c8bc:	4a18      	ldr	r2, [pc, #96]	@ (800c920 <_tx_timer_initialize+0xe4>)
 800c8be:	4919      	ldr	r1, [pc, #100]	@ (800c924 <_tx_timer_initialize+0xe8>)
 800c8c0:	4819      	ldr	r0, [pc, #100]	@ (800c928 <_tx_timer_initialize+0xec>)
 800c8c2:	f7ff f95b 	bl	800bb7c <_tx_thread_create>
 800c8c6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1e5      	bne.n	800c89a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800c8ce:	4b17      	ldr	r3, [pc, #92]	@ (800c92c <_tx_timer_initialize+0xf0>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800c8d4:	4b16      	ldr	r3, [pc, #88]	@ (800c930 <_tx_timer_initialize+0xf4>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800c8da:	bf00      	nop
 800c8dc:	370c      	adds	r7, #12
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd90      	pop	{r4, r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20010b4c 	.word	0x20010b4c
 800c8e8:	200110ac 	.word	0x200110ac
 800c8ec:	20010b50 	.word	0x20010b50
 800c8f0:	20010be0 	.word	0x20010be0
 800c8f4:	20010bec 	.word	0x20010bec
 800c8f8:	20010b54 	.word	0x20010b54
 800c8fc:	20010bd4 	.word	0x20010bd4
 800c900:	20010bdc 	.word	0x20010bdc
 800c904:	20010bd8 	.word	0x20010bd8
 800c908:	20010bd0 	.word	0x20010bd0
 800c90c:	20010ca0 	.word	0x20010ca0
 800c910:	20010cac 	.word	0x20010cac
 800c914:	20010ca4 	.word	0x20010ca4
 800c918:	20010ca8 	.word	0x20010ca8
 800c91c:	4154494d 	.word	0x4154494d
 800c920:	0800ca69 	.word	0x0800ca69
 800c924:	0800d6a4 	.word	0x0800d6a4
 800c928:	20010bf0 	.word	0x20010bf0
 800c92c:	20010be4 	.word	0x20010be4
 800c930:	20010be8 	.word	0x20010be8

0800c934 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c934:	b480      	push	{r7}
 800c936:	b089      	sub	sp, #36	@ 0x24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d04a      	beq.n	800c9de <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94e:	d046      	beq.n	800c9de <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	699b      	ldr	r3, [r3, #24]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d142      	bne.n	800c9de <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	2b20      	cmp	r3, #32
 800c95c:	d902      	bls.n	800c964 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800c95e:	231f      	movs	r3, #31
 800c960:	61bb      	str	r3, [r7, #24]
 800c962:	e002      	b.n	800c96a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	3b01      	subs	r3, #1
 800c968:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800c96a:	4b20      	ldr	r3, [pc, #128]	@ (800c9ec <_tx_timer_system_activate+0xb8>)
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4413      	add	r3, r2
 800c974:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800c976:	4b1e      	ldr	r3, [pc, #120]	@ (800c9f0 <_tx_timer_system_activate+0xbc>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	69fa      	ldr	r2, [r7, #28]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d30b      	bcc.n	800c998 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800c980:	4b1b      	ldr	r3, [pc, #108]	@ (800c9f0 <_tx_timer_system_activate+0xbc>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	69fa      	ldr	r2, [r7, #28]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	109b      	asrs	r3, r3, #2
 800c98a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800c98c:	4b19      	ldr	r3, [pc, #100]	@ (800c9f4 <_tx_timer_system_activate+0xc0>)
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d109      	bne.n	800c9b4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	601a      	str	r2, [r3, #0]
 800c9b2:	e011      	b.n	800c9d8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	69fa      	ldr	r2, [r7, #28]
 800c9dc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800c9de:	bf00      	nop
 800c9e0:	3724      	adds	r7, #36	@ 0x24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	20010bdc 	.word	0x20010bdc
 800c9f0:	20010bd8 	.word	0x20010bd8
 800c9f4:	20010bd4 	.word	0x20010bd4

0800c9f8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d026      	beq.n	800ca5a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d108      	bne.n	800ca2c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d117      	bne.n	800ca54 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	2200      	movs	r2, #0
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	e013      	b.n	800ca54 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	695b      	ldr	r3, [r3, #20]
 800ca30:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d105      	bne.n	800ca54 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	619a      	str	r2, [r3, #24]
    }
}
 800ca5a:	bf00      	nop
 800ca5c:	371c      	adds	r7, #28
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
	...

0800ca68 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b098      	sub	sp, #96	@ 0x60
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800ca70:	2300      	movs	r3, #0
 800ca72:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a73      	ldr	r2, [pc, #460]	@ (800cc44 <_tx_timer_thread_entry+0x1dc>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	f040 80de 	bne.w	800cc3a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ca82:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800ca84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800ca86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca88:	b672      	cpsid	i
    return(int_posture);
 800ca8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800ca8c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800ca8e:	4b6e      	ldr	r3, [pc, #440]	@ (800cc48 <_tx_timer_thread_entry+0x1e0>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d003      	beq.n	800caa4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f107 020c 	add.w	r2, r7, #12
 800caa2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800caa4:	4b68      	ldr	r3, [pc, #416]	@ (800cc48 <_tx_timer_thread_entry+0x1e0>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2200      	movs	r2, #0
 800caaa:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800caac:	4b66      	ldr	r3, [pc, #408]	@ (800cc48 <_tx_timer_thread_entry+0x1e0>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3304      	adds	r3, #4
 800cab2:	4a65      	ldr	r2, [pc, #404]	@ (800cc48 <_tx_timer_thread_entry+0x1e0>)
 800cab4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800cab6:	4b64      	ldr	r3, [pc, #400]	@ (800cc48 <_tx_timer_thread_entry+0x1e0>)
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	4b64      	ldr	r3, [pc, #400]	@ (800cc4c <_tx_timer_thread_entry+0x1e4>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d103      	bne.n	800caca <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800cac2:	4b63      	ldr	r3, [pc, #396]	@ (800cc50 <_tx_timer_thread_entry+0x1e8>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a60      	ldr	r2, [pc, #384]	@ (800cc48 <_tx_timer_thread_entry+0x1e0>)
 800cac8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800caca:	4b62      	ldr	r3, [pc, #392]	@ (800cc54 <_tx_timer_thread_entry+0x1ec>)
 800cacc:	2200      	movs	r2, #0
 800cace:	601a      	str	r2, [r3, #0]
 800cad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cad2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad6:	f383 8810 	msr	PRIMASK, r3
}
 800cada:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cadc:	f3ef 8310 	mrs	r3, PRIMASK
 800cae0:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800cae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800cae4:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800cae6:	b672      	cpsid	i
    return(int_posture);
 800cae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800caea:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800caec:	e07f      	b.n	800cbee <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800caf8:	2300      	movs	r3, #0
 800cafa:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800cafc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cafe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d102      	bne.n	800cb0a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800cb04:	2300      	movs	r3, #0
 800cb06:	60fb      	str	r3, [r7, #12]
 800cb08:	e00e      	b.n	800cb28 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800cb0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800cb10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb14:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800cb16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb1a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800cb1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb1e:	f107 020c 	add.w	r2, r7, #12
 800cb22:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800cb24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb26:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800cb28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b20      	cmp	r3, #32
 800cb2e:	d911      	bls.n	800cb54 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800cb30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800cb38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb3a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800cb40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb42:	f107 0208 	add.w	r2, r7, #8
 800cb46:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800cb48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb4c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800cb4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb50:	60bb      	str	r3, [r7, #8]
 800cb52:	e01a      	b.n	800cb8a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800cb54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800cb5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800cb60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb62:	685a      	ldr	r2, [r3, #4]
 800cb64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb66:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800cb68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d009      	beq.n	800cb84 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800cb70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb72:	f107 0208 	add.w	r2, r7, #8
 800cb76:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800cb78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb7c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800cb7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb80:	60bb      	str	r3, [r7, #8]
 800cb82:	e002      	b.n	800cb8a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800cb84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb86:	2200      	movs	r2, #0
 800cb88:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800cb8a:	4a33      	ldr	r2, [pc, #204]	@ (800cc58 <_tx_timer_thread_entry+0x1f0>)
 800cb8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb96:	f383 8810 	msr	PRIMASK, r3
}
 800cb9a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800cb9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d002      	beq.n	800cba8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800cba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cba4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800cba6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cba8:	f3ef 8310 	mrs	r3, PRIMASK
 800cbac:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800cbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800cbb0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbb2:	b672      	cpsid	i
    return(int_posture);
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800cbb6:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800cbb8:	4b27      	ldr	r3, [pc, #156]	@ (800cc58 <_tx_timer_thread_entry+0x1f0>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d105      	bne.n	800cbd2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800cbc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbc8:	2200      	movs	r2, #0
 800cbca:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800cbcc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cbce:	f7ff feb1 	bl	800c934 <_tx_timer_system_activate>
 800cbd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbd4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	f383 8810 	msr	PRIMASK, r3
}
 800cbdc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbde:	f3ef 8310 	mrs	r3, PRIMASK
 800cbe2:	623b      	str	r3, [r7, #32]
    return(posture);
 800cbe4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cbe6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbe8:	b672      	cpsid	i
    return(int_posture);
 800cbea:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800cbec:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f47f af7c 	bne.w	800caee <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800cbf6:	4b17      	ldr	r3, [pc, #92]	@ (800cc54 <_tx_timer_thread_entry+0x1ec>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d116      	bne.n	800cc2c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800cbfe:	4b17      	ldr	r3, [pc, #92]	@ (800cc5c <_tx_timer_thread_entry+0x1f4>)
 800cc00:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cc02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc04:	2203      	movs	r2, #3
 800cc06:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cc08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800cc0e:	4b14      	ldr	r3, [pc, #80]	@ (800cc60 <_tx_timer_thread_entry+0x1f8>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3301      	adds	r3, #1
 800cc14:	4a12      	ldr	r2, [pc, #72]	@ (800cc60 <_tx_timer_thread_entry+0x1f8>)
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc1a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	f383 8810 	msr	PRIMASK, r3
}
 800cc22:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800cc24:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cc26:	f7ff fae1 	bl	800c1ec <_tx_thread_system_suspend>
 800cc2a:	e728      	b.n	800ca7e <_tx_timer_thread_entry+0x16>
 800cc2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	f383 8810 	msr	PRIMASK, r3
}
 800cc36:	bf00      	nop
            TX_DISABLE
 800cc38:	e721      	b.n	800ca7e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800cc3a:	bf00      	nop
 800cc3c:	3760      	adds	r7, #96	@ 0x60
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	4154494d 	.word	0x4154494d
 800cc48:	20010bdc 	.word	0x20010bdc
 800cc4c:	20010bd8 	.word	0x20010bd8
 800cc50:	20010bd4 	.word	0x20010bd4
 800cc54:	20010be0 	.word	0x20010be0
 800cc58:	20010bec 	.word	0x20010bec
 800cc5c:	20010bf0 	.word	0x20010bf0
 800cc60:	20010b40 	.word	0x20010b40

0800cc64 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b08a      	sub	sp, #40	@ 0x28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
 800cc70:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cc72:	2300      	movs	r3, #0
 800cc74:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d102      	bne.n	800cc82 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc80:	e029      	b.n	800ccd6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a2d      	ldr	r2, [pc, #180]	@ (800cd3c <_txe_byte_allocate+0xd8>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d002      	beq.n	800cc92 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc90:	e021      	b.n	800ccd6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d102      	bne.n	800cc9e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc9c:	e01b      	b.n	800ccd6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d102      	bne.n	800ccaa <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800cca4:	2305      	movs	r3, #5
 800cca6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cca8:	e015      	b.n	800ccd6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d902      	bls.n	800ccba <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800ccb4:	2305      	movs	r3, #5
 800ccb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccb8:	e00d      	b.n	800ccd6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00a      	beq.n	800ccd6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ccc0:	f3ef 8305 	mrs	r3, IPSR
 800ccc4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800ccc6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ccc8:	4b1d      	ldr	r3, [pc, #116]	@ (800cd40 <_txe_byte_allocate+0xdc>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ccd2:	2304      	movs	r3, #4
 800ccd4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d108      	bne.n	800ccee <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800ccdc:	4b19      	ldr	r3, [pc, #100]	@ (800cd44 <_txe_byte_allocate+0xe0>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	4a18      	ldr	r2, [pc, #96]	@ (800cd48 <_txe_byte_allocate+0xe4>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d101      	bne.n	800ccee <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800ccea:	2313      	movs	r3, #19
 800ccec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800ccee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d114      	bne.n	800cd1e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ccf4:	f3ef 8305 	mrs	r3, IPSR
 800ccf8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ccfa:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ccfc:	4b10      	ldr	r3, [pc, #64]	@ (800cd40 <_txe_byte_allocate+0xdc>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4313      	orrs	r3, r2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00b      	beq.n	800cd1e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd06:	f3ef 8305 	mrs	r3, IPSR
 800cd0a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cd0c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cd0e:	4b0c      	ldr	r3, [pc, #48]	@ (800cd40 <_txe_byte_allocate+0xdc>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800cd18:	d201      	bcs.n	800cd1e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cd1a:	2313      	movs	r3, #19
 800cd1c:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d106      	bne.n	800cd32 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	68b9      	ldr	r1, [r7, #8]
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f7fe fa1a 	bl	800b164 <_tx_byte_allocate>
 800cd30:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800cd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3728      	adds	r7, #40	@ 0x28
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	42595445 	.word	0x42595445
 800cd40:	2000004c 	.word	0x2000004c
 800cd44:	20010aa8 	.word	0x20010aa8
 800cd48:	20010bf0 	.word	0x20010bf0

0800cd4c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b092      	sub	sp, #72	@ 0x48
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d102      	bne.n	800cd6a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cd64:	2302      	movs	r3, #2
 800cd66:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd68:	e075      	b.n	800ce56 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800cd6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd6c:	2b34      	cmp	r3, #52	@ 0x34
 800cd6e:	d002      	beq.n	800cd76 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cd70:	2302      	movs	r3, #2
 800cd72:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd74:	e06f      	b.n	800ce56 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd76:	f3ef 8310 	mrs	r3, PRIMASK
 800cd7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800cd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800cd7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd80:	b672      	cpsid	i
    return(int_posture);
 800cd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cd84:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cd86:	4b3b      	ldr	r3, [pc, #236]	@ (800ce74 <_txe_byte_pool_create+0x128>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	4a39      	ldr	r2, [pc, #228]	@ (800ce74 <_txe_byte_pool_create+0x128>)
 800cd8e:	6013      	str	r3, [r2, #0]
 800cd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd92:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd96:	f383 8810 	msr	PRIMASK, r3
}
 800cd9a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800cd9c:	4b36      	ldr	r3, [pc, #216]	@ (800ce78 <_txe_byte_pool_create+0x12c>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800cda2:	2300      	movs	r3, #0
 800cda4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cda6:	e009      	b.n	800cdbc <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d00b      	beq.n	800cdc8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800cdb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800cdb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdb8:	3301      	adds	r3, #1
 800cdba:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdbc:	4b2f      	ldr	r3, [pc, #188]	@ (800ce7c <_txe_byte_pool_create+0x130>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d3f0      	bcc.n	800cda8 <_txe_byte_pool_create+0x5c>
 800cdc6:	e000      	b.n	800cdca <_txe_byte_pool_create+0x7e>
                break;
 800cdc8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdca:	f3ef 8310 	mrs	r3, PRIMASK
 800cdce:	623b      	str	r3, [r7, #32]
    return(posture);
 800cdd0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cdd2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdd4:	b672      	cpsid	i
    return(int_posture);
 800cdd6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cdd8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cdda:	4b26      	ldr	r3, [pc, #152]	@ (800ce74 <_txe_byte_pool_create+0x128>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	4a24      	ldr	r2, [pc, #144]	@ (800ce74 <_txe_byte_pool_create+0x128>)
 800cde2:	6013      	str	r3, [r2, #0]
 800cde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdea:	f383 8810 	msr	PRIMASK, r3
}
 800cdee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cdf0:	f7ff f8c2 	bl	800bf78 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d102      	bne.n	800ce02 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce00:	e029      	b.n	800ce56 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d102      	bne.n	800ce0e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce0c:	e023      	b.n	800ce56 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b63      	cmp	r3, #99	@ 0x63
 800ce12:	d802      	bhi.n	800ce1a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800ce14:	2305      	movs	r3, #5
 800ce16:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce18:	e01d      	b.n	800ce56 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ce1a:	4b19      	ldr	r3, [pc, #100]	@ (800ce80 <_txe_byte_pool_create+0x134>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800ce20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce22:	4a18      	ldr	r2, [pc, #96]	@ (800ce84 <_txe_byte_pool_create+0x138>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d101      	bne.n	800ce2c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ce28:	2313      	movs	r3, #19
 800ce2a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce2c:	f3ef 8305 	mrs	r3, IPSR
 800ce30:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ce32:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ce34:	4b14      	ldr	r3, [pc, #80]	@ (800ce88 <_txe_byte_pool_create+0x13c>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00b      	beq.n	800ce56 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce3e:	f3ef 8305 	mrs	r3, IPSR
 800ce42:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ce44:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ce46:	4b10      	ldr	r3, [pc, #64]	@ (800ce88 <_txe_byte_pool_create+0x13c>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ce50:	d201      	bcs.n	800ce56 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800ce52:	2313      	movs	r3, #19
 800ce54:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ce56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d106      	bne.n	800ce6a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	68b9      	ldr	r1, [r7, #8]
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7fe fac0 	bl	800b3e8 <_tx_byte_pool_create>
 800ce68:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800ce6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3748      	adds	r7, #72	@ 0x48
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	20010b40 	.word	0x20010b40
 800ce78:	20010a98 	.word	0x20010a98
 800ce7c:	20010a9c 	.word	0x20010a9c
 800ce80:	20010aa8 	.word	0x20010aa8
 800ce84:	20010bf0 	.word	0x20010bf0
 800ce88:	2000004c 	.word	0x2000004c

0800ce8c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b092      	sub	sp, #72	@ 0x48
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d102      	bne.n	800ceaa <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cea4:	230c      	movs	r3, #12
 800cea6:	647b      	str	r3, [r7, #68]	@ 0x44
 800cea8:	e054      	b.n	800cf54 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	2b1c      	cmp	r3, #28
 800ceae:	d002      	beq.n	800ceb6 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ceb0:	230c      	movs	r3, #12
 800ceb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800ceb4:	e04e      	b.n	800cf54 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ceb6:	f3ef 8310 	mrs	r3, PRIMASK
 800ceba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800cebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800cebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cec0:	b672      	cpsid	i
    return(int_posture);
 800cec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cec4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cec6:	4b36      	ldr	r3, [pc, #216]	@ (800cfa0 <_txe_semaphore_create+0x114>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3301      	adds	r3, #1
 800cecc:	4a34      	ldr	r2, [pc, #208]	@ (800cfa0 <_txe_semaphore_create+0x114>)
 800cece:	6013      	str	r3, [r2, #0]
 800ced0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ced4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced6:	f383 8810 	msr	PRIMASK, r3
}
 800ceda:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800cedc:	4b31      	ldr	r3, [pc, #196]	@ (800cfa4 <_txe_semaphore_create+0x118>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800cee2:	2300      	movs	r3, #0
 800cee4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cee6:	e009      	b.n	800cefc <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d00b      	beq.n	800cf08 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800cef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cef2:	695b      	ldr	r3, [r3, #20]
 800cef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800cef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cef8:	3301      	adds	r3, #1
 800cefa:	643b      	str	r3, [r7, #64]	@ 0x40
 800cefc:	4b2a      	ldr	r3, [pc, #168]	@ (800cfa8 <_txe_semaphore_create+0x11c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d3f0      	bcc.n	800cee8 <_txe_semaphore_create+0x5c>
 800cf06:	e000      	b.n	800cf0a <_txe_semaphore_create+0x7e>
                break;
 800cf08:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf0e:	623b      	str	r3, [r7, #32]
    return(posture);
 800cf10:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cf12:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf14:	b672      	cpsid	i
    return(int_posture);
 800cf16:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cf18:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cf1a:	4b21      	ldr	r3, [pc, #132]	@ (800cfa0 <_txe_semaphore_create+0x114>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	4a1f      	ldr	r2, [pc, #124]	@ (800cfa0 <_txe_semaphore_create+0x114>)
 800cf22:	6013      	str	r3, [r2, #0]
 800cf24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf26:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2a:	f383 8810 	msr	PRIMASK, r3
}
 800cf2e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cf30:	f7ff f822 	bl	800bf78 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d102      	bne.n	800cf42 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800cf3c:	230c      	movs	r3, #12
 800cf3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf40:	e008      	b.n	800cf54 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cf42:	4b1a      	ldr	r3, [pc, #104]	@ (800cfac <_txe_semaphore_create+0x120>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800cf48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf4a:	4a19      	ldr	r2, [pc, #100]	@ (800cfb0 <_txe_semaphore_create+0x124>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d101      	bne.n	800cf54 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cf50:	2313      	movs	r3, #19
 800cf52:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cf54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d114      	bne.n	800cf84 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf5a:	f3ef 8305 	mrs	r3, IPSR
 800cf5e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cf60:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cf62:	4b14      	ldr	r3, [pc, #80]	@ (800cfb4 <_txe_semaphore_create+0x128>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00b      	beq.n	800cf84 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf6c:	f3ef 8305 	mrs	r3, IPSR
 800cf70:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cf72:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cf74:	4b0f      	ldr	r3, [pc, #60]	@ (800cfb4 <_txe_semaphore_create+0x128>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800cf7e:	d201      	bcs.n	800cf84 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cf80:	2313      	movs	r3, #19
 800cf82:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cf84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d105      	bne.n	800cf96 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	68b9      	ldr	r1, [r7, #8]
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f7fe fcb8 	bl	800b904 <_tx_semaphore_create>
 800cf94:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800cf96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3748      	adds	r7, #72	@ 0x48
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	20010b40 	.word	0x20010b40
 800cfa4:	20010a70 	.word	0x20010a70
 800cfa8:	20010a74 	.word	0x20010a74
 800cfac:	20010aa8 	.word	0x20010aa8
 800cfb0:	20010bf0 	.word	0x20010bf0
 800cfb4:	2000004c 	.word	0x2000004c

0800cfb8 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d102      	bne.n	800cfd2 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cfcc:	230c      	movs	r3, #12
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	e01f      	b.n	800d012 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a15      	ldr	r2, [pc, #84]	@ (800d02c <_txe_semaphore_get+0x74>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d002      	beq.n	800cfe2 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cfdc:	230c      	movs	r3, #12
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	e017      	b.n	800d012 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d014      	beq.n	800d012 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cfe8:	f3ef 8305 	mrs	r3, IPSR
 800cfec:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800cfee:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cff0:	4b0f      	ldr	r3, [pc, #60]	@ (800d030 <_txe_semaphore_get+0x78>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cffa:	2304      	movs	r3, #4
 800cffc:	617b      	str	r3, [r7, #20]
 800cffe:	e008      	b.n	800d012 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800d000:	4b0c      	ldr	r3, [pc, #48]	@ (800d034 <_txe_semaphore_get+0x7c>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	4a0b      	ldr	r2, [pc, #44]	@ (800d038 <_txe_semaphore_get+0x80>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d101      	bne.n	800d012 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800d00e:	2304      	movs	r3, #4
 800d010:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d104      	bne.n	800d022 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7fe fcc4 	bl	800b9a8 <_tx_semaphore_get>
 800d020:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d022:	697b      	ldr	r3, [r7, #20]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3718      	adds	r7, #24
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	53454d41 	.word	0x53454d41
 800d030:	2000004c 	.word	0x2000004c
 800d034:	20010aa8 	.word	0x20010aa8
 800d038:	20010bf0 	.word	0x20010bf0

0800d03c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d102      	bne.n	800d050 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d04a:	230c      	movs	r3, #12
 800d04c:	60fb      	str	r3, [r7, #12]
 800d04e:	e00b      	b.n	800d068 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a07      	ldr	r2, [pc, #28]	@ (800d074 <_txe_semaphore_put+0x38>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d002      	beq.n	800d060 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d05a:	230c      	movs	r3, #12
 800d05c:	60fb      	str	r3, [r7, #12]
 800d05e:	e003      	b.n	800d068 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7fe fd33 	bl	800bacc <_tx_semaphore_put>
 800d066:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d068:	68fb      	ldr	r3, [r7, #12]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	53454d41 	.word	0x53454d41

0800d078 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b09a      	sub	sp, #104	@ 0x68
 800d07c:	af06      	add	r7, sp, #24
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d086:	2300      	movs	r3, #0
 800d088:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d102      	bne.n	800d096 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d090:	230e      	movs	r3, #14
 800d092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d094:	e0bb      	b.n	800d20e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800d096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d098:	2bb0      	cmp	r3, #176	@ 0xb0
 800d09a:	d002      	beq.n	800d0a2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d09c:	230e      	movs	r3, #14
 800d09e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0a0:	e0b5      	b.n	800d20e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800d0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800d0aa:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0ac:	b672      	cpsid	i
    return(int_posture);
 800d0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d0b2:	4b64      	ldr	r3, [pc, #400]	@ (800d244 <_txe_thread_create+0x1cc>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	4a62      	ldr	r2, [pc, #392]	@ (800d244 <_txe_thread_create+0x1cc>)
 800d0ba:	6013      	str	r3, [r2, #0]
 800d0bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c2:	f383 8810 	msr	PRIMASK, r3
}
 800d0c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800d0cc:	4b5e      	ldr	r3, [pc, #376]	@ (800d248 <_txe_thread_create+0x1d0>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d0d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d0d4:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800d0d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0dc:	4413      	add	r3, r2
 800d0de:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800d0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e2:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0e8:	e02b      	b.n	800d142 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d101      	bne.n	800d0f6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800d0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d028      	beq.n	800d14e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800d0fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d102:	429a      	cmp	r2, r3
 800d104:	d308      	bcc.n	800d118 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800d106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d203      	bcs.n	800d118 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d110:	2300      	movs	r3, #0
 800d112:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d114:	2301      	movs	r3, #1
 800d116:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800d118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d11e:	429a      	cmp	r2, r3
 800d120:	d308      	bcc.n	800d134 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800d122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d128:	429a      	cmp	r2, r3
 800d12a:	d203      	bcs.n	800d134 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d12c:	2300      	movs	r3, #0
 800d12e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d130:	2301      	movs	r3, #1
 800d132:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800d134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d13a:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d13c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d13e:	3301      	adds	r3, #1
 800d140:	647b      	str	r3, [r7, #68]	@ 0x44
 800d142:	4b42      	ldr	r3, [pc, #264]	@ (800d24c <_txe_thread_create+0x1d4>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d148:	429a      	cmp	r2, r3
 800d14a:	d3ce      	bcc.n	800d0ea <_txe_thread_create+0x72>
 800d14c:	e000      	b.n	800d150 <_txe_thread_create+0xd8>
                break;
 800d14e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d150:	f3ef 8310 	mrs	r3, PRIMASK
 800d154:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d156:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d158:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d15a:	b672      	cpsid	i
    return(int_posture);
 800d15c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d15e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d160:	4b38      	ldr	r3, [pc, #224]	@ (800d244 <_txe_thread_create+0x1cc>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3b01      	subs	r3, #1
 800d166:	4a37      	ldr	r2, [pc, #220]	@ (800d244 <_txe_thread_create+0x1cc>)
 800d168:	6013      	str	r3, [r2, #0]
 800d16a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d16c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	f383 8810 	msr	PRIMASK, r3
}
 800d174:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d176:	f7fe feff 	bl	800bf78 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d17e:	429a      	cmp	r2, r3
 800d180:	d102      	bne.n	800d188 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800d182:	230e      	movs	r3, #14
 800d184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d186:	e042      	b.n	800d20e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800d188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d102      	bne.n	800d194 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d18e:	2303      	movs	r3, #3
 800d190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d192:	e03c      	b.n	800d20e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d102      	bne.n	800d1a0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d19a:	2303      	movs	r3, #3
 800d19c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d19e:	e036      	b.n	800d20e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800d1a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1a2:	2bc7      	cmp	r3, #199	@ 0xc7
 800d1a4:	d802      	bhi.n	800d1ac <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800d1a6:	2305      	movs	r3, #5
 800d1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1aa:	e030      	b.n	800d20e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800d1ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d1ae:	2b1f      	cmp	r3, #31
 800d1b0:	d902      	bls.n	800d1b8 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800d1b2:	230f      	movs	r3, #15
 800d1b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1b6:	e02a      	b.n	800d20e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800d1b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d1ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d902      	bls.n	800d1c6 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800d1c0:	2318      	movs	r3, #24
 800d1c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1c4:	e023      	b.n	800d20e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800d1c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d902      	bls.n	800d1d2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800d1cc:	2310      	movs	r3, #16
 800d1ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1d0:	e01d      	b.n	800d20e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800d1d2:	4b1f      	ldr	r3, [pc, #124]	@ (800d250 <_txe_thread_create+0x1d8>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1da:	4a1e      	ldr	r2, [pc, #120]	@ (800d254 <_txe_thread_create+0x1dc>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d101      	bne.n	800d1e4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d1e0:	2313      	movs	r3, #19
 800d1e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1e4:	f3ef 8305 	mrs	r3, IPSR
 800d1e8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d1ea:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d1ec:	4b1a      	ldr	r3, [pc, #104]	@ (800d258 <_txe_thread_create+0x1e0>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00b      	beq.n	800d20e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1f6:	f3ef 8305 	mrs	r3, IPSR
 800d1fa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d1fc:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d1fe:	4b16      	ldr	r3, [pc, #88]	@ (800d258 <_txe_thread_create+0x1e0>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4313      	orrs	r3, r2
 800d204:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d208:	d201      	bcs.n	800d20e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d20a:	2313      	movs	r3, #19
 800d20c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d112      	bne.n	800d23a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800d214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d216:	9305      	str	r3, [sp, #20]
 800d218:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d21a:	9304      	str	r3, [sp, #16]
 800d21c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d21e:	9303      	str	r3, [sp, #12]
 800d220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d222:	9302      	str	r3, [sp, #8]
 800d224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	68b9      	ldr	r1, [r7, #8]
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f7fe fca2 	bl	800bb7c <_tx_thread_create>
 800d238:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800d23a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3750      	adds	r7, #80	@ 0x50
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	20010b40 	.word	0x20010b40
 800d248:	20010ab0 	.word	0x20010ab0
 800d24c:	20010ab4 	.word	0x20010ab4
 800d250:	20010aa8 	.word	0x20010aa8
 800d254:	20010bf0 	.word	0x20010bf0
 800d258:	2000004c 	.word	0x2000004c

0800d25c <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d102      	bne.n	800d270 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d26a:	2315      	movs	r3, #21
 800d26c:	60fb      	str	r3, [r7, #12]
 800d26e:	e00b      	b.n	800d288 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a07      	ldr	r2, [pc, #28]	@ (800d294 <_txe_timer_activate+0x38>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d002      	beq.n	800d280 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d27a:	2315      	movs	r3, #21
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	e003      	b.n	800d288 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff f959 	bl	800c538 <_tx_timer_activate>
 800d286:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d288:	68fb      	ldr	r3, [r7, #12]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	4154494d 	.word	0x4154494d

0800d298 <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b086      	sub	sp, #24
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d102      	bne.n	800d2b0 <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d2aa:	2315      	movs	r3, #21
 800d2ac:	617b      	str	r3, [r7, #20]
 800d2ae:	e020      	b.n	800d2f2 <_txe_timer_change+0x5a>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a11      	ldr	r2, [pc, #68]	@ (800d2fc <_txe_timer_change+0x64>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d002      	beq.n	800d2c0 <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d2ba:	2315      	movs	r3, #21
 800d2bc:	617b      	str	r3, [r7, #20]
 800d2be:	e018      	b.n	800d2f2 <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d102      	bne.n	800d2cc <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 800d2c6:	2316      	movs	r3, #22
 800d2c8:	617b      	str	r3, [r7, #20]
 800d2ca:	e012      	b.n	800d2f2 <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2cc:	f3ef 8305 	mrs	r3, IPSR
 800d2d0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d2d2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d300 <_txe_timer_change+0x68>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d2de:	d302      	bcc.n	800d2e6 <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d2e0:	2313      	movs	r3, #19
 800d2e2:	617b      	str	r3, [r7, #20]
 800d2e4:	e005      	b.n	800d2f2 <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	68b9      	ldr	r1, [r7, #8]
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f7ff f950 	bl	800c590 <_tx_timer_change>
 800d2f0:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d2f2:	697b      	ldr	r3, [r7, #20]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3718      	adds	r7, #24
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	4154494d 	.word	0x4154494d
 800d300:	2000004c 	.word	0x2000004c

0800d304 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b096      	sub	sp, #88	@ 0x58
 800d308:	af04      	add	r7, sp, #16
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d312:	2300      	movs	r3, #0
 800d314:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d102      	bne.n	800d322 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d31c:	2315      	movs	r3, #21
 800d31e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d320:	e059      	b.n	800d3d6 <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800d322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d324:	2b2c      	cmp	r3, #44	@ 0x2c
 800d326:	d002      	beq.n	800d32e <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d328:	2315      	movs	r3, #21
 800d32a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d32c:	e053      	b.n	800d3d6 <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d32e:	f3ef 8310 	mrs	r3, PRIMASK
 800d332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800d336:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d338:	b672      	cpsid	i
    return(int_posture);
 800d33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d33c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d33e:	4b41      	ldr	r3, [pc, #260]	@ (800d444 <_txe_timer_create+0x140>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	3301      	adds	r3, #1
 800d344:	4a3f      	ldr	r2, [pc, #252]	@ (800d444 <_txe_timer_create+0x140>)
 800d346:	6013      	str	r3, [r2, #0]
 800d348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34e:	f383 8810 	msr	PRIMASK, r3
}
 800d352:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800d354:	4b3c      	ldr	r3, [pc, #240]	@ (800d448 <_txe_timer_create+0x144>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800d35a:	2300      	movs	r3, #0
 800d35c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d35e:	e009      	b.n	800d374 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d364:	429a      	cmp	r2, r3
 800d366:	d00b      	beq.n	800d380 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800d368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800d36e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d370:	3301      	adds	r3, #1
 800d372:	643b      	str	r3, [r7, #64]	@ 0x40
 800d374:	4b35      	ldr	r3, [pc, #212]	@ (800d44c <_txe_timer_create+0x148>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d3f0      	bcc.n	800d360 <_txe_timer_create+0x5c>
 800d37e:	e000      	b.n	800d382 <_txe_timer_create+0x7e>
                break;
 800d380:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d382:	f3ef 8310 	mrs	r3, PRIMASK
 800d386:	623b      	str	r3, [r7, #32]
    return(posture);
 800d388:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d38a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d38c:	b672      	cpsid	i
    return(int_posture);
 800d38e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d390:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d392:	4b2c      	ldr	r3, [pc, #176]	@ (800d444 <_txe_timer_create+0x140>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3b01      	subs	r3, #1
 800d398:	4a2a      	ldr	r2, [pc, #168]	@ (800d444 <_txe_timer_create+0x140>)
 800d39a:	6013      	str	r3, [r2, #0]
 800d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a2:	f383 8810 	msr	PRIMASK, r3
}
 800d3a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d3a8:	f7fe fde6 	bl	800bf78 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d102      	bne.n	800d3ba <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800d3b4:	2315      	movs	r3, #21
 800d3b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3b8:	e00d      	b.n	800d3d6 <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800d3ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d102      	bne.n	800d3c6 <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800d3c0:	2316      	movs	r3, #22
 800d3c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3c4:	e007      	b.n	800d3d6 <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800d3c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d004      	beq.n	800d3d6 <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800d3cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800d3d2:	2317      	movs	r3, #23
 800d3d4:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d3d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d11d      	bne.n	800d418 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d3dc:	4b1c      	ldr	r3, [pc, #112]	@ (800d450 <_txe_timer_create+0x14c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3e4:	4a1b      	ldr	r2, [pc, #108]	@ (800d454 <_txe_timer_create+0x150>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d101      	bne.n	800d3ee <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d3ea:	2313      	movs	r3, #19
 800d3ec:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d3ee:	f3ef 8305 	mrs	r3, IPSR
 800d3f2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d3f4:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d3f6:	4b18      	ldr	r3, [pc, #96]	@ (800d458 <_txe_timer_create+0x154>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d00b      	beq.n	800d418 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d400:	f3ef 8305 	mrs	r3, IPSR
 800d404:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d406:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d408:	4b13      	ldr	r3, [pc, #76]	@ (800d458 <_txe_timer_create+0x154>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d412:	d201      	bcs.n	800d418 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d414:	2313      	movs	r3, #19
 800d416:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d10c      	bne.n	800d438 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800d41e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d420:	9302      	str	r3, [sp, #8]
 800d422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	68b9      	ldr	r1, [r7, #8]
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f7ff f8d3 	bl	800c5dc <_tx_timer_create>
 800d436:	6478      	str	r0, [r7, #68]	@ 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800d438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3748      	adds	r7, #72	@ 0x48
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	20010b40 	.word	0x20010b40
 800d448:	20010be4 	.word	0x20010be4
 800d44c:	20010be8 	.word	0x20010be8
 800d450:	20010aa8 	.word	0x20010aa8
 800d454:	20010bf0 	.word	0x20010bf0
 800d458:	2000004c 	.word	0x2000004c

0800d45c <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d102      	bne.n	800d470 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d46a:	2315      	movs	r3, #21
 800d46c:	60fb      	str	r3, [r7, #12]
 800d46e:	e00b      	b.n	800d488 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a07      	ldr	r2, [pc, #28]	@ (800d494 <_txe_timer_deactivate+0x38>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d002      	beq.n	800d480 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d47a:	2315      	movs	r3, #21
 800d47c:	60fb      	str	r3, [r7, #12]
 800d47e:	e003      	b.n	800d488 <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff f90f 	bl	800c6a4 <_tx_timer_deactivate>
 800d486:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d488:	68fb      	ldr	r3, [r7, #12]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	4154494d 	.word	0x4154494d

0800d498 <memset>:
 800d498:	4402      	add	r2, r0
 800d49a:	4603      	mov	r3, r0
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d100      	bne.n	800d4a2 <memset+0xa>
 800d4a0:	4770      	bx	lr
 800d4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d4a6:	e7f9      	b.n	800d49c <memset+0x4>

0800d4a8 <__libc_init_array>:
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	4d0d      	ldr	r5, [pc, #52]	@ (800d4e0 <__libc_init_array+0x38>)
 800d4ac:	4c0d      	ldr	r4, [pc, #52]	@ (800d4e4 <__libc_init_array+0x3c>)
 800d4ae:	1b64      	subs	r4, r4, r5
 800d4b0:	10a4      	asrs	r4, r4, #2
 800d4b2:	2600      	movs	r6, #0
 800d4b4:	42a6      	cmp	r6, r4
 800d4b6:	d109      	bne.n	800d4cc <__libc_init_array+0x24>
 800d4b8:	4d0b      	ldr	r5, [pc, #44]	@ (800d4e8 <__libc_init_array+0x40>)
 800d4ba:	4c0c      	ldr	r4, [pc, #48]	@ (800d4ec <__libc_init_array+0x44>)
 800d4bc:	f000 f818 	bl	800d4f0 <_init>
 800d4c0:	1b64      	subs	r4, r4, r5
 800d4c2:	10a4      	asrs	r4, r4, #2
 800d4c4:	2600      	movs	r6, #0
 800d4c6:	42a6      	cmp	r6, r4
 800d4c8:	d105      	bne.n	800d4d6 <__libc_init_array+0x2e>
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4d0:	4798      	blx	r3
 800d4d2:	3601      	adds	r6, #1
 800d4d4:	e7ee      	b.n	800d4b4 <__libc_init_array+0xc>
 800d4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4da:	4798      	blx	r3
 800d4dc:	3601      	adds	r6, #1
 800d4de:	e7f2      	b.n	800d4c6 <__libc_init_array+0x1e>
 800d4e0:	0800d720 	.word	0x0800d720
 800d4e4:	0800d720 	.word	0x0800d720
 800d4e8:	0800d720 	.word	0x0800d720
 800d4ec:	0800d724 	.word	0x0800d724

0800d4f0 <_init>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	bf00      	nop
 800d4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4f6:	bc08      	pop	{r3}
 800d4f8:	469e      	mov	lr, r3
 800d4fa:	4770      	bx	lr

0800d4fc <_fini>:
 800d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fe:	bf00      	nop
 800d500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d502:	bc08      	pop	{r3}
 800d504:	469e      	mov	lr, r3
 800d506:	4770      	bx	lr
