
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800e5b0  0800e5b0  0000f5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e78c  0800e78c  00010058  2**0
                  CONTENTS
  4 .ARM          00000008  0800e78c  0800e78c  0000f78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e794  0800e794  00010058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e794  0800e794  0000f794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e798  0800e798  0000f798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  0800e79c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111a8  20000058  0800e7f4  00010058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011200  0800e7f4  00010200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a7ce  00000000  00000000  00010088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009117  00000000  00000000  0004a856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c88  00000000  00000000  00053970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002125  00000000  00000000  000565f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034514  00000000  00000000  0005871d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000432a6  00000000  00000000  0008cc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012ac4e  00000000  00000000  000cfed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fab25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000afe8  00000000  00000000  001fab68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fd  00000000  00000000  00205b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000058 	.word	0x20000058
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e598 	.word	0x0800e598

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000005c 	.word	0x2000005c
 800021c:	0800e598 	.word	0x0800e598

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20010bf4 	.word	0x20010bf4
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20010c90 	.word	0x20010c90
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20010bf8 	.word	0x20010bf8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20010bfc 	.word	0x20010bfc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	200111fc 	.word	0x200111fc

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f00d fa51 	bl	800d8a0 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f00d f85e 	bl	800d4c4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20010c9c 	.word	0x20010c9c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	200111fc 	.word	0x200111fc
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20010ca0 	.word	0x20010ca0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20010d2c 	.word	0x20010d2c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20010d30 	.word	0x20010d30
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20010d28 	.word	0x20010d28
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20010d24 	.word	0x20010d24
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20010c90 	.word	0x20010c90
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20010bf8 	.word	0x20010bf8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20010bfc 	.word	0x20010bfc
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_uldivmod>:
 8000458:	b953      	cbnz	r3, 8000470 <__aeabi_uldivmod+0x18>
 800045a:	b94a      	cbnz	r2, 8000470 <__aeabi_uldivmod+0x18>
 800045c:	2900      	cmp	r1, #0
 800045e:	bf08      	it	eq
 8000460:	2800      	cmpeq	r0, #0
 8000462:	bf1c      	itt	ne
 8000464:	f04f 31ff 	movne.w	r1, #4294967295
 8000468:	f04f 30ff 	movne.w	r0, #4294967295
 800046c:	f000 b96a 	b.w	8000744 <__aeabi_idiv0>
 8000470:	f1ad 0c08 	sub.w	ip, sp, #8
 8000474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000478:	f000 f806 	bl	8000488 <__udivmoddi4>
 800047c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000484:	b004      	add	sp, #16
 8000486:	4770      	bx	lr

08000488 <__udivmoddi4>:
 8000488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800048c:	9d08      	ldr	r5, [sp, #32]
 800048e:	460c      	mov	r4, r1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d14e      	bne.n	8000532 <__udivmoddi4+0xaa>
 8000494:	4694      	mov	ip, r2
 8000496:	458c      	cmp	ip, r1
 8000498:	4686      	mov	lr, r0
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	d962      	bls.n	8000566 <__udivmoddi4+0xde>
 80004a0:	b14a      	cbz	r2, 80004b6 <__udivmoddi4+0x2e>
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	4091      	lsls	r1, r2
 80004a8:	fa20 f303 	lsr.w	r3, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	4319      	orrs	r1, r3
 80004b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ba:	fa1f f68c 	uxth.w	r6, ip
 80004be:	fbb1 f4f7 	udiv	r4, r1, r7
 80004c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004c6:	fb07 1114 	mls	r1, r7, r4, r1
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb04 f106 	mul.w	r1, r4, r6
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d90a      	bls.n	80004ec <__udivmoddi4+0x64>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f104 30ff 	add.w	r0, r4, #4294967295
 80004de:	f080 8112 	bcs.w	8000706 <__udivmoddi4+0x27e>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 810f 	bls.w	8000706 <__udivmoddi4+0x27e>
 80004e8:	3c02      	subs	r4, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a59      	subs	r1, r3, r1
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f6:	fb07 1110 	mls	r1, r7, r0, r1
 80004fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fe:	fb00 f606 	mul.w	r6, r0, r6
 8000502:	429e      	cmp	r6, r3
 8000504:	d90a      	bls.n	800051c <__udivmoddi4+0x94>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 31ff 	add.w	r1, r0, #4294967295
 800050e:	f080 80fc 	bcs.w	800070a <__udivmoddi4+0x282>
 8000512:	429e      	cmp	r6, r3
 8000514:	f240 80f9 	bls.w	800070a <__udivmoddi4+0x282>
 8000518:	4463      	add	r3, ip
 800051a:	3802      	subs	r0, #2
 800051c:	1b9b      	subs	r3, r3, r6
 800051e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000522:	2100      	movs	r1, #0
 8000524:	b11d      	cbz	r5, 800052e <__udivmoddi4+0xa6>
 8000526:	40d3      	lsrs	r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	e9c5 3200 	strd	r3, r2, [r5]
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	428b      	cmp	r3, r1
 8000534:	d905      	bls.n	8000542 <__udivmoddi4+0xba>
 8000536:	b10d      	cbz	r5, 800053c <__udivmoddi4+0xb4>
 8000538:	e9c5 0100 	strd	r0, r1, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	4608      	mov	r0, r1
 8000540:	e7f5      	b.n	800052e <__udivmoddi4+0xa6>
 8000542:	fab3 f183 	clz	r1, r3
 8000546:	2900      	cmp	r1, #0
 8000548:	d146      	bne.n	80005d8 <__udivmoddi4+0x150>
 800054a:	42a3      	cmp	r3, r4
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xcc>
 800054e:	4290      	cmp	r0, r2
 8000550:	f0c0 80f0 	bcc.w	8000734 <__udivmoddi4+0x2ac>
 8000554:	1a86      	subs	r6, r0, r2
 8000556:	eb64 0303 	sbc.w	r3, r4, r3
 800055a:	2001      	movs	r0, #1
 800055c:	2d00      	cmp	r5, #0
 800055e:	d0e6      	beq.n	800052e <__udivmoddi4+0xa6>
 8000560:	e9c5 6300 	strd	r6, r3, [r5]
 8000564:	e7e3      	b.n	800052e <__udivmoddi4+0xa6>
 8000566:	2a00      	cmp	r2, #0
 8000568:	f040 8090 	bne.w	800068c <__udivmoddi4+0x204>
 800056c:	eba1 040c 	sub.w	r4, r1, ip
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	fa1f f78c 	uxth.w	r7, ip
 8000578:	2101      	movs	r1, #1
 800057a:	fbb4 f6f8 	udiv	r6, r4, r8
 800057e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000582:	fb08 4416 	mls	r4, r8, r6, r4
 8000586:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800058a:	fb07 f006 	mul.w	r0, r7, r6
 800058e:	4298      	cmp	r0, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x11c>
 8000592:	eb1c 0303 	adds.w	r3, ip, r3
 8000596:	f106 34ff 	add.w	r4, r6, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x11a>
 800059c:	4298      	cmp	r0, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2b4>
 80005a2:	4626      	mov	r6, r4
 80005a4:	1a1c      	subs	r4, r3, r0
 80005a6:	fa1f f38e 	uxth.w	r3, lr
 80005aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80005ae:	fb08 4410 	mls	r4, r8, r0, r4
 80005b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b6:	fb00 f707 	mul.w	r7, r0, r7
 80005ba:	429f      	cmp	r7, r3
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x148>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c6:	d202      	bcs.n	80005ce <__udivmoddi4+0x146>
 80005c8:	429f      	cmp	r7, r3
 80005ca:	f200 80b0 	bhi.w	800072e <__udivmoddi4+0x2a6>
 80005ce:	4620      	mov	r0, r4
 80005d0:	1bdb      	subs	r3, r3, r7
 80005d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005d6:	e7a5      	b.n	8000524 <__udivmoddi4+0x9c>
 80005d8:	f1c1 0620 	rsb	r6, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 f706 	lsr.w	r7, r2, r6
 80005e2:	431f      	orrs	r7, r3
 80005e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e8:	fa04 f301 	lsl.w	r3, r4, r1
 80005ec:	ea43 030c 	orr.w	r3, r3, ip
 80005f0:	40f4      	lsrs	r4, r6
 80005f2:	fa00 f801 	lsl.w	r8, r0, r1
 80005f6:	0c38      	lsrs	r0, r7, #16
 80005f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000600:	fa1f fc87 	uxth.w	ip, r7
 8000604:	fb00 441e 	mls	r4, r0, lr, r4
 8000608:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800060c:	fb0e f90c 	mul.w	r9, lr, ip
 8000610:	45a1      	cmp	r9, r4
 8000612:	fa02 f201 	lsl.w	r2, r2, r1
 8000616:	d90a      	bls.n	800062e <__udivmoddi4+0x1a6>
 8000618:	193c      	adds	r4, r7, r4
 800061a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800061e:	f080 8084 	bcs.w	800072a <__udivmoddi4+0x2a2>
 8000622:	45a1      	cmp	r9, r4
 8000624:	f240 8081 	bls.w	800072a <__udivmoddi4+0x2a2>
 8000628:	f1ae 0e02 	sub.w	lr, lr, #2
 800062c:	443c      	add	r4, r7
 800062e:	eba4 0409 	sub.w	r4, r4, r9
 8000632:	fa1f f983 	uxth.w	r9, r3
 8000636:	fbb4 f3f0 	udiv	r3, r4, r0
 800063a:	fb00 4413 	mls	r4, r0, r3, r4
 800063e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000642:	fb03 fc0c 	mul.w	ip, r3, ip
 8000646:	45a4      	cmp	ip, r4
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x1d2>
 800064a:	193c      	adds	r4, r7, r4
 800064c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000650:	d267      	bcs.n	8000722 <__udivmoddi4+0x29a>
 8000652:	45a4      	cmp	ip, r4
 8000654:	d965      	bls.n	8000722 <__udivmoddi4+0x29a>
 8000656:	3b02      	subs	r3, #2
 8000658:	443c      	add	r4, r7
 800065a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800065e:	fba0 9302 	umull	r9, r3, r0, r2
 8000662:	eba4 040c 	sub.w	r4, r4, ip
 8000666:	429c      	cmp	r4, r3
 8000668:	46ce      	mov	lr, r9
 800066a:	469c      	mov	ip, r3
 800066c:	d351      	bcc.n	8000712 <__udivmoddi4+0x28a>
 800066e:	d04e      	beq.n	800070e <__udivmoddi4+0x286>
 8000670:	b155      	cbz	r5, 8000688 <__udivmoddi4+0x200>
 8000672:	ebb8 030e 	subs.w	r3, r8, lr
 8000676:	eb64 040c 	sbc.w	r4, r4, ip
 800067a:	fa04 f606 	lsl.w	r6, r4, r6
 800067e:	40cb      	lsrs	r3, r1
 8000680:	431e      	orrs	r6, r3
 8000682:	40cc      	lsrs	r4, r1
 8000684:	e9c5 6400 	strd	r6, r4, [r5]
 8000688:	2100      	movs	r1, #0
 800068a:	e750      	b.n	800052e <__udivmoddi4+0xa6>
 800068c:	f1c2 0320 	rsb	r3, r2, #32
 8000690:	fa20 f103 	lsr.w	r1, r0, r3
 8000694:	fa0c fc02 	lsl.w	ip, ip, r2
 8000698:	fa24 f303 	lsr.w	r3, r4, r3
 800069c:	4094      	lsls	r4, r2
 800069e:	430c      	orrs	r4, r1
 80006a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a8:	fa1f f78c 	uxth.w	r7, ip
 80006ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b0:	fb08 3110 	mls	r1, r8, r0, r3
 80006b4:	0c23      	lsrs	r3, r4, #16
 80006b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ba:	fb00 f107 	mul.w	r1, r0, r7
 80006be:	4299      	cmp	r1, r3
 80006c0:	d908      	bls.n	80006d4 <__udivmoddi4+0x24c>
 80006c2:	eb1c 0303 	adds.w	r3, ip, r3
 80006c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80006ca:	d22c      	bcs.n	8000726 <__udivmoddi4+0x29e>
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d92a      	bls.n	8000726 <__udivmoddi4+0x29e>
 80006d0:	3802      	subs	r0, #2
 80006d2:	4463      	add	r3, ip
 80006d4:	1a5b      	subs	r3, r3, r1
 80006d6:	b2a4      	uxth	r4, r4
 80006d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80006dc:	fb08 3311 	mls	r3, r8, r1, r3
 80006e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e4:	fb01 f307 	mul.w	r3, r1, r7
 80006e8:	42a3      	cmp	r3, r4
 80006ea:	d908      	bls.n	80006fe <__udivmoddi4+0x276>
 80006ec:	eb1c 0404 	adds.w	r4, ip, r4
 80006f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80006f4:	d213      	bcs.n	800071e <__udivmoddi4+0x296>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d911      	bls.n	800071e <__udivmoddi4+0x296>
 80006fa:	3902      	subs	r1, #2
 80006fc:	4464      	add	r4, ip
 80006fe:	1ae4      	subs	r4, r4, r3
 8000700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000704:	e739      	b.n	800057a <__udivmoddi4+0xf2>
 8000706:	4604      	mov	r4, r0
 8000708:	e6f0      	b.n	80004ec <__udivmoddi4+0x64>
 800070a:	4608      	mov	r0, r1
 800070c:	e706      	b.n	800051c <__udivmoddi4+0x94>
 800070e:	45c8      	cmp	r8, r9
 8000710:	d2ae      	bcs.n	8000670 <__udivmoddi4+0x1e8>
 8000712:	ebb9 0e02 	subs.w	lr, r9, r2
 8000716:	eb63 0c07 	sbc.w	ip, r3, r7
 800071a:	3801      	subs	r0, #1
 800071c:	e7a8      	b.n	8000670 <__udivmoddi4+0x1e8>
 800071e:	4631      	mov	r1, r6
 8000720:	e7ed      	b.n	80006fe <__udivmoddi4+0x276>
 8000722:	4603      	mov	r3, r0
 8000724:	e799      	b.n	800065a <__udivmoddi4+0x1d2>
 8000726:	4630      	mov	r0, r6
 8000728:	e7d4      	b.n	80006d4 <__udivmoddi4+0x24c>
 800072a:	46d6      	mov	lr, sl
 800072c:	e77f      	b.n	800062e <__udivmoddi4+0x1a6>
 800072e:	4463      	add	r3, ip
 8000730:	3802      	subs	r0, #2
 8000732:	e74d      	b.n	80005d0 <__udivmoddi4+0x148>
 8000734:	4606      	mov	r6, r0
 8000736:	4623      	mov	r3, r4
 8000738:	4608      	mov	r0, r1
 800073a:	e70f      	b.n	800055c <__udivmoddi4+0xd4>
 800073c:	3e02      	subs	r6, #2
 800073e:	4463      	add	r3, ip
 8000740:	e730      	b.n	80005a4 <__udivmoddi4+0x11c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000754:	2334      	movs	r3, #52	@ 0x34
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <tx_application_define+0x4c>)
 800075e:	490e      	ldr	r1, [pc, #56]	@ (8000798 <tx_application_define+0x50>)
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <tx_application_define+0x54>)
 8000762:	f00d fb47 	bl	800ddf4 <_txe_byte_pool_create>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10e      	bne.n	800078a <tx_application_define+0x42>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <tx_application_define+0x54>)
 800076e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f000 fa4d 	bl	8000c10 <App_ThreadX_Init>
 8000776:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f001 fb36 	bl	8001df4 <ThreadX_Init>
 8000788:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000074 	.word	0x20000074
 8000798:	0800e5b0 	.word	0x0800e5b0
 800079c:	20010074 	.word	0x20010074

080007a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00d fec1 	bl	800e540 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800082a:	f003 f945 	bl	8003ab8 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 fde2 	bl	80013fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000844:	f004 fc08 	bl	8005058 <HAL_ADCEx_MultiModeConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800084e:	f000 fdd5 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_ADC1_Init+0xec>)
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000856:	2306      	movs	r3, #6
 8000858:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	237f      	movs	r3, #127	@ 0x7f
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000870:	f003 fe30 	bl	80044d4 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087a:	f000 fdbf 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200100a8 	.word	0x200100a8
 800088c:	10c00010 	.word	0x10c00010

08000890 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f00d fe4f 	bl	800e540 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008a4:	4a5e      	ldr	r2, [pc, #376]	@ (8000a20 <MX_ADC4_Init+0x190>)
 80008a6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ae:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b59      	ldr	r3, [pc, #356]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008bc:	4b57      	ldr	r3, [pc, #348]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c2:	4b56      	ldr	r3, [pc, #344]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008c8:	4b54      	ldr	r3, [pc, #336]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008d4:	4b51      	ldr	r3, [pc, #324]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008dc:	2208      	movs	r2, #8
 80008de:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e8:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008f4:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fc:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000902:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000904:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800090c:	4843      	ldr	r0, [pc, #268]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800090e:	f003 f8d3 	bl	8003ab8 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 fd70 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800091c:	4b41      	ldr	r3, [pc, #260]	@ (8000a24 <MX_ADC4_Init+0x194>)
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000920:	2306      	movs	r3, #6
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000928:	237f      	movs	r3, #127	@ 0x7f
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4838      	ldr	r0, [pc, #224]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800093a:	f003 fdcb 	bl	80044d4 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000944:	f000 fd5a 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <MX_ADC4_Init+0x198>)
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094c:	230c      	movs	r3, #12
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4831      	ldr	r0, [pc, #196]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000956:	f003 fdbd 	bl	80044d4 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000960:	f000 fd4c 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b31      	ldr	r3, [pc, #196]	@ (8000a2c <MX_ADC4_Init+0x19c>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000968:	2312      	movs	r3, #18
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	482a      	ldr	r0, [pc, #168]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000972:	f003 fdaf 	bl	80044d4 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 800097c:	f000 fd3e 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_ADC4_Init+0x1a0>)
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000984:	2318      	movs	r3, #24
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800098e:	f003 fda1 	bl	80044d4 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000998:	f000 fd30 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_ADC4_Init+0x1a4>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ac:	f003 fd92 	bl	80044d4 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 80009b6:	f000 fd21 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_ADC4_Init+0x1a8>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009be:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ca:	f003 fd83 	bl	80044d4 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 80009d4:	f000 fd12 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_ADC4_Init+0x1ac>)
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009dc:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009e8:	f003 fd74 	bl	80044d4 <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 80009f2:	f000 fd03 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_ADC4_Init+0x1b0>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009fa:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000a06:	f003 fd65 	bl	80044d4 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000a10:	f000 fcf4 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20010114 	.word	0x20010114
 8000a20:	50000500 	.word	0x50000500
 8000a24:	14f00020 	.word	0x14f00020
 8000a28:	32601000 	.word	0x32601000
 8000a2c:	2a000400 	.word	0x2a000400
 8000a30:	2e300800 	.word	0x2e300800
 8000a34:	36902000 	.word	0x36902000
 8000a38:	1d500080 	.word	0x1d500080
 8000a3c:	21800100 	.word	0x21800100
 8000a40:	25b00200 	.word	0x25b00200

08000a44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0a2      	sub	sp, #136	@ 0x88
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	2254      	movs	r2, #84	@ 0x54
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00d fd6b 	bl	800e540 <memset>
  if(adcHandle->Instance==ADC1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a72:	d135      	bne.n	8000ae0 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	4618      	mov	r0, r3
 8000a86:	f008 fc9b 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a90:	f000 fcb4 	bl	80013fc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a94:	4b58      	ldr	r3, [pc, #352]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	4a57      	ldr	r2, [pc, #348]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa0:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b52      	ldr	r3, [pc, #328]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab0:	4a51      	ldr	r2, [pc, #324]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f005 fcc7 	bl	800646c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000ade:	e086      	b.n	8000bee <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a45      	ldr	r2, [pc, #276]	@ (8000bfc <HAL_ADC_MspInit+0x1b8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 8081 	bne.w	8000bee <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000af2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f008 fc5f 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000b08:	f000 fc78 	bl	80013fc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a39      	ldr	r2, [pc, #228]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	4a33      	ldr	r2, [pc, #204]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b58:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b66:	4619      	mov	r1, r3
 8000b68:	4825      	ldr	r0, [pc, #148]	@ (8000c00 <HAL_ADC_MspInit+0x1bc>)
 8000b6a:	f005 fc7f 	bl	800646c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000b6e:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000b72:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b80:	4619      	mov	r1, r3
 8000b82:	4820      	ldr	r0, [pc, #128]	@ (8000c04 <HAL_ADC_MspInit+0x1c0>)
 8000b84:	f005 fc72 	bl	800646c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b8a:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_ADC_MspInit+0x1c8>)
 8000b8c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b90:	2226      	movs	r2, #38	@ 0x26
 8000b92:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb8:	2220      	movs	r2, #32
 8000bba:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000bc2:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bc4:	f004 fd22 	bl	800560c <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000bce:	f000 fc15 	bl	80013fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	203d      	movs	r0, #61	@ 0x3d
 8000be4:	f004 fbf8 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000be8:	203d      	movs	r0, #61	@ 0x3d
 8000bea:	f004 fc0f 	bl	800540c <HAL_NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3788      	adds	r7, #136	@ 0x88
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000500 	.word	0x50000500
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	20010180 	.word	0x20010180
 8000c0c:	40020030 	.word	0x40020030

08000c10 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  ret = ThreadX_Init(memory_ptr);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f001 f8e9 	bl	8001df4 <ThreadX_Init>
 8000c22:	60f8      	str	r0, [r7, #12]
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000c32:	f00b fe15 	bl	800c860 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <MX_CRC_Init+0x40>)
 8000c44:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c66:	f004 fbdf 	bl	8005428 <HAL_CRC_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c70:	f000 fbc4 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200101e0 	.word	0x200101e0
 8000c7c:	40023000 	.word	0x40023000

08000c80 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_CRC_MspInit+0x38>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d10b      	bne.n	8000caa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c96:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023000 	.word	0x40023000
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cca:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	200d      	movs	r0, #13
 8000cfc:	f004 fb6c 	bl	80053d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d00:	200d      	movs	r0, #13
 8000d02:	f004 fb83 	bl	800540c <HAL_NVIC_EnableIRQ>

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d1a:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <MX_FDCAN1_Init+0x8c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d26:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d2a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d52:	221f      	movs	r2, #31
 8000d54:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d88:	f004 ff28 	bl	8005bdc <HAL_FDCAN_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000d92:	f000 fb33 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20010204 	.word	0x20010204
 8000da0:	40006400 	.word	0x40006400

08000da4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b09e      	sub	sp, #120	@ 0x78
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	2254      	movs	r2, #84	@ 0x54
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00d fbbb 	bl	800e540 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a28      	ldr	r2, [pc, #160]	@ (8000e70 <HAL_FDCAN_MspInit+0xcc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d149      	bne.n	8000e68 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dde:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4618      	mov	r0, r3
 8000de6:	f008 faeb 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000df0:	f000 fb04 	bl	80013fc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000dfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e24:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e36:	2309      	movs	r3, #9
 8000e38:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f005 fb12 	bl	800646c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2015      	movs	r0, #21
 8000e4e:	f004 fac3 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e52:	2015      	movs	r0, #21
 8000e54:	f004 fada 	bl	800540c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2016      	movs	r0, #22
 8000e5e:	f004 fabb 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e62:	2016      	movs	r0, #22
 8000e64:	f004 fad2 	bl	800540c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3778      	adds	r7, #120	@ 0x78
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40006400 	.word	0x40006400
 8000e74:	40021000 	.word	0x40021000

08000e78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	4b71      	ldr	r3, [pc, #452]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	4a70      	ldr	r2, [pc, #448]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b6b      	ldr	r3, [pc, #428]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	4a6a      	ldr	r2, [pc, #424]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb2:	4b68      	ldr	r3, [pc, #416]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b65      	ldr	r3, [pc, #404]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a64      	ldr	r2, [pc, #400]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b62      	ldr	r3, [pc, #392]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a5e      	ldr	r2, [pc, #376]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eee:	4b59      	ldr	r3, [pc, #356]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a58      	ldr	r2, [pc, #352]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b56      	ldr	r3, [pc, #344]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	4b53      	ldr	r3, [pc, #332]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a52      	ldr	r2, [pc, #328]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b50      	ldr	r3, [pc, #320]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f641 7130 	movw	r1, #7984	@ 0x1f30
 8000f24:	484c      	ldr	r0, [pc, #304]	@ (8001058 <MX_GPIO_Init+0x1e0>)
 8000f26:	f005 fc23 	bl	8006770 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f246 0102 	movw	r1, #24578	@ 0x6002
 8000f30:	484a      	ldr	r0, [pc, #296]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000f32:	f005 fc1d 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000f3c:	4848      	ldr	r0, [pc, #288]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000f3e:	f005 fc17 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f48:	4846      	ldr	r0, [pc, #280]	@ (8001064 <MX_GPIO_Init+0x1ec>)
 8000f4a:	f005 fc11 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f005 fc0a 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f5c:	f641 7330 	movw	r3, #7984	@ 0x1f30
 8000f60:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4838      	ldr	r0, [pc, #224]	@ (8001058 <MX_GPIO_Init+0x1e0>)
 8000f76:	f005 fa79 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY1_Pin;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY1_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4833      	ldr	r0, [pc, #204]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000f90:	f005 fa6c 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 8000f94:	f246 0302 	movw	r3, #24578	@ 0x6002
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	482b      	ldr	r0, [pc, #172]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000fae:	f005 fa5d 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin;
 8000fb2:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4825      	ldr	r0, [pc, #148]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000fcc:	f005 fa4e 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY2_Pin;
 8000fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY2_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481e      	ldr	r0, [pc, #120]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000fe8:	f005 fa40 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 8000fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4817      	ldr	r0, [pc, #92]	@ (8001064 <MX_GPIO_Init+0x1ec>)
 8001006:	f005 fa31 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 800100a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f005 fa21 	bl	800646c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2006      	movs	r0, #6
 8001030:	f004 f9d2 	bl	80053d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001034:	2006      	movs	r0, #6
 8001036:	f004 f9e9 	bl	800540c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2017      	movs	r0, #23
 8001040:	f004 f9ca 	bl	80053d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001044:	2017      	movs	r0, #23
 8001046:	f004 f9e1 	bl	800540c <HAL_NVIC_EnableIRQ>

}
 800104a:	bf00      	nop
 800104c:	3730      	adds	r7, #48	@ 0x30
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	48000800 	.word	0x48000800
 800105c:	48000400 	.word	0x48000400
 8001060:	48001000 	.word	0x48001000
 8001064:	48000c00 	.word	0x48000c00

08001068 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_I2C1_Init+0x74>)
 800106e:	4a1c      	ldr	r2, [pc, #112]	@ (80010e0 <MX_I2C1_Init+0x78>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <MX_I2C1_Init+0x7c>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_I2C1_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001080:	2201      	movs	r2, #1
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a2:	480e      	ldr	r0, [pc, #56]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010a4:	f005 fbae 	bl	8006804 <HAL_I2C_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ae:	f000 f9a5 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4809      	ldr	r0, [pc, #36]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010b6:	f007 fad7 	bl	8008668 <HAL_I2CEx_ConfigAnalogFilter>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010c0:	f000 f99c 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010c8:	f007 fb19 	bl	80086fe <HAL_I2CEx_ConfigDigitalFilter>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 f993 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20010268 	.word	0x20010268
 80010e0:	40005400 	.word	0x40005400
 80010e4:	30909dec 	.word	0x30909dec

080010e8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */
//    hi2c4.XferCount
  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_I2C4_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <MX_I2C4_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00F07BFF;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_I2C4_Init+0x74>)
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <MX_I2C4_Init+0x7c>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_I2C4_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_I2C4_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_I2C4_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_I2C4_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_I2C4_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_I2C4_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_I2C4_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	@ (800115c <MX_I2C4_Init+0x74>)
 8001124:	f005 fb6e 	bl	8006804 <HAL_I2C_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 f965 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <MX_I2C4_Init+0x74>)
 8001136:	f007 fa97 	bl	8008668 <HAL_I2CEx_ConfigAnalogFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 f95c 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_I2C4_Init+0x74>)
 8001148:	f007 fad9 	bl	80086fe <HAL_I2CEx_ConfigDigitalFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 f953 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200102bc 	.word	0x200102bc
 8001160:	40008400 	.word	0x40008400
 8001164:	00f07bff 	.word	0x00f07bff

08001168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0a2      	sub	sp, #136	@ 0x88
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	2254      	movs	r2, #84	@ 0x54
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f00d f9d9 	bl	800e540 <memset>
  if(i2cHandle->Instance==I2C1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a57      	ldr	r2, [pc, #348]	@ (80012f0 <HAL_I2C_MspInit+0x188>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d158      	bne.n	800124a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001198:	2340      	movs	r3, #64	@ 0x40
 800119a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f008 f90b 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011b0:	f000 f924 	bl	80013fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b4f      	ldr	r3, [pc, #316]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b8:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	4a48      	ldr	r2, [pc, #288]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d8:	4b46      	ldr	r3, [pc, #280]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011e8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ea:	2312      	movs	r3, #18
 80011ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f005 f930 	bl	800646c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121e:	2304      	movs	r3, #4
 8001220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001228:	4619      	mov	r1, r3
 800122a:	4833      	ldr	r0, [pc, #204]	@ (80012f8 <HAL_I2C_MspInit+0x190>)
 800122c:	f005 f91e 	bl	800646c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	4a2f      	ldr	r2, [pc, #188]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123a:	6593      	str	r3, [r2, #88]	@ 0x58
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001248:	e04d      	b.n	80012e6 <HAL_I2C_MspInit+0x17e>
  else if(i2cHandle->Instance==I2C4)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2b      	ldr	r2, [pc, #172]	@ (80012fc <HAL_I2C_MspInit+0x194>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d148      	bne.n	80012e6 <HAL_I2C_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001254:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001258:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800125a:	2300      	movs	r3, #0
 800125c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4618      	mov	r0, r3
 8001264:	f008 f8ac 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 800126e:	f000 f8c5 	bl	80013fc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a1f      	ldr	r2, [pc, #124]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128a:	23c0      	movs	r3, #192	@ 0xc0
 800128c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128e:	2312      	movs	r3, #18
 8001290:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 800129c:	2308      	movs	r3, #8
 800129e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012a6:	4619      	mov	r1, r3
 80012a8:	4815      	ldr	r0, [pc, #84]	@ (8001300 <HAL_I2C_MspInit+0x198>)
 80012aa:	f005 f8df 	bl	800646c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b2:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2052      	movs	r0, #82	@ 0x52
 80012cc:	f004 f884 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80012d0:	2052      	movs	r0, #82	@ 0x52
 80012d2:	f004 f89b 	bl	800540c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2053      	movs	r0, #83	@ 0x53
 80012dc:	f004 f87c 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80012e0:	2053      	movs	r0, #83	@ 0x53
 80012e2:	f004 f893 	bl	800540c <HAL_NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3788      	adds	r7, #136	@ 0x88
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000400 	.word	0x48000400
 80012fc:	40008400 	.word	0x40008400
 8001300:	48000800 	.word	0x48000800

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f002 f91a 	bl	8003540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f81a 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f7ff fdb2 	bl	8000e78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001314:	f7ff fcd4 	bl	8000cc0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001318:	f7ff fcfc 	bl	8000d14 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 800131c:	f000 fa28 	bl	8001770 <MX_TIM2_Init>
  MX_CRC_Init();
 8001320:	f7ff fc8c 	bl	8000c3c <MX_CRC_Init>
  MX_ADC4_Init();
 8001324:	f7ff fab4 	bl	8000890 <MX_ADC4_Init>
  MX_SPI4_Init();
 8001328:	f000 f86e 	bl	8001408 <MX_SPI4_Init>
  MX_ADC1_Init();
 800132c:	f7ff fa38 	bl	80007a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001330:	f7ff fe9a 	bl	8001068 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001334:	f7ff fed8 	bl	80010e8 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001338:	f000 fad8 	bl	80018ec <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800133c:	f7ff fc77 	bl	8000c2e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <main+0x3c>

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	@ 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	2238      	movs	r2, #56	@ 0x38
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f00d f8f4 	bl	800e540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001366:	2000      	movs	r0, #0
 8001368:	f007 fa16 	bl	8008798 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136c:	2301      	movs	r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001374:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137a:	2303      	movs	r3, #3
 800137c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800137e:	2306      	movs	r3, #6
 8001380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001382:	2350      	movs	r3, #80	@ 0x50
 8001384:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800138a:	2304      	movs	r3, #4
 800138c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138e:	2302      	movs	r3, #2
 8001390:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	4618      	mov	r0, r3
 8001398:	f007 fab2 	bl	8008900 <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80013a2:	f000 f82b 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a6:	230f      	movs	r3, #15
 80013a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013aa:	2303      	movs	r3, #3
 80013ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2104      	movs	r1, #4
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 fdb0 	bl	8008f24 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013ca:	f000 f817 	bl	80013fc <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	@ 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ea:	f002 f8c1 	bl	8003570 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40001000 	.word	0x40001000

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <MX_SPI4_Init+0x74>)
 800140e:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <MX_SPI4_Init+0x78>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <MX_SPI4_Init+0x74>)
 8001414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b18      	ldr	r3, [pc, #96]	@ (800147c <MX_SPI4_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <MX_SPI4_Init+0x74>)
 8001422:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001426:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_SPI4_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_SPI4_Init+0x74>)
 8001430:	2201      	movs	r2, #1
 8001432:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_SPI4_Init+0x74>)
 8001436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_SPI4_Init+0x74>)
 800143e:	2220      	movs	r2, #32
 8001440:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_SPI4_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_SPI4_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_SPI4_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_SPI4_Init+0x74>)
 8001456:	2207      	movs	r2, #7
 8001458:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800145a:	4b08      	ldr	r3, [pc, #32]	@ (800147c <MX_SPI4_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_SPI4_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_SPI4_Init+0x74>)
 8001468:	f008 f9f8 	bl	800985c <HAL_SPI_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001472:	f7ff ffc3 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20010310 	.word	0x20010310
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <HAL_SPI_MspInit+0x8c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d130      	bne.n	8001508 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80014d6:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014e8:	2305      	movs	r3, #5
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4809      	ldr	r0, [pc, #36]	@ (8001518 <HAL_SPI_MspInit+0x94>)
 80014f4:	f004 ffba 	bl	800646c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2054      	movs	r0, #84	@ 0x54
 80014fe:	f003 ff6b 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001502:	2054      	movs	r0, #84	@ 0x54
 8001504:	f003 ff82 	bl	800540c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013c00 	.word	0x40013c00
 8001514:	40021000 	.word	0x40021000
 8001518:	48001000 	.word	0x48001000

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_MspInit+0x4c>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001526:	4a10      	ldr	r2, [pc, #64]	@ (8001568 <HAL_MspInit+0x4c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6613      	str	r3, [r2, #96]	@ 0x60
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_MspInit+0x4c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_MspInit+0x4c>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_MspInit+0x4c>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001544:	6593      	str	r3, [r2, #88]	@ 0x58
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <HAL_MspInit+0x4c>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001552:	f002 f861 	bl	8003618 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001556:	2002      	movs	r0, #2
 8001558:	f002 f84a 	bl	80035f0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800155c:	f007 f9c0 	bl	80088e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800157c:	4b2c      	ldr	r3, [pc, #176]	@ (8001630 <HAL_InitTick+0xc4>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001580:	4a2b      	ldr	r2, [pc, #172]	@ (8001630 <HAL_InitTick+0xc4>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6593      	str	r3, [r2, #88]	@ 0x58
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <HAL_InitTick+0xc4>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001594:	f107 020c 	add.w	r2, r7, #12
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 fe96 	bl	80092d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015a4:	f007 fe68 	bl	8009278 <HAL_RCC_GetPCLK1Freq>
 80015a8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	4a21      	ldr	r2, [pc, #132]	@ (8001634 <HAL_InitTick+0xc8>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	3b01      	subs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_InitTick+0xcc>)
 80015ba:	4a20      	ldr	r2, [pc, #128]	@ (800163c <HAL_InitTick+0xd0>)
 80015bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <HAL_InitTick+0xcc>)
 80015c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <HAL_InitTick+0xcc>)
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_InitTick+0xcc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_InitTick+0xcc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80015d8:	4817      	ldr	r0, [pc, #92]	@ (8001638 <HAL_InitTick+0xcc>)
 80015da:	f008 fff9 	bl	800a5d0 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d11b      	bne.n	8001624 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015ec:	4812      	ldr	r0, [pc, #72]	@ (8001638 <HAL_InitTick+0xcc>)
 80015ee:	f009 f851 	bl	800a694 <HAL_TIM_Base_Start_IT>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001600:	2036      	movs	r0, #54	@ 0x36
 8001602:	f003 ff03 	bl	800540c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d808      	bhi.n	800161e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	2036      	movs	r0, #54	@ 0x36
 8001612:	f003 fee1 	bl	80053d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_InitTick+0xd4>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e002      	b.n	8001624 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001624:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001628:	4618      	mov	r0, r3
 800162a:	3730      	adds	r7, #48	@ 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	431bde83 	.word	0x431bde83
 8001638:	20010374 	.word	0x20010374
 800163c:	40001000 	.word	0x40001000
 8001640:	2000004c 	.word	0x2000004c

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY1_Pin);
 800167e:	2001      	movs	r0, #1
 8001680:	f005 f8a8 	bl	80067d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <DMA1_Channel3_IRQHandler+0x10>)
 800168e:	f004 f947 	bl	8005920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20010180 	.word	0x20010180

0800169c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <FDCAN1_IT0_IRQHandler+0x10>)
 80016a2:	f004 fc61 	bl	8005f68 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20010204 	.word	0x20010204

080016b0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <FDCAN1_IT1_IRQHandler+0x10>)
 80016b6:	f004 fc57 	bl	8005f68 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20010204 	.word	0x20010204

080016c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY2_Pin);
 80016c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016cc:	f005 f882 	bl	80067d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <TIM2_IRQHandler+0x10>)
 80016da:	f009 f9fb 	bl	800aad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200103c0 	.word	0x200103c0

080016e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <TIM6_DAC_IRQHandler+0x10>)
 80016ee:	f009 f9f1 	bl	800aad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20010374 	.word	0x20010374

080016fc <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <ADC4_IRQHandler+0x10>)
 8001702:	f002 fc69 	bl	8003fd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20010114 	.word	0x20010114

08001710 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <I2C4_EV_IRQHandler+0x10>)
 8001716:	f005 fab9 	bl	8006c8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200102bc 	.word	0x200102bc

08001724 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <I2C4_ER_IRQHandler+0x10>)
 800172a:	f005 fac9 	bl	8006cc0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200102bc 	.word	0x200102bc

08001738 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <SPI4_IRQHandler+0x10>)
 800173e:	f008 fccf 	bl	800a0e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20010310 	.word	0x20010310

0800174c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	@ (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <MX_TIM2_Init+0xe4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017b6:	4827      	ldr	r0, [pc, #156]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017b8:	f008 ffe4 	bl	800a784 <HAL_TIM_IC_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017c2:	f7ff fe1b 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	481f      	ldr	r0, [pc, #124]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017d6:	f009 fdcf 	bl	800b378 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017e0:	f7ff fe0c 	bl	80013fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	4816      	ldr	r0, [pc, #88]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017fc:	f009 fab9 	bl	800ad72 <HAL_TIM_IC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001806:	f7ff fdf9 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2204      	movs	r2, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4810      	ldr	r0, [pc, #64]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001812:	f009 faae 	bl	800ad72 <HAL_TIM_IC_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800181c:	f7ff fdee 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2208      	movs	r2, #8
 8001824:	4619      	mov	r1, r3
 8001826:	480b      	ldr	r0, [pc, #44]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001828:	f009 faa3 	bl	800ad72 <HAL_TIM_IC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001832:	f7ff fde3 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	220c      	movs	r2, #12
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MX_TIM2_Init+0xe4>)
 800183e:	f009 fa98 	bl	800ad72 <HAL_TIM_IC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001848:	f7ff fdd8 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200103c0 	.word	0x200103c0

08001858 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001878:	d12f      	bne.n	80018da <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a19      	ldr	r2, [pc, #100]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a13      	ldr	r2, [pc, #76]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 80018aa:	23d8      	movs	r3, #216	@ 0xd8
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <HAL_TIM_IC_MspInit+0x90>)
 80018c6:	f004 fdd1 	bl	800646c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201c      	movs	r0, #28
 80018d0:	f003 fd82 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d4:	201c      	movs	r0, #28
 80018d6:	f003 fd99 	bl	800540c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000c00 	.word	0x48000c00

080018ec <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 80018f2:	4a21      	ldr	r2, [pc, #132]	@ (8001978 <MX_LPUART1_UART_Init+0x8c>)
 80018f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 80018f8:	4a20      	ldr	r2, [pc, #128]	@ (800197c <MX_LPUART1_UART_Init+0x90>)
 80018fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001910:	220c      	movs	r2, #12
 8001912:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800192c:	4811      	ldr	r0, [pc, #68]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 800192e:	f009 fdff 	bl	800b530 <HAL_UART_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001938:	f7ff fd60 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193c:	2100      	movs	r1, #0
 800193e:	480d      	ldr	r0, [pc, #52]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001940:	f00a fb9a 	bl	800c078 <HAL_UARTEx_SetTxFifoThreshold>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800194a:	f7ff fd57 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194e:	2100      	movs	r1, #0
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001952:	f00a fbcf 	bl	800c0f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800195c:	f7ff fd4e 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001962:	f00a fb50 	bl	800c006 <HAL_UARTEx_DisableFifoMode>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800196c:	f7ff fd46 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2001040c 	.word	0x2001040c
 8001978:	40008000 	.word	0x40008000
 800197c:	00033324 	.word	0x00033324

08001980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09e      	sub	sp, #120	@ 0x78
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2254      	movs	r2, #84	@ 0x54
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00c fdcd 	bl	800e540 <memset>
  if(uartHandle->Instance==LPUART1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <HAL_UART_MspInit+0xa4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d135      	bne.n	8001a1c <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019b0:	2320      	movs	r3, #32
 80019b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4618      	mov	r0, r3
 80019be:	f007 fcff 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019c8:	f7ff fd18 	bl	80013fc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	4a15      	ldr	r2, [pc, #84]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e4:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019fc:	2303      	movs	r3, #3
 80019fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a14:	4619      	mov	r1, r3
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <HAL_UART_MspInit+0xac>)
 8001a18:	f004 fd28 	bl	800646c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3778      	adds	r7, #120	@ 0x78
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40008000 	.word	0x40008000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a30:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a34:	f7ff fe8a 	bl	800174c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3a:	490d      	ldr	r1, [pc, #52]	@ (8001a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <LoopForever+0xe>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a50:	4c0a      	ldr	r4, [pc, #40]	@ (8001a7c <LoopForever+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f00c fd77 	bl	800e550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7ff fc4f 	bl	8001304 <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   r0, =_estack
 8001a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001a74:	0800e79c 	.word	0x0800e79c
  ldr r2, =_sbss
 8001a78:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001a7c:	20011200 	.word	0x20011200

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>
	...

08001a84 <HAL_ADC_ConvCpltCallback>:
	analogSwitch8
};

void HAL_ADC_ConvCpltCallback(
    ADC_HandleTypeDef* hadc
){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    tx_semaphore_put(&semaphoreAnalog);
 8001a8c:	4803      	ldr	r0, [pc, #12]	@ (8001a9c <HAL_ADC_ConvCpltCallback+0x18>)
 8001a8e:	f00c fb29 	bl	800e0e4 <_txe_semaphore_put>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200108d8 	.word	0x200108d8

08001aa0 <setAnalogSwitches>:

uint8_t setAnalogSwitches(
	const uint8_t switchSettings[NUM_ADC_CHANNELS]
){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e017      	b.n	8001ae2 <setAnalogSwitches+0x42>
		if(switchSettings[i]){
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <setAnalogSwitches+0x2e>
			set12VSensor(&analogSwitches[i]);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8001af4 <setAnalogSwitches+0x54>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f816 	bl	8001af8 <set12VSensor>
 8001acc:	e006      	b.n	8001adc <setAnalogSwitches+0x3c>
		}else{
			set5VSensor(&analogSwitches[i]);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <setAnalogSwitches+0x54>)
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f826 	bl	8001b28 <set5VSensor>
	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b07      	cmp	r3, #7
 8001ae6:	d9e4      	bls.n	8001ab2 <setAnalogSwitches+0x12>
		}
	}
	return retval;
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000004 	.word	0x20000004

08001af8 <set12VSensor>:

uint8_t set12VSensor(
	gpio_control_t *self
){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <set12VSensor+0x16>
		retval = UCR_NPTR;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(self->port, self->pin, SET_12V);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	889b      	ldrh	r3, [r3, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f004 fe29 	bl	8006770 <HAL_GPIO_WritePin>
	return retval;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <set5VSensor>:

uint8_t set5VSensor(
	gpio_control_t *self
){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <set5VSensor+0x16>
		retval = UCR_NPTR;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(self->port, self->pin, SET_5V);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	889b      	ldrh	r3, [r3, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f004 fe11 	bl	8006770 <HAL_GPIO_WritePin>
	return retval;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <AeroInit>:
        DATA_MSB_ADDRESS,
        DATA_CSB_ADDRESS,
        DATA_LSB_ADDRESS
};

uint8_t AeroInit(void){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
    uint8_t retVal = UCR_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	70fb      	strb	r3, [r7, #3]
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	e00a      	b.n	8001b7e <AeroInit+0x26>
        AeroSensors[i].sensorNumber = i;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	b2d9      	uxtb	r1, r3
 8001b6c:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <AeroInit+0x3c>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	460a      	mov	r2, r1
 8001b76:	719a      	strb	r2, [r3, #6]
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d9f1      	bls.n	8001b68 <AeroInit+0x10>
    }
    return retVal;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	200104a0 	.word	0x200104a0

08001b98 <SetChannel>:

uint8_t SetChannel(
    uint8_t sensor
){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
    uint8_t retVal = UCR_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
    if(sensor > NUM_AERO_SENSORS){
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d903      	bls.n	8001bb4 <SetChannel+0x1c>
        retVal = UCR_NOT_OK;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
        return retVal;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	e01b      	b.n	8001bec <SetChannel+0x54>
    }
    uint8_t data = 1 << (sensor);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	73bb      	strb	r3, [r7, #14]
    if(HAL_OK != HAL_I2C_Master_Transmit_IT(&hi2c4, SWITCH_ADDRESS, &data, ONE_BYTE)){
 8001bc0:	f107 020e 	add.w	r2, r7, #14
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	21e0      	movs	r1, #224	@ 0xe0
 8001bc8:	480a      	ldr	r0, [pc, #40]	@ (8001bf4 <SetChannel+0x5c>)
 8001bca:	f004 feb7 	bl	800693c <HAL_I2C_Master_Transmit_IT>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <SetChannel+0x40>
        return UCR_NOT_OK;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e009      	b.n	8001bec <SetChannel+0x54>
    }
    if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001bd8:	210a      	movs	r1, #10
 8001bda:	4807      	ldr	r0, [pc, #28]	@ (8001bf8 <SetChannel+0x60>)
 8001bdc:	f00c fa40 	bl	800e060 <_txe_semaphore_get>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b0d      	cmp	r3, #13
 8001be4:	d001      	beq.n	8001bea <SetChannel+0x52>
        return UCR_NOT_OK;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <SetChannel+0x54>
    }
    return retVal;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200102bc 	.word	0x200102bc
 8001bf8:	200108f4 	.word	0x200108f4

08001bfc <StartSensorReading>:

uint8_t StartSensorReading(
    aeroSensor_t* sensor
){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	6078      	str	r0, [r7, #4]
    uint8_t retVal = UCR_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
    if(UCR_OK != SetChannel(sensor->sensorNumber)){
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	799b      	ldrb	r3, [r3, #6]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ffc3 	bl	8001b98 <SetChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <StartSensorReading+0x24>
        retVal = UCR_NOT_OK;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
        return retVal;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	e01b      	b.n	8001c58 <StartSensorReading+0x5c>
    }
    uint8_t data = START_SENSOR;
 8001c20:	230a      	movs	r3, #10
 8001c22:	73bb      	strb	r3, [r7, #14]
    if(HAL_OK != HAL_I2C_Mem_Write_IT(&hi2c4, SENSOR_ADDRESS, CMD_ADDRESS, ONE_BYTE, &data, 1)){
 8001c24:	2301      	movs	r3, #1
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	f107 030e 	add.w	r3, r7, #14
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	2230      	movs	r2, #48	@ 0x30
 8001c32:	21da      	movs	r1, #218	@ 0xda
 8001c34:	480a      	ldr	r0, [pc, #40]	@ (8001c60 <StartSensorReading+0x64>)
 8001c36:	f004 ff19 	bl	8006a6c <HAL_I2C_Mem_Write_IT>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <StartSensorReading+0x48>
        return UCR_NOT_OK;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e009      	b.n	8001c58 <StartSensorReading+0x5c>
    }
    if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001c44:	210a      	movs	r1, #10
 8001c46:	4807      	ldr	r0, [pc, #28]	@ (8001c64 <StartSensorReading+0x68>)
 8001c48:	f00c fa0a 	bl	800e060 <_txe_semaphore_get>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b0d      	cmp	r3, #13
 8001c50:	d001      	beq.n	8001c56 <StartSensorReading+0x5a>
        return UCR_NOT_OK;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <StartSensorReading+0x5c>
    }
    return retVal;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200102bc 	.word	0x200102bc
 8001c64:	200108f4 	.word	0x200108f4

08001c68 <ReadData>:

uint8_t ReadData(
    aeroSensor_t* sensor
){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
    uint8_t retVal = UCR_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	74fb      	strb	r3, [r7, #19]
    if(UCR_OK != SetChannel(sensor->sensorNumber)){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	799b      	ldrb	r3, [r3, #6]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff8d 	bl	8001b98 <SetChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <ReadData+0x24>
        retVal = UCR_NOT_OK;
 8001c84:	2301      	movs	r3, #1
 8001c86:	74fb      	strb	r3, [r7, #19]
        return retVal;
 8001c88:	7cfb      	ldrb	r3, [r7, #19]
 8001c8a:	e071      	b.n	8001d70 <ReadData+0x108>
    }
    int32_t pressureReading;
    int16_t temperatureReading;
    uint8_t pressureData[3];
    uint8_t temperatureData[2];
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e021      	b.n	8001cd6 <ReadData+0x6e>
        if(HAL_OK != HAL_I2C_Mem_Read_IT(&hi2c4, SENSOR_ADDRESS, pressureAddresses[i], ONE_BYTE, &pressureData[i], ONE_BYTE)){
 8001c92:	4a39      	ldr	r2, [pc, #228]	@ (8001d78 <ReadData+0x110>)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001c9a:	f107 0210 	add.w	r2, r7, #16
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	9201      	str	r2, [sp, #4]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	460a      	mov	r2, r1
 8001cac:	21da      	movs	r1, #218	@ 0xda
 8001cae:	4833      	ldr	r0, [pc, #204]	@ (8001d7c <ReadData+0x114>)
 8001cb0:	f004 ff66 	bl	8006b80 <HAL_I2C_Mem_Read_IT>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <ReadData+0x56>
            return UCR_NOT_OK;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e058      	b.n	8001d70 <ReadData+0x108>
        }
        if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001cbe:	210a      	movs	r1, #10
 8001cc0:	482f      	ldr	r0, [pc, #188]	@ (8001d80 <ReadData+0x118>)
 8001cc2:	f00c f9cd 	bl	800e060 <_txe_semaphore_get>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b0d      	cmp	r3, #13
 8001cca:	d001      	beq.n	8001cd0 <ReadData+0x68>
            return UCR_NOT_OK;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04f      	b.n	8001d70 <ReadData+0x108>
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d9da      	bls.n	8001c92 <ReadData+0x2a>
        }
    }

    pressureReading = (pressureData[0] << TWO_BYTE_OFFSET) + (pressureData[1] << ONE_BYTE_OFFSET) + pressureData[2];
 8001cdc:	7c3b      	ldrb	r3, [r7, #16]
 8001cde:	041a      	lsls	r2, r3, #16
 8001ce0:	7c7b      	ldrb	r3, [r7, #17]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4413      	add	r3, r2
 8001ce6:	7cba      	ldrb	r2, [r7, #18]
 8001ce8:	4413      	add	r3, r2
 8001cea:	61fb      	str	r3, [r7, #28]
    if(pressureReading >> PRESSURE_MSB_OFFSET){
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	15db      	asrs	r3, r3, #23
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <ReadData+0x94>
        pressureReading = pressureReading - 16777216;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 8001cfa:	61fb      	str	r3, [r7, #28]
    }
    sensor->pressure = pressureReading;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	601a      	str	r2, [r3, #0]

    HAL_I2C_Mem_Read_IT(&hi2c4, SENSOR_ADDRESS, TEMP_MSB_ADDRESS, ONE_BYTE, &temperatureData[0], ONE_BYTE);
 8001d02:	2301      	movs	r3, #1
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	2209      	movs	r2, #9
 8001d10:	21da      	movs	r1, #218	@ 0xda
 8001d12:	481a      	ldr	r0, [pc, #104]	@ (8001d7c <ReadData+0x114>)
 8001d14:	f004 ff34 	bl	8006b80 <HAL_I2C_Mem_Read_IT>
    if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001d18:	210a      	movs	r1, #10
 8001d1a:	4819      	ldr	r0, [pc, #100]	@ (8001d80 <ReadData+0x118>)
 8001d1c:	f00c f9a0 	bl	800e060 <_txe_semaphore_get>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b0d      	cmp	r3, #13
 8001d24:	d001      	beq.n	8001d2a <ReadData+0xc2>
        return UCR_NOT_OK;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e022      	b.n	8001d70 <ReadData+0x108>
    }
    HAL_I2C_Mem_Read_IT(&hi2c4, SENSOR_ADDRESS, TEMP_LSB_ADDRESS, ONE_BYTE, &temperatureData[1], ONE_BYTE);
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	3301      	adds	r3, #1
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	220a      	movs	r2, #10
 8001d3a:	21da      	movs	r1, #218	@ 0xda
 8001d3c:	480f      	ldr	r0, [pc, #60]	@ (8001d7c <ReadData+0x114>)
 8001d3e:	f004 ff1f 	bl	8006b80 <HAL_I2C_Mem_Read_IT>
    if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001d42:	210a      	movs	r1, #10
 8001d44:	480e      	ldr	r0, [pc, #56]	@ (8001d80 <ReadData+0x118>)
 8001d46:	f00c f98b 	bl	800e060 <_txe_semaphore_get>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b0d      	cmp	r3, #13
 8001d4e:	d001      	beq.n	8001d54 <ReadData+0xec>
        return UCR_NOT_OK;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e00d      	b.n	8001d70 <ReadData+0x108>
    }
    temperatureReading = (temperatureData[0] << ONE_BYTE_OFFSET) + temperatureData[1];
 8001d54:	7b3b      	ldrb	r3, [r7, #12]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	7b7a      	ldrb	r2, [r7, #13]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	837b      	strh	r3, [r7, #26]
    if(temperatureReading >> TEMPERATURE_MSB_OFFSET){
 8001d62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d66:	2b00      	cmp	r3, #0
        temperatureReading = temperatureReading - 65536;
    }
    sensor->temperature = temperatureReading;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8b7a      	ldrh	r2, [r7, #26]
 8001d6c:	809a      	strh	r2, [r3, #4]

    return retVal;
 8001d6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000044 	.word	0x20000044
 8001d7c:	200102bc 	.word	0x200102bc
 8001d80:	200108f4 	.word	0x200108f4

08001d84 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
//    tx_semaphore_ceiling_put(&semaphoreAero, 1);
    tx_semaphore_put(&semaphoreAero);
 8001d8c:	4803      	ldr	r0, [pc, #12]	@ (8001d9c <HAL_I2C_MasterTxCpltCallback+0x18>)
 8001d8e:	f00c f9a9 	bl	800e0e4 <_txe_semaphore_put>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200108f4 	.word	0x200108f4

08001da0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
//    tx_semaphore_ceiling_put(&semaphoreAero, 1);
    tx_semaphore_put(&semaphoreAero);
 8001da8:	4803      	ldr	r0, [pc, #12]	@ (8001db8 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8001daa:	f00c f99b 	bl	800e0e4 <_txe_semaphore_put>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200108f4 	.word	0x200108f4

08001dbc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
//    tx_semaphore_ceiling_put(&semaphoreAero, 1);
    tx_semaphore_put(&semaphoreAero);
 8001dc4:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <HAL_I2C_MemRxCpltCallback+0x18>)
 8001dc6:	f00c f98d 	bl	800e0e4 <_txe_semaphore_put>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200108f4 	.word	0x200108f4

08001dd8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
//    tx_semaphore_ceiling_put(&semaphoreAero, 1);
    tx_semaphore_put(&semaphoreAero);
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <HAL_I2C_MemTxCpltCallback+0x18>)
 8001de2:	f00c f97f 	bl	800e0e4 <_txe_semaphore_put>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200108f4 	.word	0x200108f4

08001df4 <ThreadX_Init>:
};


UINT ThreadX_Init(
        VOID *memory_ptr
){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	@ 0x38
 8001df8:	af08      	add	r7, sp, #32
 8001dfa:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001e04:	f107 010c 	add.w	r1, r7, #12
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e0e:	6938      	ldr	r0, [r7, #16]
 8001e10:	f00b ff7c 	bl	800dd0c <_txe_byte_allocate>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <ThreadX_Init+0x2a>
	    return TX_POOL_ERROR;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e101      	b.n	8002022 <ThreadX_Init+0x22e>
	}

	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	22b0      	movs	r2, #176	@ 0xb0
 8001e22:	9206      	str	r2, [sp, #24]
 8001e24:	2201      	movs	r2, #1
 8001e26:	9205      	str	r2, [sp, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	9204      	str	r2, [sp, #16]
 8001e2c:	220a      	movs	r2, #10
 8001e2e:	9203      	str	r2, [sp, #12]
 8001e30:	220a      	movs	r2, #10
 8001e32:	9202      	str	r2, [sp, #8]
 8001e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e38:	9201      	str	r2, [sp, #4]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4a7b      	ldr	r2, [pc, #492]	@ (800202c <ThreadX_Init+0x238>)
 8001e40:	497b      	ldr	r1, [pc, #492]	@ (8002030 <ThreadX_Init+0x23c>)
 8001e42:	487c      	ldr	r0, [pc, #496]	@ (8002034 <ThreadX_Init+0x240>)
 8001e44:	f00c f96c 	bl	800e120 <_txe_thread_create>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <ThreadX_Init+0x5e>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8001e4e:	230e      	movs	r3, #14
 8001e50:	e0e7      	b.n	8002022 <ThreadX_Init+0x22e>
	}

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001e52:	f107 010c 	add.w	r1, r7, #12
 8001e56:	2300      	movs	r3, #0
 8001e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e5c:	6938      	ldr	r0, [r7, #16]
 8001e5e:	f00b ff55 	bl	800dd0c <_txe_byte_allocate>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <ThreadX_Init+0x78>
	    return TX_POOL_ERROR;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e0da      	b.n	8002022 <ThreadX_Init+0x22e>
    }

	if(tx_thread_create(&txAnalogThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	22b0      	movs	r2, #176	@ 0xb0
 8001e70:	9206      	str	r2, [sp, #24]
 8001e72:	2201      	movs	r2, #1
 8001e74:	9205      	str	r2, [sp, #20]
 8001e76:	2200      	movs	r2, #0
 8001e78:	9204      	str	r2, [sp, #16]
 8001e7a:	220a      	movs	r2, #10
 8001e7c:	9203      	str	r2, [sp, #12]
 8001e7e:	220b      	movs	r2, #11
 8001e80:	9202      	str	r2, [sp, #8]
 8001e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e86:	9201      	str	r2, [sp, #4]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002038 <ThreadX_Init+0x244>)
 8001e8e:	496b      	ldr	r1, [pc, #428]	@ (800203c <ThreadX_Init+0x248>)
 8001e90:	486b      	ldr	r0, [pc, #428]	@ (8002040 <ThreadX_Init+0x24c>)
 8001e92:	f00c f945 	bl	800e120 <_txe_thread_create>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <ThreadX_Init+0xac>
						 TX_APP_STACK_SIZE, TX_ANALOG_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8001e9c:	230e      	movs	r3, #14
 8001e9e:	e0c0      	b.n	8002022 <ThreadX_Init+0x22e>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001ea0:	f107 010c 	add.w	r1, r7, #12
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eaa:	6938      	ldr	r0, [r7, #16]
 8001eac:	f00b ff2e 	bl	800dd0c <_txe_byte_allocate>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <ThreadX_Init+0xc6>
        return TX_POOL_ERROR;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e0b3      	b.n	8002022 <ThreadX_Init+0x22e>
    }

	if(tx_thread_create(&txAeroThread, "txAeroThread", txAeroThreadEntry, 0, pointer,
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	22b0      	movs	r2, #176	@ 0xb0
 8001ebe:	9206      	str	r2, [sp, #24]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	9205      	str	r2, [sp, #20]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	9204      	str	r2, [sp, #16]
 8001ec8:	220a      	movs	r2, #10
 8001eca:	9203      	str	r2, [sp, #12]
 8001ecc:	220c      	movs	r2, #12
 8001ece:	9202      	str	r2, [sp, #8]
 8001ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed4:	9201      	str	r2, [sp, #4]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4a5a      	ldr	r2, [pc, #360]	@ (8002044 <ThreadX_Init+0x250>)
 8001edc:	495a      	ldr	r1, [pc, #360]	@ (8002048 <ThreadX_Init+0x254>)
 8001ede:	485b      	ldr	r0, [pc, #364]	@ (800204c <ThreadX_Init+0x258>)
 8001ee0:	f00c f91e 	bl	800e120 <_txe_thread_create>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <ThreadX_Init+0xfa>
					   TX_APP_STACK_SIZE, 12, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 8001eea:	230e      	movs	r3, #14
 8001eec:	e099      	b.n	8002022 <ThreadX_Init+0x22e>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001eee:	f107 010c 	add.w	r1, r7, #12
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ef8:	6938      	ldr	r0, [r7, #16]
 8001efa:	f00b ff07 	bl	800dd0c <_txe_byte_allocate>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <ThreadX_Init+0x114>
        return TX_POOL_ERROR;
 8001f04:	2302      	movs	r3, #2
 8001f06:	e08c      	b.n	8002022 <ThreadX_Init+0x22e>
    }

	if(tx_thread_create(&txCAN500HzThread, "txCAN500Hz", txCAN500HzThreadEntry, 0, pointer,
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	22b0      	movs	r2, #176	@ 0xb0
 8001f0c:	9206      	str	r2, [sp, #24]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	9205      	str	r2, [sp, #20]
 8001f12:	2200      	movs	r2, #0
 8001f14:	9204      	str	r2, [sp, #16]
 8001f16:	220a      	movs	r2, #10
 8001f18:	9203      	str	r2, [sp, #12]
 8001f1a:	220d      	movs	r2, #13
 8001f1c:	9202      	str	r2, [sp, #8]
 8001f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f22:	9201      	str	r2, [sp, #4]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	4a49      	ldr	r2, [pc, #292]	@ (8002050 <ThreadX_Init+0x25c>)
 8001f2a:	494a      	ldr	r1, [pc, #296]	@ (8002054 <ThreadX_Init+0x260>)
 8001f2c:	484a      	ldr	r0, [pc, #296]	@ (8002058 <ThreadX_Init+0x264>)
 8001f2e:	f00c f8f7 	bl	800e120 <_txe_thread_create>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <ThreadX_Init+0x148>
					   TX_APP_STACK_SIZE, 13, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 8001f38:	230e      	movs	r3, #14
 8001f3a:	e072      	b.n	8002022 <ThreadX_Init+0x22e>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001f3c:	f107 010c 	add.w	r1, r7, #12
 8001f40:	2300      	movs	r3, #0
 8001f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f46:	6938      	ldr	r0, [r7, #16]
 8001f48:	f00b fee0 	bl	800dd0c <_txe_byte_allocate>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <ThreadX_Init+0x162>
        return TX_POOL_ERROR;
 8001f52:	2302      	movs	r3, #2
 8001f54:	e065      	b.n	8002022 <ThreadX_Init+0x22e>
    }

	if(tx_thread_create(&txCAN100HzThread, "txCAN100Hz", txCAN100HzThreadEntry, 0, pointer,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	22b0      	movs	r2, #176	@ 0xb0
 8001f5a:	9206      	str	r2, [sp, #24]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	9205      	str	r2, [sp, #20]
 8001f60:	2200      	movs	r2, #0
 8001f62:	9204      	str	r2, [sp, #16]
 8001f64:	220a      	movs	r2, #10
 8001f66:	9203      	str	r2, [sp, #12]
 8001f68:	220e      	movs	r2, #14
 8001f6a:	9202      	str	r2, [sp, #8]
 8001f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f70:	9201      	str	r2, [sp, #4]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2300      	movs	r3, #0
 8001f76:	4a39      	ldr	r2, [pc, #228]	@ (800205c <ThreadX_Init+0x268>)
 8001f78:	4939      	ldr	r1, [pc, #228]	@ (8002060 <ThreadX_Init+0x26c>)
 8001f7a:	483a      	ldr	r0, [pc, #232]	@ (8002064 <ThreadX_Init+0x270>)
 8001f7c:	f00c f8d0 	bl	800e120 <_txe_thread_create>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <ThreadX_Init+0x196>
					   TX_APP_STACK_SIZE, 14, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 8001f86:	230e      	movs	r3, #14
 8001f88:	e04b      	b.n	8002022 <ThreadX_Init+0x22e>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001f8a:	f107 010c 	add.w	r1, r7, #12
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f94:	6938      	ldr	r0, [r7, #16]
 8001f96:	f00b feb9 	bl	800dd0c <_txe_byte_allocate>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <ThreadX_Init+0x1b0>
        return TX_POOL_ERROR;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e03e      	b.n	8002022 <ThreadX_Init+0x22e>
    }

	if(tx_thread_create(&txStrainThread, "txStrainThread", txADS1ThreadInput, 0, pointer,
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	22b0      	movs	r2, #176	@ 0xb0
 8001fa8:	9206      	str	r2, [sp, #24]
 8001faa:	2201      	movs	r2, #1
 8001fac:	9205      	str	r2, [sp, #20]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	9204      	str	r2, [sp, #16]
 8001fb2:	220a      	movs	r2, #10
 8001fb4:	9203      	str	r2, [sp, #12]
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	9202      	str	r2, [sp, #8]
 8001fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fbe:	9201      	str	r2, [sp, #4]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	4a28      	ldr	r2, [pc, #160]	@ (8002068 <ThreadX_Init+0x274>)
 8001fc6:	4929      	ldr	r1, [pc, #164]	@ (800206c <ThreadX_Init+0x278>)
 8001fc8:	4829      	ldr	r0, [pc, #164]	@ (8002070 <ThreadX_Init+0x27c>)
 8001fca:	f00c f8a9 	bl	800e120 <_txe_thread_create>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <ThreadX_Init+0x1e4>
                       TX_APP_STACK_SIZE, 15, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
        return TX_THREAD_ERROR;
 8001fd4:	230e      	movs	r3, #14
 8001fd6:	e024      	b.n	8002022 <ThreadX_Init+0x22e>
    }

	tx_semaphore_create(&semaphoreAnalog, "semaphoreAnalog", 0);
 8001fd8:	231c      	movs	r3, #28
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4925      	ldr	r1, [pc, #148]	@ (8002074 <ThreadX_Init+0x280>)
 8001fde:	4826      	ldr	r0, [pc, #152]	@ (8002078 <ThreadX_Init+0x284>)
 8001fe0:	f00b ffa8 	bl	800df34 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreAero, "semaphoreAero", 0);
 8001fe4:	231c      	movs	r3, #28
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4924      	ldr	r1, [pc, #144]	@ (800207c <ThreadX_Init+0x288>)
 8001fea:	4825      	ldr	r0, [pc, #148]	@ (8002080 <ThreadX_Init+0x28c>)
 8001fec:	f00b ffa2 	bl	800df34 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreFrequency, "semaphoreFrequency", 1);
 8001ff0:	231c      	movs	r3, #28
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4923      	ldr	r1, [pc, #140]	@ (8002084 <ThreadX_Init+0x290>)
 8001ff6:	4824      	ldr	r0, [pc, #144]	@ (8002088 <ThreadX_Init+0x294>)
 8001ff8:	f00b ff9c 	bl	800df34 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC1, "semaphoreExADC1", 0);
 8001ffc:	231c      	movs	r3, #28
 8001ffe:	2200      	movs	r2, #0
 8002000:	4922      	ldr	r1, [pc, #136]	@ (800208c <ThreadX_Init+0x298>)
 8002002:	4823      	ldr	r0, [pc, #140]	@ (8002090 <ThreadX_Init+0x29c>)
 8002004:	f00b ff96 	bl	800df34 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC2, "semaphoreExADC2", 0);
 8002008:	231c      	movs	r3, #28
 800200a:	2200      	movs	r2, #0
 800200c:	4921      	ldr	r1, [pc, #132]	@ (8002094 <ThreadX_Init+0x2a0>)
 800200e:	4822      	ldr	r0, [pc, #136]	@ (8002098 <ThreadX_Init+0x2a4>)
 8002010:	f00b ff90 	bl	800df34 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreSPI, "semaphoreSPI", 0);
 8002014:	231c      	movs	r3, #28
 8002016:	2200      	movs	r2, #0
 8002018:	4920      	ldr	r1, [pc, #128]	@ (800209c <ThreadX_Init+0x2a8>)
 800201a:	4821      	ldr	r0, [pc, #132]	@ (80020a0 <ThreadX_Init+0x2ac>)
 800201c:	f00b ff8a 	bl	800df34 <_txe_semaphore_create>
    

	return ret;
 8002020:	697b      	ldr	r3, [r7, #20]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	080020a5 	.word	0x080020a5
 8002030:	0800e5c4 	.word	0x0800e5c4
 8002034:	200104b8 	.word	0x200104b8
 8002038:	080020f5 	.word	0x080020f5
 800203c:	0800e5d4 	.word	0x0800e5d4
 8002040:	20010568 	.word	0x20010568
 8002044:	0800219d 	.word	0x0800219d
 8002048:	0800e5e4 	.word	0x0800e5e4
 800204c:	20010618 	.word	0x20010618
 8002050:	08002269 	.word	0x08002269
 8002054:	0800e5f4 	.word	0x0800e5f4
 8002058:	200106c8 	.word	0x200106c8
 800205c:	0800227d 	.word	0x0800227d
 8002060:	0800e600 	.word	0x0800e600
 8002064:	20010778 	.word	0x20010778
 8002068:	0800237d 	.word	0x0800237d
 800206c:	0800e60c 	.word	0x0800e60c
 8002070:	20010828 	.word	0x20010828
 8002074:	0800e61c 	.word	0x0800e61c
 8002078:	200108d8 	.word	0x200108d8
 800207c:	0800e62c 	.word	0x0800e62c
 8002080:	200108f4 	.word	0x200108f4
 8002084:	0800e63c 	.word	0x0800e63c
 8002088:	20010910 	.word	0x20010910
 800208c:	0800e650 	.word	0x0800e650
 8002090:	2001092c 	.word	0x2001092c
 8002094:	0800e660 	.word	0x0800e660
 8002098:	20010948 	.word	0x20010948
 800209c:	0800e670 	.word	0x0800e670
 80020a0:	20010964 	.word	0x20010964

080020a4 <txMainThreadEntry>:


void txMainThreadEntry(
    ULONG threadInput
){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    HAL_FDCAN_Start(&hfdcan1);
 80020ac:	480e      	ldr	r0, [pc, #56]	@ (80020e8 <txMainThreadEntry+0x44>)
 80020ae:	f003 feef 	bl	8005e90 <HAL_FDCAN_Start>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80020b2:	2100      	movs	r1, #0
 80020b4:	480d      	ldr	r0, [pc, #52]	@ (80020ec <txMainThreadEntry+0x48>)
 80020b6:	f008 fbbd 	bl	800a834 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80020ba:	2104      	movs	r1, #4
 80020bc:	480b      	ldr	r0, [pc, #44]	@ (80020ec <txMainThreadEntry+0x48>)
 80020be:	f008 fbb9 	bl	800a834 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80020c2:	2108      	movs	r1, #8
 80020c4:	4809      	ldr	r0, [pc, #36]	@ (80020ec <txMainThreadEntry+0x48>)
 80020c6:	f008 fbb5 	bl	800a834 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80020ca:	210c      	movs	r1, #12
 80020cc:	4807      	ldr	r0, [pc, #28]	@ (80020ec <txMainThreadEntry+0x48>)
 80020ce:	f008 fbb1 	bl	800a834 <HAL_TIM_IC_Start_IT>


	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80020d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020d6:	4806      	ldr	r0, [pc, #24]	@ (80020f0 <txMainThreadEntry+0x4c>)
 80020d8:	f004 fb62 	bl	80067a0 <HAL_GPIO_TogglePin>

	    tx_thread_sleep(1000);
 80020dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e0:	f00a ff1e 	bl	800cf20 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80020e4:	bf00      	nop
 80020e6:	e7f4      	b.n	80020d2 <txMainThreadEntry+0x2e>
 80020e8:	20010204 	.word	0x20010204
 80020ec:	200103c0 	.word	0x200103c0
 80020f0:	48000800 	.word	0x48000800

080020f4 <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 80020f4:	b5b0      	push	{r4, r5, r7, lr}
 80020f6:	b09c      	sub	sp, #112	@ 0x70
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    uint8_t analogRxData[ANALOG_DATA_LENGTH];
    uint32_t adcValues[NUM_ADC_CHANNELS];
    setAnalogSwitches(analogSwitchStates);
 80020fc:	4822      	ldr	r0, [pc, #136]	@ (8002188 <txAnalogThreadEntry+0x94>)
 80020fe:	f7ff fccf 	bl	8001aa0 <setAnalogSwitches>

    FDCAN_TxHeaderTypeDef analogHeader = {
 8002102:	4b22      	ldr	r3, [pc, #136]	@ (800218c <txAnalogThreadEntry+0x98>)
 8002104:	f107 041c 	add.w	r4, r7, #28
 8002108:	461d      	mov	r5, r3
 800210a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800210c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800210e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002112:	682b      	ldr	r3, [r5, #0]
 8002114:	6023      	str	r3, [r4, #0]
            .FDFormat = FDCAN_FD_CAN,
            .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
            .MessageMarker = 0
    };
    while(1){
        HAL_ADC_Start_DMA(&hadc4, adcValues, NUM_ADC_CHANNELS);
 8002116:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800211a:	2208      	movs	r2, #8
 800211c:	4619      	mov	r1, r3
 800211e:	481c      	ldr	r0, [pc, #112]	@ (8002190 <txAnalogThreadEntry+0x9c>)
 8002120:	f001 fe86 	bl	8003e30 <HAL_ADC_Start_DMA>
        tx_semaphore_get(&semaphoreAnalog, TX_WAIT_FOREVER);
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	481a      	ldr	r0, [pc, #104]	@ (8002194 <txAnalogThreadEntry+0xa0>)
 800212a:	f00b ff99 	bl	800e060 <_txe_semaphore_get>
        struct analogData_t analogStruct = {
            .analog1 = adcValues[0],
 800212e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        struct analogData_t analogStruct = {
 8002130:	b29b      	uxth	r3, r3
 8002132:	81bb      	strh	r3, [r7, #12]
            .analog2 = adcValues[1],
 8002134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
        struct analogData_t analogStruct = {
 8002136:	b29b      	uxth	r3, r3
 8002138:	81fb      	strh	r3, [r7, #14]
            .analog3 = adcValues[2],
 800213a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
        struct analogData_t analogStruct = {
 800213c:	b29b      	uxth	r3, r3
 800213e:	823b      	strh	r3, [r7, #16]
            .analog4 = adcValues[3],
 8002140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
        struct analogData_t analogStruct = {
 8002142:	b29b      	uxth	r3, r3
 8002144:	827b      	strh	r3, [r7, #18]
            .analog5 = adcValues[4],
 8002146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
        struct analogData_t analogStruct = {
 8002148:	b29b      	uxth	r3, r3
 800214a:	82bb      	strh	r3, [r7, #20]
            .analog6 = adcValues[5],
 800214c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
        struct analogData_t analogStruct = {
 800214e:	b29b      	uxth	r3, r3
 8002150:	82fb      	strh	r3, [r7, #22]
            .analog7 = adcValues[6],
 8002152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
        struct analogData_t analogStruct = {
 8002154:	b29b      	uxth	r3, r3
 8002156:	833b      	strh	r3, [r7, #24]
            .analog8 = adcValues[7]
 8002158:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
        struct analogData_t analogStruct = {
 800215a:	b29b      	uxth	r3, r3
 800215c:	837b      	strh	r3, [r7, #26]
        };
        analogPack(analogRxData, &analogStruct, ANALOG_DATA_LENGTH);
 800215e:	f107 010c 	add.w	r1, r7, #12
 8002162:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002166:	2210      	movs	r2, #16
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fde7 	bl	8002d3c <ucr_01_front_analog_pack>
        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &analogHeader, analogRxData);
 800216e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	4619      	mov	r1, r3
 8002178:	4807      	ldr	r0, [pc, #28]	@ (8002198 <txAnalogThreadEntry+0xa4>)
 800217a:	f003 feb1 	bl	8005ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
        tx_thread_sleep(4);
 800217e:	2004      	movs	r0, #4
 8002180:	f00a fece 	bl	800cf20 <_tx_thread_sleep>
    while(1){
 8002184:	bf00      	nop
 8002186:	e7c6      	b.n	8002116 <txAnalogThreadEntry+0x22>
 8002188:	0800e74c 	.word	0x0800e74c
 800218c:	0800e680 	.word	0x0800e680
 8002190:	20010114 	.word	0x20010114
 8002194:	200108d8 	.word	0x200108d8
 8002198:	20010204 	.word	0x20010204

0800219c <txAeroThreadEntry>:
    }
}

void txAeroThreadEntry(
   ULONG threadInput
){
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b096      	sub	sp, #88	@ 0x58
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    if(UCR_OK != AeroInit()){
 80021a4:	f7ff fcd8 	bl	8001b58 <AeroInit>

    }
    struct aero_t aeroData;
    uint8_t transmitData[AERO_DATA_LENGTH];
    FDCAN_TxHeaderTypeDef aeroHeader = {
 80021a8:	4b2c      	ldr	r3, [pc, #176]	@ (800225c <txAeroThreadEntry+0xc0>)
 80021aa:	f107 0408 	add.w	r4, r7, #8
 80021ae:	461d      	mov	r5, r3
 80021b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	6023      	str	r3, [r4, #0]
        .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
        .MessageMarker = 0
    };

    while(1){
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 80021bc:	2300      	movs	r3, #0
 80021be:	657b      	str	r3, [r7, #84]	@ 0x54
 80021c0:	e009      	b.n	80021d6 <txAeroThreadEntry+0x3a>
            StartSensorReading(&AeroSensors[i]);
 80021c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4a26      	ldr	r2, [pc, #152]	@ (8002260 <txAeroThreadEntry+0xc4>)
 80021c8:	4413      	add	r3, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fd16 	bl	8001bfc <StartSensorReading>
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	3301      	adds	r3, #1
 80021d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80021d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d9f2      	bls.n	80021c2 <txAeroThreadEntry+0x26>
        }
        tx_thread_sleep(20);
 80021dc:	2014      	movs	r0, #20
 80021de:	f00a fe9f 	bl	800cf20 <_tx_thread_sleep>

        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 80021e2:	2300      	movs	r3, #0
 80021e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80021e6:	e009      	b.n	80021fc <txAeroThreadEntry+0x60>
            ReadData(&AeroSensors[i]);
 80021e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002260 <txAeroThreadEntry+0xc4>)
 80021ee:	4413      	add	r3, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fd39 	bl	8001c68 <ReadData>
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 80021f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021f8:	3301      	adds	r3, #1
 80021fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80021fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d9f2      	bls.n	80021e8 <txAeroThreadEntry+0x4c>
        }
        aeroData.pressure1 = AeroSensors[0].pressure;
 8002202:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <txAeroThreadEntry+0xc4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        aeroData.pressure2 = AeroSensors[1].pressure;
 8002208:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <txAeroThreadEntry+0xc4>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	643b      	str	r3, [r7, #64]	@ 0x40
        aeroData.pressure3 = AeroSensors[2].pressure;
 800220e:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <txAeroThreadEntry+0xc4>)
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	647b      	str	r3, [r7, #68]	@ 0x44

        aeroData.temperature1 = AeroSensors[0].temperature;
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <txAeroThreadEntry+0xc4>)
 8002216:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800221a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        aeroData.temperature2 = AeroSensors[1].temperature;
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <txAeroThreadEntry+0xc4>)
 8002220:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002224:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        aeroData.temperature3 = AeroSensors[2].temperature;
 8002228:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <txAeroThreadEntry+0xc4>)
 800222a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800222e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        aeroPack(transmitData, &aeroData, AERO_DATA_LENGTH);
 8002232:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002236:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800223a:	2210      	movs	r2, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fea1 	bl	8002f84 <ucr_01_front_aero_pack>
        tx_thread_sleep(80);
 8002242:	2050      	movs	r0, #80	@ 0x50
 8002244:	f00a fe6c 	bl	800cf20 <_tx_thread_sleep>
        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &aeroHeader, transmitData);
 8002248:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	4619      	mov	r1, r3
 8002252:	4804      	ldr	r0, [pc, #16]	@ (8002264 <txAeroThreadEntry+0xc8>)
 8002254:	f003 fe44 	bl	8005ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8002258:	e7b0      	b.n	80021bc <txAeroThreadEntry+0x20>
 800225a:	bf00      	nop
 800225c:	0800e6a4 	.word	0x0800e6a4
 8002260:	200104a0 	.word	0x200104a0
 8002264:	20010204 	.word	0x20010204

08002268 <txCAN500HzThreadEntry>:
    }
}

void txCAN500HzThreadEntry(ULONG threadInput){
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

    while(1){
    	tx_thread_sleep(1000);
 8002270:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002274:	f00a fe54 	bl	800cf20 <_tx_thread_sleep>
 8002278:	e7fa      	b.n	8002270 <txCAN500HzThreadEntry+0x8>
	...

0800227c <txCAN100HzThreadEntry>:
    }
}

void txCAN100HzThreadEntry(
    ULONG threadInput
){
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b09a      	sub	sp, #104	@ 0x68
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    if(UCR_OK != FrequencyInit()){
 8002284:	f000 f8f4 	bl	8002470 <FrequencyInit>

    }
	uint8_t preScalar = htim2.Init.Prescaler + 1;
 8002288:	4b36      	ldr	r3, [pc, #216]	@ (8002364 <txCAN100HzThreadEntry+0xe8>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	3301      	adds	r3, #1
 8002290:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    float refClock = TIMCLOCK/(preScalar);
 8002294:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002298:	4a33      	ldr	r2, [pc, #204]	@ (8002368 <txCAN100HzThreadEntry+0xec>)
 800229a:	fb92 f3f3 	sdiv	r3, r2, r3
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	float frequency[NUM_FREQUENCY_CHANNELS];
	uint8_t frequencyData[FREQUENCY_DATA_LENGTH];
	FDCAN_TxHeaderTypeDef frequencyHeader = {
 80022aa:	4b30      	ldr	r3, [pc, #192]	@ (800236c <txCAN100HzThreadEntry+0xf0>)
 80022ac:	f107 0418 	add.w	r4, r7, #24
 80022b0:	461d      	mov	r5, r3
 80022b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	6023      	str	r3, [r4, #0]
	        .MessageMarker = 0
	};

    while(1){
        // Acquire the semaphore
    	tx_semaphore_get(&semaphoreFrequency, TX_WAIT_FOREVER);
 80022be:	f04f 31ff 	mov.w	r1, #4294967295
 80022c2:	482b      	ldr	r0, [pc, #172]	@ (8002370 <txCAN100HzThreadEntry+0xf4>)
 80022c4:	f00b fecc 	bl	800e060 <_txe_semaphore_get>
    	// Convert the data to frequency and encode it
    	for(int i = 0; i < 4; i ++){
 80022c8:	2300      	movs	r3, #0
 80022ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80022cc:	e028      	b.n	8002320 <txCAN100HzThreadEntry+0xa4>
    	    if(!ChannelData[i].difference){
 80022ce:	4a29      	ldr	r2, [pc, #164]	@ (8002374 <txCAN100HzThreadEntry+0xf8>)
 80022d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022d2:	019b      	lsls	r3, r3, #6
 80022d4:	4413      	add	r3, r2
 80022d6:	333c      	adds	r3, #60	@ 0x3c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d108      	bne.n	80022f0 <txCAN100HzThreadEntry+0x74>
    	        frequency[i] = 0;
 80022de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	3368      	adds	r3, #104	@ 0x68
 80022e4:	443b      	add	r3, r7
 80022e6:	3b1c      	subs	r3, #28
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e014      	b.n	800231a <txCAN100HzThreadEntry+0x9e>
    	    }else{
    	        frequency[i] = refClock / ChannelData[i].difference;
 80022f0:	4a20      	ldr	r2, [pc, #128]	@ (8002374 <txCAN100HzThreadEntry+0xf8>)
 80022f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	4413      	add	r3, r2
 80022f8:	333c      	adds	r3, #60	@ 0x3c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002304:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8002308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3368      	adds	r3, #104	@ 0x68
 8002312:	443b      	add	r3, r7
 8002314:	3b1c      	subs	r3, #28
 8002316:	edc3 7a00 	vstr	s15, [r3]
    	for(int i = 0; i < 4; i ++){
 800231a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800231c:	3301      	adds	r3, #1
 800231e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002322:	2b03      	cmp	r3, #3
 8002324:	ddd3      	ble.n	80022ce <txCAN100HzThreadEntry+0x52>
    	    }
    	}
    	struct frequencyData_t frequencyStruct = {
    	        .freq1 = frequency[0],
 8002326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    	struct frequencyData_t frequencyStruct = {
 8002328:	60bb      	str	r3, [r7, #8]
    	        .freq2 = frequency[1],
 800232a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    	struct frequencyData_t frequencyStruct = {
 800232c:	60fb      	str	r3, [r7, #12]
    	        .freq3 = frequency[2],
 800232e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    	struct frequencyData_t frequencyStruct = {
 8002330:	613b      	str	r3, [r7, #16]
    	        .freq4 = frequency[3]
 8002332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
    	struct frequencyData_t frequencyStruct = {
 8002334:	617b      	str	r3, [r7, #20]
    	};
    	frequencyPack(frequencyData, &frequencyStruct, FREQUENCY_DATA_LENGTH);
 8002336:	f107 0108 	add.w	r1, r7, #8
 800233a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800233e:	2210      	movs	r2, #16
 8002340:	4618      	mov	r0, r3
 8002342:	f000 ff2f 	bl	80031a4 <ucr_01_front_frequency_pack>
    	tx_semaphore_put(&semaphoreFrequency);
 8002346:	480a      	ldr	r0, [pc, #40]	@ (8002370 <txCAN100HzThreadEntry+0xf4>)
 8002348:	f00b fecc 	bl	800e0e4 <_txe_semaphore_put>
    	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frequencyHeader, frequencyData);
 800234c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002350:	f107 0318 	add.w	r3, r7, #24
 8002354:	4619      	mov	r1, r3
 8002356:	4808      	ldr	r0, [pc, #32]	@ (8002378 <txCAN100HzThreadEntry+0xfc>)
 8002358:	f003 fdc2 	bl	8005ee0 <HAL_FDCAN_AddMessageToTxFifoQ>

        tx_thread_sleep(10);
 800235c:	200a      	movs	r0, #10
 800235e:	f00a fddf 	bl	800cf20 <_tx_thread_sleep>
    while(1){
 8002362:	e7ac      	b.n	80022be <txCAN100HzThreadEntry+0x42>
 8002364:	200103c0 	.word	0x200103c0
 8002368:	0a21fe80 	.word	0x0a21fe80
 800236c:	0800e6c8 	.word	0x0800e6c8
 8002370:	20010910 	.word	0x20010910
 8002374:	20010984 	.word	0x20010984
 8002378:	20010204 	.word	0x20010204

0800237c <txADS1ThreadInput>:
    }
}

void txADS1ThreadInput(
    ULONG threadInput
){
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
//    uint8_t rxData[3];
//    uint8_t inputSet = 0;
//    uint8_t canTxData[20];
//    uint64_t combinedData[6];
    externalADC1.csPinPort = CS1_GPIO_Port;
 8002384:	4b35      	ldr	r3, [pc, #212]	@ (800245c <txADS1ThreadInput+0xe0>)
 8002386:	4a36      	ldr	r2, [pc, #216]	@ (8002460 <txADS1ThreadInput+0xe4>)
 8002388:	61da      	str	r2, [r3, #28]
    externalADC1.csPin = CS1_Pin;
 800238a:	4b34      	ldr	r3, [pc, #208]	@ (800245c <txADS1ThreadInput+0xe0>)
 800238c:	2220      	movs	r2, #32
 800238e:	841a      	strh	r2, [r3, #32]
    externalADC1.startSyncPinPort = STARTSYNC_1_GPIO_Port;
 8002390:	4b32      	ldr	r3, [pc, #200]	@ (800245c <txADS1ThreadInput+0xe0>)
 8002392:	4a33      	ldr	r2, [pc, #204]	@ (8002460 <txADS1ThreadInput+0xe4>)
 8002394:	615a      	str	r2, [r3, #20]
    externalADC1.startSyncPin = STARTSYNC_1_Pin;
 8002396:	4b31      	ldr	r3, [pc, #196]	@ (800245c <txADS1ThreadInput+0xe0>)
 8002398:	2210      	movs	r2, #16
 800239a:	831a      	strh	r2, [r3, #24]
    externalADC1.resetPinPort = RESET1_GPIO_Port;
 800239c:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <txADS1ThreadInput+0xe0>)
 800239e:	4a31      	ldr	r2, [pc, #196]	@ (8002464 <txADS1ThreadInput+0xe8>)
 80023a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    externalADC1.resetPin = RESET1_Pin;
 80023a2:	4b2e      	ldr	r3, [pc, #184]	@ (800245c <txADS1ThreadInput+0xe0>)
 80023a4:	2202      	movs	r2, #2
 80023a6:	861a      	strh	r2, [r3, #48]	@ 0x30
    externalADC1.drdyPinPort = DRDY1_GPIO_Port;
 80023a8:	4b2c      	ldr	r3, [pc, #176]	@ (800245c <txADS1ThreadInput+0xe0>)
 80023aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002464 <txADS1ThreadInput+0xe8>)
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24
    externalADC1.drdyPin = DRDY1_Pin;
 80023ae:	4b2b      	ldr	r3, [pc, #172]	@ (800245c <txADS1ThreadInput+0xe0>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	851a      	strh	r2, [r3, #40]	@ 0x28

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, SET);
 80023b4:	2201      	movs	r2, #1
 80023b6:	2120      	movs	r1, #32
 80023b8:	4829      	ldr	r0, [pc, #164]	@ (8002460 <txADS1ThreadInput+0xe4>)
 80023ba:	f004 f9d9 	bl	8006770 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, SET);
 80023be:	2201      	movs	r2, #1
 80023c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023c4:	4828      	ldr	r0, [pc, #160]	@ (8002468 <txADS1ThreadInput+0xec>)
 80023c6:	f004 f9d3 	bl	8006770 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(STARTSYNC_1_GPIO_Port, STARTSYNC_1_Pin, RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2110      	movs	r1, #16
 80023ce:	4824      	ldr	r0, [pc, #144]	@ (8002460 <txADS1ThreadInput+0xe4>)
 80023d0:	f004 f9ce 	bl	8006770 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(STARTSYNC_2_GPIO_Port, STARTSYNC_2_Pin, RESET);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2180      	movs	r1, #128	@ 0x80
 80023d8:	4823      	ldr	r0, [pc, #140]	@ (8002468 <txADS1ThreadInput+0xec>)
 80023da:	f004 f9c9 	bl	8006770 <HAL_GPIO_WritePin>
    // Delay to allow power supplies to settle
    tx_thread_sleep(5);
 80023de:	2005      	movs	r0, #5
 80023e0:	f00a fd9e 	bl	800cf20 <_tx_thread_sleep>

    // Set up registers
    StartUpRoutine(&externalADC1);
 80023e4:	481d      	ldr	r0, [pc, #116]	@ (800245c <txADS1ThreadInput+0xe0>)
 80023e6:	f000 f9d1 	bl	800278c <StartUpRoutine>

//    WriteRegister(&externalADC1, STATUS_ADDR_MASK, data);
//
//    // Set the PGA
    uint8_t data = ADS_DELAY_14 + ADS_PGA_ENABLED + ADS_GAIN_128;
 80023ea:	230f      	movs	r3, #15
 80023ec:	73fb      	strb	r3, [r7, #15]
    WriteRegister(&externalADC1, REG_ADDR_PGA, data);
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	461a      	mov	r2, r3
 80023f2:	2103      	movs	r1, #3
 80023f4:	4819      	ldr	r0, [pc, #100]	@ (800245c <txADS1ThreadInput+0xe0>)
 80023f6:	f000 fa61 	bl	80028bc <WriteRegister>
//
//    // Use single shot conversions
    data = ADS_CONVMODE_SS + ADS_DR_4000 + ADS_FILTERTYPE_LL;
 80023fa:	233d      	movs	r3, #61	@ 0x3d
 80023fc:	73fb      	strb	r3, [r7, #15]
    WriteRegister(&externalADC1, REG_ADDR_DATARATE, data);
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	461a      	mov	r2, r3
 8002402:	2104      	movs	r1, #4
 8002404:	4815      	ldr	r0, [pc, #84]	@ (800245c <txADS1ThreadInput+0xe0>)
 8002406:	f000 fa59 	bl	80028bc <WriteRegister>

    data = ADS_REFP_BYP_DISABLE + ADS_REFN_BYP_DISABLE + ADS_REFSEL_INT + ADS_REFINT_ON_PDWN;
 800240a:	2339      	movs	r3, #57	@ 0x39
 800240c:	73fb      	strb	r3, [r7, #15]
    WriteRegister(&externalADC1, REG_ADDR_REF, data);
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	461a      	mov	r2, r3
 8002412:	2105      	movs	r1, #5
 8002414:	4811      	ldr	r0, [pc, #68]	@ (800245c <txADS1ThreadInput+0xe0>)
 8002416:	f000 fa51 	bl	80028bc <WriteRegister>

    data = ADS_P_AIN2 + ADS_N_AIN3;
 800241a:	2323      	movs	r3, #35	@ 0x23
 800241c:	73fb      	strb	r3, [r7, #15]
    WriteRegister(&externalADC1, REG_ADDR_INPMUX, data);
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	461a      	mov	r2, r3
 8002422:	2102      	movs	r1, #2
 8002424:	480d      	ldr	r0, [pc, #52]	@ (800245c <txADS1ThreadInput+0xe0>)
 8002426:	f000 fa49 	bl	80028bc <WriteRegister>
//        .FDFormat = FDCAN_FD_CAN,
//        .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
//        .MessageMarker = 0
//    };
//    uint32_t thing = 0;
    uint8_t thing[1] = {0};
 800242a:	2300      	movs	r3, #0
 800242c:	733b      	strb	r3, [r7, #12]

    while(1){
        SendCommand(&externalADC1, OPCODE_START);
 800242e:	2108      	movs	r1, #8
 8002430:	480a      	ldr	r0, [pc, #40]	@ (800245c <txADS1ThreadInput+0xe0>)
 8002432:	f000 fa8d 	bl	8002950 <SendCommand>
        tx_thread_sleep(5);
 8002436:	2005      	movs	r0, #5
 8002438:	f00a fd72 	bl	800cf20 <_tx_thread_sleep>
        stuff = ReadADCData(&externalADC1, thing, COMMAND);
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	2201      	movs	r2, #1
 8002442:	4619      	mov	r1, r3
 8002444:	4805      	ldr	r0, [pc, #20]	@ (800245c <txADS1ThreadInput+0xe0>)
 8002446:	f000 faa9 	bl	800299c <ReadADCData>
 800244a:	4603      	mov	r3, r0
 800244c:	4a07      	ldr	r2, [pc, #28]	@ (800246c <txADS1ThreadInput+0xf0>)
 800244e:	6013      	str	r3, [r2, #0]
////            .gauge6 = combinedData[5]
////        };
////        ucr_01_front_strain_gauges1_pack(canTxData, &stuff, UCR_01_FRONT_STRAIN_GAUGES1_LENGTH);
////        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &exADC1Header, canTxData);
//        }
        tx_thread_sleep(250);
 8002450:	20fa      	movs	r0, #250	@ 0xfa
 8002452:	f00a fd65 	bl	800cf20 <_tx_thread_sleep>
        SendCommand(&externalADC1, OPCODE_START);
 8002456:	bf00      	nop
 8002458:	e7e9      	b.n	800242e <txADS1ThreadInput+0xb2>
 800245a:	bf00      	nop
 800245c:	20010a84 	.word	0x20010a84
 8002460:	48000800 	.word	0x48000800
 8002464:	48000400 	.word	0x48000400
 8002468:	48001000 	.word	0x48001000
 800246c:	20010980 	.word	0x20010980

08002470 <FrequencyInit>:
static uint8_t CalculateFrequency(
        frequency_t* channel,
        TIM_HandleTypeDef* htim
);

uint8_t FrequencyInit(void){
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af04      	add	r7, sp, #16
    uint8_t retVal = UCR_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	70fb      	strb	r3, [r7, #3]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	e016      	b.n	80024ae <FrequencyInit+0x3e>
        ChannelData[i].firstValue = 0;
 8002480:	4a35      	ldr	r2, [pc, #212]	@ (8002558 <FrequencyInit+0xe8>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	4413      	add	r3, r2
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
        ChannelData[i].secondValue = 0;
 800248c:	4a32      	ldr	r2, [pc, #200]	@ (8002558 <FrequencyInit+0xe8>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	4413      	add	r3, r2
 8002494:	3304      	adds	r3, #4
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
        ChannelData[i].isFirstCapture = false;
 800249a:	4a2f      	ldr	r2, [pc, #188]	@ (8002558 <FrequencyInit+0xe8>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	019b      	lsls	r3, r3, #6
 80024a0:	4413      	add	r3, r2
 80024a2:	3308      	adds	r3, #8
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3301      	adds	r3, #1
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d9e5      	bls.n	8002480 <FrequencyInit+0x10>
//        ChannelData[i].zeroReset = true;
    }
    ChannelData[0].halChannel = TIM_CHANNEL_1;
 80024b4:	4b28      	ldr	r3, [pc, #160]	@ (8002558 <FrequencyInit+0xe8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ChannelData[1].halChannel = TIM_CHANNEL_2;
 80024bc:	4b26      	ldr	r3, [pc, #152]	@ (8002558 <FrequencyInit+0xe8>)
 80024be:	2204      	movs	r2, #4
 80024c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    ChannelData[2].halChannel = TIM_CHANNEL_3;
 80024c4:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <FrequencyInit+0xe8>)
 80024c6:	2208      	movs	r2, #8
 80024c8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    ChannelData[3].halChannel = TIM_CHANNEL_4;
 80024cc:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <FrequencyInit+0xe8>)
 80024ce:	220c      	movs	r2, #12
 80024d0:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

    tx_timer_create(&ChannelData[0].resetTimer, "resetTimer1", 
 80024d4:	232c      	movs	r3, #44	@ 0x2c
 80024d6:	9303      	str	r3, [sp, #12]
 80024d8:	2300      	movs	r3, #0
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	2300      	movs	r3, #0
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2300      	movs	r3, #0
 80024e8:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <FrequencyInit+0xec>)
 80024ea:	491d      	ldr	r1, [pc, #116]	@ (8002560 <FrequencyInit+0xf0>)
 80024ec:	481d      	ldr	r0, [pc, #116]	@ (8002564 <FrequencyInit+0xf4>)
 80024ee:	f00b ff5d 	bl	800e3ac <_txe_timer_create>
        timerExpirationFrequency, 0, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[1].resetTimer, "resetTimer2", 
 80024f2:	232c      	movs	r3, #44	@ 0x2c
 80024f4:	9303      	str	r3, [sp, #12]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9302      	str	r3, [sp, #8]
 80024fa:	2300      	movs	r3, #0
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2301      	movs	r3, #1
 8002506:	4a15      	ldr	r2, [pc, #84]	@ (800255c <FrequencyInit+0xec>)
 8002508:	4917      	ldr	r1, [pc, #92]	@ (8002568 <FrequencyInit+0xf8>)
 800250a:	4818      	ldr	r0, [pc, #96]	@ (800256c <FrequencyInit+0xfc>)
 800250c:	f00b ff4e 	bl	800e3ac <_txe_timer_create>
        timerExpirationFrequency, 1, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[2].resetTimer, "resetTimer3", 
 8002510:	232c      	movs	r3, #44	@ 0x2c
 8002512:	9303      	str	r3, [sp, #12]
 8002514:	2300      	movs	r3, #0
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	2300      	movs	r3, #0
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2302      	movs	r3, #2
 8002524:	4a0d      	ldr	r2, [pc, #52]	@ (800255c <FrequencyInit+0xec>)
 8002526:	4912      	ldr	r1, [pc, #72]	@ (8002570 <FrequencyInit+0x100>)
 8002528:	4812      	ldr	r0, [pc, #72]	@ (8002574 <FrequencyInit+0x104>)
 800252a:	f00b ff3f 	bl	800e3ac <_txe_timer_create>
        timerExpirationFrequency, 2, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[3].resetTimer, "resetTimer4", 
 800252e:	232c      	movs	r3, #44	@ 0x2c
 8002530:	9303      	str	r3, [sp, #12]
 8002532:	2300      	movs	r3, #0
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	2300      	movs	r3, #0
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2303      	movs	r3, #3
 8002542:	4a06      	ldr	r2, [pc, #24]	@ (800255c <FrequencyInit+0xec>)
 8002544:	490c      	ldr	r1, [pc, #48]	@ (8002578 <FrequencyInit+0x108>)
 8002546:	480d      	ldr	r0, [pc, #52]	@ (800257c <FrequencyInit+0x10c>)
 8002548:	f00b ff30 	bl	800e3ac <_txe_timer_create>
        timerExpirationFrequency, 3, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    return retVal;
 800254c:	78fb      	ldrb	r3, [r7, #3]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20010984 	.word	0x20010984
 800255c:	080026e1 	.word	0x080026e1
 8002560:	0800e6ec 	.word	0x0800e6ec
 8002564:	20010990 	.word	0x20010990
 8002568:	0800e6f8 	.word	0x0800e6f8
 800256c:	200109d0 	.word	0x200109d0
 8002570:	0800e704 	.word	0x0800e704
 8002574:	20010a10 	.word	0x20010a10
 8002578:	0800e710 	.word	0x0800e710
 800257c:	20010a50 	.word	0x20010a50

08002580 <HAL_TIM_IC_CaptureCallback>:
  * @param htim: Timer handle
  * @retval void
  */
void HAL_TIM_IC_CaptureCallback(
    TIM_HandleTypeDef* htim
){
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
    switch (htim->Channel){
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7f1b      	ldrb	r3, [r3, #28]
 8002590:	3b01      	subs	r3, #1
 8002592:	2b07      	cmp	r3, #7
 8002594:	d827      	bhi.n	80025e6 <HAL_TIM_IC_CaptureCallback+0x66>
 8002596:	a201      	add	r2, pc, #4	@ (adr r2, 800259c <HAL_TIM_IC_CaptureCallback+0x1c>)
 8002598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259c:	080025bd 	.word	0x080025bd
 80025a0:	080025c3 	.word	0x080025c3
 80025a4:	080025e7 	.word	0x080025e7
 80025a8:	080025c9 	.word	0x080025c9
 80025ac:	080025e7 	.word	0x080025e7
 80025b0:	080025e7 	.word	0x080025e7
 80025b4:	080025e7 	.word	0x080025e7
 80025b8:	080025cf 	.word	0x080025cf
        case HAL_TIM_ACTIVE_CHANNEL_1:
            channel = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
            break;
 80025c0:	e008      	b.n	80025d4 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_2:
            channel = 1;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
            break;
 80025c6:	e005      	b.n	80025d4 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            channel = 2;
 80025c8:	2302      	movs	r3, #2
 80025ca:	73fb      	strb	r3, [r7, #15]
            break;
 80025cc:	e002      	b.n	80025d4 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_4:
            channel = 3;
 80025ce:	2303      	movs	r3, #3
 80025d0:	73fb      	strb	r3, [r7, #15]
            break;
 80025d2:	bf00      	nop
        default:
            return;
    }
    CalculateFrequency(&ChannelData[channel], htim);
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	019b      	lsls	r3, r3, #6
 80025d8:	4a05      	ldr	r2, [pc, #20]	@ (80025f0 <HAL_TIM_IC_CaptureCallback+0x70>)
 80025da:	4413      	add	r3, r2
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f808 	bl	80025f4 <CalculateFrequency>
 80025e4:	e000      	b.n	80025e8 <HAL_TIM_IC_CaptureCallback+0x68>
            return;
 80025e6:	bf00      	nop
}
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20010984 	.word	0x20010984

080025f4 <CalculateFrequency>:

static uint8_t CalculateFrequency(
    frequency_t* channel,
    TIM_HandleTypeDef* htim
){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
    uint8_t retVal = UCR_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
    // Check if first rising edge to begin capture
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 8002602:	2100      	movs	r1, #0
 8002604:	4835      	ldr	r0, [pc, #212]	@ (80026dc <CalculateFrequency+0xe8>)
 8002606:	f00b fd2b 	bl	800e060 <_txe_semaphore_get>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <CalculateFrequency+0x24>
        retVal = UCR_NOT_OK;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
        return retVal;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	e05c      	b.n	80026d2 <CalculateFrequency+0xde>
    }

    if(!channel->isFirstCapture){
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7a1b      	ldrb	r3, [r3, #8]
 800261c:	f083 0301 	eor.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d012      	beq.n	800264c <CalculateFrequency+0x58>
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	330c      	adds	r3, #12
 800262a:	4618      	mov	r0, r3
 800262c:	f00b fe6a 	bl	800e304 <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
        channel->firstValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002636:	4619      	mov	r1, r3
 8002638:	6838      	ldr	r0, [r7, #0]
 800263a:	f008 fc37 	bl	800aeac <HAL_TIM_ReadCapturedValue>
 800263e:	4602      	mov	r2, r0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	601a      	str	r2, [r3, #0]
        // Set flag to indicate next value will be second rising edge
        channel->isFirstCapture = true;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	721a      	strb	r2, [r3, #8]
 800264a:	e036      	b.n	80026ba <CalculateFrequency+0xc6>
    }else{
        // Stop the reset timer
        if(TX_SUCCESS != tx_timer_deactivate(&channel->resetTimer)){
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	330c      	adds	r3, #12
 8002650:	4618      	mov	r0, r3
 8002652:	f00b ff57 	bl	800e504 <_txe_timer_deactivate>
            // ADD error handler stuff here;
        }
        channel->secondValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800265c:	4619      	mov	r1, r3
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f008 fc24 	bl	800aeac <HAL_TIM_ReadCapturedValue>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	605a      	str	r2, [r3, #4]
        // Check if the first capture was before the second
        if(channel->secondValue > channel->firstValue){
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d907      	bls.n	8002686 <CalculateFrequency+0x92>
            // Calculate the difference
            channel->difference = channel->secondValue - channel->firstValue;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	1ad2      	subs	r2, r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002684:	e010      	b.n	80026a8 <CalculateFrequency+0xb4>
        } else if (channel->secondValue < channel->firstValue){
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d20a      	bcs.n	80026a8 <CalculateFrequency+0xb4>
            channel->difference = ((htim->Init.Period - channel->firstValue) + channel->secondValue) + 1;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        // Reset the first capture state
        channel->firstValue = channel->secondValue;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	601a      	str	r2, [r3, #0]
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	330c      	adds	r3, #12
 80026b4:	4618      	mov	r0, r3
 80026b6:	f00b fe25 	bl	800e304 <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
    }
    // Release the semaphore
    if(TX_SUCCESS != tx_semaphore_put(&semaphoreFrequency)){
 80026ba:	4808      	ldr	r0, [pc, #32]	@ (80026dc <CalculateFrequency+0xe8>)
 80026bc:	f00b fd12 	bl	800e0e4 <_txe_semaphore_put>
        // ADD error handler stuff here;
    }
    // Reset the timer;
    if(TX_SUCCESS != tx_timer_change(&channel->resetTimer, FREQUENCY_RESET_TIME, 0)){
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	330c      	adds	r3, #12
 80026c4:	2200      	movs	r2, #0
 80026c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80026ca:	4618      	mov	r0, r3
 80026cc:	f00b fe38 	bl	800e340 <_txe_timer_change>
        // ADD error handler stuff here;
    }
    return retVal;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20010910 	.word	0x20010910

080026e0 <timerExpirationFrequency>:
  * @param channel: the number of the timer
  * @retval void
  */
void timerExpirationFrequency(
    ULONG channel
){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
    // Attempt to acquire the semaphore
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 80026e8:	2100      	movs	r1, #0
 80026ea:	4818      	ldr	r0, [pc, #96]	@ (800274c <timerExpirationFrequency+0x6c>)
 80026ec:	f00b fcb8 	bl	800e060 <_txe_semaphore_get>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d126      	bne.n	8002744 <timerExpirationFrequency+0x64>
        return;
    }
    // Set the first capture and difference to zero
    ChannelData[channel].isFirstCapture = false;
 80026f6:	4a16      	ldr	r2, [pc, #88]	@ (8002750 <timerExpirationFrequency+0x70>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	019b      	lsls	r3, r3, #6
 80026fc:	4413      	add	r3, r2
 80026fe:	3308      	adds	r3, #8
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
    ChannelData[channel].difference = 0;
 8002704:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <timerExpirationFrequency+0x70>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	4413      	add	r3, r2
 800270c:	333c      	adds	r3, #60	@ 0x3c
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
    // Reset the timer
    tx_timer_deactivate(&ChannelData[channel].resetTimer);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	3308      	adds	r3, #8
 8002718:	4a0d      	ldr	r2, [pc, #52]	@ (8002750 <timerExpirationFrequency+0x70>)
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	4618      	mov	r0, r3
 8002720:	f00b fef0 	bl	800e504 <_txe_timer_deactivate>
    tx_timer_change(&ChannelData[channel].resetTimer, FREQUENCY_RESET_TIME, 0);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	019b      	lsls	r3, r3, #6
 8002728:	3308      	adds	r3, #8
 800272a:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <timerExpirationFrequency+0x70>)
 800272c:	4413      	add	r3, r2
 800272e:	3304      	adds	r3, #4
 8002730:	2200      	movs	r2, #0
 8002732:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002736:	4618      	mov	r0, r3
 8002738:	f00b fe02 	bl	800e340 <_txe_timer_change>
    // Release the semaphore
    tx_semaphore_put(&semaphoreFrequency);
 800273c:	4803      	ldr	r0, [pc, #12]	@ (800274c <timerExpirationFrequency+0x6c>)
 800273e:	f00b fcd1 	bl	800e0e4 <_txe_semaphore_put>
    return;
 8002742:	e000      	b.n	8002746 <timerExpirationFrequency+0x66>
        return;
 8002744:	bf00      	nop
}
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20010910 	.word	0x20010910
 8002750:	20010984 	.word	0x20010984

08002754 <HAL_GPIO_EXTI_Callback>:
#include "exti.h"
#include "stdint.h"
#include "main.h"
#include "threadx.h"

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
    if(pin == DRDY1_Pin){
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d103      	bne.n	800276c <HAL_GPIO_EXTI_Callback+0x18>
        tx_semaphore_put(&semaphoreExADC1);
 8002764:	4807      	ldr	r0, [pc, #28]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x30>)
 8002766:	f00b fcbd 	bl	800e0e4 <_txe_semaphore_put>
    }else if(pin == DRDY2_Pin){
        tx_semaphore_put(&semaphoreExADC2);
    }
}
 800276a:	e006      	b.n	800277a <HAL_GPIO_EXTI_Callback+0x26>
    }else if(pin == DRDY2_Pin){
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002772:	d102      	bne.n	800277a <HAL_GPIO_EXTI_Callback+0x26>
        tx_semaphore_put(&semaphoreExADC2);
 8002774:	4804      	ldr	r0, [pc, #16]	@ (8002788 <HAL_GPIO_EXTI_Callback+0x34>)
 8002776:	f00b fcb5 	bl	800e0e4 <_txe_semaphore_put>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2001092c 	.word	0x2001092c
 8002788:	20010948 	.word	0x20010948

0800278c <StartUpRoutine>:
const uint8_t registerStates[] = {
    0x00

};

bool StartUpRoutine(ads124S08Control_t* device){
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    uint8_t initRegisterMap[NUM_REGISTERS] = {0};
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	819a      	strh	r2, [r3, #12]
    uint8_t status, i;

    // Delay for power supply settling
    HAL_Delay(10);
 80027a6:	200a      	movs	r0, #10
 80027a8:	f000 ff00 	bl	80035ac <HAL_Delay>

    // Toggle nReset pin to reset registers
    ToggleReset(device);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f822 	bl	80027f6 <ToggleReset>

    // Delay for post reset
    HAL_Delay(10);
 80027b2:	200a      	movs	r0, #10
 80027b4:	f000 fefa 	bl	80035ac <HAL_Delay>

    // Check if device is ready
    status = ReadRegister(device, REG_ADDR_STATUS);
 80027b8:	2101      	movs	r1, #1
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f836 	bl	800282c <ReadRegister>
 80027c0:	4603      	mov	r3, r0
 80027c2:	77fb      	strb	r3, [r7, #31]
    if(status & ADS_nRDY_MASK){
 80027c4:	7ffb      	ldrb	r3, [r7, #31]
 80027c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <StartUpRoutine+0x46>
        return false;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e00d      	b.n	80027ee <StartUpRoutine+0x62>
    }

    // 
    RestoreRegisterDefaults(device);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fa18 	bl	8002c08 <RestoreRegisterDefaults>

    // Clear Power on Reset flag
    WriteRegister(device, REG_ADDR_STATUS, 0x00);
 80027d8:	2200      	movs	r2, #0
 80027da:	2101      	movs	r1, #1
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f86d 	bl	80028bc <WriteRegister>



    
    return status;
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <ToggleReset>:

void ToggleReset(ads124S08Control_t* device){
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(device->resetPinPort, device->resetPin, RESET);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002806:	2200      	movs	r2, #0
 8002808:	4619      	mov	r1, r3
 800280a:	f003 ffb1 	bl	8006770 <HAL_GPIO_WritePin>
    HAL_Delay(ADS_RESET_TIME);
 800280e:	2001      	movs	r0, #1
 8002810:	f000 fecc 	bl	80035ac <HAL_Delay>
    HAL_GPIO_WritePin(device->resetPinPort, device->resetPin, SET);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800281c:	2201      	movs	r2, #1
 800281e:	4619      	mov	r1, r3
 8002820:	f003 ffa6 	bl	8006770 <HAL_GPIO_WritePin>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <ReadRegister>:

uint8_t ReadRegister(
    ads124S08Control_t* device,
    uint16_t address
){
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
	uint8_t txData[COMMAND_LENGTH + 1] = { OPCODE_RREG | (address & OPCODE_RWREG_MASK), 0, 0 };
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	b25b      	sxtb	r3, r3
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	b25b      	sxtb	r3, r3
 8002842:	f043 0320 	orr.w	r3, r3, #32
 8002846:	b25b      	sxtb	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	733b      	strb	r3, [r7, #12]
 800284c:	2300      	movs	r3, #0
 800284e:	737b      	strb	r3, [r7, #13]
 8002850:	2300      	movs	r3, #0
 8002852:	73bb      	strb	r3, [r7, #14]
	uint8_t rxData[COMMAND_LENGTH + 1] = {0, 0, 0};
 8002854:	4a17      	ldr	r2, [pc, #92]	@ (80028b4 <ReadRegister+0x88>)
 8002856:	f107 0308 	add.w	r3, r7, #8
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4611      	mov	r1, r2
 800285e:	8019      	strh	r1, [r3, #0]
 8002860:	3302      	adds	r3, #2
 8002862:	0c12      	lsrs	r2, r2, #16
 8002864:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef thing;
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 0);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69d8      	ldr	r0, [r3, #28]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8c1b      	ldrh	r3, [r3, #32]
 800286e:	2200      	movs	r2, #0
 8002870:	4619      	mov	r1, r3
 8002872:	f003 ff7d 	bl	8006770 <HAL_GPIO_WritePin>
	thing = HAL_SPI_TransmitReceive(&hspi4, txData, rxData, COMMAND_LENGTH + 1, 500);
 8002876:	f107 0208 	add.w	r2, r7, #8
 800287a:	f107 010c 	add.w	r1, r7, #12
 800287e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2303      	movs	r3, #3
 8002886:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <ReadRegister+0x8c>)
 8002888:	f007 fa08 	bl	8009c9c <HAL_SPI_TransmitReceive>
 800288c:	4603      	mov	r3, r0
 800288e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69d8      	ldr	r0, [r3, #28]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8c1b      	ldrh	r3, [r3, #32]
 8002898:	2201      	movs	r2, #1
 800289a:	4619      	mov	r1, r3
 800289c:	f003 ff68 	bl	8006770 <HAL_GPIO_WritePin>
	device->registers[address] = rxData[COMMAND_LENGTH];
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	7ab9      	ldrb	r1, [r7, #10]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	54d1      	strb	r1, [r2, r3]
    return rxData[COMMAND_LENGTH];
 80028a8:	7abb      	ldrb	r3, [r7, #10]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	0800e71c 	.word	0x0800e71c
 80028b8:	20010310 	.word	0x20010310

080028bc <WriteRegister>:

uint8_t WriteRegister(
	ads124S08Control_t* device,
	uint16_t address,
	uint8_t data
){
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
	uint8_t retVal = UCR_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
	uint8_t txData[COMMAND_LENGTH + 1] = { OPCODE_WREG | (address & OPCODE_RWREG_MASK), 0, data};
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	b25b      	sxtb	r3, r3
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	733b      	strb	r3, [r7, #12]
 80028e4:	2300      	movs	r3, #0
 80028e6:	737b      	strb	r3, [r7, #13]
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	73bb      	strb	r3, [r7, #14]
	uint8_t rxData[COMMAND_LENGTH + 1] = {0, 0, 0};
 80028ec:	4a16      	ldr	r2, [pc, #88]	@ (8002948 <WriteRegister+0x8c>)
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	4611      	mov	r1, r2
 80028f6:	8019      	strh	r1, [r3, #0]
 80028f8:	3302      	adds	r3, #2
 80028fa:	0c12      	lsrs	r2, r2, #16
 80028fc:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69d8      	ldr	r0, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8c1b      	ldrh	r3, [r3, #32]
 8002906:	2200      	movs	r2, #0
 8002908:	4619      	mov	r1, r3
 800290a:	f003 ff31 	bl	8006770 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, txData, rxData, COMMAND_LENGTH + 1, 500);
 800290e:	f107 0208 	add.w	r2, r7, #8
 8002912:	f107 010c 	add.w	r1, r7, #12
 8002916:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2303      	movs	r3, #3
 800291e:	480b      	ldr	r0, [pc, #44]	@ (800294c <WriteRegister+0x90>)
 8002920:	f007 f9bc 	bl	8009c9c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69d8      	ldr	r0, [r3, #28]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8c1b      	ldrh	r3, [r3, #32]
 800292c:	2201      	movs	r2, #1
 800292e:	4619      	mov	r1, r3
 8002930:	f003 ff1e 	bl	8006770 <HAL_GPIO_WritePin>
	device->registers[address] = txData[COMMAND_LENGTH];
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	7bb9      	ldrb	r1, [r7, #14]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	54d1      	strb	r1, [r2, r3]
	return retVal;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	0800e71c 	.word	0x0800e71c
 800294c:	20010310 	.word	0x20010310

08002950 <SendCommand>:
}

uint8_t SendCommand(
	ads124S08Control_t* device,
	uint8_t command
){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	70fb      	strb	r3, [r7, #3]
	uint8_t retVal = UCR_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 0);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69d8      	ldr	r0, [r3, #28]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8c1b      	ldrh	r3, [r3, #32]
 8002968:	2200      	movs	r2, #0
 800296a:	4619      	mov	r1, r3
 800296c:	f003 ff00 	bl	8006770 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi4, &command, 1, 500);
 8002970:	1cf9      	adds	r1, r7, #3
 8002972:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002976:	2201      	movs	r2, #1
 8002978:	4807      	ldr	r0, [pc, #28]	@ (8002998 <SendCommand+0x48>)
 800297a:	f007 f81a 	bl	80099b2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(device->csPinPort, device->csPin, 1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69d8      	ldr	r0, [r3, #28]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8c1b      	ldrh	r3, [r3, #32]
 8002986:	2201      	movs	r2, #1
 8002988:	4619      	mov	r1, r3
 800298a:	f003 fef1 	bl	8006770 <HAL_GPIO_WritePin>
	return retVal;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20010310 	.word	0x20010310

0800299c <ReadADCData>:

int32_t ReadADCData(
	ads124S08Control_t* device,
	uint8_t* deviceStatus,
	uint8_t mode
){
 800299c:	b580      	push	{r7, lr}
 800299e:	b092      	sub	sp, #72	@ 0x48
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	71fb      	strb	r3, [r7, #7]
    uint8_t txData[RDATA_COMMAND_LENGTH + STATUS_LENGTH + DATA_LENGTH + CRC_LENGTH] = {0};
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	2300      	movs	r3, #0
 80029b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t rxData[RDATA_COMMAND_LENGTH + STATUS_LENGTH + DATA_LENGTH + CRC_LENGTH] = {0};
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	2300      	movs	r3, #0
 80029b8:	83bb      	strh	r3, [r7, #28]
    uint8_t byteLength;
    uint8_t dataPosition;
    uint8_t byteOptions;
    uint8_t data[5];
    bool statusByteEnabled = false;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    int32_t signByte, upperByte, middleByte, lowerByte;

    byteOptions = (device->registers[REG_ADDR_SYS] & ADS_SENDSTATUS_MASK << 1) 
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	7a5b      	ldrb	r3, [r3, #9]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                    | (device->registers[REG_ADDR_SYS] & ADS_CRC_MASK);

    switch(byteOptions){
 80029cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d82d      	bhi.n	8002a30 <ReadADCData+0x94>
 80029d4:	a201      	add	r2, pc, #4	@ (adr r2, 80029dc <ReadADCData+0x40>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	080029fb 	.word	0x080029fb
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002a1d 	.word	0x08002a1d
        case 0:
            byteLength = DATA_LENGTH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            break;
 80029f8:	e01a      	b.n	8002a30 <ReadADCData+0x94>
        case 1: 
            byteLength = DATA_LENGTH + CRC_LENGTH;
 80029fa:	2304      	movs	r3, #4
 80029fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            break;
 8002a06:	e013      	b.n	8002a30 <ReadADCData+0x94>
        case 2:
            byteLength = STATUS_LENGTH + DATA_LENGTH;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            statusByteEnabled = true;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            break;
 8002a1a:	e009      	b.n	8002a30 <ReadADCData+0x94>
        case 3:
            byteLength = STATUS_LENGTH + DATA_LENGTH + CRC_LENGTH;
 8002a1c:	2305      	movs	r3, #5
 8002a1e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            statusByteEnabled = true;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            break;
 8002a2e:	bf00      	nop
    }
    if(mode == COMMAND){
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10c      	bne.n	8002a50 <ReadADCData+0xb4>
        txData[0] = OPCODE_RDATA;
 8002a36:	2312      	movs	r3, #18
 8002a38:	f887 3020 	strb.w	r3, [r7, #32]
        byteLength ++;
 8002a3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a40:	3301      	adds	r3, #1
 8002a42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        dataPosition ++;
 8002a46:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    HAL_GPIO_WritePin(device->csPinPort, device->csPin, RESET);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	69d8      	ldr	r0, [r3, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8c1b      	ldrh	r3, [r3, #32]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f003 fe88 	bl	8006770 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi4, txData, rxData, byteLength, 500);
 8002a60:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f107 0218 	add.w	r2, r7, #24
 8002a6a:	f107 0120 	add.w	r1, r7, #32
 8002a6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a72:	9000      	str	r0, [sp, #0]
 8002a74:	4863      	ldr	r0, [pc, #396]	@ (8002c04 <ReadADCData+0x268>)
 8002a76:	f007 f911 	bl	8009c9c <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(device->csPinPort, device->csPin, SET);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	69d8      	ldr	r0, [r3, #28]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8c1b      	ldrh	r3, [r3, #32]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4619      	mov	r1, r3
 8002a86:	f003 fe73 	bl	8006770 <HAL_GPIO_WritePin>

    if(statusByteEnabled && deviceStatus){
 8002a8a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <ReadADCData+0x10e>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <ReadADCData+0x10e>
        deviceStatus[0] = rxData[dataPosition - 1];
 8002a98:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	3340      	adds	r3, #64	@ 0x40
 8002aa0:	443b      	add	r3, r7
 8002aa2:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	701a      	strb	r2, [r3, #0]
    }

    if (rxData[dataPosition] & 0x80u ) {
 8002aaa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002aae:	3340      	adds	r3, #64	@ 0x40
 8002ab0:	443b      	add	r3, r7
 8002ab2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da03      	bge.n	8002ac4 <ReadADCData+0x128>
    	signByte = 0xFF000000; 
 8002abc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ac2:	e001      	b.n	8002ac8 <ReadADCData+0x12c>
    } else { 
    	signByte = 0x00000000; 
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if(device->registers[REG_ADDR_SYS] & ADS_CRC_MASK){
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	7a5b      	ldrb	r3, [r3, #9]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d073      	beq.n	8002bbc <ReadADCData+0x220>
        if(device->registers[REG_ADDR_SYS] & ADS_SENDSTATUS_MASK){
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	7a5b      	ldrb	r3, [r3, #9]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d03a      	beq.n	8002b56 <ReadADCData+0x1ba>
            data[0] = rxData[dataPosition - 1];
 8002ae0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	3340      	adds	r3, #64	@ 0x40
 8002ae8:	443b      	add	r3, r7
 8002aea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aee:	743b      	strb	r3, [r7, #16]
            data[1] = rxData[dataPosition];
 8002af0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002af4:	3340      	adds	r3, #64	@ 0x40
 8002af6:	443b      	add	r3, r7
 8002af8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002afc:	747b      	strb	r3, [r7, #17]
            data[2] = rxData[dataPosition + 1];
 8002afe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b02:	3301      	adds	r3, #1
 8002b04:	3340      	adds	r3, #64	@ 0x40
 8002b06:	443b      	add	r3, r7
 8002b08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b0c:	74bb      	strb	r3, [r7, #18]
            data[3] = rxData[dataPosition + 2];
 8002b0e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b12:	3302      	adds	r3, #2
 8002b14:	3340      	adds	r3, #64	@ 0x40
 8002b16:	443b      	add	r3, r7
 8002b18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b1c:	74fb      	strb	r3, [r7, #19]
            data[4] = rxData[dataPosition + 3];
 8002b1e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b22:	3303      	adds	r3, #3
 8002b24:	3340      	adds	r3, #64	@ 0x40
 8002b26:	443b      	add	r3, r7
 8002b28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b2c:	753b      	strb	r3, [r7, #20]

            bool error = (bool) getCRC(data, 5, CRC_INITIAL_SEED);
 8002b2e:	f107 0310 	add.w	r3, r7, #16
 8002b32:	2200      	movs	r2, #0
 8002b34:	2105      	movs	r1, #5
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fc58 	bl	80033ec <getCRC>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            if ( error ) {
 8002b4a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d034      	beq.n	8002bbc <ReadADCData+0x220>
                // if error, report and handle the error
                while (1);
 8002b52:	bf00      	nop
 8002b54:	e7fd      	b.n	8002b52 <ReadADCData+0x1b6>
            }
        }else{
            data[0] = rxData[dataPosition];
 8002b56:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b5a:	3340      	adds	r3, #64	@ 0x40
 8002b5c:	443b      	add	r3, r7
 8002b5e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b62:	743b      	strb	r3, [r7, #16]
            data[1] = rxData[dataPosition + 1];
 8002b64:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b68:	3301      	adds	r3, #1
 8002b6a:	3340      	adds	r3, #64	@ 0x40
 8002b6c:	443b      	add	r3, r7
 8002b6e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b72:	747b      	strb	r3, [r7, #17]
            data[2] = rxData[dataPosition + 2];
 8002b74:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b78:	3302      	adds	r3, #2
 8002b7a:	3340      	adds	r3, #64	@ 0x40
 8002b7c:	443b      	add	r3, r7
 8002b7e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b82:	74bb      	strb	r3, [r7, #18]
            data[3] = rxData[dataPosition + 3];
 8002b84:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b88:	3303      	adds	r3, #3
 8002b8a:	3340      	adds	r3, #64	@ 0x40
 8002b8c:	443b      	add	r3, r7
 8002b8e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b92:	74fb      	strb	r3, [r7, #19]
            bool error = (bool) getCRC(data, 4, CRC_INITIAL_SEED);
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fc25 	bl	80033ec <getCRC>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

            if(error){
 8002bb0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <ReadADCData+0x220>
                while(1);
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <ReadADCData+0x21c>
            }
        }
    }
    upperByte = ((uint32_t) rxData[dataPosition] & 0xFF) << 16;
 8002bbc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002bc0:	3340      	adds	r3, #64	@ 0x40
 8002bc2:	443b      	add	r3, r7
 8002bc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	633b      	str	r3, [r7, #48]	@ 0x30
    middleByte = ((uint32_t) rxData[dataPosition + 1] & 0xFF) << 8;
 8002bcc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	3340      	adds	r3, #64	@ 0x40
 8002bd4:	443b      	add	r3, r7
 8002bd6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lowerByte = ((uint32_t) rxData[dataPosition + 2] & 0xFF);
 8002bde:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002be2:	3302      	adds	r3, #2
 8002be4:	3340      	adds	r3, #64	@ 0x40
 8002be6:	443b      	add	r3, r7
 8002be8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28

	return (signByte + upperByte + middleByte + lowerByte);
 8002bee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf2:	441a      	add	r2, r3
 8002bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf6:	441a      	add	r2, r3
 8002bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfa:	4413      	add	r3, r2
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3740      	adds	r7, #64	@ 0x40
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20010310 	.word	0x20010310

08002c08 <RestoreRegisterDefaults>:

void RestoreRegisterDefaults(
    ads124S08Control_t* device
){
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	/* Default register settings */
    device->registers[REG_ADDR_ID]       = ID_DEFAULT;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
	device->registers[REG_ADDR_STATUS]   = STATUS_DEFAULT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2280      	movs	r2, #128	@ 0x80
 8002c1a:	705a      	strb	r2, [r3, #1]
	device->registers[REG_ADDR_INPMUX]   = INPMUX_DEFAULT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	709a      	strb	r2, [r3, #2]
	device->registers[REG_ADDR_PGA]      = PGA_DEFAULT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	70da      	strb	r2, [r3, #3]
	device->registers[REG_ADDR_DATARATE] = DATARATE_DEFAULT;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2214      	movs	r2, #20
 8002c2c:	711a      	strb	r2, [r3, #4]
	device->registers[REG_ADDR_REF]      = REF_DEFAULT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2210      	movs	r2, #16
 8002c32:	715a      	strb	r2, [r3, #5]
	device->registers[REG_ADDR_IDACMAG]  = IDACMAG_DEFAULT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	719a      	strb	r2, [r3, #6]
	device->registers[REG_ADDR_IDACMUX]  = IDACMUX_DEFAULT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	22ff      	movs	r2, #255	@ 0xff
 8002c3e:	71da      	strb	r2, [r3, #7]
	device->registers[REG_ADDR_VBIAS]    = VBIAS_DEFAULT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	721a      	strb	r2, [r3, #8]
	device->registers[REG_ADDR_SYS]      = SYS_DEFAULT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2210      	movs	r2, #16
 8002c4a:	725a      	strb	r2, [r3, #9]
	device->registers[REG_ADDR_OFCAL0]   = OFCAL0_DEFAULT;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	729a      	strb	r2, [r3, #10]
	device->registers[REG_ADDR_OFCAL1]   = OFCAL1_DEFAULT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	72da      	strb	r2, [r3, #11]
	device->registers[REG_ADDR_OFCAL2]   = OFCAL2_DEFAULT;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	731a      	strb	r2, [r3, #12]
	device->registers[REG_ADDR_FSCAL0]   = FSCAL0_DEFAULT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	735a      	strb	r2, [r3, #13]
	device->registers[REG_ADDR_FSCAL1]   = FSCAL1_DEFAULT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	739a      	strb	r2, [r3, #14]
	device->registers[REG_ADDR_FSCAL2]   = FSCAL2_DEFAULT;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2240      	movs	r2, #64	@ 0x40
 8002c6e:	73da      	strb	r2, [r3, #15]
	device->registers[REG_ADDR_GPIODAT]  = GPIODAT_DEFAULT;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	741a      	strb	r2, [r3, #16]
	device->registers[REG_ADDR_GPIOCON]  = GPIOCON_DEFAULT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	745a      	strb	r2, [r3, #17]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
 8002c92:	460b      	mov	r3, r1
 8002c94:	717b      	strb	r3, [r7, #5]
 8002c96:	4613      	mov	r3, r2
 8002c98:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	797b      	ldrb	r3, [r7, #5]
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	793b      	ldrb	r3, [r7, #4]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	b2db      	uxtb	r3, r3
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <pack_left_shift_u32>:

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	70fb      	strb	r3, [r7, #3]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	78bb      	ldrb	r3, [r7, #2]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b2db      	uxtb	r3, r3
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	80fb      	strh	r3, [r7, #6]
 8002cec:	460b      	mov	r3, r1
 8002cee:	717b      	strb	r3, [r7, #5]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8002cf4:	88fa      	ldrh	r2, [r7, #6]
 8002cf6:	797b      	ldrb	r3, [r7, #5]
 8002cf8:	fa42 f303 	asr.w	r3, r2, r3
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	793b      	ldrb	r3, [r7, #4]
 8002d00:	4013      	ands	r3, r2
 8002d02:	b2db      	uxtb	r3, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <pack_right_shift_u32>:

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	78bb      	ldrb	r3, [r7, #2]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b2db      	uxtb	r3, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <ucr_01_front_analog_pack>:

int ucr_01_front_analog_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_analog_t *src_p,
    size_t size)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
    if (size < 16u) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	d802      	bhi.n	8002d54 <ucr_01_front_analog_pack+0x18>
        return (-EINVAL);
 8002d4e:	f06f 0315 	mvn.w	r3, #21
 8002d52:	e113      	b.n	8002f7c <ucr_01_front_analog_pack+0x240>
    }

    memset(&dst_p[0], 0, 16);
 8002d54:	2210      	movs	r2, #16
 8002d56:	2100      	movs	r1, #0
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f00b fbf1 	bl	800e540 <memset>

    dst_p[0] |= pack_left_shift_u16(src_p->analog1, 0u, 0xffu);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	22ff      	movs	r2, #255	@ 0xff
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ff8e 	bl	8002c88 <pack_left_shift_u16>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(src_p->analog1, 8u, 0xffu);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	22ff      	movs	r2, #255	@ 0xff
 8002d82:	2108      	movs	r1, #8
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ffac 	bl	8002ce2 <pack_right_shift_u16>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3301      	adds	r3, #1
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u16(src_p->analog2, 0u, 0xffu);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	885b      	ldrh	r3, [r3, #2]
 8002da2:	22ff      	movs	r2, #255	@ 0xff
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff6e 	bl	8002c88 <pack_left_shift_u16>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4619      	mov	r1, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3302      	adds	r3, #2
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3302      	adds	r3, #2
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->analog2, 8u, 0xffu);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	885b      	ldrh	r3, [r3, #2]
 8002dc4:	22ff      	movs	r2, #255	@ 0xff
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff8a 	bl	8002ce2 <pack_right_shift_u16>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3303      	adds	r3, #3
 8002dd6:	781a      	ldrb	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3303      	adds	r3, #3
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u16(src_p->analog3, 0u, 0xffu);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	889b      	ldrh	r3, [r3, #4]
 8002de6:	22ff      	movs	r2, #255	@ 0xff
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ff4c 	bl	8002c88 <pack_left_shift_u16>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4619      	mov	r1, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3304      	adds	r3, #4
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(src_p->analog3, 8u, 0xffu);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	889b      	ldrh	r3, [r3, #4]
 8002e08:	22ff      	movs	r2, #255	@ 0xff
 8002e0a:	2108      	movs	r1, #8
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff68 	bl	8002ce2 <pack_right_shift_u16>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4619      	mov	r1, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3305      	adds	r3, #5
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3305      	adds	r3, #5
 8002e20:	430a      	orrs	r2, r1
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u16(src_p->analog4, 0u, 0xffu);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	88db      	ldrh	r3, [r3, #6]
 8002e2a:	22ff      	movs	r2, #255	@ 0xff
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff2a 	bl	8002c88 <pack_left_shift_u16>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4619      	mov	r1, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3306      	adds	r3, #6
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3306      	adds	r3, #6
 8002e42:	430a      	orrs	r2, r1
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(src_p->analog4, 8u, 0xffu);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	88db      	ldrh	r3, [r3, #6]
 8002e4c:	22ff      	movs	r2, #255	@ 0xff
 8002e4e:	2108      	movs	r1, #8
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff46 	bl	8002ce2 <pack_right_shift_u16>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4619      	mov	r1, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3307      	adds	r3, #7
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3307      	adds	r3, #7
 8002e64:	430a      	orrs	r2, r1
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_left_shift_u16(src_p->analog5, 0u, 0xffu);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	891b      	ldrh	r3, [r3, #8]
 8002e6e:	22ff      	movs	r2, #255	@ 0xff
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff08 	bl	8002c88 <pack_left_shift_u16>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3308      	adds	r3, #8
 8002e86:	430a      	orrs	r2, r1
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u16(src_p->analog5, 8u, 0xffu);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	891b      	ldrh	r3, [r3, #8]
 8002e90:	22ff      	movs	r2, #255	@ 0xff
 8002e92:	2108      	movs	r1, #8
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff24 	bl	8002ce2 <pack_right_shift_u16>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3309      	adds	r3, #9
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3309      	adds	r3, #9
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_left_shift_u16(src_p->analog6, 0u, 0xffu);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	895b      	ldrh	r3, [r3, #10]
 8002eb2:	22ff      	movs	r2, #255	@ 0xff
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fee6 	bl	8002c88 <pack_left_shift_u16>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	330a      	adds	r3, #10
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	330a      	adds	r3, #10
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u16(src_p->analog6, 8u, 0xffu);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	895b      	ldrh	r3, [r3, #10]
 8002ed4:	22ff      	movs	r2, #255	@ 0xff
 8002ed6:	2108      	movs	r1, #8
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff02 	bl	8002ce2 <pack_right_shift_u16>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	330b      	adds	r3, #11
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	330b      	adds	r3, #11
 8002eec:	430a      	orrs	r2, r1
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u16(src_p->analog7, 0u, 0xffu);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	899b      	ldrh	r3, [r3, #12]
 8002ef6:	22ff      	movs	r2, #255	@ 0xff
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fec4 	bl	8002c88 <pack_left_shift_u16>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4619      	mov	r1, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	330c      	adds	r3, #12
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u16(src_p->analog7, 8u, 0xffu);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	899b      	ldrh	r3, [r3, #12]
 8002f18:	22ff      	movs	r2, #255	@ 0xff
 8002f1a:	2108      	movs	r1, #8
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fee0 	bl	8002ce2 <pack_right_shift_u16>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4619      	mov	r1, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	330d      	adds	r3, #13
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	330d      	adds	r3, #13
 8002f30:	430a      	orrs	r2, r1
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_left_shift_u16(src_p->analog8, 0u, 0xffu);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	89db      	ldrh	r3, [r3, #14]
 8002f3a:	22ff      	movs	r2, #255	@ 0xff
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fea2 	bl	8002c88 <pack_left_shift_u16>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4619      	mov	r1, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	330e      	adds	r3, #14
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	330e      	adds	r3, #14
 8002f52:	430a      	orrs	r2, r1
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u16(src_p->analog8, 8u, 0xffu);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	89db      	ldrh	r3, [r3, #14]
 8002f5c:	22ff      	movs	r2, #255	@ 0xff
 8002f5e:	2108      	movs	r1, #8
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff febe 	bl	8002ce2 <pack_right_shift_u16>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4619      	mov	r1, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	330f      	adds	r3, #15
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	330f      	adds	r3, #15
 8002f74:	430a      	orrs	r2, r1
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

    return (16);
 8002f7a:	2310      	movs	r3, #16
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <ucr_01_front_aero_pack>:

int ucr_01_front_aero_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_aero_t *src_p,
    size_t size)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	@ 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
    uint16_t temperature3;
    uint32_t pressure1;
    uint32_t pressure2;
    uint32_t pressure3;

    if (size < 16u) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	d802      	bhi.n	8002f9c <ucr_01_front_aero_pack+0x18>
        return (-EINVAL);
 8002f96:	f06f 0315 	mvn.w	r3, #21
 8002f9a:	e0ff      	b.n	800319c <ucr_01_front_aero_pack+0x218>
    }

    memset(&dst_p[0], 0, 16);
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f00b facd 	bl	800e540 <memset>

    pressure1 = (uint32_t)src_p->pressure1;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
    dst_p[0] |= pack_left_shift_u32(pressure1, 0u, 0xffu);
 8002fac:	22ff      	movs	r2, #255	@ 0xff
 8002fae:	2100      	movs	r1, #0
 8002fb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fb2:	f7ff fe80 	bl	8002cb6 <pack_left_shift_u32>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(pressure1, 8u, 0xffu);
 8002fc6:	22ff      	movs	r2, #255	@ 0xff
 8002fc8:	2108      	movs	r1, #8
 8002fca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fcc:	f7ff fea0 	bl	8002d10 <pack_right_shift_u32>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(pressure1, 16u, 0xffu);
 8002fe4:	22ff      	movs	r2, #255	@ 0xff
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fea:	f7ff fe91 	bl	8002d10 <pack_right_shift_u32>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
    pressure2 = (uint32_t)src_p->pressure2;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	623b      	str	r3, [r7, #32]
    dst_p[3] |= pack_left_shift_u32(pressure2, 0u, 0xffu);
 8003008:	22ff      	movs	r2, #255	@ 0xff
 800300a:	2100      	movs	r1, #0
 800300c:	6a38      	ldr	r0, [r7, #32]
 800300e:	f7ff fe52 	bl	8002cb6 <pack_left_shift_u32>
 8003012:	4603      	mov	r3, r0
 8003014:	4619      	mov	r1, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3303      	adds	r3, #3
 800301a:	781a      	ldrb	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3303      	adds	r3, #3
 8003020:	430a      	orrs	r2, r1
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u32(pressure2, 8u, 0xffu);
 8003026:	22ff      	movs	r2, #255	@ 0xff
 8003028:	2108      	movs	r1, #8
 800302a:	6a38      	ldr	r0, [r7, #32]
 800302c:	f7ff fe70 	bl	8002d10 <pack_right_shift_u32>
 8003030:	4603      	mov	r3, r0
 8003032:	4619      	mov	r1, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3304      	adds	r3, #4
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3304      	adds	r3, #4
 800303e:	430a      	orrs	r2, r1
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(pressure2, 16u, 0xffu);
 8003044:	22ff      	movs	r2, #255	@ 0xff
 8003046:	2110      	movs	r1, #16
 8003048:	6a38      	ldr	r0, [r7, #32]
 800304a:	f7ff fe61 	bl	8002d10 <pack_right_shift_u32>
 800304e:	4603      	mov	r3, r0
 8003050:	4619      	mov	r1, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3305      	adds	r3, #5
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3305      	adds	r3, #5
 800305c:	430a      	orrs	r2, r1
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]
    pressure3 = (uint32_t)src_p->pressure3;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	61fb      	str	r3, [r7, #28]
    dst_p[6] |= pack_left_shift_u32(pressure3, 0u, 0xffu);
 8003068:	22ff      	movs	r2, #255	@ 0xff
 800306a:	2100      	movs	r1, #0
 800306c:	69f8      	ldr	r0, [r7, #28]
 800306e:	f7ff fe22 	bl	8002cb6 <pack_left_shift_u32>
 8003072:	4603      	mov	r3, r0
 8003074:	4619      	mov	r1, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3306      	adds	r3, #6
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3306      	adds	r3, #6
 8003080:	430a      	orrs	r2, r1
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(pressure3, 8u, 0xffu);
 8003086:	22ff      	movs	r2, #255	@ 0xff
 8003088:	2108      	movs	r1, #8
 800308a:	69f8      	ldr	r0, [r7, #28]
 800308c:	f7ff fe40 	bl	8002d10 <pack_right_shift_u32>
 8003090:	4603      	mov	r3, r0
 8003092:	4619      	mov	r1, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3307      	adds	r3, #7
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3307      	adds	r3, #7
 800309e:	430a      	orrs	r2, r1
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_right_shift_u32(pressure3, 16u, 0xffu);
 80030a4:	22ff      	movs	r2, #255	@ 0xff
 80030a6:	2110      	movs	r1, #16
 80030a8:	69f8      	ldr	r0, [r7, #28]
 80030aa:	f7ff fe31 	bl	8002d10 <pack_right_shift_u32>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4619      	mov	r1, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3308      	adds	r3, #8
 80030b6:	781a      	ldrb	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3308      	adds	r3, #8
 80030bc:	430a      	orrs	r2, r1
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]
    temperature1 = (uint16_t)src_p->temperature1;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80030c8:	837b      	strh	r3, [r7, #26]
    dst_p[9] |= pack_left_shift_u16(temperature1, 0u, 0xffu);
 80030ca:	8b7b      	ldrh	r3, [r7, #26]
 80030cc:	22ff      	movs	r2, #255	@ 0xff
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fdd9 	bl	8002c88 <pack_left_shift_u16>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4619      	mov	r1, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3309      	adds	r3, #9
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3309      	adds	r3, #9
 80030e4:	430a      	orrs	r2, r1
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u16(temperature1, 8u, 0xffu);
 80030ea:	8b7b      	ldrh	r3, [r7, #26]
 80030ec:	22ff      	movs	r2, #255	@ 0xff
 80030ee:	2108      	movs	r1, #8
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fdf6 	bl	8002ce2 <pack_right_shift_u16>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4619      	mov	r1, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	330a      	adds	r3, #10
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	330a      	adds	r3, #10
 8003104:	430a      	orrs	r2, r1
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]
    temperature2 = (uint16_t)src_p->temperature2;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003110:	833b      	strh	r3, [r7, #24]
    dst_p[11] |= pack_left_shift_u16(temperature2, 0u, 0xffu);
 8003112:	8b3b      	ldrh	r3, [r7, #24]
 8003114:	22ff      	movs	r2, #255	@ 0xff
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fdb5 	bl	8002c88 <pack_left_shift_u16>
 800311e:	4603      	mov	r3, r0
 8003120:	4619      	mov	r1, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	330b      	adds	r3, #11
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	330b      	adds	r3, #11
 800312c:	430a      	orrs	r2, r1
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_right_shift_u16(temperature2, 8u, 0xffu);
 8003132:	8b3b      	ldrh	r3, [r7, #24]
 8003134:	22ff      	movs	r2, #255	@ 0xff
 8003136:	2108      	movs	r1, #8
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fdd2 	bl	8002ce2 <pack_right_shift_u16>
 800313e:	4603      	mov	r3, r0
 8003140:	4619      	mov	r1, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	330c      	adds	r3, #12
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	330c      	adds	r3, #12
 800314c:	430a      	orrs	r2, r1
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]
    temperature3 = (uint16_t)src_p->temperature3;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003158:	82fb      	strh	r3, [r7, #22]
    dst_p[13] |= pack_left_shift_u16(temperature3, 0u, 0xffu);
 800315a:	8afb      	ldrh	r3, [r7, #22]
 800315c:	22ff      	movs	r2, #255	@ 0xff
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fd91 	bl	8002c88 <pack_left_shift_u16>
 8003166:	4603      	mov	r3, r0
 8003168:	4619      	mov	r1, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	330d      	adds	r3, #13
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	330d      	adds	r3, #13
 8003174:	430a      	orrs	r2, r1
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u16(temperature3, 8u, 0xffu);
 800317a:	8afb      	ldrh	r3, [r7, #22]
 800317c:	22ff      	movs	r2, #255	@ 0xff
 800317e:	2108      	movs	r1, #8
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fdae 	bl	8002ce2 <pack_right_shift_u16>
 8003186:	4603      	mov	r3, r0
 8003188:	4619      	mov	r1, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	330e      	adds	r3, #14
 800318e:	781a      	ldrb	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	330e      	adds	r3, #14
 8003194:	430a      	orrs	r2, r1
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    return (16);
 800319a:	2310      	movs	r3, #16
}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	@ 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <ucr_01_front_frequency_pack>:

int ucr_01_front_frequency_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_frequency_t *src_p,
    size_t size)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
    uint32_t freq1;
    uint32_t freq2;
    uint32_t freq3;
    uint32_t freq4;

    if (size < 16u) {
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d802      	bhi.n	80031bc <ucr_01_front_frequency_pack+0x18>
        return (-EINVAL);
 80031b6:	f06f 0315 	mvn.w	r3, #21
 80031ba:	e112      	b.n	80033e2 <ucr_01_front_frequency_pack+0x23e>
    }

    memset(&dst_p[0], 0, 16);
 80031bc:	2210      	movs	r2, #16
 80031be:	2100      	movs	r1, #0
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f00b f9bd 	bl	800e540 <memset>

    memcpy(&freq1, &src_p->freq1, sizeof(freq1));
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	61fb      	str	r3, [r7, #28]
    dst_p[0] |= pack_left_shift_u32(freq1, 0u, 0xffu);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	22ff      	movs	r2, #255	@ 0xff
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fd6f 	bl	8002cb6 <pack_left_shift_u32>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(freq1, 8u, 0xffu);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	22ff      	movs	r2, #255	@ 0xff
 80031ec:	2108      	movs	r1, #8
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fd8e 	bl	8002d10 <pack_right_shift_u32>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4619      	mov	r1, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3301      	adds	r3, #1
 8003202:	430a      	orrs	r2, r1
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(freq1, 16u, 0xffu);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	22ff      	movs	r2, #255	@ 0xff
 800320c:	2110      	movs	r1, #16
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fd7e 	bl	8002d10 <pack_right_shift_u32>
 8003214:	4603      	mov	r3, r0
 8003216:	4619      	mov	r1, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3302      	adds	r3, #2
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3302      	adds	r3, #2
 8003222:	430a      	orrs	r2, r1
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u32(freq1, 24u, 0xffu);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	22ff      	movs	r2, #255	@ 0xff
 800322c:	2118      	movs	r1, #24
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fd6e 	bl	8002d10 <pack_right_shift_u32>
 8003234:	4603      	mov	r3, r0
 8003236:	4619      	mov	r1, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3303      	adds	r3, #3
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3303      	adds	r3, #3
 8003242:	430a      	orrs	r2, r1
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]
    memcpy(&freq2, &src_p->freq2, sizeof(freq2));
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3304      	adds	r3, #4
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	61bb      	str	r3, [r7, #24]
    dst_p[4] |= pack_left_shift_u32(freq2, 0u, 0xffu);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	22ff      	movs	r2, #255	@ 0xff
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fd2d 	bl	8002cb6 <pack_left_shift_u32>
 800325c:	4603      	mov	r3, r0
 800325e:	4619      	mov	r1, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3304      	adds	r3, #4
 8003264:	781a      	ldrb	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3304      	adds	r3, #4
 800326a:	430a      	orrs	r2, r1
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(freq2, 8u, 0xffu);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	22ff      	movs	r2, #255	@ 0xff
 8003274:	2108      	movs	r1, #8
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fd4a 	bl	8002d10 <pack_right_shift_u32>
 800327c:	4603      	mov	r3, r0
 800327e:	4619      	mov	r1, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3305      	adds	r3, #5
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3305      	adds	r3, #5
 800328a:	430a      	orrs	r2, r1
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u32(freq2, 16u, 0xffu);
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	22ff      	movs	r2, #255	@ 0xff
 8003294:	2110      	movs	r1, #16
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fd3a 	bl	8002d10 <pack_right_shift_u32>
 800329c:	4603      	mov	r3, r0
 800329e:	4619      	mov	r1, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3306      	adds	r3, #6
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3306      	adds	r3, #6
 80032aa:	430a      	orrs	r2, r1
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(freq2, 24u, 0xffu);
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	22ff      	movs	r2, #255	@ 0xff
 80032b4:	2118      	movs	r1, #24
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fd2a 	bl	8002d10 <pack_right_shift_u32>
 80032bc:	4603      	mov	r3, r0
 80032be:	4619      	mov	r1, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3307      	adds	r3, #7
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3307      	adds	r3, #7
 80032ca:	430a      	orrs	r2, r1
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]
    memcpy(&freq3, &src_p->freq3, sizeof(freq3));
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	3308      	adds	r3, #8
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	617b      	str	r3, [r7, #20]
    dst_p[8] |= pack_left_shift_u32(freq3, 0u, 0xffu);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	22ff      	movs	r2, #255	@ 0xff
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fce9 	bl	8002cb6 <pack_left_shift_u32>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4619      	mov	r1, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3308      	adds	r3, #8
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3308      	adds	r3, #8
 80032f2:	430a      	orrs	r2, r1
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u32(freq3, 8u, 0xffu);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	22ff      	movs	r2, #255	@ 0xff
 80032fc:	2108      	movs	r1, #8
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fd06 	bl	8002d10 <pack_right_shift_u32>
 8003304:	4603      	mov	r3, r0
 8003306:	4619      	mov	r1, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3309      	adds	r3, #9
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3309      	adds	r3, #9
 8003312:	430a      	orrs	r2, r1
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(freq3, 16u, 0xffu);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	22ff      	movs	r2, #255	@ 0xff
 800331c:	2110      	movs	r1, #16
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fcf6 	bl	8002d10 <pack_right_shift_u32>
 8003324:	4603      	mov	r3, r0
 8003326:	4619      	mov	r1, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	330a      	adds	r3, #10
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	330a      	adds	r3, #10
 8003332:	430a      	orrs	r2, r1
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(freq3, 24u, 0xffu);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	22ff      	movs	r2, #255	@ 0xff
 800333c:	2118      	movs	r1, #24
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fce6 	bl	8002d10 <pack_right_shift_u32>
 8003344:	4603      	mov	r3, r0
 8003346:	4619      	mov	r1, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	330b      	adds	r3, #11
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	330b      	adds	r3, #11
 8003352:	430a      	orrs	r2, r1
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]
    memcpy(&freq4, &src_p->freq4, sizeof(freq4));
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	330c      	adds	r3, #12
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	613b      	str	r3, [r7, #16]
    dst_p[12] |= pack_left_shift_u32(freq4, 0u, 0xffu);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	22ff      	movs	r2, #255	@ 0xff
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fca5 	bl	8002cb6 <pack_left_shift_u32>
 800336c:	4603      	mov	r3, r0
 800336e:	4619      	mov	r1, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	330c      	adds	r3, #12
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	330c      	adds	r3, #12
 800337a:	430a      	orrs	r2, r1
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(freq4, 8u, 0xffu);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	22ff      	movs	r2, #255	@ 0xff
 8003384:	2108      	movs	r1, #8
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fcc2 	bl	8002d10 <pack_right_shift_u32>
 800338c:	4603      	mov	r3, r0
 800338e:	4619      	mov	r1, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	330d      	adds	r3, #13
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	330d      	adds	r3, #13
 800339a:	430a      	orrs	r2, r1
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(freq4, 16u, 0xffu);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	22ff      	movs	r2, #255	@ 0xff
 80033a4:	2110      	movs	r1, #16
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fcb2 	bl	8002d10 <pack_right_shift_u32>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4619      	mov	r1, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	330e      	adds	r3, #14
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	330e      	adds	r3, #14
 80033ba:	430a      	orrs	r2, r1
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u32(freq4, 24u, 0xffu);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	22ff      	movs	r2, #255	@ 0xff
 80033c4:	2118      	movs	r1, #24
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fca2 	bl	8002d10 <pack_right_shift_u32>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4619      	mov	r1, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	330f      	adds	r3, #15
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	330f      	adds	r3, #15
 80033da:	430a      	orrs	r2, r1
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]

    return (16);
 80033e0:	2310      	movs	r3, #16
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <getCRC>:
 *      bool error = (bool) getCRC(data, 4, CRC_INITIAL_SEED);
 *
 * @endcode
 */
CRCWORD getCRC(const uint8_t dataBytes[], uint8_t numberBytes, CRCWORD initialValue)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
 80033f8:	4613      	mov	r3, r2
 80033fa:	70bb      	strb	r3, [r7, #2]
#ifdef CRC_CALCULATION
    return calculateCRC(dataBytes, numberBytes, initialValue);
#endif

#ifdef CRC_LOOKUP
    if (!initialized) { initTable(); }
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <getCRC+0x38>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	f083 0301 	eor.w	r3, r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <getCRC+0x22>
 800340a:	f000 f80d 	bl	8003428 <initTable>
    return lookupCRC(dataBytes, numberBytes, initialValue);
 800340e:	78ba      	ldrb	r2, [r7, #2]
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f82b 	bl	8003470 <lookupCRC>
 800341a:	4603      	mov	r3, r0
#endif
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20010ab8 	.word	0x20010ab8

08003428 <initTable>:
 *
 * @return      None
 *
 */
static void initTable(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
    uint8_t value;
    unsigned int i;
    for (i = 0; i < 256; ++i)
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	e012      	b.n	800345a <initTable+0x32>
    {
        value = (uint8_t) i;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	70fb      	strb	r3, [r7, #3]
        crcLookupTable[i] = calculateCRC(&value, 1, 0x00);
 800343a:	1cfb      	adds	r3, r7, #3
 800343c:	2200      	movs	r2, #0
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f83d 	bl	80034c0 <calculateCRC>
 8003446:	4603      	mov	r3, r0
 8003448:	4619      	mov	r1, r3
 800344a:	4a08      	ldr	r2, [pc, #32]	@ (800346c <initTable+0x44>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	460a      	mov	r2, r1
 8003452:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 256; ++i)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2bff      	cmp	r3, #255	@ 0xff
 800345e:	d9e9      	bls.n	8003434 <initTable+0xc>
    }
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20010abc 	.word	0x20010abc

08003470 <lookupCRC>:
 *
 * @return     CRCWORD       of the calculation
 *
 */
static CRCWORD lookupCRC(const uint8_t dataBytes[], uint8_t numberBytes, CRCWORD initialValue)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	70fb      	strb	r3, [r7, #3]
 800347c:	4613      	mov	r3, r2
 800347e:	70bb      	strb	r3, [r7, #2]
    CRCWORD crc = initialValue;
 8003480:	78bb      	ldrb	r3, [r7, #2]
 8003482:	73fb      	strb	r3, [r7, #15]
    unsigned int i;
    for (i = 0; i < numberBytes; ++i)
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	e00d      	b.n	80034a6 <lookupCRC+0x36>
    {

        crc = crcLookupTable[crc ^ dataBytes[i]];
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4413      	add	r3, r2
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	4053      	eors	r3, r2
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	4b08      	ldr	r3, [pc, #32]	@ (80034bc <lookupCRC+0x4c>)
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < numberBytes; ++i)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3301      	adds	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3ed      	bcc.n	800348a <lookupCRC+0x1a>

    }
    return crc;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	20010abc 	.word	0x20010abc

080034c0 <calculateCRC>:
 *
 * @return     CRCWORD       of the calculation
 *
 */
static CRCWORD calculateCRC(const uint8_t dataBytes[], uint8_t numberBytes, CRCWORD initialValue)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	70fb      	strb	r3, [r7, #3]
 80034cc:	4613      	mov	r3, r2
 80034ce:	70bb      	strb	r3, [r7, #2]
    int         bitIndex, byteIndex;
    bool        dataMSb;                        /* Most significant bit of data byte */
    bool        crcMSb;                         /* Most significant bit of crc byte  */

    // Initial value of crc register
    CRCWORD crc = initialValue;
 80034d0:	78bb      	ldrb	r3, [r7, #2]
 80034d2:	73fb      	strb	r3, [r7, #15]

    // Loop through all bytes in the dataBytes[] array
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	e027      	b.n	800352a <calculateCRC+0x6a>
    {
        // Point to most significant bit
        bitIndex = 0x80u;
 80034da:	2380      	movs	r3, #128	@ 0x80
 80034dc:	617b      	str	r3, [r7, #20]

        // Loop through all bits in the current byte
        while (bitIndex > 0)
 80034de:	e01e      	b.n	800351e <calculateCRC+0x5e>
        {
            // Check MSB's of data and crc
            dataMSb = (bool) (dataBytes[byteIndex] & bitIndex);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	73bb      	strb	r3, [r7, #14]


            crcMSb  = (bool) (crc & 0x80u);
 80034f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	09db      	lsrs	r3, r3, #7
 8003500:	737b      	strb	r3, [r7, #13]


            // Update crc register
            crc <<= 1;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
            if (dataMSb ^ crcMSb) { crc ^= CRC_POLYNOMIAL; }
 8003508:	7bba      	ldrb	r2, [r7, #14]
 800350a:	7b7b      	ldrb	r3, [r7, #13]
 800350c:	429a      	cmp	r2, r3
 800350e:	d003      	beq.n	8003518 <calculateCRC+0x58>
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	f083 0307 	eor.w	r3, r3, #7
 8003516:	73fb      	strb	r3, [r7, #15]

            // Shift MSb pointer to the next data bit
            bitIndex >>= 1;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	105b      	asrs	r3, r3, #1
 800351c:	617b      	str	r3, [r7, #20]
        while (bitIndex > 0)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	dcdd      	bgt.n	80034e0 <calculateCRC+0x20>
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	3301      	adds	r3, #1
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	429a      	cmp	r2, r3
 8003530:	dbd3      	blt.n	80034da <calculateCRC+0x1a>
        }
    }

    return crc;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800354a:	2003      	movs	r0, #3
 800354c:	f001 ff39 	bl	80053c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003550:	200f      	movs	r0, #15
 8003552:	f7fe f80b 	bl	800156c <HAL_InitTick>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	71fb      	strb	r3, [r7, #7]
 8003560:	e001      	b.n	8003566 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003562:	f7fd ffdb 	bl	800151c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003566:	79fb      	ldrb	r3, [r7, #7]

}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_IncTick+0x1c>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <HAL_IncTick+0x20>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4413      	add	r3, r2
 800357e:	4a03      	ldr	r2, [pc, #12]	@ (800358c <HAL_IncTick+0x1c>)
 8003580:	6013      	str	r3, [r2, #0]
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	20010bbc 	.word	0x20010bbc
 8003590:	20000050 	.word	0x20000050

08003594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return uwTick;
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <HAL_GetTick+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20010bbc 	.word	0x20010bbc

080035ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff ffee 	bl	8003594 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d004      	beq.n	80035d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80035c6:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <HAL_Delay+0x40>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035d0:	bf00      	nop
 80035d2:	f7ff ffdf 	bl	8003594 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d8f7      	bhi.n	80035d2 <HAL_Delay+0x26>
  {
  }
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000050 	.word	0x20000050

080035f0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 0202 	bic.w	r2, r3, #2
 8003600:	4904      	ldr	r1, [pc, #16]	@ (8003614 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40010030 	.word	0x40010030

08003618 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a04      	ldr	r2, [pc, #16]	@ (8003634 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	6013      	str	r3, [r2, #0]
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40010030 	.word	0x40010030

08003638 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3360      	adds	r3, #96	@ 0x60
 80036b2:	461a      	mov	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <LL_ADC_SetOffset+0x44>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	03fff000 	.word	0x03fff000

080036e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3360      	adds	r3, #96	@ 0x60
 80036f6:	461a      	mov	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3360      	adds	r3, #96	@ 0x60
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	431a      	orrs	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800374a:	b480      	push	{r7}
 800374c:	b087      	sub	sp, #28
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3360      	adds	r3, #96	@ 0x60
 800375a:	461a      	mov	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	431a      	orrs	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3360      	adds	r3, #96	@ 0x60
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	615a      	str	r2, [r3, #20]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003802:	b480      	push	{r7}
 8003804:	b087      	sub	sp, #28
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3330      	adds	r3, #48	@ 0x30
 8003812:	461a      	mov	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	4413      	add	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	211f      	movs	r1, #31
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	401a      	ands	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	f003 011f 	and.w	r1, r3, #31
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	431a      	orrs	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3314      	adds	r3, #20
 8003890:	461a      	mov	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	0e5b      	lsrs	r3, r3, #25
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	4413      	add	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	0d1b      	lsrs	r3, r3, #20
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2107      	movs	r1, #7
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	401a      	ands	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	0d1b      	lsrs	r3, r3, #20
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	431a      	orrs	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f0:	43db      	mvns	r3, r3
 80038f2:	401a      	ands	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0318 	and.w	r3, r3, #24
 80038fa:	4908      	ldr	r1, [pc, #32]	@ (800391c <LL_ADC_SetChannelSingleDiff+0x44>)
 80038fc:	40d9      	lsrs	r1, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	400b      	ands	r3, r1
 8003902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003906:	431a      	orrs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	0007ffff 	.word	0x0007ffff

08003920 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 031f 	and.w	r3, r3, #31
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003968:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6093      	str	r3, [r2, #8]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800398c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003990:	d101      	bne.n	8003996 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80039b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039e0:	d101      	bne.n	80039e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a08:	f043 0201 	orr.w	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <LL_ADC_IsEnabled+0x18>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <LL_ADC_IsEnabled+0x1a>
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a52:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a56:	f043 0204 	orr.w	r2, r3, #4
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d101      	bne.n	8003a82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d101      	bne.n	8003aa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b089      	sub	sp, #36	@ 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e1a9      	b.n	8003e26 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7fc ffaf 	bl	8000a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff3f 	bl	800397c <LL_ADC_IsDeepPowerDownEnabled>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff25 	bl	8003958 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff5a 	bl	80039cc <LL_ADC_IsInternalRegulatorEnabled>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d115      	bne.n	8003b4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff3e 	bl	80039a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b28:	4b9c      	ldr	r3, [pc, #624]	@ (8003d9c <HAL_ADC_Init+0x2e4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	4a9c      	ldr	r2, [pc, #624]	@ (8003da0 <HAL_ADC_Init+0x2e8>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	3301      	adds	r3, #1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b3c:	e002      	b.n	8003b44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f9      	bne.n	8003b3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ff3c 	bl	80039cc <LL_ADC_IsInternalRegulatorEnabled>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	f043 0210 	orr.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff75 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 8003b80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 8142 	bne.w	8003e14 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 813e 	bne.w	8003e14 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ba0:	f043 0202 	orr.w	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff35 	bl	8003a1c <LL_ADC_IsEnabled>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d141      	bne.n	8003c3c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bc0:	d004      	beq.n	8003bcc <HAL_ADC_Init+0x114>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a77      	ldr	r2, [pc, #476]	@ (8003da4 <HAL_ADC_Init+0x2ec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10f      	bne.n	8003bec <HAL_ADC_Init+0x134>
 8003bcc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bd0:	f7ff ff24 	bl	8003a1c <LL_ADC_IsEnabled>
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	4873      	ldr	r0, [pc, #460]	@ (8003da4 <HAL_ADC_Init+0x2ec>)
 8003bd8:	f7ff ff20 	bl	8003a1c <LL_ADC_IsEnabled>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4323      	orrs	r3, r4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e012      	b.n	8003c12 <HAL_ADC_Init+0x15a>
 8003bec:	486e      	ldr	r0, [pc, #440]	@ (8003da8 <HAL_ADC_Init+0x2f0>)
 8003bee:	f7ff ff15 	bl	8003a1c <LL_ADC_IsEnabled>
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	486d      	ldr	r0, [pc, #436]	@ (8003dac <HAL_ADC_Init+0x2f4>)
 8003bf6:	f7ff ff11 	bl	8003a1c <LL_ADC_IsEnabled>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	431c      	orrs	r4, r3
 8003bfe:	486c      	ldr	r0, [pc, #432]	@ (8003db0 <HAL_ADC_Init+0x2f8>)
 8003c00:	f7ff ff0c 	bl	8003a1c <LL_ADC_IsEnabled>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4323      	orrs	r3, r4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d012      	beq.n	8003c3c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c1e:	d004      	beq.n	8003c2a <HAL_ADC_Init+0x172>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a5f      	ldr	r2, [pc, #380]	@ (8003da4 <HAL_ADC_Init+0x2ec>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_Init+0x176>
 8003c2a:	4a62      	ldr	r2, [pc, #392]	@ (8003db4 <HAL_ADC_Init+0x2fc>)
 8003c2c:	e000      	b.n	8003c30 <HAL_ADC_Init+0x178>
 8003c2e:	4a62      	ldr	r2, [pc, #392]	@ (8003db8 <HAL_ADC_Init+0x300>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f7ff fcfe 	bl	8003638 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	7f5b      	ldrb	r3, [r3, #29]
 8003c40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003c4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003c52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d106      	bne.n	8003c78 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	045b      	lsls	r3, r3, #17
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	4b48      	ldr	r3, [pc, #288]	@ (8003dbc <HAL_ADC_Init+0x304>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	69b9      	ldr	r1, [r7, #24]
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fee4 	bl	8003a90 <LL_ADC_INJ_IsConversionOngoing>
 8003cc8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d17f      	bne.n	8003dd0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d17c      	bne.n	8003dd0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003cda:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ce2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cf2:	f023 0302 	bic.w	r3, r3, #2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	69b9      	ldr	r1, [r7, #24]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d20:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6911      	ldr	r1, [r2, #16]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003d36:	e013      	b.n	8003d60 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d5c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d12a      	bne.n	8003dc0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003d74:	f023 0304 	bic.w	r3, r3, #4
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d80:	4311      	orrs	r1, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003d86:	4311      	orrs	r1, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	611a      	str	r2, [r3, #16]
 8003d9a:	e019      	b.n	8003dd0 <HAL_ADC_Init+0x318>
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	053e2d63 	.word	0x053e2d63
 8003da4:	50000100 	.word	0x50000100
 8003da8:	50000400 	.word	0x50000400
 8003dac:	50000500 	.word	0x50000500
 8003db0:	50000600 	.word	0x50000600
 8003db4:	50000300 	.word	0x50000300
 8003db8:	50000700 	.word	0x50000700
 8003dbc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d10c      	bne.n	8003df2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	f023 010f 	bic.w	r1, r3, #15
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	1e5a      	subs	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30
 8003df0:	e007      	b.n	8003e02 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 020f 	bic.w	r2, r2, #15
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	f043 0201 	orr.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e12:	e007      	b.n	8003e24 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e18:	f043 0210 	orr.w	r2, r3, #16
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	@ 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd90      	pop	{r4, r7, pc}
 8003e2e:	bf00      	nop

08003e30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e44:	d004      	beq.n	8003e50 <HAL_ADC_Start_DMA+0x20>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb4 <HAL_ADC_Start_DMA+0x184>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_Start_DMA+0x24>
 8003e50:	4b59      	ldr	r3, [pc, #356]	@ (8003fb8 <HAL_ADC_Start_DMA+0x188>)
 8003e52:	e000      	b.n	8003e56 <HAL_ADC_Start_DMA+0x26>
 8003e54:	4b59      	ldr	r3, [pc, #356]	@ (8003fbc <HAL_ADC_Start_DMA+0x18c>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fd62 	bl	8003920 <LL_ADC_GetMultimode>
 8003e5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fe01 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 809b 	bne.w	8003fa6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_Start_DMA+0x4e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e096      	b.n	8003fac <HAL_ADC_Start_DMA+0x17c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc0 <HAL_ADC_Start_DMA+0x190>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d008      	beq.n	8003ea2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d002      	beq.n	8003ea2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d17a      	bne.n	8003f98 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 ff56 	bl	8004d54 <ADC_Enable>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d16d      	bne.n	8003f8e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a3a      	ldr	r2, [pc, #232]	@ (8003fb4 <HAL_ADC_Start_DMA+0x184>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_ADC_Start_DMA+0xb4>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc4 <HAL_ADC_Start_DMA+0x194>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d002      	beq.n	8003ee0 <HAL_ADC_Start_DMA+0xb0>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	e003      	b.n	8003ee8 <HAL_ADC_Start_DMA+0xb8>
 8003ee0:	4b39      	ldr	r3, [pc, #228]	@ (8003fc8 <HAL_ADC_Start_DMA+0x198>)
 8003ee2:	e001      	b.n	8003ee8 <HAL_ADC_Start_DMA+0xb8>
 8003ee4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d002      	beq.n	8003ef6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d105      	bne.n	8003f02 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d006      	beq.n	8003f1c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f12:	f023 0206 	bic.w	r2, r3, #6
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f1a:	e002      	b.n	8003f22 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	4a29      	ldr	r2, [pc, #164]	@ (8003fcc <HAL_ADC_Start_DMA+0x19c>)
 8003f28:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	4a28      	ldr	r2, [pc, #160]	@ (8003fd0 <HAL_ADC_Start_DMA+0x1a0>)
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f36:	4a27      	ldr	r2, [pc, #156]	@ (8003fd4 <HAL_ADC_Start_DMA+0x1a4>)
 8003f38:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	221c      	movs	r2, #28
 8003f40:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0210 	orr.w	r2, r2, #16
 8003f58:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3340      	adds	r3, #64	@ 0x40
 8003f74:	4619      	mov	r1, r3
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f001 fbef 	bl	800575c <HAL_DMA_Start_IT>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fd5b 	bl	8003a42 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003f8c:	e00d      	b.n	8003faa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003f96:	e008      	b.n	8003faa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003fa4:	e001      	b.n	8003faa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	50000100 	.word	0x50000100
 8003fb8:	50000300 	.word	0x50000300
 8003fbc:	50000700 	.word	0x50000700
 8003fc0:	50000600 	.word	0x50000600
 8003fc4:	50000500 	.word	0x50000500
 8003fc8:	50000400 	.word	0x50000400
 8003fcc:	08004e81 	.word	0x08004e81
 8003fd0:	08004f59 	.word	0x08004f59
 8003fd4:	08004f75 	.word	0x08004f75

08003fd8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	@ 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ffc:	d004      	beq.n	8004008 <HAL_ADC_IRQHandler+0x30>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a8e      	ldr	r2, [pc, #568]	@ (800423c <HAL_ADC_IRQHandler+0x264>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_ADC_IRQHandler+0x34>
 8004008:	4b8d      	ldr	r3, [pc, #564]	@ (8004240 <HAL_ADC_IRQHandler+0x268>)
 800400a:	e000      	b.n	800400e <HAL_ADC_IRQHandler+0x36>
 800400c:	4b8d      	ldr	r3, [pc, #564]	@ (8004244 <HAL_ADC_IRQHandler+0x26c>)
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fc86 	bl	8003920 <LL_ADC_GetMultimode>
 8004014:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d017      	beq.n	8004050 <HAL_ADC_IRQHandler+0x78>
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d012      	beq.n	8004050 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fffe 	bl	8005044 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2202      	movs	r2, #2
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <HAL_ADC_IRQHandler+0x8c>
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10b      	bne.n	800407c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8094 	beq.w	8004198 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 808e 	beq.w	8004198 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fb9f 	bl	80037dc <LL_ADC_REG_IsTriggerSourceSWStart>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d072      	beq.n	800418a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a64      	ldr	r2, [pc, #400]	@ (800423c <HAL_ADC_IRQHandler+0x264>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_ADC_IRQHandler+0xea>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a65      	ldr	r2, [pc, #404]	@ (8004248 <HAL_ADC_IRQHandler+0x270>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d002      	beq.n	80040be <HAL_ADC_IRQHandler+0xe6>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	e003      	b.n	80040c6 <HAL_ADC_IRQHandler+0xee>
 80040be:	4b63      	ldr	r3, [pc, #396]	@ (800424c <HAL_ADC_IRQHandler+0x274>)
 80040c0:	e001      	b.n	80040c6 <HAL_ADC_IRQHandler+0xee>
 80040c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d008      	beq.n	80040e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d002      	beq.n	80040e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b09      	cmp	r3, #9
 80040de:	d104      	bne.n	80040ea <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	e014      	b.n	8004114 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a53      	ldr	r2, [pc, #332]	@ (800423c <HAL_ADC_IRQHandler+0x264>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d009      	beq.n	8004108 <HAL_ADC_IRQHandler+0x130>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a53      	ldr	r2, [pc, #332]	@ (8004248 <HAL_ADC_IRQHandler+0x270>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d002      	beq.n	8004104 <HAL_ADC_IRQHandler+0x12c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	e003      	b.n	800410c <HAL_ADC_IRQHandler+0x134>
 8004104:	4b51      	ldr	r3, [pc, #324]	@ (800424c <HAL_ADC_IRQHandler+0x274>)
 8004106:	e001      	b.n	800410c <HAL_ADC_IRQHandler+0x134>
 8004108:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800410c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d135      	bne.n	800418a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b08      	cmp	r3, #8
 800412a:	d12e      	bne.n	800418a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fc9a 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d11a      	bne.n	8004172 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 020c 	bic.w	r2, r2, #12
 800414a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004150:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d112      	bne.n	800418a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	f043 0201 	orr.w	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004170:	e00b      	b.n	800418a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004176:	f043 0210 	orr.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004182:	f043 0201 	orr.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fd fc7a 	bl	8001a84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	220c      	movs	r2, #12
 8004196:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_ADC_IRQHandler+0x1d4>
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80b3 	beq.w	800431e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80ad 	beq.w	800431e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fb3a 	bl	800385a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80041e6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff faf5 	bl	80037dc <LL_ADC_REG_IsTriggerSourceSWStart>
 80041f2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a10      	ldr	r2, [pc, #64]	@ (800423c <HAL_ADC_IRQHandler+0x264>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_ADC_IRQHandler+0x23a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a11      	ldr	r2, [pc, #68]	@ (8004248 <HAL_ADC_IRQHandler+0x270>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d002      	beq.n	800420e <HAL_ADC_IRQHandler+0x236>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	e003      	b.n	8004216 <HAL_ADC_IRQHandler+0x23e>
 800420e:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <HAL_ADC_IRQHandler+0x274>)
 8004210:	e001      	b.n	8004216 <HAL_ADC_IRQHandler+0x23e>
 8004212:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	4293      	cmp	r3, r2
 800421c:	d008      	beq.n	8004230 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b06      	cmp	r3, #6
 8004228:	d002      	beq.n	8004230 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b07      	cmp	r3, #7
 800422e:	d10f      	bne.n	8004250 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	e01f      	b.n	800427a <HAL_ADC_IRQHandler+0x2a2>
 800423a:	bf00      	nop
 800423c:	50000100 	.word	0x50000100
 8004240:	50000300 	.word	0x50000300
 8004244:	50000700 	.word	0x50000700
 8004248:	50000500 	.word	0x50000500
 800424c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a8b      	ldr	r2, [pc, #556]	@ (8004484 <HAL_ADC_IRQHandler+0x4ac>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_ADC_IRQHandler+0x296>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a8a      	ldr	r2, [pc, #552]	@ (8004488 <HAL_ADC_IRQHandler+0x4b0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d002      	beq.n	800426a <HAL_ADC_IRQHandler+0x292>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	e003      	b.n	8004272 <HAL_ADC_IRQHandler+0x29a>
 800426a:	4b88      	ldr	r3, [pc, #544]	@ (800448c <HAL_ADC_IRQHandler+0x4b4>)
 800426c:	e001      	b.n	8004272 <HAL_ADC_IRQHandler+0x29a>
 800426e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004272:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d047      	beq.n	8004310 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_ADC_IRQHandler+0x2c2>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03f      	beq.n	8004310 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004296:	2b00      	cmp	r3, #0
 8004298:	d13a      	bne.n	8004310 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d133      	bne.n	8004310 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d12e      	bne.n	8004310 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fbea 	bl	8003a90 <LL_ADC_INJ_IsConversionOngoing>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d11a      	bne.n	80042f8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042d0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d112      	bne.n	8004310 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ee:	f043 0201 	orr.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042f6:	e00b      	b.n	8004310 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fc:	f043 0210 	orr.w	r2, r3, #16
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004308:	f043 0201 	orr.w	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fe6f 	bl	8004ff4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2260      	movs	r2, #96	@ 0x60
 800431c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004324:	2b00      	cmp	r3, #0
 8004326:	d011      	beq.n	800434c <HAL_ADC_IRQHandler+0x374>
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00c      	beq.n	800434c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004336:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8b4 	bl	80044ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2280      	movs	r2, #128	@ 0x80
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d012      	beq.n	800437c <HAL_ADC_IRQHandler+0x3a4>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00d      	beq.n	800437c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004364:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fe55 	bl	800501c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800437a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004382:	2b00      	cmp	r3, #0
 8004384:	d012      	beq.n	80043ac <HAL_ADC_IRQHandler+0x3d4>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004394:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fe47 	bl	8005030 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d043      	beq.n	800443e <HAL_ADC_IRQHandler+0x466>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d03e      	beq.n	800443e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80043c8:	2301      	movs	r3, #1
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80043cc:	e021      	b.n	8004412 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d015      	beq.n	8004400 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043dc:	d004      	beq.n	80043e8 <HAL_ADC_IRQHandler+0x410>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a28      	ldr	r2, [pc, #160]	@ (8004484 <HAL_ADC_IRQHandler+0x4ac>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_IRQHandler+0x414>
 80043e8:	4b29      	ldr	r3, [pc, #164]	@ (8004490 <HAL_ADC_IRQHandler+0x4b8>)
 80043ea:	e000      	b.n	80043ee <HAL_ADC_IRQHandler+0x416>
 80043ec:	4b29      	ldr	r3, [pc, #164]	@ (8004494 <HAL_ADC_IRQHandler+0x4bc>)
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff faa4 	bl	800393c <LL_ADC_GetMultiDMATransfer>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80043fa:	2301      	movs	r3, #1
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fe:	e008      	b.n	8004412 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800440e:	2301      	movs	r3, #1
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10e      	bne.n	8004436 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004428:	f043 0202 	orr.w	r2, r3, #2
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f845 	bl	80044c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2210      	movs	r2, #16
 800443c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004444:	2b00      	cmp	r3, #0
 8004446:	d018      	beq.n	800447a <HAL_ADC_IRQHandler+0x4a2>
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444e:	2b00      	cmp	r3, #0
 8004450:	d013      	beq.n	800447a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004456:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004462:	f043 0208 	orr.w	r2, r3, #8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004472:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fdc7 	bl	8005008 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800447a:	bf00      	nop
 800447c:	3728      	adds	r7, #40	@ 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	50000100 	.word	0x50000100
 8004488:	50000500 	.word	0x50000500
 800448c:	50000400 	.word	0x50000400
 8004490:	50000300 	.word	0x50000300
 8004494:	50000700 	.word	0x50000700

08004498 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b0b6      	sub	sp, #216	@ 0xd8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d102      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x24>
 80044f2:	2302      	movs	r3, #2
 80044f4:	f000 bc13 	b.w	8004d1e <HAL_ADC_ConfigChannel+0x84a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fab0 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	f040 83f3 	bne.w	8004cf8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6859      	ldr	r1, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f7ff f96f 	bl	8003802 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fa9e 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 800452e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff faaa 	bl	8003a90 <LL_ADC_INJ_IsConversionOngoing>
 800453c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004540:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 81d9 	bne.w	80048fc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800454a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800454e:	2b00      	cmp	r3, #0
 8004550:	f040 81d4 	bne.w	80048fc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800455c:	d10f      	bne.n	800457e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2200      	movs	r2, #0
 8004568:	4619      	mov	r1, r3
 800456a:	f7ff f989 	bl	8003880 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff f91d 	bl	80037b6 <LL_ADC_SetSamplingTimeCommonConfig>
 800457c:	e00e      	b.n	800459c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	461a      	mov	r2, r3
 800458c:	f7ff f978 	bl	8003880 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2100      	movs	r1, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff f90d 	bl	80037b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	08db      	lsrs	r3, r3, #3
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d022      	beq.n	8004604 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6919      	ldr	r1, [r3, #16]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045ce:	f7ff f867 	bl	80036a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6919      	ldr	r1, [r3, #16]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	461a      	mov	r2, r3
 80045e0:	f7ff f8b3 	bl	800374a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d102      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x126>
 80045f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045f8:	e000      	b.n	80045fc <HAL_ADC_ConfigChannel+0x128>
 80045fa:	2300      	movs	r3, #0
 80045fc:	461a      	mov	r2, r3
 80045fe:	f7ff f8bf 	bl	8003780 <LL_ADC_SetOffsetSaturation>
 8004602:	e17b      	b.n	80048fc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f86c 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 8004610:	4603      	mov	r3, r0
 8004612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x15c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff f861 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 8004626:	4603      	mov	r3, r0
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	f003 021f 	and.w	r2, r3, #31
 800462e:	e01e      	b.n	800466e <HAL_ADC_ConfigChannel+0x19a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff f856 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 800463c:	4603      	mov	r3, r0
 800463e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004642:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004646:	fa93 f3a3 	rbit	r3, r3
 800464a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800464e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004652:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004656:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800465e:	2320      	movs	r3, #32
 8004660:	e004      	b.n	800466c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004662:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x1b2>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	0e9b      	lsrs	r3, r3, #26
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	e018      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x1e4>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800469a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800469e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80046a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80046aa:	2320      	movs	r3, #32
 80046ac:	e004      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80046ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d106      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff f825 	bl	8003714 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2101      	movs	r1, #1
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff f809 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x222>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2101      	movs	r1, #1
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fffe 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 80046ec:	4603      	mov	r3, r0
 80046ee:	0e9b      	lsrs	r3, r3, #26
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	e01e      	b.n	8004734 <HAL_ADC_ConfigChannel+0x260>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe fff3 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 8004702:	4603      	mov	r3, r0
 8004704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800471c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004724:	2320      	movs	r3, #32
 8004726:	e004      	b.n	8004732 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800472c:	fab3 f383 	clz	r3, r3
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <HAL_ADC_ConfigChannel+0x278>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0e9b      	lsrs	r3, r3, #26
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	e018      	b.n	800477e <HAL_ADC_ConfigChannel+0x2aa>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004760:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004764:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004768:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004770:	2320      	movs	r3, #32
 8004772:	e004      	b.n	800477e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004774:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800477e:	429a      	cmp	r2, r3
 8004780:	d106      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	2101      	movs	r1, #1
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe ffc2 	bl	8003714 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2102      	movs	r1, #2
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe ffa6 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 800479c:	4603      	mov	r3, r0
 800479e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x2e8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2102      	movs	r1, #2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe ff9b 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 80047b2:	4603      	mov	r3, r0
 80047b4:	0e9b      	lsrs	r3, r3, #26
 80047b6:	f003 021f 	and.w	r2, r3, #31
 80047ba:	e01e      	b.n	80047fa <HAL_ADC_ConfigChannel+0x326>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2102      	movs	r1, #2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe ff90 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047d2:	fa93 f3a3 	rbit	r3, r3
 80047d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80047da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80047e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80047ea:	2320      	movs	r3, #32
 80047ec:	e004      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80047ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x33e>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0e9b      	lsrs	r3, r3, #26
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	e016      	b.n	8004840 <HAL_ADC_ConfigChannel+0x36c>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004824:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800482a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004832:	2320      	movs	r3, #32
 8004834:	e004      	b.n	8004840 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004836:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004840:	429a      	cmp	r2, r3
 8004842:	d106      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2200      	movs	r2, #0
 800484a:	2102      	movs	r1, #2
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe ff61 	bl	8003714 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2103      	movs	r1, #3
 8004858:	4618      	mov	r0, r3
 800485a:	f7fe ff45 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 800485e:	4603      	mov	r3, r0
 8004860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <HAL_ADC_ConfigChannel+0x3aa>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2103      	movs	r1, #3
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe ff3a 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 8004874:	4603      	mov	r3, r0
 8004876:	0e9b      	lsrs	r3, r3, #26
 8004878:	f003 021f 	and.w	r2, r3, #31
 800487c:	e017      	b.n	80048ae <HAL_ADC_ConfigChannel+0x3da>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2103      	movs	r1, #3
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe ff2f 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 800488a:	4603      	mov	r3, r0
 800488c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004890:	fa93 f3a3 	rbit	r3, r3
 8004894:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004896:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004898:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800489a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80048a0:	2320      	movs	r3, #32
 80048a2:	e003      	b.n	80048ac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80048a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d105      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x3f2>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	0e9b      	lsrs	r3, r3, #26
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	e011      	b.n	80048ea <HAL_ADC_ConfigChannel+0x416>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80048d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80048d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80048de:	2320      	movs	r3, #32
 80048e0:	e003      	b.n	80048ea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80048e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d106      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2103      	movs	r1, #3
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe ff0c 	bl	8003714 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff f88b 	bl	8003a1c <LL_ADC_IsEnabled>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	f040 813d 	bne.w	8004b88 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6819      	ldr	r1, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	461a      	mov	r2, r3
 800491c:	f7fe ffdc 	bl	80038d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4aa2      	ldr	r2, [pc, #648]	@ (8004bb0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	f040 812e 	bne.w	8004b88 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x480>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	0e9b      	lsrs	r3, r3, #26
 8004942:	3301      	adds	r3, #1
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	2b09      	cmp	r3, #9
 800494a:	bf94      	ite	ls
 800494c:	2301      	movls	r3, #1
 800494e:	2300      	movhi	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	e019      	b.n	8004988 <HAL_ADC_ConfigChannel+0x4b4>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004964:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800496c:	2320      	movs	r3, #32
 800496e:	e003      	b.n	8004978 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004970:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	3301      	adds	r3, #1
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2b09      	cmp	r3, #9
 8004980:	bf94      	ite	ls
 8004982:	2301      	movls	r3, #1
 8004984:	2300      	movhi	r3, #0
 8004986:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004988:	2b00      	cmp	r3, #0
 800498a:	d079      	beq.n	8004a80 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x4d4>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	0e9b      	lsrs	r3, r3, #26
 800499e:	3301      	adds	r3, #1
 80049a0:	069b      	lsls	r3, r3, #26
 80049a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049a6:	e015      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x500>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80049b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80049ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80049c0:	2320      	movs	r3, #32
 80049c2:	e003      	b.n	80049cc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80049c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c6:	fab3 f383 	clz	r3, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	3301      	adds	r3, #1
 80049ce:	069b      	lsls	r3, r3, #26
 80049d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x520>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	0e9b      	lsrs	r3, r3, #26
 80049e6:	3301      	adds	r3, #1
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	e017      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x550>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049fc:	fa93 f3a3 	rbit	r3, r3
 8004a00:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	e003      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2101      	movs	r1, #1
 8004a20:	fa01 f303 	lsl.w	r3, r1, r3
 8004a24:	ea42 0103 	orr.w	r1, r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x576>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0e9b      	lsrs	r3, r3, #26
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f003 021f 	and.w	r2, r3, #31
 8004a40:	4613      	mov	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	051b      	lsls	r3, r3, #20
 8004a48:	e018      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x5a8>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004a62:	2320      	movs	r3, #32
 8004a64:	e003      	b.n	8004a6e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a68:	fab3 f383 	clz	r3, r3
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f003 021f 	and.w	r2, r3, #31
 8004a74:	4613      	mov	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4413      	add	r3, r2
 8004a7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	e07e      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d107      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x5c8>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0e9b      	lsrs	r3, r3, #26
 8004a92:	3301      	adds	r3, #1
 8004a94:	069b      	lsls	r3, r3, #26
 8004a96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a9a:	e015      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x5f4>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa4:	fa93 f3a3 	rbit	r3, r3
 8004aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	e003      	b.n	8004ac0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	fab3 f383 	clz	r3, r3
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	069b      	lsls	r3, r3, #26
 8004ac4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x614>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	0e9b      	lsrs	r3, r3, #26
 8004ada:	3301      	adds	r3, #1
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	e017      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x644>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	61fb      	str	r3, [r7, #28]
  return result;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004b00:	2320      	movs	r3, #32
 8004b02:	e003      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	2101      	movs	r1, #1
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	ea42 0103 	orr.w	r1, r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10d      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x670>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0e9b      	lsrs	r3, r3, #26
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f003 021f 	and.w	r2, r3, #31
 8004b34:	4613      	mov	r3, r2
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4413      	add	r3, r2
 8004b3a:	3b1e      	subs	r3, #30
 8004b3c:	051b      	lsls	r3, r3, #20
 8004b3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b42:	e01b      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x6a8>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fa93 f3a3 	rbit	r3, r3
 8004b50:	613b      	str	r3, [r7, #16]
  return result;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004b5c:	2320      	movs	r3, #32
 8004b5e:	e003      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f003 021f 	and.w	r2, r3, #31
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	3b1e      	subs	r3, #30
 8004b76:	051b      	lsls	r3, r3, #20
 8004b78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b82:	4619      	mov	r1, r3
 8004b84:	f7fe fe7c 	bl	8003880 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x6e0>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80be 	beq.w	8004d12 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b9e:	d004      	beq.n	8004baa <HAL_ADC_ConfigChannel+0x6d6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a04      	ldr	r2, [pc, #16]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x6e4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d10a      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x6ec>
 8004baa:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <HAL_ADC_ConfigChannel+0x6e8>)
 8004bac:	e009      	b.n	8004bc2 <HAL_ADC_ConfigChannel+0x6ee>
 8004bae:	bf00      	nop
 8004bb0:	407f0000 	.word	0x407f0000
 8004bb4:	80080000 	.word	0x80080000
 8004bb8:	50000100 	.word	0x50000100
 8004bbc:	50000300 	.word	0x50000300
 8004bc0:	4b59      	ldr	r3, [pc, #356]	@ (8004d28 <HAL_ADC_ConfigChannel+0x854>)
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe fd5e 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 8004bc8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a56      	ldr	r2, [pc, #344]	@ (8004d2c <HAL_ADC_ConfigChannel+0x858>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_ADC_ConfigChannel+0x70c>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a55      	ldr	r2, [pc, #340]	@ (8004d30 <HAL_ADC_ConfigChannel+0x85c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d13a      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004be0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004be4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d134      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bf4:	d005      	beq.n	8004c02 <HAL_ADC_ConfigChannel+0x72e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a4e      	ldr	r2, [pc, #312]	@ (8004d34 <HAL_ADC_ConfigChannel+0x860>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f040 8085 	bne.w	8004d0c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c0a:	d004      	beq.n	8004c16 <HAL_ADC_ConfigChannel+0x742>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a49      	ldr	r2, [pc, #292]	@ (8004d38 <HAL_ADC_ConfigChannel+0x864>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_ADC_ConfigChannel+0x746>
 8004c16:	4a49      	ldr	r2, [pc, #292]	@ (8004d3c <HAL_ADC_ConfigChannel+0x868>)
 8004c18:	e000      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x748>
 8004c1a:	4a43      	ldr	r2, [pc, #268]	@ (8004d28 <HAL_ADC_ConfigChannel+0x854>)
 8004c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fe fd19 	bl	800365e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c2c:	4b44      	ldr	r3, [pc, #272]	@ (8004d40 <HAL_ADC_ConfigChannel+0x86c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	4a44      	ldr	r2, [pc, #272]	@ (8004d44 <HAL_ADC_ConfigChannel+0x870>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c46:	e002      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f9      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c54:	e05a      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d48 <HAL_ADC_ConfigChannel+0x874>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d125      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d11f      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a31      	ldr	r2, [pc, #196]	@ (8004d38 <HAL_ADC_ConfigChannel+0x864>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d104      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x7ac>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a34      	ldr	r2, [pc, #208]	@ (8004d4c <HAL_ADC_ConfigChannel+0x878>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d047      	beq.n	8004d10 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c88:	d004      	beq.n	8004c94 <HAL_ADC_ConfigChannel+0x7c0>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004d38 <HAL_ADC_ConfigChannel+0x864>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d101      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x7c4>
 8004c94:	4a29      	ldr	r2, [pc, #164]	@ (8004d3c <HAL_ADC_ConfigChannel+0x868>)
 8004c96:	e000      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x7c6>
 8004c98:	4a23      	ldr	r2, [pc, #140]	@ (8004d28 <HAL_ADC_ConfigChannel+0x854>)
 8004c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7fe fcda 	bl	800365e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004caa:	e031      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a27      	ldr	r2, [pc, #156]	@ (8004d50 <HAL_ADC_ConfigChannel+0x87c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d12d      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d127      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d38 <HAL_ADC_ConfigChannel+0x864>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d022      	beq.n	8004d12 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cd4:	d004      	beq.n	8004ce0 <HAL_ADC_ConfigChannel+0x80c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a17      	ldr	r2, [pc, #92]	@ (8004d38 <HAL_ADC_ConfigChannel+0x864>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x810>
 8004ce0:	4a16      	ldr	r2, [pc, #88]	@ (8004d3c <HAL_ADC_ConfigChannel+0x868>)
 8004ce2:	e000      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x812>
 8004ce4:	4a10      	ldr	r2, [pc, #64]	@ (8004d28 <HAL_ADC_ConfigChannel+0x854>)
 8004ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7fe fcb4 	bl	800365e <LL_ADC_SetCommonPathInternalCh>
 8004cf6:	e00c      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004d0a:	e002      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d0c:	bf00      	nop
 8004d0e:	e000      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	37d8      	adds	r7, #216	@ 0xd8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	50000700 	.word	0x50000700
 8004d2c:	c3210000 	.word	0xc3210000
 8004d30:	90c00010 	.word	0x90c00010
 8004d34:	50000600 	.word	0x50000600
 8004d38:	50000100 	.word	0x50000100
 8004d3c:	50000300 	.word	0x50000300
 8004d40:	20000000 	.word	0x20000000
 8004d44:	053e2d63 	.word	0x053e2d63
 8004d48:	c7520000 	.word	0xc7520000
 8004d4c:	50000500 	.word	0x50000500
 8004d50:	cb840000 	.word	0xcb840000

08004d54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe fe59 	bl	8003a1c <LL_ADC_IsEnabled>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d176      	bne.n	8004e5e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	4b3c      	ldr	r3, [pc, #240]	@ (8004e68 <ADC_Enable+0x114>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00d      	beq.n	8004d9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d82:	f043 0210 	orr.w	r2, r3, #16
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8e:	f043 0201 	orr.w	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e062      	b.n	8004e60 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fe28 	bl	80039f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dac:	d004      	beq.n	8004db8 <ADC_Enable+0x64>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2e      	ldr	r2, [pc, #184]	@ (8004e6c <ADC_Enable+0x118>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <ADC_Enable+0x68>
 8004db8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e70 <ADC_Enable+0x11c>)
 8004dba:	e000      	b.n	8004dbe <ADC_Enable+0x6a>
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8004e74 <ADC_Enable+0x120>)
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fc60 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 8004dc4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004dc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d013      	beq.n	8004df6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dce:	4b2a      	ldr	r3, [pc, #168]	@ (8004e78 <ADC_Enable+0x124>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	099b      	lsrs	r3, r3, #6
 8004dd4:	4a29      	ldr	r2, [pc, #164]	@ (8004e7c <ADC_Enable+0x128>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004de8:	e002      	b.n	8004df0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f9      	bne.n	8004dea <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004df6:	f7fe fbcd 	bl	8003594 <HAL_GetTick>
 8004dfa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dfc:	e028      	b.n	8004e50 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe fe0a 	bl	8003a1c <LL_ADC_IsEnabled>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fdee 	bl	80039f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e18:	f7fe fbbc 	bl	8003594 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d914      	bls.n	8004e50 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d00d      	beq.n	8004e50 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e38:	f043 0210 	orr.w	r2, r3, #16
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e44:	f043 0201 	orr.w	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e007      	b.n	8004e60 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d1cf      	bne.n	8004dfe <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	8000003f 	.word	0x8000003f
 8004e6c:	50000100 	.word	0x50000100
 8004e70:	50000300 	.word	0x50000300
 8004e74:	50000700 	.word	0x50000700
 8004e78:	20000000 	.word	0x20000000
 8004e7c:	053e2d63 	.word	0x053e2d63

08004e80 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e92:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d14b      	bne.n	8004f32 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d021      	beq.n	8004ef8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fc8f 	bl	80037dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d032      	beq.n	8004f2a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d12b      	bne.n	8004f2a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d11f      	bne.n	8004f2a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ef6:	e018      	b.n	8004f2a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d111      	bne.n	8004f2a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d105      	bne.n	8004f2a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f22:	f043 0201 	orr.w	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7fc fdaa 	bl	8001a84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f30:	e00e      	b.n	8004f50 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7ff fabe 	bl	80044c0 <HAL_ADC_ErrorCallback>
}
 8004f44:	e004      	b.n	8004f50 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff fa96 	bl	8004498 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f92:	f043 0204 	orr.w	r2, r3, #4
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7ff fa90 	bl	80044c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <LL_ADC_IsEnabled>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <LL_ADC_IsEnabled+0x18>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <LL_ADC_IsEnabled+0x1a>
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <LL_ADC_REG_IsConversionOngoing>:
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d101      	bne.n	8004fe6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b0a1      	sub	sp, #132	@ 0x84
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005072:	2302      	movs	r3, #2
 8005074:	e0e7      	b.n	8005246 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800507e:	2300      	movs	r3, #0
 8005080:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005082:	2300      	movs	r3, #0
 8005084:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800508e:	d102      	bne.n	8005096 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005090:	4b6f      	ldr	r3, [pc, #444]	@ (8005250 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	e009      	b.n	80050aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6e      	ldr	r2, [pc, #440]	@ (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d102      	bne.n	80050a6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80050a0:	4b6d      	ldr	r3, [pc, #436]	@ (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	e001      	b.n	80050aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0be      	b.n	8005246 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff ff7f 	bl	8004fce <LL_ADC_REG_IsConversionOngoing>
 80050d0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ff79 	bl	8004fce <LL_ADC_REG_IsConversionOngoing>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 80a0 	bne.w	8005224 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80050e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f040 809c 	bne.w	8005224 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050f4:	d004      	beq.n	8005100 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a55      	ldr	r2, [pc, #340]	@ (8005250 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d101      	bne.n	8005104 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005100:	4b56      	ldr	r3, [pc, #344]	@ (800525c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005102:	e000      	b.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005104:	4b56      	ldr	r3, [pc, #344]	@ (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005106:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d04b      	beq.n	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6859      	ldr	r1, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005122:	035b      	lsls	r3, r3, #13
 8005124:	430b      	orrs	r3, r1
 8005126:	431a      	orrs	r2, r3
 8005128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800512a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005134:	d004      	beq.n	8005140 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a45      	ldr	r2, [pc, #276]	@ (8005250 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10f      	bne.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005140:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005144:	f7ff ff30 	bl	8004fa8 <LL_ADC_IsEnabled>
 8005148:	4604      	mov	r4, r0
 800514a:	4841      	ldr	r0, [pc, #260]	@ (8005250 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800514c:	f7ff ff2c 	bl	8004fa8 <LL_ADC_IsEnabled>
 8005150:	4603      	mov	r3, r0
 8005152:	4323      	orrs	r3, r4
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e012      	b.n	8005186 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005160:	483c      	ldr	r0, [pc, #240]	@ (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005162:	f7ff ff21 	bl	8004fa8 <LL_ADC_IsEnabled>
 8005166:	4604      	mov	r4, r0
 8005168:	483b      	ldr	r0, [pc, #236]	@ (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800516a:	f7ff ff1d 	bl	8004fa8 <LL_ADC_IsEnabled>
 800516e:	4603      	mov	r3, r0
 8005170:	431c      	orrs	r4, r3
 8005172:	483c      	ldr	r0, [pc, #240]	@ (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005174:	f7ff ff18 	bl	8004fa8 <LL_ADC_IsEnabled>
 8005178:	4603      	mov	r3, r0
 800517a:	4323      	orrs	r3, r4
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d056      	beq.n	8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800518a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005192:	f023 030f 	bic.w	r3, r3, #15
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	6811      	ldr	r1, [r2, #0]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	6892      	ldr	r2, [r2, #8]
 800519e:	430a      	orrs	r2, r1
 80051a0:	431a      	orrs	r2, r3
 80051a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051a4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051a6:	e047      	b.n	8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80051a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051bc:	d004      	beq.n	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a23      	ldr	r2, [pc, #140]	@ (8005250 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10f      	bne.n	80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80051c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051cc:	f7ff feec 	bl	8004fa8 <LL_ADC_IsEnabled>
 80051d0:	4604      	mov	r4, r0
 80051d2:	481f      	ldr	r0, [pc, #124]	@ (8005250 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051d4:	f7ff fee8 	bl	8004fa8 <LL_ADC_IsEnabled>
 80051d8:	4603      	mov	r3, r0
 80051da:	4323      	orrs	r3, r4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e012      	b.n	800520e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80051e8:	481a      	ldr	r0, [pc, #104]	@ (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051ea:	f7ff fedd 	bl	8004fa8 <LL_ADC_IsEnabled>
 80051ee:	4604      	mov	r4, r0
 80051f0:	4819      	ldr	r0, [pc, #100]	@ (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051f2:	f7ff fed9 	bl	8004fa8 <LL_ADC_IsEnabled>
 80051f6:	4603      	mov	r3, r0
 80051f8:	431c      	orrs	r4, r3
 80051fa:	481a      	ldr	r0, [pc, #104]	@ (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051fc:	f7ff fed4 	bl	8004fa8 <LL_ADC_IsEnabled>
 8005200:	4603      	mov	r3, r0
 8005202:	4323      	orrs	r3, r4
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d012      	beq.n	8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800521a:	f023 030f 	bic.w	r3, r3, #15
 800521e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005220:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005222:	e009      	b.n	8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005236:	e000      	b.n	800523a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005238:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005242:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005246:	4618      	mov	r0, r3
 8005248:	3784      	adds	r7, #132	@ 0x84
 800524a:	46bd      	mov	sp, r7
 800524c:	bd90      	pop	{r4, r7, pc}
 800524e:	bf00      	nop
 8005250:	50000100 	.word	0x50000100
 8005254:	50000400 	.word	0x50000400
 8005258:	50000500 	.word	0x50000500
 800525c:	50000300 	.word	0x50000300
 8005260:	50000700 	.word	0x50000700
 8005264:	50000600 	.word	0x50000600

08005268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005278:	4b0c      	ldr	r3, [pc, #48]	@ (80052ac <__NVIC_SetPriorityGrouping+0x44>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005284:	4013      	ands	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800529a:	4a04      	ldr	r2, [pc, #16]	@ (80052ac <__NVIC_SetPriorityGrouping+0x44>)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	60d3      	str	r3, [r2, #12]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052b4:	4b04      	ldr	r3, [pc, #16]	@ (80052c8 <__NVIC_GetPriorityGrouping+0x18>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	f003 0307 	and.w	r3, r3, #7
}
 80052be:	4618      	mov	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	e000ed00 	.word	0xe000ed00

080052cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	db0b      	blt.n	80052f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	f003 021f 	and.w	r2, r3, #31
 80052e4:	4907      	ldr	r1, [pc, #28]	@ (8005304 <__NVIC_EnableIRQ+0x38>)
 80052e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	2001      	movs	r0, #1
 80052ee:	fa00 f202 	lsl.w	r2, r0, r2
 80052f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	e000e100 	.word	0xe000e100

08005308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	6039      	str	r1, [r7, #0]
 8005312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005318:	2b00      	cmp	r3, #0
 800531a:	db0a      	blt.n	8005332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	490c      	ldr	r1, [pc, #48]	@ (8005354 <__NVIC_SetPriority+0x4c>)
 8005322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005326:	0112      	lsls	r2, r2, #4
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	440b      	add	r3, r1
 800532c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005330:	e00a      	b.n	8005348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	4908      	ldr	r1, [pc, #32]	@ (8005358 <__NVIC_SetPriority+0x50>)
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	3b04      	subs	r3, #4
 8005340:	0112      	lsls	r2, r2, #4
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	440b      	add	r3, r1
 8005346:	761a      	strb	r2, [r3, #24]
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	e000e100 	.word	0xe000e100
 8005358:	e000ed00 	.word	0xe000ed00

0800535c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800535c:	b480      	push	{r7}
 800535e:	b089      	sub	sp, #36	@ 0x24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f1c3 0307 	rsb	r3, r3, #7
 8005376:	2b04      	cmp	r3, #4
 8005378:	bf28      	it	cs
 800537a:	2304      	movcs	r3, #4
 800537c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	3304      	adds	r3, #4
 8005382:	2b06      	cmp	r3, #6
 8005384:	d902      	bls.n	800538c <NVIC_EncodePriority+0x30>
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	3b03      	subs	r3, #3
 800538a:	e000      	b.n	800538e <NVIC_EncodePriority+0x32>
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005390:	f04f 32ff 	mov.w	r2, #4294967295
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43da      	mvns	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	401a      	ands	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053a4:	f04f 31ff 	mov.w	r1, #4294967295
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	fa01 f303 	lsl.w	r3, r1, r3
 80053ae:	43d9      	mvns	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b4:	4313      	orrs	r3, r2
         );
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3724      	adds	r7, #36	@ 0x24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ff4c 	bl	8005268 <__NVIC_SetPriorityGrouping>
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053e6:	f7ff ff63 	bl	80052b0 <__NVIC_GetPriorityGrouping>
 80053ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	6978      	ldr	r0, [r7, #20]
 80053f2:	f7ff ffb3 	bl	800535c <NVIC_EncodePriority>
 80053f6:	4602      	mov	r2, r0
 80053f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053fc:	4611      	mov	r1, r2
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ff82 	bl	8005308 <__NVIC_SetPriority>
}
 8005404:	bf00      	nop
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff ff56 	bl	80052cc <__NVIC_EnableIRQ>
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e054      	b.n	80054e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7f5b      	ldrb	r3, [r3, #29]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fb fc18 	bl	8000c80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	791b      	ldrb	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10c      	bne.n	8005478 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a22      	ldr	r2, [pc, #136]	@ (80054ec <HAL_CRC_Init+0xc4>)
 8005464:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0218 	bic.w	r2, r2, #24
 8005474:	609a      	str	r2, [r3, #8]
 8005476:	e00c      	b.n	8005492 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6899      	ldr	r1, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	461a      	mov	r2, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f834 	bl	80054f0 <HAL_CRCEx_Polynomial_Set>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e028      	b.n	80054e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	795b      	ldrb	r3, [r3, #5]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d105      	bne.n	80054a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f04f 32ff 	mov.w	r2, #4294967295
 80054a2:	611a      	str	r2, [r3, #16]
 80054a4:	e004      	b.n	80054b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6912      	ldr	r2, [r2, #16]
 80054ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	04c11db7 	.word	0x04c11db7

080054f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005500:	231f      	movs	r3, #31
 8005502:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	75fb      	strb	r3, [r7, #23]
 8005512:	e063      	b.n	80055dc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005514:	bf00      	nop
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1e5a      	subs	r2, r3, #1
 800551a:	613a      	str	r2, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <HAL_CRCEx_Polynomial_Set+0x44>
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b18      	cmp	r3, #24
 8005538:	d846      	bhi.n	80055c8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800553a:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <HAL_CRCEx_Polynomial_Set+0x50>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	080055cf 	.word	0x080055cf
 8005544:	080055c9 	.word	0x080055c9
 8005548:	080055c9 	.word	0x080055c9
 800554c:	080055c9 	.word	0x080055c9
 8005550:	080055c9 	.word	0x080055c9
 8005554:	080055c9 	.word	0x080055c9
 8005558:	080055c9 	.word	0x080055c9
 800555c:	080055c9 	.word	0x080055c9
 8005560:	080055bd 	.word	0x080055bd
 8005564:	080055c9 	.word	0x080055c9
 8005568:	080055c9 	.word	0x080055c9
 800556c:	080055c9 	.word	0x080055c9
 8005570:	080055c9 	.word	0x080055c9
 8005574:	080055c9 	.word	0x080055c9
 8005578:	080055c9 	.word	0x080055c9
 800557c:	080055c9 	.word	0x080055c9
 8005580:	080055b1 	.word	0x080055b1
 8005584:	080055c9 	.word	0x080055c9
 8005588:	080055c9 	.word	0x080055c9
 800558c:	080055c9 	.word	0x080055c9
 8005590:	080055c9 	.word	0x080055c9
 8005594:	080055c9 	.word	0x080055c9
 8005598:	080055c9 	.word	0x080055c9
 800559c:	080055c9 	.word	0x080055c9
 80055a0:	080055a5 	.word	0x080055a5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b06      	cmp	r3, #6
 80055a8:	d913      	bls.n	80055d2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80055ae:	e010      	b.n	80055d2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b07      	cmp	r3, #7
 80055b4:	d90f      	bls.n	80055d6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80055ba:	e00c      	b.n	80055d6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b0f      	cmp	r3, #15
 80055c0:	d90b      	bls.n	80055da <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80055c6:	e008      	b.n	80055da <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	75fb      	strb	r3, [r7, #23]
        break;
 80055cc:	e006      	b.n	80055dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80055ce:	bf00      	nop
 80055d0:	e004      	b.n	80055dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80055d2:	bf00      	nop
 80055d4:	e002      	b.n	80055dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80055d6:	bf00      	nop
 80055d8:	e000      	b.n	80055dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80055da:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10d      	bne.n	80055fe <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f023 0118 	bic.w	r1, r3, #24
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e08d      	b.n	800573a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	4b47      	ldr	r3, [pc, #284]	@ (8005744 <HAL_DMA_Init+0x138>)
 8005626:	429a      	cmp	r2, r3
 8005628:	d80f      	bhi.n	800564a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	4b45      	ldr	r3, [pc, #276]	@ (8005748 <HAL_DMA_Init+0x13c>)
 8005632:	4413      	add	r3, r2
 8005634:	4a45      	ldr	r2, [pc, #276]	@ (800574c <HAL_DMA_Init+0x140>)
 8005636:	fba2 2303 	umull	r2, r3, r2, r3
 800563a:	091b      	lsrs	r3, r3, #4
 800563c:	009a      	lsls	r2, r3, #2
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a42      	ldr	r2, [pc, #264]	@ (8005750 <HAL_DMA_Init+0x144>)
 8005646:	641a      	str	r2, [r3, #64]	@ 0x40
 8005648:	e00e      	b.n	8005668 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	4b40      	ldr	r3, [pc, #256]	@ (8005754 <HAL_DMA_Init+0x148>)
 8005652:	4413      	add	r3, r2
 8005654:	4a3d      	ldr	r2, [pc, #244]	@ (800574c <HAL_DMA_Init+0x140>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	091b      	lsrs	r3, r3, #4
 800565c:	009a      	lsls	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a3c      	ldr	r2, [pc, #240]	@ (8005758 <HAL_DMA_Init+0x14c>)
 8005666:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800567e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005682:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800568c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa2c 	bl	8005b18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c8:	d102      	bne.n	80056d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d010      	beq.n	8005710 <HAL_DMA_Init+0x104>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d80c      	bhi.n	8005710 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fa4c 	bl	8005b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800570c:	605a      	str	r2, [r3, #4]
 800570e:	e008      	b.n	8005722 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40020407 	.word	0x40020407
 8005748:	bffdfff8 	.word	0xbffdfff8
 800574c:	cccccccd 	.word	0xcccccccd
 8005750:	40020000 	.word	0x40020000
 8005754:	bffdfbf8 	.word	0xbffdfbf8
 8005758:	40020400 	.word	0x40020400

0800575c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_DMA_Start_IT+0x20>
 8005778:	2302      	movs	r3, #2
 800577a:	e066      	b.n	800584a <HAL_DMA_Start_IT+0xee>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d155      	bne.n	800583c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0201 	bic.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f970 	bl	8005a9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 020e 	orr.w	r2, r2, #14
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e00f      	b.n	80057f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0204 	bic.w	r2, r2, #4
 80057e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 020a 	orr.w	r2, r2, #10
 80057f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800580c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005810:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005828:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0201 	orr.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e005      	b.n	8005848 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005844:	2302      	movs	r3, #2
 8005846:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d00d      	beq.n	8005886 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2204      	movs	r2, #4
 800586e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e047      	b.n	8005916 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 020e 	bic.w	r2, r2, #14
 8005894:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ba:	f003 021f 	and.w	r2, r3, #31
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	2101      	movs	r1, #1
 80058c4:	fa01 f202 	lsl.w	r2, r1, r2
 80058c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
    }
  }
  return status;
 8005916:	7bfb      	ldrb	r3, [r7, #15]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593c:	f003 031f 	and.w	r3, r3, #31
 8005940:	2204      	movs	r2, #4
 8005942:	409a      	lsls	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d026      	beq.n	800599a <HAL_DMA_IRQHandler+0x7a>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	d021      	beq.n	800599a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d107      	bne.n	8005974 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0204 	bic.w	r2, r2, #4
 8005972:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005978:	f003 021f 	and.w	r2, r3, #31
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005980:	2104      	movs	r1, #4
 8005982:	fa01 f202 	lsl.w	r2, r1, r2
 8005986:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598c:	2b00      	cmp	r3, #0
 800598e:	d071      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005998:	e06c      	b.n	8005a74 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2202      	movs	r2, #2
 80059a4:	409a      	lsls	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d02e      	beq.n	8005a0c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d029      	beq.n	8005a0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 020a 	bic.w	r2, r2, #10
 80059d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e2:	f003 021f 	and.w	r2, r3, #31
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	2102      	movs	r1, #2
 80059ec:	fa01 f202 	lsl.w	r2, r1, r2
 80059f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d038      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a0a:	e033      	b.n	8005a74 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	2208      	movs	r2, #8
 8005a16:	409a      	lsls	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d02a      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d025      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 020e 	bic.w	r2, r2, #14
 8005a38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3e:	f003 021f 	and.w	r2, r3, #31
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	2101      	movs	r1, #1
 8005a48:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
}
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a8c:	b2db      	uxtb	r3, r3
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ab0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ac2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac8:	f003 021f 	and.w	r2, r3, #31
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d108      	bne.n	8005afa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005af8:	e007      	b.n	8005b0a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	60da      	str	r2, [r3, #12]
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	4b16      	ldr	r3, [pc, #88]	@ (8005b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d802      	bhi.n	8005b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005b2c:	4b15      	ldr	r3, [pc, #84]	@ (8005b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e001      	b.n	8005b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005b32:	4b15      	ldr	r3, [pc, #84]	@ (8005b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005b34:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	3b08      	subs	r3, #8
 8005b42:	4a12      	ldr	r2, [pc, #72]	@ (8005b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b50:	089b      	lsrs	r3, r3, #2
 8005b52:	009a      	lsls	r2, r3, #2
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4413      	add	r3, r2
 8005b58:	461a      	mov	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a0b      	ldr	r2, [pc, #44]	@ (8005b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005b62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	409a      	lsls	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40020407 	.word	0x40020407
 8005b84:	40020800 	.word	0x40020800
 8005b88:	40020820 	.word	0x40020820
 8005b8c:	cccccccd 	.word	0xcccccccd
 8005b90:	40020880 	.word	0x40020880

08005b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	461a      	mov	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a08      	ldr	r2, [pc, #32]	@ (8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005bb6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	1000823f 	.word	0x1000823f
 8005bd8:	40020940 	.word	0x40020940

08005bdc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e147      	b.n	8005e7e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fb f8ce 	bl	8000da4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0210 	bic.w	r2, r2, #16
 8005c16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c18:	f7fd fcbc 	bl	8003594 <HAL_GetTick>
 8005c1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c1e:	e012      	b.n	8005c46 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c20:	f7fd fcb8 	bl	8003594 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b0a      	cmp	r3, #10
 8005c2c:	d90b      	bls.n	8005c46 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2203      	movs	r2, #3
 8005c3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e11b      	b.n	8005e7e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d0e5      	beq.n	8005c20 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c64:	f7fd fc96 	bl	8003594 <HAL_GetTick>
 8005c68:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c6a:	e012      	b.n	8005c92 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c6c:	f7fd fc92 	bl	8003594 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b0a      	cmp	r3, #10
 8005c78:	d90b      	bls.n	8005c92 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c7e:	f043 0201 	orr.w	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e0f5      	b.n	8005e7e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0e5      	beq.n	8005c6c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0202 	orr.w	r2, r2, #2
 8005cae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a74      	ldr	r2, [pc, #464]	@ (8005e88 <HAL_FDCAN_Init+0x2ac>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d103      	bne.n	8005cc2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005cba:	4a74      	ldr	r2, [pc, #464]	@ (8005e8c <HAL_FDCAN_Init+0x2b0>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	7c1b      	ldrb	r3, [r3, #16]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d108      	bne.n	8005cdc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd8:	619a      	str	r2, [r3, #24]
 8005cda:	e007      	b.n	8005cec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7c5b      	ldrb	r3, [r3, #17]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d108      	bne.n	8005d06 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d02:	619a      	str	r2, [r3, #24]
 8005d04:	e007      	b.n	8005d16 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699a      	ldr	r2, [r3, #24]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d14:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7c9b      	ldrb	r3, [r3, #18]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d108      	bne.n	8005d30 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d2c:	619a      	str	r2, [r3, #24]
 8005d2e:	e007      	b.n	8005d40 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d3e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005d64:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0210 	bic.w	r2, r2, #16
 8005d74:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d108      	bne.n	8005d90 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0204 	orr.w	r2, r2, #4
 8005d8c:	619a      	str	r2, [r3, #24]
 8005d8e:	e02c      	b.n	8005dea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d028      	beq.n	8005dea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d01c      	beq.n	8005dda <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005dae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0210 	orr.w	r2, r2, #16
 8005dbe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d110      	bne.n	8005dea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0220 	orr.w	r2, r2, #32
 8005dd6:	619a      	str	r2, [r3, #24]
 8005dd8:	e007      	b.n	8005dea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0220 	orr.w	r2, r2, #32
 8005de8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005dfa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e02:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e12:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e14:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e1e:	d115      	bne.n	8005e4c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e2e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e34:	3b01      	subs	r3, #1
 8005e36:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e38:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	3b01      	subs	r3, #1
 8005e42:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e48:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e4a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa1a 	bl	800629c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40006400 	.word	0x40006400
 8005e8c:	40006500 	.word	0x40006500

08005e90 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d110      	bne.n	8005ec6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e006      	b.n	8005ed4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eca:	f043 0204 	orr.w	r2, r3, #4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
  }
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d12c      	bne.n	8005f52 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e023      	b.n	8005f60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 fa20 	bl	8006374 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2101      	movs	r1, #1
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f40:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005f44:	2201      	movs	r2, #1
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e006      	b.n	8005f60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f56:	f043 0208 	orr.w	r2, r3, #8
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08c      	sub	sp, #48	@ 0x30
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f76:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f84:	4013      	ands	r3, r2
 8005f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbe:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005fc2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005fda:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fee:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2240      	movs	r2, #64	@ 0x40
 8006012:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f921 	bl	800625c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006020:	2b00      	cmp	r3, #0
 8006022:	d019      	beq.n	8006058 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d014      	beq.n	8006058 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006036:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4013      	ands	r3, r2
 8006044:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800604e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006050:	6939      	ldr	r1, [r7, #16]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f8e3 	bl	800621e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006064:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f8a2 	bl	80061b2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800607a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800607c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8a2 	bl	80061c8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006090:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006092:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8a2 	bl	80061de <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00c      	beq.n	80060be <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f89b 	bl	80061f4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d018      	beq.n	80060fa <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d013      	beq.n	80060fa <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80060da:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4013      	ands	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2280      	movs	r2, #128	@ 0x80
 80060f0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f887 	bl	8006208 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006116:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f88b 	bl	8006234 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800613a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f883 	bl	8006248 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00f      	beq.n	800616c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800615e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006164:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800617a:	69f9      	ldr	r1, [r7, #28]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f881 	bl	8006284 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a3a      	ldr	r2, [r7, #32]
 800618e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f863 	bl	8006270 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80061aa:	bf00      	nop
 80061ac:	3730      	adds	r7, #48	@ 0x30
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80062a4:	4b30      	ldr	r3, [pc, #192]	@ (8006368 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80062a6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2f      	ldr	r2, [pc, #188]	@ (800636c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d103      	bne.n	80062ba <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062b8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2c      	ldr	r2, [pc, #176]	@ (8006370 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d103      	bne.n	80062cc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80062ca:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062da:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e2:	041a      	lsls	r2, r3, #16
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006300:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	061a      	lsls	r2, r3, #24
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e005      	b.n	800634e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3304      	adds	r3, #4
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	429a      	cmp	r2, r3
 8006358:	d3f3      	bcc.n	8006342 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	4000a400 	.word	0x4000a400
 800636c:	40006800 	.word	0x40006800
 8006370:	40006c00 	.word	0x40006c00

08006374 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006374:	b480      	push	{r7}
 8006376:	b089      	sub	sp, #36	@ 0x24
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006392:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800639a:	4313      	orrs	r3, r2
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	e00a      	b.n	80063b6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80063a8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80063ae:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80063b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063b4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80063c0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80063c6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80063cc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	4613      	mov	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4413      	add	r3, r2
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	440b      	add	r3, r1
 80063e8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	3304      	adds	r3, #4
 80063f4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	3304      	adds	r3, #4
 8006400:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	e020      	b.n	800644a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3303      	adds	r3, #3
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	3302      	adds	r3, #2
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	440b      	add	r3, r1
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006420:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	3301      	adds	r3, #1
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	440b      	add	r3, r1
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800642e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	440a      	add	r2, r1
 8006436:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006438:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	3304      	adds	r3, #4
 8006442:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	3304      	adds	r3, #4
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	4a06      	ldr	r2, [pc, #24]	@ (8006468 <FDCAN_CopyMessageToRAM+0xf4>)
 8006450:	5cd3      	ldrb	r3, [r2, r3]
 8006452:	461a      	mov	r2, r3
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	4293      	cmp	r3, r2
 8006458:	d3d6      	bcc.n	8006408 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	3724      	adds	r7, #36	@ 0x24
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	0800e754 	.word	0x0800e754

0800646c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800647a:	e15a      	b.n	8006732 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	2101      	movs	r1, #1
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	fa01 f303 	lsl.w	r3, r1, r3
 8006488:	4013      	ands	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 814c 	beq.w	800672c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d005      	beq.n	80064ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d130      	bne.n	800650e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	2203      	movs	r2, #3
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	43db      	mvns	r3, r3
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4013      	ands	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064e2:	2201      	movs	r2, #1
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	43db      	mvns	r3, r3
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4013      	ands	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f003 0201 	and.w	r2, r3, #1
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	2b03      	cmp	r3, #3
 8006518:	d017      	beq.n	800654a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	2203      	movs	r2, #3
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43db      	mvns	r3, r3
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4013      	ands	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d123      	bne.n	800659e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	08da      	lsrs	r2, r3, #3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3208      	adds	r2, #8
 800655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	220f      	movs	r2, #15
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43db      	mvns	r3, r3
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4013      	ands	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	08da      	lsrs	r2, r3, #3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3208      	adds	r2, #8
 8006598:	6939      	ldr	r1, [r7, #16]
 800659a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	2203      	movs	r2, #3
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4013      	ands	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f003 0203 	and.w	r2, r3, #3
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80a6 	beq.w	800672c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006750 <HAL_GPIO_Init+0x2e4>)
 80065e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006750 <HAL_GPIO_Init+0x2e4>)
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80065ec:	4b58      	ldr	r3, [pc, #352]	@ (8006750 <HAL_GPIO_Init+0x2e4>)
 80065ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	60bb      	str	r3, [r7, #8]
 80065f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065f8:	4a56      	ldr	r2, [pc, #344]	@ (8006754 <HAL_GPIO_Init+0x2e8>)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	089b      	lsrs	r3, r3, #2
 80065fe:	3302      	adds	r3, #2
 8006600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006604:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f003 0303 	and.w	r3, r3, #3
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	220f      	movs	r2, #15
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4013      	ands	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006622:	d01f      	beq.n	8006664 <HAL_GPIO_Init+0x1f8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a4c      	ldr	r2, [pc, #304]	@ (8006758 <HAL_GPIO_Init+0x2ec>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d019      	beq.n	8006660 <HAL_GPIO_Init+0x1f4>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a4b      	ldr	r2, [pc, #300]	@ (800675c <HAL_GPIO_Init+0x2f0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d013      	beq.n	800665c <HAL_GPIO_Init+0x1f0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a4a      	ldr	r2, [pc, #296]	@ (8006760 <HAL_GPIO_Init+0x2f4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00d      	beq.n	8006658 <HAL_GPIO_Init+0x1ec>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a49      	ldr	r2, [pc, #292]	@ (8006764 <HAL_GPIO_Init+0x2f8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <HAL_GPIO_Init+0x1e8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a48      	ldr	r2, [pc, #288]	@ (8006768 <HAL_GPIO_Init+0x2fc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d101      	bne.n	8006650 <HAL_GPIO_Init+0x1e4>
 800664c:	2305      	movs	r3, #5
 800664e:	e00a      	b.n	8006666 <HAL_GPIO_Init+0x1fa>
 8006650:	2306      	movs	r3, #6
 8006652:	e008      	b.n	8006666 <HAL_GPIO_Init+0x1fa>
 8006654:	2304      	movs	r3, #4
 8006656:	e006      	b.n	8006666 <HAL_GPIO_Init+0x1fa>
 8006658:	2303      	movs	r3, #3
 800665a:	e004      	b.n	8006666 <HAL_GPIO_Init+0x1fa>
 800665c:	2302      	movs	r3, #2
 800665e:	e002      	b.n	8006666 <HAL_GPIO_Init+0x1fa>
 8006660:	2301      	movs	r3, #1
 8006662:	e000      	b.n	8006666 <HAL_GPIO_Init+0x1fa>
 8006664:	2300      	movs	r3, #0
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	f002 0203 	and.w	r2, r2, #3
 800666c:	0092      	lsls	r2, r2, #2
 800666e:	4093      	lsls	r3, r2
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006676:	4937      	ldr	r1, [pc, #220]	@ (8006754 <HAL_GPIO_Init+0x2e8>)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	089b      	lsrs	r3, r3, #2
 800667c:	3302      	adds	r3, #2
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006684:	4b39      	ldr	r3, [pc, #228]	@ (800676c <HAL_GPIO_Init+0x300>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	43db      	mvns	r3, r3
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4013      	ands	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066a8:	4a30      	ldr	r2, [pc, #192]	@ (800676c <HAL_GPIO_Init+0x300>)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066ae:	4b2f      	ldr	r3, [pc, #188]	@ (800676c <HAL_GPIO_Init+0x300>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4013      	ands	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066d2:	4a26      	ldr	r2, [pc, #152]	@ (800676c <HAL_GPIO_Init+0x300>)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80066d8:	4b24      	ldr	r3, [pc, #144]	@ (800676c <HAL_GPIO_Init+0x300>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4013      	ands	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80066fc:	4a1b      	ldr	r2, [pc, #108]	@ (800676c <HAL_GPIO_Init+0x300>)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006702:	4b1a      	ldr	r3, [pc, #104]	@ (800676c <HAL_GPIO_Init+0x300>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	43db      	mvns	r3, r3
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4013      	ands	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006726:	4a11      	ldr	r2, [pc, #68]	@ (800676c <HAL_GPIO_Init+0x300>)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	3301      	adds	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	f47f ae9d 	bne.w	800647c <HAL_GPIO_Init+0x10>
  }
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40021000 	.word	0x40021000
 8006754:	40010000 	.word	0x40010000
 8006758:	48000400 	.word	0x48000400
 800675c:	48000800 	.word	0x48000800
 8006760:	48000c00 	.word	0x48000c00
 8006764:	48001000 	.word	0x48001000
 8006768:	48001400 	.word	0x48001400
 800676c:	40010400 	.word	0x40010400

08006770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	807b      	strh	r3, [r7, #2]
 800677c:	4613      	mov	r3, r2
 800677e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006780:	787b      	ldrb	r3, [r7, #1]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006786:	887a      	ldrh	r2, [r7, #2]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800678c:	e002      	b.n	8006794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800678e:	887a      	ldrh	r2, [r7, #2]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4013      	ands	r3, r2
 80067b8:	041a      	lsls	r2, r3, #16
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	43d9      	mvns	r1, r3
 80067be:	887b      	ldrh	r3, [r7, #2]
 80067c0:	400b      	ands	r3, r1
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	619a      	str	r2, [r3, #24]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80067de:	4b08      	ldr	r3, [pc, #32]	@ (8006800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d006      	beq.n	80067f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ea:	4a05      	ldr	r2, [pc, #20]	@ (8006800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fb ffae 	bl	8002754 <HAL_GPIO_EXTI_Callback>
  }
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40010400 	.word	0x40010400

08006804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e08d      	b.n	8006932 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fa fc9c 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2224      	movs	r2, #36	@ 0x24
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0201 	bic.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006854:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006864:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d107      	bne.n	800687e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	e006      	b.n	800688c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800688a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d108      	bne.n	80068a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068a2:	605a      	str	r2, [r3, #4]
 80068a4:	e007      	b.n	80068b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80068c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69d9      	ldr	r1, [r3, #28]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1a      	ldr	r2, [r3, #32]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	461a      	mov	r2, r3
 8006948:	460b      	mov	r3, r1
 800694a:	817b      	strh	r3, [r7, #10]
 800694c:	4613      	mov	r3, r2
 800694e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b20      	cmp	r3, #32
 800695a:	d17c      	bne.n	8006a56 <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800696a:	d101      	bne.n	8006970 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800696c:	2302      	movs	r3, #2
 800696e:	e073      	b.n	8006a58 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_I2C_Master_Transmit_IT+0x42>
 800697a:	2302      	movs	r3, #2
 800697c:	e06c      	b.n	8006a58 <HAL_I2C_Master_Transmit_IT+0x11c>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2221      	movs	r2, #33	@ 0x21
 800698a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2210      	movs	r2, #16
 8006992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	893a      	ldrh	r2, [r7, #8]
 80069a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a2d      	ldr	r2, [pc, #180]	@ (8006a60 <HAL_I2C_Master_Transmit_IT+0x124>)
 80069ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006a64 <HAL_I2C_Master_Transmit_IT+0x128>)
 80069b2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2bff      	cmp	r3, #255	@ 0xff
 80069bc:	d906      	bls.n	80069cc <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	22ff      	movs	r2, #255	@ 0xff
 80069c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80069c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e007      	b.n	80069dc <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80069d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069da:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d024      	beq.n	8006a2e <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	781a      	ldrb	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	8979      	ldrh	r1, [r7, #10]
 8006a20:	4b11      	ldr	r3, [pc, #68]	@ (8006a68 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f001 fd0a 	bl	8008440 <I2C_TransferConfig>
 8006a2c:	e009      	b.n	8006a42 <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	8979      	ldrh	r1, [r7, #10]
 8006a36:	4b0c      	ldr	r3, [pc, #48]	@ (8006a68 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f001 fcff 	bl	8008440 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f001 fd29 	bl	80084a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e000      	b.n	8006a58 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a56:	2302      	movs	r3, #2
  }
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	ffff0000 	.word	0xffff0000
 8006a64:	08006df7 	.word	0x08006df7
 8006a68:	80002000 	.word	0x80002000

08006a6c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	817b      	strh	r3, [r7, #10]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	813b      	strh	r3, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d16a      	bne.n	8006b68 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <HAL_I2C_Mem_Write_IT+0x32>
 8006a98:	8bbb      	ldrh	r3, [r7, #28]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e05f      	b.n	8006b6a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ab8:	d101      	bne.n	8006abe <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
 8006abc:	e055      	b.n	8006b6a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_I2C_Mem_Write_IT+0x60>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e04e      	b.n	8006b6a <HAL_I2C_Mem_Write_IT+0xfe>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2221      	movs	r2, #33	@ 0x21
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2240      	movs	r2, #64	@ 0x40
 8006ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8bba      	ldrh	r2, [r7, #28]
 8006afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4a1d      	ldr	r2, [pc, #116]	@ (8006b74 <HAL_I2C_Mem_Write_IT+0x108>)
 8006b00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a1c      	ldr	r2, [pc, #112]	@ (8006b78 <HAL_I2C_Mem_Write_IT+0x10c>)
 8006b06:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8006b08:	897a      	ldrh	r2, [r7, #10]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d109      	bne.n	8006b28 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b14:	893b      	ldrh	r3, [r7, #8]
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b26:	e00b      	b.n	8006b40 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b28:	893b      	ldrh	r3, [r7, #8]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8006b36:	893b      	ldrh	r3, [r7, #8]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b40:	88fb      	ldrh	r3, [r7, #6]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	8979      	ldrh	r1, [r7, #10]
 8006b46:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <HAL_I2C_Mem_Write_IT+0x110>)
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f001 fc76 	bl	8008440 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f001 fca0 	bl	80084a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e000      	b.n	8006b6a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
  }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	ffff0000 	.word	0xffff0000
 8006b78:	08007045 	.word	0x08007045
 8006b7c:	80002000 	.word	0x80002000

08006b80 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	4608      	mov	r0, r1
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	817b      	strh	r3, [r7, #10]
 8006b92:	460b      	mov	r3, r1
 8006b94:	813b      	strh	r3, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d166      	bne.n	8006c74 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_I2C_Mem_Read_IT+0x32>
 8006bac:	8bbb      	ldrh	r3, [r7, #28]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d105      	bne.n	8006bbe <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bb8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e05b      	b.n	8006c76 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bcc:	d101      	bne.n	8006bd2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e051      	b.n	8006c76 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_I2C_Mem_Read_IT+0x60>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e04a      	b.n	8006c76 <HAL_I2C_Mem_Read_IT+0xf6>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2222      	movs	r2, #34	@ 0x22
 8006bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2240      	movs	r2, #64	@ 0x40
 8006bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8bba      	ldrh	r2, [r7, #28]
 8006c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006c80 <HAL_I2C_Mem_Read_IT+0x100>)
 8006c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a1c      	ldr	r2, [pc, #112]	@ (8006c84 <HAL_I2C_Mem_Read_IT+0x104>)
 8006c14:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8006c16:	897a      	ldrh	r2, [r7, #10]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d109      	bne.n	8006c36 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c22:	893b      	ldrh	r3, [r7, #8]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c32:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c34:	e00b      	b.n	8006c4e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c36:	893b      	ldrh	r3, [r7, #8]
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8006c44:	893b      	ldrh	r3, [r7, #8]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	8979      	ldrh	r1, [r7, #10]
 8006c54:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <HAL_I2C_Mem_Read_IT+0x108>)
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f001 fbf0 	bl	8008440 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c68:	2101      	movs	r1, #1
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f001 fc1a 	bl	80084a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e000      	b.n	8006c76 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	ffff0000 	.word	0xffff0000
 8006c84:	08007045 	.word	0x08007045
 8006c88:	80002000 	.word	0x80002000

08006c8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
  }
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00f      	beq.n	8006d02 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf0:	f043 0201 	orr.w	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d00:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00f      	beq.n	8006d2c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1a:	f043 0208 	orr.w	r2, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d2a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00f      	beq.n	8006d56 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d44:	f043 0202 	orr.w	r2, r3, #2
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d54:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 030b 	and.w	r3, r3, #11
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fa0f 	bl	800818c <I2C_ITError>
  }
}
 8006d6e:	bf00      	nop
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	460b      	mov	r3, r1
 8006da8:	70fb      	strb	r3, [r7, #3]
 8006daa:	4613      	mov	r3, r2
 8006dac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b088      	sub	sp, #32
 8006dfa:	af02      	add	r7, sp, #8
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <I2C_Master_ISR_IT+0x1e>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e113      	b.n	800703c <I2C_Master_ISR_IT+0x246>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d012      	beq.n	8006e4c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00d      	beq.n	8006e4c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2210      	movs	r2, #16
 8006e36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3c:	f043 0204 	orr.w	r2, r3, #4
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f001 fab8 	bl	80083ba <I2C_Flush_TXDR>
 8006e4a:	e0e4      	b.n	8007016 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d022      	beq.n	8006e9c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01d      	beq.n	8006e9c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f023 0304 	bic.w	r3, r3, #4
 8006e66:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e9a:	e0bc      	b.n	8007016 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d128      	bne.n	8006ef8 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d023      	beq.n	8006ef8 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01e      	beq.n	8006ef8 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80a8 	beq.w	8007016 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eca:	781a      	ldrb	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006ef6:	e08e      	b.n	8007016 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d05c      	beq.n	8006fbc <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d057      	beq.n	8006fbc <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d040      	beq.n	8006f98 <I2C_Master_ISR_IT+0x1a2>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d13c      	bne.n	8006f98 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f2a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2bff      	cmp	r3, #255	@ 0xff
 8006f34:	d90e      	bls.n	8006f54 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	22ff      	movs	r2, #255	@ 0xff
 8006f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	8a79      	ldrh	r1, [r7, #18]
 8006f44:	2300      	movs	r3, #0
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f001 fa77 	bl	8008440 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f52:	e032      	b.n	8006fba <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f66:	d00b      	beq.n	8006f80 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f6c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006f72:	8a79      	ldrh	r1, [r7, #18]
 8006f74:	2000      	movs	r0, #0
 8006f76:	9000      	str	r0, [sp, #0]
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f001 fa61 	bl	8008440 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f7e:	e01c      	b.n	8006fba <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	8a79      	ldrh	r1, [r7, #18]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f001 fa55 	bl	8008440 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f96:	e010      	b.n	8006fba <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fa6:	d003      	beq.n	8006fb0 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fdd6 	bl	8007b5a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fae:	e032      	b.n	8007016 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006fb0:	2140      	movs	r1, #64	@ 0x40
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f001 f8ea 	bl	800818c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fb8:	e02d      	b.n	8007016 <I2C_Master_ISR_IT+0x220>
 8006fba:	e02c      	b.n	8007016 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d027      	beq.n	8007016 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d022      	beq.n	8007016 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d119      	bne.n	800700e <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fe4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fe8:	d015      	beq.n	8007016 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ff2:	d108      	bne.n	8007006 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007002:	605a      	str	r2, [r3, #4]
 8007004:	e007      	b.n	8007016 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fda7 	bl	8007b5a <I2C_ITMasterSeqCplt>
 800700c:	e003      	b.n	8007016 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800700e:	2140      	movs	r1, #64	@ 0x40
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 f8bb 	bl	800818c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d008      	beq.n	8007032 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800702a:	6979      	ldr	r1, [r7, #20]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 fe2d 	bl	8007c8c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007050:	4b8d      	ldr	r3, [pc, #564]	@ (8007288 <I2C_Mem_ISR_IT+0x244>)
 8007052:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800705e:	2b01      	cmp	r3, #1
 8007060:	d101      	bne.n	8007066 <I2C_Mem_ISR_IT+0x22>
 8007062:	2302      	movs	r3, #2
 8007064:	e10c      	b.n	8007280 <I2C_Mem_ISR_IT+0x23c>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b00      	cmp	r3, #0
 8007076:	d012      	beq.n	800709e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2210      	movs	r2, #16
 8007088:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f043 0204 	orr.w	r2, r3, #4
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f001 f98f 	bl	80083ba <I2C_Flush_TXDR>
 800709c:	e0dd      	b.n	800725a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d022      	beq.n	80070ee <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01d      	beq.n	80070ee <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f023 0304 	bic.w	r3, r3, #4
 80070b8:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80070ec:	e0b5      	b.n	800725a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d02c      	beq.n	8007152 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d027      	beq.n	8007152 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d118      	bne.n	800713e <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800713c:	e08d      	b.n	800725a <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007146:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f04f 32ff 	mov.w	r2, #4294967295
 800714e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8007150:	e083      	b.n	800725a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007158:	2b00      	cmp	r3, #0
 800715a:	d03c      	beq.n	80071d6 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007162:	2b00      	cmp	r3, #0
 8007164:	d037      	beq.n	80071d6 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d02c      	beq.n	80071ca <I2C_Mem_ISR_IT+0x186>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d128      	bne.n	80071ca <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800717c:	b29b      	uxth	r3, r3
 800717e:	2bff      	cmp	r3, #255	@ 0xff
 8007180:	d910      	bls.n	80071a4 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	22ff      	movs	r2, #255	@ 0xff
 8007186:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800718c:	b299      	uxth	r1, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007192:	b2da      	uxtb	r2, r3
 8007194:	2300      	movs	r3, #0
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f001 f94f 	bl	8008440 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071a2:	e017      	b.n	80071d4 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071b2:	b299      	uxth	r1, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	2300      	movs	r3, #0
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f001 f93c 	bl	8008440 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071c8:	e004      	b.n	80071d4 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80071ca:	2140      	movs	r1, #64	@ 0x40
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 ffdd 	bl	800818c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071d2:	e042      	b.n	800725a <I2C_Mem_ISR_IT+0x216>
 80071d4:	e041      	b.n	800725a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d03c      	beq.n	800725a <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d037      	beq.n	800725a <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071ea:	2101      	movs	r1, #1
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f001 f9dd 	bl	80085ac <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80071f2:	2102      	movs	r1, #2
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 f955 	bl	80084a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b22      	cmp	r3, #34	@ 0x22
 8007204:	d101      	bne.n	800720a <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8007206:	4b21      	ldr	r3, [pc, #132]	@ (800728c <I2C_Mem_ISR_IT+0x248>)
 8007208:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800720e:	b29b      	uxth	r3, r3
 8007210:	2bff      	cmp	r3, #255	@ 0xff
 8007212:	d910      	bls.n	8007236 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	22ff      	movs	r2, #255	@ 0xff
 8007218:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800721e:	b299      	uxth	r1, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007224:	b2da      	uxtb	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f001 f906 	bl	8008440 <I2C_TransferConfig>
 8007234:	e011      	b.n	800725a <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007244:	b299      	uxth	r1, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800724a:	b2da      	uxtb	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f001 f8f3 	bl	8008440 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800726e:	6939      	ldr	r1, [r7, #16]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fd0b 	bl	8007c8c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	80002000 	.word	0x80002000
 800728c:	80002400 	.word	0x80002400

08007290 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <I2C_Slave_ISR_IT+0x24>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e0e2      	b.n	800747a <I2C_Slave_ISR_IT+0x1ea>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80072d0:	6939      	ldr	r1, [r7, #16]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fda2 	bl	8007e1c <I2C_ITSlaveCplt>
 80072d8:	e0ca      	b.n	8007470 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d04b      	beq.n	800737c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d046      	beq.n	800737c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d128      	bne.n	800734a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b28      	cmp	r3, #40	@ 0x28
 8007302:	d108      	bne.n	8007316 <I2C_Slave_ISR_IT+0x86>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800730a:	d104      	bne.n	8007316 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800730c:	6939      	ldr	r1, [r7, #16]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fee8 	bl	80080e4 <I2C_ITListenCplt>
 8007314:	e031      	b.n	800737a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b29      	cmp	r3, #41	@ 0x29
 8007320:	d10e      	bne.n	8007340 <I2C_Slave_ISR_IT+0xb0>
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007328:	d00a      	beq.n	8007340 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2210      	movs	r2, #16
 8007330:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f001 f841 	bl	80083ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 fc4b 	bl	8007bd4 <I2C_ITSlaveSeqCplt>
 800733e:	e01c      	b.n	800737a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2210      	movs	r2, #16
 8007346:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007348:	e08f      	b.n	800746a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2210      	movs	r2, #16
 8007350:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007356:	f043 0204 	orr.w	r2, r3, #4
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <I2C_Slave_ISR_IT+0xdc>
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800736a:	d17e      	bne.n	800746a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007370:	4619      	mov	r1, r3
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 ff0a 	bl	800818c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007378:	e077      	b.n	800746a <I2C_Slave_ISR_IT+0x1da>
 800737a:	e076      	b.n	800746a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d02f      	beq.n	80073e6 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800738c:	2b00      	cmp	r3, #0
 800738e:	d02a      	beq.n	80073e6 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d018      	beq.n	80073cc <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a4:	b2d2      	uxtb	r2, r2
 80073a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d14b      	bne.n	800746e <I2C_Slave_ISR_IT+0x1de>
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80073dc:	d047      	beq.n	800746e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 fbf8 	bl	8007bd4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80073e4:	e043      	b.n	800746e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d009      	beq.n	8007404 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80073fa:	6939      	ldr	r1, [r7, #16]
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fb28 	bl	8007a52 <I2C_ITAddrCplt>
 8007402:	e035      	b.n	8007470 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d030      	beq.n	8007470 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007414:	2b00      	cmp	r3, #0
 8007416:	d02b      	beq.n	8007470 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d018      	beq.n	8007454 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007426:	781a      	ldrb	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007452:	e00d      	b.n	8007470 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800745a:	d002      	beq.n	8007462 <I2C_Slave_ISR_IT+0x1d2>
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fbb6 	bl	8007bd4 <I2C_ITSlaveSeqCplt>
 8007468:	e002      	b.n	8007470 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800746a:	bf00      	nop
 800746c:	e000      	b.n	8007470 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800746e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b088      	sub	sp, #32
 8007486:	af02      	add	r7, sp, #8
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <I2C_Master_ISR_DMA+0x1a>
 8007498:	2302      	movs	r3, #2
 800749a:	e0d9      	b.n	8007650 <I2C_Master_ISR_DMA+0x1ce>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0310 	and.w	r3, r3, #16
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d016      	beq.n	80074dc <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d011      	beq.n	80074dc <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2210      	movs	r2, #16
 80074be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c4:	f043 0204 	orr.w	r2, r3, #4
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80074cc:	2120      	movs	r1, #32
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 ffe8 	bl	80084a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 ff70 	bl	80083ba <I2C_Flush_TXDR>
 80074da:	e0b4      	b.n	8007646 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d071      	beq.n	80075ca <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d06c      	beq.n	80075ca <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074fe:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d04e      	beq.n	80075a8 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	b29b      	uxth	r3, r3
 8007512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007516:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	2bff      	cmp	r3, #255	@ 0xff
 8007520:	d906      	bls.n	8007530 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	22ff      	movs	r2, #255	@ 0xff
 8007526:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007528:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	e010      	b.n	8007552 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007542:	d003      	beq.n	800754c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	e002      	b.n	8007552 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800754c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007550:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007556:	b2da      	uxtb	r2, r3
 8007558:	8a79      	ldrh	r1, [r7, #18]
 800755a:	2300      	movs	r3, #0
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 ff6d 	bl	8008440 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b22      	cmp	r3, #34	@ 0x22
 8007582:	d108      	bne.n	8007596 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007592:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007594:	e057      	b.n	8007646 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80075a6:	e04e      	b.n	8007646 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075b6:	d003      	beq.n	80075c0 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 face 	bl	8007b5a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80075be:	e042      	b.n	8007646 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80075c0:	2140      	movs	r1, #64	@ 0x40
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fde2 	bl	800818c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80075c8:	e03d      	b.n	8007646 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d028      	beq.n	8007626 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d023      	beq.n	8007626 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d119      	bne.n	800761c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075f6:	d025      	beq.n	8007644 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007600:	d108      	bne.n	8007614 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007610:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007612:	e017      	b.n	8007644 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 faa0 	bl	8007b5a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800761a:	e013      	b.n	8007644 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800761c:	2140      	movs	r1, #64	@ 0x40
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 fdb4 	bl	800818c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007624:	e00e      	b.n	8007644 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 fb25 	bl	8007c8c <I2C_ITMasterCplt>
 8007642:	e000      	b.n	8007646 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8007644:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007664:	4b8d      	ldr	r3, [pc, #564]	@ (800789c <I2C_Mem_ISR_DMA+0x244>)
 8007666:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800766e:	2b01      	cmp	r3, #1
 8007670:	d101      	bne.n	8007676 <I2C_Mem_ISR_DMA+0x1e>
 8007672:	2302      	movs	r3, #2
 8007674:	e10e      	b.n	8007894 <I2C_Mem_ISR_DMA+0x23c>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	d016      	beq.n	80076b6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800768e:	2b00      	cmp	r3, #0
 8007690:	d011      	beq.n	80076b6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2210      	movs	r2, #16
 8007698:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800769e:	f043 0204 	orr.w	r2, r3, #4
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80076a6:	2120      	movs	r1, #32
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fefb 	bl	80084a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fe83 	bl	80083ba <I2C_Flush_TXDR>
 80076b4:	e0e9      	b.n	800788a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00e      	beq.n	80076de <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80076d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f04f 32ff 	mov.w	r2, #4294967295
 80076da:	651a      	str	r2, [r3, #80]	@ 0x50
 80076dc:	e0d5      	b.n	800788a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d05f      	beq.n	80077a8 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d05a      	beq.n	80077a8 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80076f2:	2101      	movs	r1, #1
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 ff59 	bl	80085ac <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80076fa:	2110      	movs	r1, #16
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fed1 	bl	80084a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d048      	beq.n	800779e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007710:	b29b      	uxth	r3, r3
 8007712:	2bff      	cmp	r3, #255	@ 0xff
 8007714:	d910      	bls.n	8007738 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	22ff      	movs	r2, #255	@ 0xff
 800771a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007720:	b299      	uxth	r1, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007726:	b2da      	uxtb	r2, r3
 8007728:	2300      	movs	r3, #0
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 fe85 	bl	8008440 <I2C_TransferConfig>
 8007736:	e011      	b.n	800775c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007746:	b299      	uxth	r1, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800774c:	b2da      	uxtb	r2, r3
 800774e:	2300      	movs	r3, #0
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 fe72 	bl	8008440 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b22      	cmp	r3, #34	@ 0x22
 8007778:	d108      	bne.n	800778c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007788:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800778a:	e07e      	b.n	800788a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800779a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800779c:	e075      	b.n	800788a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800779e:	2140      	movs	r1, #64	@ 0x40
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fcf3 	bl	800818c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80077a6:	e070      	b.n	800788a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d05d      	beq.n	800786e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d058      	beq.n	800786e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80077bc:	2101      	movs	r1, #1
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 fef4 	bl	80085ac <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80077c4:	2110      	movs	r1, #16
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 fe6c 	bl	80084a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b22      	cmp	r3, #34	@ 0x22
 80077d6:	d101      	bne.n	80077dc <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80077d8:	4b31      	ldr	r3, [pc, #196]	@ (80078a0 <I2C_Mem_ISR_DMA+0x248>)
 80077da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2bff      	cmp	r3, #255	@ 0xff
 80077e4:	d910      	bls.n	8007808 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	22ff      	movs	r2, #255	@ 0xff
 80077ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f0:	b299      	uxth	r1, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fe1d 	bl	8008440 <I2C_TransferConfig>
 8007806:	e011      	b.n	800782c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007816:	b299      	uxth	r1, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800781c:	b2da      	uxtb	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fe0a 	bl	8008440 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b22      	cmp	r3, #34	@ 0x22
 8007848:	d108      	bne.n	800785c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007858:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800785a:	e016      	b.n	800788a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800786a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800786c:	e00d      	b.n	800788a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fa01 	bl	8007c8c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	80002000 	.word	0x80002000
 80078a0:	80002400 	.word	0x80002400

080078a4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <I2C_Slave_ISR_DMA+0x24>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e0c0      	b.n	8007a4a <I2C_Slave_ISR_DMA+0x1a6>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d004      	beq.n	80078ee <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 fa98 	bl	8007e1c <I2C_ITSlaveCplt>
 80078ec:	e0a8      	b.n	8007a40 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8095 	beq.w	8007a24 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 808f 	beq.w	8007a24 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007916:	2b00      	cmp	r3, #0
 8007918:	d07d      	beq.n	8007a16 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00c      	beq.n	800793c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8007938:	2301      	movs	r3, #1
 800793a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00c      	beq.n	800795e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800795a:	2301      	movs	r3, #1
 800795c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d128      	bne.n	80079b6 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b28      	cmp	r3, #40	@ 0x28
 800796e:	d108      	bne.n	8007982 <I2C_Slave_ISR_DMA+0xde>
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007976:	d104      	bne.n	8007982 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fbb2 	bl	80080e4 <I2C_ITListenCplt>
 8007980:	e048      	b.n	8007a14 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b29      	cmp	r3, #41	@ 0x29
 800798c:	d10e      	bne.n	80079ac <I2C_Slave_ISR_DMA+0x108>
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007994:	d00a      	beq.n	80079ac <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2210      	movs	r2, #16
 800799c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 fd0b 	bl	80083ba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 f915 	bl	8007bd4 <I2C_ITSlaveSeqCplt>
 80079aa:	e033      	b.n	8007a14 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2210      	movs	r2, #16
 80079b2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80079b4:	e034      	b.n	8007a20 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2210      	movs	r2, #16
 80079bc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c2:	f043 0204 	orr.w	r2, r3, #4
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079d0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <I2C_Slave_ISR_DMA+0x13c>
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079de:	d11f      	bne.n	8007a20 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	2b21      	cmp	r3, #33	@ 0x21
 80079e4:	d002      	beq.n	80079ec <I2C_Slave_ISR_DMA+0x148>
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	2b29      	cmp	r3, #41	@ 0x29
 80079ea:	d103      	bne.n	80079f4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2221      	movs	r2, #33	@ 0x21
 80079f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80079f2:	e008      	b.n	8007a06 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	2b22      	cmp	r3, #34	@ 0x22
 80079f8:	d002      	beq.n	8007a00 <I2C_Slave_ISR_DMA+0x15c>
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80079fe:	d102      	bne.n	8007a06 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2222      	movs	r2, #34	@ 0x22
 8007a04:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fbbd 	bl	800818c <I2C_ITError>
      if (treatdmanack == 1U)
 8007a12:	e005      	b.n	8007a20 <I2C_Slave_ISR_DMA+0x17c>
 8007a14:	e004      	b.n	8007a20 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2210      	movs	r2, #16
 8007a1c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007a1e:	e00f      	b.n	8007a40 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8007a20:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007a22:	e00d      	b.n	8007a40 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f003 0308 	and.w	r3, r3, #8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d008      	beq.n	8007a40 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f809 	bl	8007a52 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a68:	2b28      	cmp	r3, #40	@ 0x28
 8007a6a:	d16a      	bne.n	8007b42 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	0c1b      	lsrs	r3, r3, #16
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	0c1b      	lsrs	r3, r3, #16
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007a8a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a98:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007aa6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d138      	bne.n	8007b22 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007ab0:	897b      	ldrh	r3, [r7, #10]
 8007ab2:	09db      	lsrs	r3, r3, #7
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	89bb      	ldrh	r3, [r7, #12]
 8007ab8:	4053      	eors	r3, r2
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f003 0306 	and.w	r3, r3, #6
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d11c      	bne.n	8007afe <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007ac4:	897b      	ldrh	r3, [r7, #10]
 8007ac6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d13b      	bne.n	8007b52 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007af0:	89ba      	ldrh	r2, [r7, #12]
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff f951 	bl	8006d9e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007afc:	e029      	b.n	8007b52 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007afe:	893b      	ldrh	r3, [r7, #8]
 8007b00:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007b02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fd50 	bl	80085ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007b14:	89ba      	ldrh	r2, [r7, #12]
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff f93f 	bl	8006d9e <HAL_I2C_AddrCallback>
}
 8007b20:	e017      	b.n	8007b52 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007b22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fd40 	bl	80085ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007b34:	89ba      	ldrh	r2, [r7, #12]
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff f92f 	bl	8006d9e <HAL_I2C_AddrCallback>
}
 8007b40:	e007      	b.n	8007b52 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2208      	movs	r2, #8
 8007b48:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b21      	cmp	r3, #33	@ 0x21
 8007b74:	d115      	bne.n	8007ba2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2211      	movs	r2, #17
 8007b82:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fd0d 	bl	80085ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7fa f8f2 	bl	8001d84 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ba0:	e014      	b.n	8007bcc <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2212      	movs	r2, #18
 8007bae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007bb6:	2102      	movs	r1, #2
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fcf7 	bl	80085ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fa f8ea 	bl	8001da0 <HAL_I2C_MasterRxCpltCallback>
}
 8007bcc:	bf00      	nop
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d008      	beq.n	8007c08 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e00c      	b.n	8007c22 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b29      	cmp	r3, #41	@ 0x29
 8007c2c:	d112      	bne.n	8007c54 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2228      	movs	r2, #40	@ 0x28
 8007c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2221      	movs	r2, #33	@ 0x21
 8007c3a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fcb4 	bl	80085ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff f892 	bl	8006d76 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c52:	e017      	b.n	8007c84 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c5e:	d111      	bne.n	8007c84 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2228      	movs	r2, #40	@ 0x28
 8007c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2222      	movs	r2, #34	@ 0x22
 8007c6c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007c6e:	2102      	movs	r1, #2
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fc9b 	bl	80085ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff f883 	bl	8006d8a <HAL_I2C_SlaveRxCpltCallback>
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b21      	cmp	r3, #33	@ 0x21
 8007cac:	d107      	bne.n	8007cbe <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007cae:	2101      	movs	r1, #1
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fc7b 	bl	80085ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2211      	movs	r2, #17
 8007cba:	631a      	str	r2, [r3, #48]	@ 0x30
 8007cbc:	e00c      	b.n	8007cd8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b22      	cmp	r3, #34	@ 0x22
 8007cc8:	d106      	bne.n	8007cd8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007cca:	2102      	movs	r1, #2
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc6d 	bl	80085ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2212      	movs	r2, #18
 8007cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6859      	ldr	r1, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8007e14 <I2C_ITMasterCplt+0x188>)
 8007ce4:	400b      	ands	r3, r1
 8007ce6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a49      	ldr	r2, [pc, #292]	@ (8007e18 <I2C_ITMasterCplt+0x18c>)
 8007cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f003 0310 	and.w	r3, r3, #16
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2210      	movs	r2, #16
 8007d04:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d0a:	f043 0204 	orr.w	r2, r3, #4
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b60      	cmp	r3, #96	@ 0x60
 8007d1c:	d10a      	bne.n	8007d34 <I2C_ITMasterCplt+0xa8>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007d32:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fb40 	bl	80083ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d3e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b60      	cmp	r3, #96	@ 0x60
 8007d4a:	d002      	beq.n	8007d52 <I2C_ITMasterCplt+0xc6>
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d006      	beq.n	8007d60 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fa17 	bl	800818c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d5e:	e054      	b.n	8007e0a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b21      	cmp	r3, #33	@ 0x21
 8007d6a:	d124      	bne.n	8007db6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b40      	cmp	r3, #64	@ 0x40
 8007d84:	d10b      	bne.n	8007d9e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7fa f81e 	bl	8001dd8 <HAL_I2C_MemTxCpltCallback>
}
 8007d9c:	e035      	b.n	8007e0a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7f9 ffe8 	bl	8001d84 <HAL_I2C_MasterTxCpltCallback>
}
 8007db4:	e029      	b.n	8007e0a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b22      	cmp	r3, #34	@ 0x22
 8007dc0:	d123      	bne.n	8007e0a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b40      	cmp	r3, #64	@ 0x40
 8007dda:	d10b      	bne.n	8007df4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7f9 ffe5 	bl	8001dbc <HAL_I2C_MemRxCpltCallback>
}
 8007df2:	e00a      	b.n	8007e0a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7f9 ffcb 	bl	8001da0 <HAL_I2C_MasterRxCpltCallback>
}
 8007e0a:	bf00      	nop
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	fe00e800 	.word	0xfe00e800
 8007e18:	ffff0000 	.word	0xffff0000

08007e1c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e36:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e3e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2220      	movs	r2, #32
 8007e46:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	2b21      	cmp	r3, #33	@ 0x21
 8007e4c:	d002      	beq.n	8007e54 <I2C_ITSlaveCplt+0x38>
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	2b29      	cmp	r3, #41	@ 0x29
 8007e52:	d108      	bne.n	8007e66 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007e54:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fba7 	bl	80085ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2221      	movs	r2, #33	@ 0x21
 8007e62:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e64:	e019      	b.n	8007e9a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	2b22      	cmp	r3, #34	@ 0x22
 8007e6a:	d002      	beq.n	8007e72 <I2C_ITSlaveCplt+0x56>
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e70:	d108      	bne.n	8007e84 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007e72:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fb98 	bl	80085ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2222      	movs	r2, #34	@ 0x22
 8007e80:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e82:	e00a      	b.n	8007e9a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	2b28      	cmp	r3, #40	@ 0x28
 8007e88:	d107      	bne.n	8007e9a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007e8a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fb8c 	bl	80085ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ea8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6859      	ldr	r1, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	4b89      	ldr	r3, [pc, #548]	@ (80080dc <I2C_ITSlaveCplt+0x2c0>)
 8007eb6:	400b      	ands	r3, r1
 8007eb8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa7d 	bl	80083ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d013      	beq.n	8007ef2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ed8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01f      	beq.n	8007f22 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ef0:	e017      	b.n	8007f22 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d012      	beq.n	8007f22 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f0a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d006      	beq.n	8007f22 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d020      	beq.n	8007f6e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f023 0304 	bic.w	r3, r3, #4
 8007f32:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00c      	beq.n	8007f6e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d005      	beq.n	8007f84 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7c:	f043 0204 	orr.w	r2, r3, #4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f003 0310 	and.w	r3, r3, #16
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d049      	beq.n	8008022 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d044      	beq.n	8008022 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d128      	bne.n	8007ff4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b28      	cmp	r3, #40	@ 0x28
 8007fac:	d108      	bne.n	8007fc0 <I2C_ITSlaveCplt+0x1a4>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fb4:	d104      	bne.n	8007fc0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007fb6:	6979      	ldr	r1, [r7, #20]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f893 	bl	80080e4 <I2C_ITListenCplt>
 8007fbe:	e030      	b.n	8008022 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b29      	cmp	r3, #41	@ 0x29
 8007fca:	d10e      	bne.n	8007fea <I2C_ITSlaveCplt+0x1ce>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fd2:	d00a      	beq.n	8007fea <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2210      	movs	r2, #16
 8007fda:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f9ec 	bl	80083ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff fdf6 	bl	8007bd4 <I2C_ITSlaveSeqCplt>
 8007fe8:	e01b      	b.n	8008022 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2210      	movs	r2, #16
 8007ff0:	61da      	str	r2, [r3, #28]
 8007ff2:	e016      	b.n	8008022 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2210      	movs	r2, #16
 8007ffa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008000:	f043 0204 	orr.w	r2, r3, #4
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <I2C_ITSlaveCplt+0x1fa>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008014:	d105      	bne.n	8008022 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f8b5 	bl	800818c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008034:	2b00      	cmp	r3, #0
 8008036:	d010      	beq.n	800805a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8a4 	bl	800818c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b28      	cmp	r3, #40	@ 0x28
 800804e:	d141      	bne.n	80080d4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008050:	6979      	ldr	r1, [r7, #20]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f846 	bl	80080e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008058:	e03c      	b.n	80080d4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008062:	d014      	beq.n	800808e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff fdb5 	bl	8007bd4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a1c      	ldr	r2, [pc, #112]	@ (80080e0 <I2C_ITSlaveCplt+0x2c4>)
 800806e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7fe fe97 	bl	8006dba <HAL_I2C_ListenCpltCallback>
}
 800808c:	e022      	b.n	80080d4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b22      	cmp	r3, #34	@ 0x22
 8008098:	d10e      	bne.n	80080b8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7fe fe6a 	bl	8006d8a <HAL_I2C_SlaveRxCpltCallback>
}
 80080b6:	e00d      	b.n	80080d4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fe fe51 	bl	8006d76 <HAL_I2C_SlaveTxCpltCallback>
}
 80080d4:	bf00      	nop
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	fe00e800 	.word	0xfe00e800
 80080e0:	ffff0000 	.word	0xffff0000

080080e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a25      	ldr	r2, [pc, #148]	@ (8008188 <I2C_ITListenCplt+0xa4>)
 80080f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d022      	beq.n	8008160 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d012      	beq.n	8008160 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008158:	f043 0204 	orr.w	r2, r3, #4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008160:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fa21 	bl	80085ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2210      	movs	r2, #16
 8008170:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fe fe1d 	bl	8006dba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	ffff0000 	.word	0xffff0000

0800818c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800819c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a6d      	ldr	r2, [pc, #436]	@ (8008360 <I2C_ITError+0x1d4>)
 80081aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	2b28      	cmp	r3, #40	@ 0x28
 80081c2:	d005      	beq.n	80081d0 <I2C_ITError+0x44>
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	2b29      	cmp	r3, #41	@ 0x29
 80081c8:	d002      	beq.n	80081d0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ce:	d10b      	bne.n	80081e8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80081d0:	2103      	movs	r1, #3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f9ea 	bl	80085ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2228      	movs	r2, #40	@ 0x28
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a60      	ldr	r2, [pc, #384]	@ (8008364 <I2C_ITError+0x1d8>)
 80081e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80081e6:	e030      	b.n	800824a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80081e8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f9dd 	bl	80085ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f8e1 	bl	80083ba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b60      	cmp	r3, #96	@ 0x60
 8008202:	d01f      	beq.n	8008244 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2220      	movs	r2, #32
 8008208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b20      	cmp	r3, #32
 8008218:	d114      	bne.n	8008244 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b10      	cmp	r3, #16
 8008226:	d109      	bne.n	800823c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2210      	movs	r2, #16
 800822e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008234:	f043 0204 	orr.w	r2, r3, #4
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2220      	movs	r2, #32
 8008242:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008254:	2b00      	cmp	r3, #0
 8008256:	d039      	beq.n	80082cc <I2C_ITError+0x140>
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2b11      	cmp	r3, #17
 800825c:	d002      	beq.n	8008264 <I2C_ITError+0xd8>
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b21      	cmp	r3, #33	@ 0x21
 8008262:	d133      	bne.n	80082cc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800826e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008272:	d107      	bne.n	8008284 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008282:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008288:	4618      	mov	r0, r3
 800828a:	f7fd fbf8 	bl	8005a7e <HAL_DMA_GetState>
 800828e:	4603      	mov	r3, r0
 8008290:	2b01      	cmp	r3, #1
 8008292:	d017      	beq.n	80082c4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008298:	4a33      	ldr	r2, [pc, #204]	@ (8008368 <I2C_ITError+0x1dc>)
 800829a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fd fad2 	bl	8005852 <HAL_DMA_Abort_IT>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d04d      	beq.n	8008350 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80082be:	4610      	mov	r0, r2
 80082c0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082c2:	e045      	b.n	8008350 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f851 	bl	800836c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082ca:	e041      	b.n	8008350 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d039      	beq.n	8008348 <I2C_ITError+0x1bc>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b12      	cmp	r3, #18
 80082d8:	d002      	beq.n	80082e0 <I2C_ITError+0x154>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b22      	cmp	r3, #34	@ 0x22
 80082de:	d133      	bne.n	8008348 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ee:	d107      	bne.n	8008300 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008304:	4618      	mov	r0, r3
 8008306:	f7fd fbba 	bl	8005a7e <HAL_DMA_GetState>
 800830a:	4603      	mov	r3, r0
 800830c:	2b01      	cmp	r3, #1
 800830e:	d017      	beq.n	8008340 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	4a14      	ldr	r2, [pc, #80]	@ (8008368 <I2C_ITError+0x1dc>)
 8008316:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008324:	4618      	mov	r0, r3
 8008326:	f7fd fa94 	bl	8005852 <HAL_DMA_Abort_IT>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d011      	beq.n	8008354 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800833a:	4610      	mov	r0, r2
 800833c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800833e:	e009      	b.n	8008354 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f813 	bl	800836c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008346:	e005      	b.n	8008354 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f80f 	bl	800836c <I2C_TreatErrorCallback>
  }
}
 800834e:	e002      	b.n	8008356 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008350:	bf00      	nop
 8008352:	e000      	b.n	8008356 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008354:	bf00      	nop
}
 8008356:	bf00      	nop
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	ffff0000 	.word	0xffff0000
 8008364:	08007291 	.word	0x08007291
 8008368:	08008403 	.word	0x08008403

0800836c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b60      	cmp	r3, #96	@ 0x60
 800837e:	d10e      	bne.n	800839e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fe fd23 	bl	8006de2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800839c:	e009      	b.n	80083b2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7fe fd0e 	bl	8006dce <HAL_I2C_ErrorCallback>
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d103      	bne.n	80083d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2200      	movs	r2, #0
 80083d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d007      	beq.n	80083f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	699a      	ldr	r2, [r3, #24]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f042 0201 	orr.w	r2, r2, #1
 80083f4:	619a      	str	r2, [r3, #24]
  }
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841c:	2200      	movs	r2, #0
 800841e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800842c:	2200      	movs	r2, #0
 800842e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f7ff ff9b 	bl	800836c <I2C_TreatErrorCallback>
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	817b      	strh	r3, [r7, #10]
 800844e:	4613      	mov	r3, r2
 8008450:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008452:	897b      	ldrh	r3, [r7, #10]
 8008454:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008458:	7a7b      	ldrb	r3, [r7, #9]
 800845a:	041b      	lsls	r3, r3, #16
 800845c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008460:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	4313      	orrs	r3, r2
 800846a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800846e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	0d5b      	lsrs	r3, r3, #21
 800847a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800847e:	4b08      	ldr	r3, [pc, #32]	@ (80084a0 <I2C_TransferConfig+0x60>)
 8008480:	430b      	orrs	r3, r1
 8008482:	43db      	mvns	r3, r3
 8008484:	ea02 0103 	and.w	r1, r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	430a      	orrs	r2, r1
 8008490:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	03ff63ff 	.word	0x03ff63ff

080084a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084b8:	4a39      	ldr	r2, [pc, #228]	@ (80085a0 <I2C_Enable_IRQ+0xfc>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d032      	beq.n	8008524 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80084c2:	4a38      	ldr	r2, [pc, #224]	@ (80085a4 <I2C_Enable_IRQ+0x100>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d02d      	beq.n	8008524 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80084cc:	4a36      	ldr	r2, [pc, #216]	@ (80085a8 <I2C_Enable_IRQ+0x104>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d028      	beq.n	8008524 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80084d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da03      	bge.n	80084e2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80084e0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80084e2:	887b      	ldrh	r3, [r7, #2]
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80084f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80084f4:	887b      	ldrh	r3, [r7, #2]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008504:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008506:	887b      	ldrh	r3, [r7, #2]
 8008508:	2b10      	cmp	r3, #16
 800850a:	d103      	bne.n	8008514 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008512:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008514:	887b      	ldrh	r3, [r7, #2]
 8008516:	2b20      	cmp	r3, #32
 8008518:	d133      	bne.n	8008582 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f043 0320 	orr.w	r3, r3, #32
 8008520:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008522:	e02e      	b.n	8008582 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008524:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008528:	2b00      	cmp	r3, #0
 800852a:	da03      	bge.n	8008534 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008532:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008534:	887b      	ldrh	r3, [r7, #2]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008544:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008546:	887b      	ldrh	r3, [r7, #2]
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008556:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008558:	887b      	ldrh	r3, [r7, #2]
 800855a:	2b10      	cmp	r3, #16
 800855c:	d103      	bne.n	8008566 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008564:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008566:	887b      	ldrh	r3, [r7, #2]
 8008568:	2b20      	cmp	r3, #32
 800856a:	d103      	bne.n	8008574 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008572:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008574:	887b      	ldrh	r3, [r7, #2]
 8008576:	2b40      	cmp	r3, #64	@ 0x40
 8008578:	d103      	bne.n	8008582 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008580:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6819      	ldr	r1, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	430a      	orrs	r2, r1
 8008590:	601a      	str	r2, [r3, #0]
}
 8008592:	bf00      	nop
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	08007483 	.word	0x08007483
 80085a4:	080078a5 	.word	0x080078a5
 80085a8:	08007659 	.word	0x08007659

080085ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80085bc:	887b      	ldrh	r3, [r7, #2]
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00f      	beq.n	80085e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80085cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085da:	2b28      	cmp	r3, #40	@ 0x28
 80085dc:	d003      	beq.n	80085e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80085e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00f      	beq.n	8008610 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80085f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008604:	2b28      	cmp	r3, #40	@ 0x28
 8008606:	d003      	beq.n	8008610 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800860e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008610:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008614:	2b00      	cmp	r3, #0
 8008616:	da03      	bge.n	8008620 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800861e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008620:	887b      	ldrh	r3, [r7, #2]
 8008622:	2b10      	cmp	r3, #16
 8008624:	d103      	bne.n	800862e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800862c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800862e:	887b      	ldrh	r3, [r7, #2]
 8008630:	2b20      	cmp	r3, #32
 8008632:	d103      	bne.n	800863c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f043 0320 	orr.w	r3, r3, #32
 800863a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800863c:	887b      	ldrh	r3, [r7, #2]
 800863e:	2b40      	cmp	r3, #64	@ 0x40
 8008640:	d103      	bne.n	800864a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008648:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6819      	ldr	r1, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	43da      	mvns	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	400a      	ands	r2, r1
 800865a:	601a      	str	r2, [r3, #0]
}
 800865c:	bf00      	nop
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b20      	cmp	r3, #32
 800867c:	d138      	bne.n	80086f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008684:	2b01      	cmp	r3, #1
 8008686:	d101      	bne.n	800868c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008688:	2302      	movs	r3, #2
 800868a:	e032      	b.n	80086f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2224      	movs	r2, #36	@ 0x24
 8008698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 0201 	bic.w	r2, r2, #1
 80086aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6819      	ldr	r1, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e000      	b.n	80086f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80086f0:	2302      	movs	r3, #2
  }
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b20      	cmp	r3, #32
 8008712:	d139      	bne.n	8008788 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800871e:	2302      	movs	r3, #2
 8008720:	e033      	b.n	800878a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2224      	movs	r2, #36	@ 0x24
 800872e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0201 	bic.w	r2, r2, #1
 8008740:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008750:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	021b      	lsls	r3, r3, #8
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2220      	movs	r2, #32
 8008778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	e000      	b.n	800878a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008788:	2302      	movs	r3, #2
  }
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
	...

08008798 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d141      	bne.n	800882a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087a6:	4b4b      	ldr	r3, [pc, #300]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b2:	d131      	bne.n	8008818 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087b4:	4b47      	ldr	r3, [pc, #284]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ba:	4a46      	ldr	r2, [pc, #280]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087c4:	4b43      	ldr	r3, [pc, #268]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087cc:	4a41      	ldr	r2, [pc, #260]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087d4:	4b40      	ldr	r3, [pc, #256]	@ (80088d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2232      	movs	r2, #50	@ 0x32
 80087da:	fb02 f303 	mul.w	r3, r2, r3
 80087de:	4a3f      	ldr	r2, [pc, #252]	@ (80088dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087e0:	fba2 2303 	umull	r2, r3, r2, r3
 80087e4:	0c9b      	lsrs	r3, r3, #18
 80087e6:	3301      	adds	r3, #1
 80087e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087ea:	e002      	b.n	80087f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087f2:	4b38      	ldr	r3, [pc, #224]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087fe:	d102      	bne.n	8008806 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f2      	bne.n	80087ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008806:	4b33      	ldr	r3, [pc, #204]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800880e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008812:	d158      	bne.n	80088c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e057      	b.n	80088c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008818:	4b2e      	ldr	r3, [pc, #184]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800881a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800881e:	4a2d      	ldr	r2, [pc, #180]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008824:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008828:	e04d      	b.n	80088c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008830:	d141      	bne.n	80088b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008832:	4b28      	ldr	r3, [pc, #160]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800883a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800883e:	d131      	bne.n	80088a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008840:	4b24      	ldr	r3, [pc, #144]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008846:	4a23      	ldr	r2, [pc, #140]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800884c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008850:	4b20      	ldr	r3, [pc, #128]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008858:	4a1e      	ldr	r2, [pc, #120]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800885a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800885e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008860:	4b1d      	ldr	r3, [pc, #116]	@ (80088d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2232      	movs	r2, #50	@ 0x32
 8008866:	fb02 f303 	mul.w	r3, r2, r3
 800886a:	4a1c      	ldr	r2, [pc, #112]	@ (80088dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800886c:	fba2 2303 	umull	r2, r3, r2, r3
 8008870:	0c9b      	lsrs	r3, r3, #18
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008876:	e002      	b.n	800887e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3b01      	subs	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800887e:	4b15      	ldr	r3, [pc, #84]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800888a:	d102      	bne.n	8008892 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1f2      	bne.n	8008878 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008892:	4b10      	ldr	r3, [pc, #64]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800889a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800889e:	d112      	bne.n	80088c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e011      	b.n	80088c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088a4:	4b0b      	ldr	r3, [pc, #44]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088aa:	4a0a      	ldr	r2, [pc, #40]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80088b4:	e007      	b.n	80088c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80088b6:	4b07      	ldr	r3, [pc, #28]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80088be:	4a05      	ldr	r2, [pc, #20]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80088c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	40007000 	.word	0x40007000
 80088d8:	20000000 	.word	0x20000000
 80088dc:	431bde83 	.word	0x431bde83

080088e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80088e4:	4b05      	ldr	r3, [pc, #20]	@ (80088fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	4a04      	ldr	r2, [pc, #16]	@ (80088fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80088ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80088ee:	6093      	str	r3, [r2, #8]
}
 80088f0:	bf00      	nop
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40007000 	.word	0x40007000

08008900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e2fe      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d075      	beq.n	8008a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800891e:	4b97      	ldr	r3, [pc, #604]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f003 030c 	and.w	r3, r3, #12
 8008926:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008928:	4b94      	ldr	r3, [pc, #592]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f003 0303 	and.w	r3, r3, #3
 8008930:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b0c      	cmp	r3, #12
 8008936:	d102      	bne.n	800893e <HAL_RCC_OscConfig+0x3e>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b03      	cmp	r3, #3
 800893c:	d002      	beq.n	8008944 <HAL_RCC_OscConfig+0x44>
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b08      	cmp	r3, #8
 8008942:	d10b      	bne.n	800895c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008944:	4b8d      	ldr	r3, [pc, #564]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d05b      	beq.n	8008a08 <HAL_RCC_OscConfig+0x108>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d157      	bne.n	8008a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e2d9      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008964:	d106      	bne.n	8008974 <HAL_RCC_OscConfig+0x74>
 8008966:	4b85      	ldr	r3, [pc, #532]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a84      	ldr	r2, [pc, #528]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 800896c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	e01d      	b.n	80089b0 <HAL_RCC_OscConfig+0xb0>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800897c:	d10c      	bne.n	8008998 <HAL_RCC_OscConfig+0x98>
 800897e:	4b7f      	ldr	r3, [pc, #508]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a7e      	ldr	r2, [pc, #504]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	4b7c      	ldr	r3, [pc, #496]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a7b      	ldr	r2, [pc, #492]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	e00b      	b.n	80089b0 <HAL_RCC_OscConfig+0xb0>
 8008998:	4b78      	ldr	r3, [pc, #480]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a77      	ldr	r2, [pc, #476]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 800899e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089a2:	6013      	str	r3, [r2, #0]
 80089a4:	4b75      	ldr	r3, [pc, #468]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a74      	ldr	r2, [pc, #464]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 80089aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d013      	beq.n	80089e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b8:	f7fa fdec 	bl	8003594 <HAL_GetTick>
 80089bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089be:	e008      	b.n	80089d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089c0:	f7fa fde8 	bl	8003594 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b64      	cmp	r3, #100	@ 0x64
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e29e      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089d2:	4b6a      	ldr	r3, [pc, #424]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f0      	beq.n	80089c0 <HAL_RCC_OscConfig+0xc0>
 80089de:	e014      	b.n	8008a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e0:	f7fa fdd8 	bl	8003594 <HAL_GetTick>
 80089e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089e8:	f7fa fdd4 	bl	8003594 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b64      	cmp	r3, #100	@ 0x64
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e28a      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089fa:	4b60      	ldr	r3, [pc, #384]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f0      	bne.n	80089e8 <HAL_RCC_OscConfig+0xe8>
 8008a06:	e000      	b.n	8008a0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d075      	beq.n	8008b02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a16:	4b59      	ldr	r3, [pc, #356]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 030c 	and.w	r3, r3, #12
 8008a1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a20:	4b56      	ldr	r3, [pc, #344]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	2b0c      	cmp	r3, #12
 8008a2e:	d102      	bne.n	8008a36 <HAL_RCC_OscConfig+0x136>
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d002      	beq.n	8008a3c <HAL_RCC_OscConfig+0x13c>
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d11f      	bne.n	8008a7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <HAL_RCC_OscConfig+0x154>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e25d      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a54:	4b49      	ldr	r3, [pc, #292]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	061b      	lsls	r3, r3, #24
 8008a62:	4946      	ldr	r1, [pc, #280]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008a68:	4b45      	ldr	r3, [pc, #276]	@ (8008b80 <HAL_RCC_OscConfig+0x280>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f8 fd7d 	bl	800156c <HAL_InitTick>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d043      	beq.n	8008b00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e249      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d023      	beq.n	8008acc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a84:	4b3d      	ldr	r3, [pc, #244]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a3c      	ldr	r2, [pc, #240]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a90:	f7fa fd80 	bl	8003594 <HAL_GetTick>
 8008a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a96:	e008      	b.n	8008aaa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a98:	f7fa fd7c 	bl	8003594 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e232      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008aaa:	4b34      	ldr	r3, [pc, #208]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0f0      	beq.n	8008a98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ab6:	4b31      	ldr	r3, [pc, #196]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	061b      	lsls	r3, r3, #24
 8008ac4:	492d      	ldr	r1, [pc, #180]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	604b      	str	r3, [r1, #4]
 8008aca:	e01a      	b.n	8008b02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008acc:	4b2b      	ldr	r3, [pc, #172]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008ad2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad8:	f7fa fd5c 	bl	8003594 <HAL_GetTick>
 8008adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ade:	e008      	b.n	8008af2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ae0:	f7fa fd58 	bl	8003594 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e20e      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008af2:	4b22      	ldr	r3, [pc, #136]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1f0      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x1e0>
 8008afe:	e000      	b.n	8008b02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d041      	beq.n	8008b92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d01c      	beq.n	8008b50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b16:	4b19      	ldr	r3, [pc, #100]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b1c:	4a17      	ldr	r2, [pc, #92]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b26:	f7fa fd35 	bl	8003594 <HAL_GetTick>
 8008b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b2c:	e008      	b.n	8008b40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b2e:	f7fa fd31 	bl	8003594 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d901      	bls.n	8008b40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e1e7      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b40:	4b0e      	ldr	r3, [pc, #56]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0ef      	beq.n	8008b2e <HAL_RCC_OscConfig+0x22e>
 8008b4e:	e020      	b.n	8008b92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b50:	4b0a      	ldr	r3, [pc, #40]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b56:	4a09      	ldr	r2, [pc, #36]	@ (8008b7c <HAL_RCC_OscConfig+0x27c>)
 8008b58:	f023 0301 	bic.w	r3, r3, #1
 8008b5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b60:	f7fa fd18 	bl	8003594 <HAL_GetTick>
 8008b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b66:	e00d      	b.n	8008b84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b68:	f7fa fd14 	bl	8003594 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d906      	bls.n	8008b84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e1ca      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
 8008b7a:	bf00      	nop
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b84:	4b8c      	ldr	r3, [pc, #560]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1ea      	bne.n	8008b68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0304 	and.w	r3, r3, #4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 80a6 	beq.w	8008cec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008ba4:	4b84      	ldr	r3, [pc, #528]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x2b4>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e000      	b.n	8008bb6 <HAL_RCC_OscConfig+0x2b6>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00d      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bba:	4b7f      	ldr	r3, [pc, #508]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bbe:	4a7e      	ldr	r2, [pc, #504]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bc6:	4b7c      	ldr	r3, [pc, #496]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bd6:	4b79      	ldr	r3, [pc, #484]	@ (8008dbc <HAL_RCC_OscConfig+0x4bc>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d118      	bne.n	8008c14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008be2:	4b76      	ldr	r3, [pc, #472]	@ (8008dbc <HAL_RCC_OscConfig+0x4bc>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a75      	ldr	r2, [pc, #468]	@ (8008dbc <HAL_RCC_OscConfig+0x4bc>)
 8008be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bee:	f7fa fcd1 	bl	8003594 <HAL_GetTick>
 8008bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bf6:	f7fa fccd 	bl	8003594 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e183      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c08:	4b6c      	ldr	r3, [pc, #432]	@ (8008dbc <HAL_RCC_OscConfig+0x4bc>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0f0      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d108      	bne.n	8008c2e <HAL_RCC_OscConfig+0x32e>
 8008c1c:	4b66      	ldr	r3, [pc, #408]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c22:	4a65      	ldr	r2, [pc, #404]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c24:	f043 0301 	orr.w	r3, r3, #1
 8008c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c2c:	e024      	b.n	8008c78 <HAL_RCC_OscConfig+0x378>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d110      	bne.n	8008c58 <HAL_RCC_OscConfig+0x358>
 8008c36:	4b60      	ldr	r3, [pc, #384]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3c:	4a5e      	ldr	r2, [pc, #376]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c3e:	f043 0304 	orr.w	r3, r3, #4
 8008c42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c46:	4b5c      	ldr	r3, [pc, #368]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4c:	4a5a      	ldr	r2, [pc, #360]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c4e:	f043 0301 	orr.w	r3, r3, #1
 8008c52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c56:	e00f      	b.n	8008c78 <HAL_RCC_OscConfig+0x378>
 8008c58:	4b57      	ldr	r3, [pc, #348]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c5e:	4a56      	ldr	r2, [pc, #344]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c60:	f023 0301 	bic.w	r3, r3, #1
 8008c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c68:	4b53      	ldr	r3, [pc, #332]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c6e:	4a52      	ldr	r2, [pc, #328]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008c70:	f023 0304 	bic.w	r3, r3, #4
 8008c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d016      	beq.n	8008cae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c80:	f7fa fc88 	bl	8003594 <HAL_GetTick>
 8008c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c86:	e00a      	b.n	8008c9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c88:	f7fa fc84 	bl	8003594 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e138      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c9e:	4b46      	ldr	r3, [pc, #280]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0ed      	beq.n	8008c88 <HAL_RCC_OscConfig+0x388>
 8008cac:	e015      	b.n	8008cda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cae:	f7fa fc71 	bl	8003594 <HAL_GetTick>
 8008cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008cb4:	e00a      	b.n	8008ccc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cb6:	f7fa fc6d 	bl	8003594 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d901      	bls.n	8008ccc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e121      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1ed      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008cda:	7ffb      	ldrb	r3, [r7, #31]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d105      	bne.n	8008cec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ce0:	4b35      	ldr	r3, [pc, #212]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ce4:	4a34      	ldr	r2, [pc, #208]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0320 	and.w	r3, r3, #32
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d03c      	beq.n	8008d72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01c      	beq.n	8008d3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d00:	4b2d      	ldr	r3, [pc, #180]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d06:	4a2c      	ldr	r2, [pc, #176]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008d08:	f043 0301 	orr.w	r3, r3, #1
 8008d0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d10:	f7fa fc40 	bl	8003594 <HAL_GetTick>
 8008d14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d16:	e008      	b.n	8008d2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d18:	f7fa fc3c 	bl	8003594 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e0f2      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d2a:	4b23      	ldr	r3, [pc, #140]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0ef      	beq.n	8008d18 <HAL_RCC_OscConfig+0x418>
 8008d38:	e01b      	b.n	8008d72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d40:	4a1d      	ldr	r2, [pc, #116]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008d42:	f023 0301 	bic.w	r3, r3, #1
 8008d46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d4a:	f7fa fc23 	bl	8003594 <HAL_GetTick>
 8008d4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d50:	e008      	b.n	8008d64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d52:	f7fa fc1f 	bl	8003594 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d901      	bls.n	8008d64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e0d5      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d64:	4b14      	ldr	r3, [pc, #80]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1ef      	bne.n	8008d52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 80c9 	beq.w	8008f0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f003 030c 	and.w	r3, r3, #12
 8008d84:	2b0c      	cmp	r3, #12
 8008d86:	f000 8083 	beq.w	8008e90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d15e      	bne.n	8008e50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d92:	4b09      	ldr	r3, [pc, #36]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a08      	ldr	r2, [pc, #32]	@ (8008db8 <HAL_RCC_OscConfig+0x4b8>)
 8008d98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9e:	f7fa fbf9 	bl	8003594 <HAL_GetTick>
 8008da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008da4:	e00c      	b.n	8008dc0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008da6:	f7fa fbf5 	bl	8003594 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d905      	bls.n	8008dc0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e0ab      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dc0:	4b55      	ldr	r3, [pc, #340]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1ec      	bne.n	8008da6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dcc:	4b52      	ldr	r3, [pc, #328]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	4b52      	ldr	r3, [pc, #328]	@ (8008f1c <HAL_RCC_OscConfig+0x61c>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6a11      	ldr	r1, [r2, #32]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ddc:	3a01      	subs	r2, #1
 8008dde:	0112      	lsls	r2, r2, #4
 8008de0:	4311      	orrs	r1, r2
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008de6:	0212      	lsls	r2, r2, #8
 8008de8:	4311      	orrs	r1, r2
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008dee:	0852      	lsrs	r2, r2, #1
 8008df0:	3a01      	subs	r2, #1
 8008df2:	0552      	lsls	r2, r2, #21
 8008df4:	4311      	orrs	r1, r2
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008dfa:	0852      	lsrs	r2, r2, #1
 8008dfc:	3a01      	subs	r2, #1
 8008dfe:	0652      	lsls	r2, r2, #25
 8008e00:	4311      	orrs	r1, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008e06:	06d2      	lsls	r2, r2, #27
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	4943      	ldr	r1, [pc, #268]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e10:	4b41      	ldr	r3, [pc, #260]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a40      	ldr	r2, [pc, #256]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	4a3d      	ldr	r2, [pc, #244]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e28:	f7fa fbb4 	bl	8003594 <HAL_GetTick>
 8008e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e2e:	e008      	b.n	8008e42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e30:	f7fa fbb0 	bl	8003594 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e066      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e42:	4b35      	ldr	r3, [pc, #212]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0f0      	beq.n	8008e30 <HAL_RCC_OscConfig+0x530>
 8008e4e:	e05e      	b.n	8008f0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e50:	4b31      	ldr	r3, [pc, #196]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a30      	ldr	r2, [pc, #192]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5c:	f7fa fb9a 	bl	8003594 <HAL_GetTick>
 8008e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e62:	e008      	b.n	8008e76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e64:	f7fa fb96 	bl	8003594 <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d901      	bls.n	8008e76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e04c      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e76:	4b28      	ldr	r3, [pc, #160]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f0      	bne.n	8008e64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008e82:	4b25      	ldr	r3, [pc, #148]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e84:	68da      	ldr	r2, [r3, #12]
 8008e86:	4924      	ldr	r1, [pc, #144]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e88:	4b25      	ldr	r3, [pc, #148]	@ (8008f20 <HAL_RCC_OscConfig+0x620>)
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	60cb      	str	r3, [r1, #12]
 8008e8e:	e03e      	b.n	8008f0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d101      	bne.n	8008e9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e039      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8008f18 <HAL_RCC_OscConfig+0x618>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f003 0203 	and.w	r2, r3, #3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d12c      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d123      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d11b      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d113      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eec:	085b      	lsrs	r3, r3, #1
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d109      	bne.n	8008f0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f00:	085b      	lsrs	r3, r3, #1
 8008f02:	3b01      	subs	r3, #1
 8008f04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d001      	beq.n	8008f0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e000      	b.n	8008f10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40021000 	.word	0x40021000
 8008f1c:	019f800c 	.word	0x019f800c
 8008f20:	feeefffc 	.word	0xfeeefffc

08008f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e11e      	b.n	800917a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f3c:	4b91      	ldr	r3, [pc, #580]	@ (8009184 <HAL_RCC_ClockConfig+0x260>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 030f 	and.w	r3, r3, #15
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d910      	bls.n	8008f6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f4a:	4b8e      	ldr	r3, [pc, #568]	@ (8009184 <HAL_RCC_ClockConfig+0x260>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f023 020f 	bic.w	r2, r3, #15
 8008f52:	498c      	ldr	r1, [pc, #560]	@ (8009184 <HAL_RCC_ClockConfig+0x260>)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8009184 <HAL_RCC_ClockConfig+0x260>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 030f 	and.w	r3, r3, #15
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d001      	beq.n	8008f6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e106      	b.n	800917a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d073      	beq.n	8009060 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d129      	bne.n	8008fd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f80:	4b81      	ldr	r3, [pc, #516]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0f4      	b.n	800917a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008f90:	f000 f9d0 	bl	8009334 <RCC_GetSysClockFreqFromPLLSource>
 8008f94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	4a7c      	ldr	r2, [pc, #496]	@ (800918c <HAL_RCC_ClockConfig+0x268>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d93f      	bls.n	800901e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d009      	beq.n	8008fbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d033      	beq.n	800901e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d12f      	bne.n	800901e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008fbe:	4b72      	ldr	r3, [pc, #456]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fc6:	4a70      	ldr	r2, [pc, #448]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8008fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008fce:	2380      	movs	r3, #128	@ 0x80
 8008fd0:	617b      	str	r3, [r7, #20]
 8008fd2:	e024      	b.n	800901e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d107      	bne.n	8008fec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d109      	bne.n	8008ffc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e0c6      	b.n	800917a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fec:	4b66      	ldr	r3, [pc, #408]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e0be      	b.n	800917a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008ffc:	f000 f8ce 	bl	800919c <HAL_RCC_GetSysClockFreq>
 8009000:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	4a61      	ldr	r2, [pc, #388]	@ (800918c <HAL_RCC_ClockConfig+0x268>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d909      	bls.n	800901e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800900a:	4b5f      	ldr	r3, [pc, #380]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009012:	4a5d      	ldr	r2, [pc, #372]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8009014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009018:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800901a:	2380      	movs	r3, #128	@ 0x80
 800901c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800901e:	4b5a      	ldr	r3, [pc, #360]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f023 0203 	bic.w	r2, r3, #3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	4957      	ldr	r1, [pc, #348]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 800902c:	4313      	orrs	r3, r2
 800902e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009030:	f7fa fab0 	bl	8003594 <HAL_GetTick>
 8009034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009036:	e00a      	b.n	800904e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009038:	f7fa faac 	bl	8003594 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009046:	4293      	cmp	r3, r2
 8009048:	d901      	bls.n	800904e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e095      	b.n	800917a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800904e:	4b4e      	ldr	r3, [pc, #312]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 020c 	and.w	r2, r3, #12
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	429a      	cmp	r2, r3
 800905e:	d1eb      	bne.n	8009038 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d023      	beq.n	80090b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	2b00      	cmp	r3, #0
 8009076:	d005      	beq.n	8009084 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009078:	4b43      	ldr	r3, [pc, #268]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	4a42      	ldr	r2, [pc, #264]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 800907e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009082:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0308 	and.w	r3, r3, #8
 800908c:	2b00      	cmp	r3, #0
 800908e:	d007      	beq.n	80090a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009090:	4b3d      	ldr	r3, [pc, #244]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009098:	4a3b      	ldr	r2, [pc, #236]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 800909a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800909e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090a0:	4b39      	ldr	r3, [pc, #228]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	4936      	ldr	r1, [pc, #216]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	608b      	str	r3, [r1, #8]
 80090b2:	e008      	b.n	80090c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b80      	cmp	r3, #128	@ 0x80
 80090b8:	d105      	bne.n	80090c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80090ba:	4b33      	ldr	r3, [pc, #204]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	4a32      	ldr	r2, [pc, #200]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 80090c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090c6:	4b2f      	ldr	r3, [pc, #188]	@ (8009184 <HAL_RCC_ClockConfig+0x260>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d21d      	bcs.n	8009110 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d4:	4b2b      	ldr	r3, [pc, #172]	@ (8009184 <HAL_RCC_ClockConfig+0x260>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f023 020f 	bic.w	r2, r3, #15
 80090dc:	4929      	ldr	r1, [pc, #164]	@ (8009184 <HAL_RCC_ClockConfig+0x260>)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80090e4:	f7fa fa56 	bl	8003594 <HAL_GetTick>
 80090e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ea:	e00a      	b.n	8009102 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ec:	f7fa fa52 	bl	8003594 <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d901      	bls.n	8009102 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e03b      	b.n	800917a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009102:	4b20      	ldr	r3, [pc, #128]	@ (8009184 <HAL_RCC_ClockConfig+0x260>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d1ed      	bne.n	80090ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0304 	and.w	r3, r3, #4
 8009118:	2b00      	cmp	r3, #0
 800911a:	d008      	beq.n	800912e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800911c:	4b1a      	ldr	r3, [pc, #104]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	4917      	ldr	r1, [pc, #92]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 800912a:	4313      	orrs	r3, r2
 800912c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d009      	beq.n	800914e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800913a:	4b13      	ldr	r3, [pc, #76]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	490f      	ldr	r1, [pc, #60]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 800914a:	4313      	orrs	r3, r2
 800914c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800914e:	f000 f825 	bl	800919c <HAL_RCC_GetSysClockFreq>
 8009152:	4602      	mov	r2, r0
 8009154:	4b0c      	ldr	r3, [pc, #48]	@ (8009188 <HAL_RCC_ClockConfig+0x264>)
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	091b      	lsrs	r3, r3, #4
 800915a:	f003 030f 	and.w	r3, r3, #15
 800915e:	490c      	ldr	r1, [pc, #48]	@ (8009190 <HAL_RCC_ClockConfig+0x26c>)
 8009160:	5ccb      	ldrb	r3, [r1, r3]
 8009162:	f003 031f 	and.w	r3, r3, #31
 8009166:	fa22 f303 	lsr.w	r3, r2, r3
 800916a:	4a0a      	ldr	r2, [pc, #40]	@ (8009194 <HAL_RCC_ClockConfig+0x270>)
 800916c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800916e:	4b0a      	ldr	r3, [pc, #40]	@ (8009198 <HAL_RCC_ClockConfig+0x274>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f7f8 f9fa 	bl	800156c <HAL_InitTick>
 8009178:	4603      	mov	r3, r0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	40022000 	.word	0x40022000
 8009188:	40021000 	.word	0x40021000
 800918c:	04c4b400 	.word	0x04c4b400
 8009190:	0800e734 	.word	0x0800e734
 8009194:	20000000 	.word	0x20000000
 8009198:	2000004c 	.word	0x2000004c

0800919c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80091a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f003 030c 	and.w	r3, r3, #12
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d102      	bne.n	80091b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80091ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009258 <HAL_RCC_GetSysClockFreq+0xbc>)
 80091b0:	613b      	str	r3, [r7, #16]
 80091b2:	e047      	b.n	8009244 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80091b4:	4b27      	ldr	r3, [pc, #156]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f003 030c 	and.w	r3, r3, #12
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d102      	bne.n	80091c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80091c0:	4b26      	ldr	r3, [pc, #152]	@ (800925c <HAL_RCC_GetSysClockFreq+0xc0>)
 80091c2:	613b      	str	r3, [r7, #16]
 80091c4:	e03e      	b.n	8009244 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80091c6:	4b23      	ldr	r3, [pc, #140]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f003 030c 	and.w	r3, r3, #12
 80091ce:	2b0c      	cmp	r3, #12
 80091d0:	d136      	bne.n	8009240 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091d2:	4b20      	ldr	r3, [pc, #128]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	f003 0303 	and.w	r3, r3, #3
 80091da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	091b      	lsrs	r3, r3, #4
 80091e2:	f003 030f 	and.w	r3, r3, #15
 80091e6:	3301      	adds	r3, #1
 80091e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d10c      	bne.n	800920a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80091f0:	4a1a      	ldr	r2, [pc, #104]	@ (800925c <HAL_RCC_GetSysClockFreq+0xc0>)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f8:	4a16      	ldr	r2, [pc, #88]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091fa:	68d2      	ldr	r2, [r2, #12]
 80091fc:	0a12      	lsrs	r2, r2, #8
 80091fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009202:	fb02 f303 	mul.w	r3, r2, r3
 8009206:	617b      	str	r3, [r7, #20]
      break;
 8009208:	e00c      	b.n	8009224 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800920a:	4a13      	ldr	r2, [pc, #76]	@ (8009258 <HAL_RCC_GetSysClockFreq+0xbc>)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009212:	4a10      	ldr	r2, [pc, #64]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009214:	68d2      	ldr	r2, [r2, #12]
 8009216:	0a12      	lsrs	r2, r2, #8
 8009218:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800921c:	fb02 f303 	mul.w	r3, r2, r3
 8009220:	617b      	str	r3, [r7, #20]
      break;
 8009222:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009224:	4b0b      	ldr	r3, [pc, #44]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	0e5b      	lsrs	r3, r3, #25
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	3301      	adds	r3, #1
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	fbb2 f3f3 	udiv	r3, r2, r3
 800923c:	613b      	str	r3, [r7, #16]
 800923e:	e001      	b.n	8009244 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009244:	693b      	ldr	r3, [r7, #16]
}
 8009246:	4618      	mov	r0, r3
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	40021000 	.word	0x40021000
 8009258:	00f42400 	.word	0x00f42400
 800925c:	016e3600 	.word	0x016e3600

08009260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009264:	4b03      	ldr	r3, [pc, #12]	@ (8009274 <HAL_RCC_GetHCLKFreq+0x14>)
 8009266:	681b      	ldr	r3, [r3, #0]
}
 8009268:	4618      	mov	r0, r3
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	20000000 	.word	0x20000000

08009278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800927c:	f7ff fff0 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 8009280:	4602      	mov	r2, r0
 8009282:	4b06      	ldr	r3, [pc, #24]	@ (800929c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	0a1b      	lsrs	r3, r3, #8
 8009288:	f003 0307 	and.w	r3, r3, #7
 800928c:	4904      	ldr	r1, [pc, #16]	@ (80092a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800928e:	5ccb      	ldrb	r3, [r1, r3]
 8009290:	f003 031f 	and.w	r3, r3, #31
 8009294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009298:	4618      	mov	r0, r3
 800929a:	bd80      	pop	{r7, pc}
 800929c:	40021000 	.word	0x40021000
 80092a0:	0800e744 	.word	0x0800e744

080092a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80092a8:	f7ff ffda 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 80092ac:	4602      	mov	r2, r0
 80092ae:	4b06      	ldr	r3, [pc, #24]	@ (80092c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	0adb      	lsrs	r3, r3, #11
 80092b4:	f003 0307 	and.w	r3, r3, #7
 80092b8:	4904      	ldr	r1, [pc, #16]	@ (80092cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80092ba:	5ccb      	ldrb	r3, [r1, r3]
 80092bc:	f003 031f 	and.w	r3, r3, #31
 80092c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	40021000 	.word	0x40021000
 80092cc:	0800e744 	.word	0x0800e744

080092d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	220f      	movs	r2, #15
 80092de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80092e0:	4b12      	ldr	r3, [pc, #72]	@ (800932c <HAL_RCC_GetClockConfig+0x5c>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f003 0203 	and.w	r2, r3, #3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80092ec:	4b0f      	ldr	r3, [pc, #60]	@ (800932c <HAL_RCC_GetClockConfig+0x5c>)
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80092f8:	4b0c      	ldr	r3, [pc, #48]	@ (800932c <HAL_RCC_GetClockConfig+0x5c>)
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009304:	4b09      	ldr	r3, [pc, #36]	@ (800932c <HAL_RCC_GetClockConfig+0x5c>)
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	08db      	lsrs	r3, r3, #3
 800930a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009312:	4b07      	ldr	r3, [pc, #28]	@ (8009330 <HAL_RCC_GetClockConfig+0x60>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 020f 	and.w	r2, r3, #15
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	601a      	str	r2, [r3, #0]
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	40021000 	.word	0x40021000
 8009330:	40022000 	.word	0x40022000

08009334 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800933a:	4b1e      	ldr	r3, [pc, #120]	@ (80093b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f003 0303 	and.w	r3, r3, #3
 8009342:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009344:	4b1b      	ldr	r3, [pc, #108]	@ (80093b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	091b      	lsrs	r3, r3, #4
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b03      	cmp	r3, #3
 8009356:	d10c      	bne.n	8009372 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009358:	4a17      	ldr	r2, [pc, #92]	@ (80093b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009360:	4a14      	ldr	r2, [pc, #80]	@ (80093b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009362:	68d2      	ldr	r2, [r2, #12]
 8009364:	0a12      	lsrs	r2, r2, #8
 8009366:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800936a:	fb02 f303 	mul.w	r3, r2, r3
 800936e:	617b      	str	r3, [r7, #20]
    break;
 8009370:	e00c      	b.n	800938c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009372:	4a12      	ldr	r2, [pc, #72]	@ (80093bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	fbb2 f3f3 	udiv	r3, r2, r3
 800937a:	4a0e      	ldr	r2, [pc, #56]	@ (80093b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800937c:	68d2      	ldr	r2, [r2, #12]
 800937e:	0a12      	lsrs	r2, r2, #8
 8009380:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009384:	fb02 f303 	mul.w	r3, r2, r3
 8009388:	617b      	str	r3, [r7, #20]
    break;
 800938a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800938c:	4b09      	ldr	r3, [pc, #36]	@ (80093b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	0e5b      	lsrs	r3, r3, #25
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	3301      	adds	r3, #1
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80093a6:	687b      	ldr	r3, [r7, #4]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	40021000 	.word	0x40021000
 80093b8:	016e3600 	.word	0x016e3600
 80093bc:	00f42400 	.word	0x00f42400

080093c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093c8:	2300      	movs	r3, #0
 80093ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093cc:	2300      	movs	r3, #0
 80093ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 8098 	beq.w	800950e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093de:	2300      	movs	r3, #0
 80093e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093e2:	4b43      	ldr	r3, [pc, #268]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10d      	bne.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093ee:	4b40      	ldr	r3, [pc, #256]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f2:	4a3f      	ldr	r2, [pc, #252]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80093fa:	4b3d      	ldr	r3, [pc, #244]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009402:	60bb      	str	r3, [r7, #8]
 8009404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009406:	2301      	movs	r3, #1
 8009408:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800940a:	4b3a      	ldr	r3, [pc, #232]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a39      	ldr	r2, [pc, #228]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009414:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009416:	f7fa f8bd 	bl	8003594 <HAL_GetTick>
 800941a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800941c:	e009      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800941e:	f7fa f8b9 	bl	8003594 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	2b02      	cmp	r3, #2
 800942a:	d902      	bls.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	74fb      	strb	r3, [r7, #19]
        break;
 8009430:	e005      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009432:	4b30      	ldr	r3, [pc, #192]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0ef      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800943e:	7cfb      	ldrb	r3, [r7, #19]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d159      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009444:	4b2a      	ldr	r3, [pc, #168]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800944a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800944e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d01e      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	429a      	cmp	r2, r3
 800945e:	d019      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009460:	4b23      	ldr	r3, [pc, #140]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800946a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800946c:	4b20      	ldr	r3, [pc, #128]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800946e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009472:	4a1f      	ldr	r2, [pc, #124]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800947c:	4b1c      	ldr	r3, [pc, #112]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800947e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009482:	4a1b      	ldr	r2, [pc, #108]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800948c:	4a18      	ldr	r2, [pc, #96]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b00      	cmp	r3, #0
 800949c:	d016      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800949e:	f7fa f879 	bl	8003594 <HAL_GetTick>
 80094a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094a4:	e00b      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094a6:	f7fa f875 	bl	8003594 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d902      	bls.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	74fb      	strb	r3, [r7, #19]
            break;
 80094bc:	e006      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094be:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d0ec      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80094cc:	7cfb      	ldrb	r3, [r7, #19]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10b      	bne.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094d2:	4b07      	ldr	r3, [pc, #28]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e0:	4903      	ldr	r1, [pc, #12]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80094e8:	e008      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094ea:	7cfb      	ldrb	r3, [r7, #19]
 80094ec:	74bb      	strb	r3, [r7, #18]
 80094ee:	e005      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80094f0:	40021000 	.word	0x40021000
 80094f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f8:	7cfb      	ldrb	r3, [r7, #19]
 80094fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094fc:	7c7b      	ldrb	r3, [r7, #17]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d105      	bne.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009502:	4ba7      	ldr	r3, [pc, #668]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009506:	4aa6      	ldr	r2, [pc, #664]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800950c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800951a:	4ba1      	ldr	r3, [pc, #644]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800951c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009520:	f023 0203 	bic.w	r2, r3, #3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	499d      	ldr	r1, [pc, #628]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800952a:	4313      	orrs	r3, r2
 800952c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800953c:	4b98      	ldr	r3, [pc, #608]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800953e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009542:	f023 020c 	bic.w	r2, r3, #12
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	4995      	ldr	r1, [pc, #596]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800954c:	4313      	orrs	r3, r2
 800954e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800955e:	4b90      	ldr	r3, [pc, #576]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009564:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	498c      	ldr	r1, [pc, #560]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800956e:	4313      	orrs	r3, r2
 8009570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00a      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009580:	4b87      	ldr	r3, [pc, #540]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009586:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	4984      	ldr	r1, [pc, #528]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009590:	4313      	orrs	r3, r2
 8009592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0310 	and.w	r3, r3, #16
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80095a2:	4b7f      	ldr	r3, [pc, #508]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	497b      	ldr	r1, [pc, #492]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00a      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095c4:	4b76      	ldr	r3, [pc, #472]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	4973      	ldr	r1, [pc, #460]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095e6:	4b6e      	ldr	r3, [pc, #440]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	496a      	ldr	r1, [pc, #424]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00a      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009608:	4b65      	ldr	r3, [pc, #404]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800960a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800960e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	4962      	ldr	r1, [pc, #392]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009618:	4313      	orrs	r3, r2
 800961a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800962a:	4b5d      	ldr	r3, [pc, #372]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800962c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009630:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009638:	4959      	ldr	r1, [pc, #356]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800963a:	4313      	orrs	r3, r2
 800963c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00a      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800964c:	4b54      	ldr	r3, [pc, #336]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009652:	f023 0203 	bic.w	r2, r3, #3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965a:	4951      	ldr	r1, [pc, #324]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965c:	4313      	orrs	r3, r2
 800965e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00a      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800966e:	4b4c      	ldr	r3, [pc, #304]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009674:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967c:	4948      	ldr	r1, [pc, #288]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967e:	4313      	orrs	r3, r2
 8009680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800968c:	2b00      	cmp	r3, #0
 800968e:	d015      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009690:	4b43      	ldr	r3, [pc, #268]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009696:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969e:	4940      	ldr	r1, [pc, #256]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096ae:	d105      	bne.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096b0:	4b3b      	ldr	r3, [pc, #236]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	4a3a      	ldr	r2, [pc, #232]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d015      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80096c8:	4b35      	ldr	r3, [pc, #212]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096d6:	4932      	ldr	r1, [pc, #200]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096e6:	d105      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096e8:	4b2d      	ldr	r3, [pc, #180]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	4a2c      	ldr	r2, [pc, #176]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d015      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009700:	4b27      	ldr	r3, [pc, #156]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009706:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970e:	4924      	ldr	r1, [pc, #144]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009710:	4313      	orrs	r3, r2
 8009712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800971e:	d105      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009720:	4b1f      	ldr	r3, [pc, #124]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	4a1e      	ldr	r2, [pc, #120]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800972a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d015      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009738:	4b19      	ldr	r3, [pc, #100]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800973a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800973e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009746:	4916      	ldr	r1, [pc, #88]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009748:	4313      	orrs	r3, r2
 800974a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009756:	d105      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009758:	4b11      	ldr	r3, [pc, #68]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	4a10      	ldr	r2, [pc, #64]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009762:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d019      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009770:	4b0b      	ldr	r3, [pc, #44]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009776:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977e:	4908      	ldr	r1, [pc, #32]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009780:	4313      	orrs	r3, r2
 8009782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800978a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800978e:	d109      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009790:	4b03      	ldr	r3, [pc, #12]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	4a02      	ldr	r2, [pc, #8]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800979a:	60d3      	str	r3, [r2, #12]
 800979c:	e002      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800979e:	bf00      	nop
 80097a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d015      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80097b0:	4b29      	ldr	r3, [pc, #164]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097be:	4926      	ldr	r1, [pc, #152]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ce:	d105      	bne.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80097d0:	4b21      	ldr	r3, [pc, #132]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	4a20      	ldr	r2, [pc, #128]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d015      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80097e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097f6:	4918      	ldr	r1, [pc, #96]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009806:	d105      	bne.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009808:	4b13      	ldr	r3, [pc, #76]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	4a12      	ldr	r2, [pc, #72]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800980e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009812:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d015      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009820:	4b0d      	ldr	r3, [pc, #52]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009822:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009826:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800982e:	490a      	ldr	r1, [pc, #40]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009830:	4313      	orrs	r3, r2
 8009832:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800983a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800983e:	d105      	bne.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009840:	4b05      	ldr	r3, [pc, #20]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	4a04      	ldr	r2, [pc, #16]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800984a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800984c:	7cbb      	ldrb	r3, [r7, #18]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	40021000 	.word	0x40021000

0800985c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e09d      	b.n	80099aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009872:	2b00      	cmp	r3, #0
 8009874:	d108      	bne.n	8009888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800987e:	d009      	beq.n	8009894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	61da      	str	r2, [r3, #28]
 8009886:	e005      	b.n	8009894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d106      	bne.n	80098b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7f7 fde8 	bl	8001484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80098d4:	d902      	bls.n	80098dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	e002      	b.n	80098e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80098ea:	d007      	beq.n	80098fc <HAL_SPI_Init+0xa0>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80098f4:	d002      	beq.n	80098fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800990c:	431a      	orrs	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	431a      	orrs	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800992a:	431a      	orrs	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009934:	431a      	orrs	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800993e:	ea42 0103 	orr.w	r1, r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009946:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	0c1b      	lsrs	r3, r3, #16
 8009958:	f003 0204 	and.w	r2, r3, #4
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009960:	f003 0310 	and.w	r3, r3, #16
 8009964:	431a      	orrs	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800996a:	f003 0308 	and.w	r3, r3, #8
 800996e:	431a      	orrs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009978:	ea42 0103 	orr.w	r1, r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	430a      	orrs	r2, r1
 8009988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69da      	ldr	r2, [r3, #28]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b088      	sub	sp, #32
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	603b      	str	r3, [r7, #0]
 80099be:	4613      	mov	r3, r2
 80099c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d101      	bne.n	80099d4 <HAL_SPI_Transmit+0x22>
 80099d0:	2302      	movs	r3, #2
 80099d2:	e15f      	b.n	8009c94 <HAL_SPI_Transmit+0x2e2>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099dc:	f7f9 fdda 	bl	8003594 <HAL_GetTick>
 80099e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d002      	beq.n	80099f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80099f2:	2302      	movs	r3, #2
 80099f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099f6:	e148      	b.n	8009c8a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <HAL_SPI_Transmit+0x52>
 80099fe:	88fb      	ldrh	r3, [r7, #6]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d102      	bne.n	8009a0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a08:	e13f      	b.n	8009c8a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2203      	movs	r2, #3
 8009a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	88fa      	ldrh	r2, [r7, #6]
 8009a22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	88fa      	ldrh	r2, [r7, #6]
 8009a28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a54:	d10f      	bne.n	8009a76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a80:	2b40      	cmp	r3, #64	@ 0x40
 8009a82:	d007      	beq.n	8009a94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a9c:	d94f      	bls.n	8009b3e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d002      	beq.n	8009aac <HAL_SPI_Transmit+0xfa>
 8009aa6:	8afb      	ldrh	r3, [r7, #22]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d142      	bne.n	8009b32 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab0:	881a      	ldrh	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009abc:	1c9a      	adds	r2, r3, #2
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009ad0:	e02f      	b.n	8009b32 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d112      	bne.n	8009b06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae4:	881a      	ldrh	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af0:	1c9a      	adds	r2, r3, #2
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b04:	e015      	b.n	8009b32 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b06:	f7f9 fd45 	bl	8003594 <HAL_GetTick>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d803      	bhi.n	8009b1e <HAL_SPI_Transmit+0x16c>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1c:	d102      	bne.n	8009b24 <HAL_SPI_Transmit+0x172>
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d106      	bne.n	8009b32 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009b30:	e0ab      	b.n	8009c8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1ca      	bne.n	8009ad2 <HAL_SPI_Transmit+0x120>
 8009b3c:	e080      	b.n	8009c40 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <HAL_SPI_Transmit+0x19a>
 8009b46:	8afb      	ldrh	r3, [r7, #22]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d174      	bne.n	8009c36 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d912      	bls.n	8009b7c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b5a:	881a      	ldrh	r2, [r3, #0]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b66:	1c9a      	adds	r2, r3, #2
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b02      	subs	r3, #2
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b7a:	e05c      	b.n	8009c36 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	330c      	adds	r3, #12
 8009b86:	7812      	ldrb	r2, [r2, #0]
 8009b88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009ba2:	e048      	b.n	8009c36 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d12b      	bne.n	8009c0a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d912      	bls.n	8009be2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc0:	881a      	ldrh	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bcc:	1c9a      	adds	r2, r3, #2
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	3b02      	subs	r3, #2
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009be0:	e029      	b.n	8009c36 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	330c      	adds	r3, #12
 8009bec:	7812      	ldrb	r2, [r2, #0]
 8009bee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf4:	1c5a      	adds	r2, r3, #1
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009c08:	e015      	b.n	8009c36 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c0a:	f7f9 fcc3 	bl	8003594 <HAL_GetTick>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d803      	bhi.n	8009c22 <HAL_SPI_Transmit+0x270>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c20:	d102      	bne.n	8009c28 <HAL_SPI_Transmit+0x276>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009c34:	e029      	b.n	8009c8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1b1      	bne.n	8009ba4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 fc7d 	bl	800a544 <SPI_EndRxTxTransaction>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2220      	movs	r2, #32
 8009c54:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c5e:	2300      	movs	r3, #0
 8009c60:	613b      	str	r3, [r7, #16]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	613b      	str	r3, [r7, #16]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	613b      	str	r3, [r7, #16]
 8009c72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	77fb      	strb	r3, [r7, #31]
 8009c80:	e003      	b.n	8009c8a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3720      	adds	r7, #32
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	@ 0x28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009caa:	2301      	movs	r3, #1
 8009cac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d101      	bne.n	8009cc2 <HAL_SPI_TransmitReceive+0x26>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e20a      	b.n	800a0d8 <HAL_SPI_TransmitReceive+0x43c>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cca:	f7f9 fc63 	bl	8003594 <HAL_GetTick>
 8009cce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009cd6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009cde:	887b      	ldrh	r3, [r7, #2]
 8009ce0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009ce2:	887b      	ldrh	r3, [r7, #2]
 8009ce4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ce6:	7efb      	ldrb	r3, [r7, #27]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d00e      	beq.n	8009d0a <HAL_SPI_TransmitReceive+0x6e>
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cf2:	d106      	bne.n	8009d02 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d102      	bne.n	8009d02 <HAL_SPI_TransmitReceive+0x66>
 8009cfc:	7efb      	ldrb	r3, [r7, #27]
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	d003      	beq.n	8009d0a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009d02:	2302      	movs	r3, #2
 8009d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009d08:	e1e0      	b.n	800a0cc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d005      	beq.n	8009d1c <HAL_SPI_TransmitReceive+0x80>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <HAL_SPI_TransmitReceive+0x80>
 8009d16:	887b      	ldrh	r3, [r7, #2]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d103      	bne.n	8009d24 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009d22:	e1d3      	b.n	800a0cc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	d003      	beq.n	8009d38 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2205      	movs	r2, #5
 8009d34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	887a      	ldrh	r2, [r7, #2]
 8009d48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	887a      	ldrh	r2, [r7, #2]
 8009d50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	887a      	ldrh	r2, [r7, #2]
 8009d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	887a      	ldrh	r2, [r7, #2]
 8009d64:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d7a:	d802      	bhi.n	8009d82 <HAL_SPI_TransmitReceive+0xe6>
 8009d7c:	8a3b      	ldrh	r3, [r7, #16]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d908      	bls.n	8009d94 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d90:	605a      	str	r2, [r3, #4]
 8009d92:	e007      	b.n	8009da4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009da2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dae:	2b40      	cmp	r3, #64	@ 0x40
 8009db0:	d007      	beq.n	8009dc2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009dca:	f240 8081 	bls.w	8009ed0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <HAL_SPI_TransmitReceive+0x140>
 8009dd6:	8a7b      	ldrh	r3, [r7, #18]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d16d      	bne.n	8009eb8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de0:	881a      	ldrh	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dec:	1c9a      	adds	r2, r3, #2
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e00:	e05a      	b.n	8009eb8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d11b      	bne.n	8009e48 <HAL_SPI_TransmitReceive+0x1ac>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d016      	beq.n	8009e48 <HAL_SPI_TransmitReceive+0x1ac>
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d113      	bne.n	8009e48 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e24:	881a      	ldrh	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e30:	1c9a      	adds	r2, r3, #2
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d11c      	bne.n	8009e90 <HAL_SPI_TransmitReceive+0x1f4>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d016      	beq.n	8009e90 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6c:	b292      	uxth	r2, r2
 8009e6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e74:	1c9a      	adds	r2, r3, #2
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	3b01      	subs	r3, #1
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e90:	f7f9 fb80 	bl	8003594 <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d80b      	bhi.n	8009eb8 <HAL_SPI_TransmitReceive+0x21c>
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea6:	d007      	beq.n	8009eb8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009eb6:	e109      	b.n	800a0cc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d19f      	bne.n	8009e02 <HAL_SPI_TransmitReceive+0x166>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d199      	bne.n	8009e02 <HAL_SPI_TransmitReceive+0x166>
 8009ece:	e0e3      	b.n	800a098 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <HAL_SPI_TransmitReceive+0x244>
 8009ed8:	8a7b      	ldrh	r3, [r7, #18]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	f040 80cf 	bne.w	800a07e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d912      	bls.n	8009f10 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eee:	881a      	ldrh	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efa:	1c9a      	adds	r2, r3, #2
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	3b02      	subs	r3, #2
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f0e:	e0b6      	b.n	800a07e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	330c      	adds	r3, #12
 8009f1a:	7812      	ldrb	r2, [r2, #0]
 8009f1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f36:	e0a2      	b.n	800a07e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d134      	bne.n	8009fb0 <HAL_SPI_TransmitReceive+0x314>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d02f      	beq.n	8009fb0 <HAL_SPI_TransmitReceive+0x314>
 8009f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d12c      	bne.n	8009fb0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d912      	bls.n	8009f86 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f64:	881a      	ldrh	r2, [r3, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f70:	1c9a      	adds	r2, r3, #2
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	3b02      	subs	r3, #2
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f84:	e012      	b.n	8009fac <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	330c      	adds	r3, #12
 8009f90:	7812      	ldrb	r2, [r2, #0]
 8009f92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009fac:	2300      	movs	r3, #0
 8009fae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d148      	bne.n	800a050 <HAL_SPI_TransmitReceive+0x3b4>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d042      	beq.n	800a050 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d923      	bls.n	800a01e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68da      	ldr	r2, [r3, #12]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fe0:	b292      	uxth	r2, r2
 8009fe2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fe8:	1c9a      	adds	r2, r3, #2
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	3b02      	subs	r3, #2
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a006:	b29b      	uxth	r3, r3
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d81f      	bhi.n	800a04c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a01a:	605a      	str	r2, [r3, #4]
 800a01c:	e016      	b.n	800a04c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f103 020c 	add.w	r2, r3, #12
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02a:	7812      	ldrb	r2, [r2, #0]
 800a02c:	b2d2      	uxtb	r2, r2
 800a02e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a034:	1c5a      	adds	r2, r3, #1
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a04c:	2301      	movs	r3, #1
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a050:	f7f9 faa0 	bl	8003594 <HAL_GetTick>
 800a054:	4602      	mov	r2, r0
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d803      	bhi.n	800a068 <HAL_SPI_TransmitReceive+0x3cc>
 800a060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a066:	d102      	bne.n	800a06e <HAL_SPI_TransmitReceive+0x3d2>
 800a068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d107      	bne.n	800a07e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a07c:	e026      	b.n	800a0cc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a082:	b29b      	uxth	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	f47f af57 	bne.w	8009f38 <HAL_SPI_TransmitReceive+0x29c>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a090:	b29b      	uxth	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	f47f af50 	bne.w	8009f38 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fa51 	bl	800a544 <SPI_EndRxTxTransaction>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d005      	beq.n	800a0b4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0c2:	e003      	b.n	800a0cc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a0d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3728      	adds	r7, #40	@ 0x28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10e      	bne.n	800a120 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d009      	beq.n	800a120 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	4798      	blx	r3
    return;
 800a11e:	e0ce      	b.n	800a2be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	f003 0302 	and.w	r3, r3, #2
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <HAL_SPI_IRQHandler+0x5e>
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a130:	2b00      	cmp	r3, #0
 800a132:	d004      	beq.n	800a13e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	4798      	blx	r3
    return;
 800a13c:	e0bf      	b.n	800a2be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	f003 0320 	and.w	r3, r3, #32
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <HAL_SPI_IRQHandler+0x7e>
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d105      	bne.n	800a15e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f000 80b0 	beq.w	800a2be <HAL_SPI_IRQHandler+0x1de>
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	f003 0320 	and.w	r3, r3, #32
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 80aa 	beq.w	800a2be <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a170:	2b00      	cmp	r3, #0
 800a172:	d023      	beq.n	800a1bc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d011      	beq.n	800a1a4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a184:	f043 0204 	orr.w	r2, r3, #4
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	e00b      	b.n	800a1bc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	613b      	str	r3, [r7, #16]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	613b      	str	r3, [r7, #16]
 800a1b8:	693b      	ldr	r3, [r7, #16]
        return;
 800a1ba:	e080      	b.n	800a2be <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d014      	beq.n	800a1f0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ca:	f043 0201 	orr.w	r2, r3, #1
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00c      	beq.n	800a214 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1fe:	f043 0208 	orr.w	r2, r3, #8
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a206:	2300      	movs	r3, #0
 800a208:	60bb      	str	r3, [r7, #8]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	60bb      	str	r3, [r7, #8]
 800a212:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d04f      	beq.n	800a2bc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a22a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d104      	bne.n	800a248 <HAL_SPI_IRQHandler+0x168>
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b00      	cmp	r3, #0
 800a246:	d034      	beq.n	800a2b2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 0203 	bic.w	r2, r2, #3
 800a256:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d011      	beq.n	800a284 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a264:	4a17      	ldr	r2, [pc, #92]	@ (800a2c4 <HAL_SPI_IRQHandler+0x1e4>)
 800a266:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fb faf0 	bl	8005852 <HAL_DMA_Abort_IT>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d005      	beq.n	800a284 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a27c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d016      	beq.n	800a2ba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a290:	4a0c      	ldr	r2, [pc, #48]	@ (800a2c4 <HAL_SPI_IRQHandler+0x1e4>)
 800a292:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fb fada 	bl	8005852 <HAL_DMA_Abort_IT>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00a      	beq.n	800a2ba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800a2b0:	e003      	b.n	800a2ba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f808 	bl	800a2c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a2b8:	e000      	b.n	800a2bc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800a2ba:	bf00      	nop
    return;
 800a2bc:	bf00      	nop
  }
}
 800a2be:	3720      	adds	r7, #32
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	0800a2dd 	.word	0x0800a2dd

0800a2c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f7ff ffe5 	bl	800a2c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a2fe:	bf00      	nop
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
	...

0800a308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b088      	sub	sp, #32
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	4613      	mov	r3, r2
 800a316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a318:	f7f9 f93c 	bl	8003594 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	4413      	add	r3, r2
 800a326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a328:	f7f9 f934 	bl	8003594 <HAL_GetTick>
 800a32c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a32e:	4b39      	ldr	r3, [pc, #228]	@ (800a414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	015b      	lsls	r3, r3, #5
 800a334:	0d1b      	lsrs	r3, r3, #20
 800a336:	69fa      	ldr	r2, [r7, #28]
 800a338:	fb02 f303 	mul.w	r3, r2, r3
 800a33c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a33e:	e054      	b.n	800a3ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a346:	d050      	beq.n	800a3ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a348:	f7f9 f924 	bl	8003594 <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	69fa      	ldr	r2, [r7, #28]
 800a354:	429a      	cmp	r2, r3
 800a356:	d902      	bls.n	800a35e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d13d      	bne.n	800a3da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a36c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a376:	d111      	bne.n	800a39c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a380:	d004      	beq.n	800a38c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a38a:	d107      	bne.n	800a39c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a39a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3a4:	d10f      	bne.n	800a3c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a3c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e017      	b.n	800a40a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	bf0c      	ite	eq
 800a3fa:	2301      	moveq	r3, #1
 800a3fc:	2300      	movne	r3, #0
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	461a      	mov	r2, r3
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	429a      	cmp	r2, r3
 800a406:	d19b      	bne.n	800a340 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3720      	adds	r7, #32
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20000000 	.word	0x20000000

0800a418 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08a      	sub	sp, #40	@ 0x28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a42a:	f7f9 f8b3 	bl	8003594 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a432:	1a9b      	subs	r3, r3, r2
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	4413      	add	r3, r2
 800a438:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a43a:	f7f9 f8ab 	bl	8003594 <HAL_GetTick>
 800a43e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	330c      	adds	r3, #12
 800a446:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a448:	4b3d      	ldr	r3, [pc, #244]	@ (800a540 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	4613      	mov	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
 800a452:	00da      	lsls	r2, r3, #3
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	0d1b      	lsrs	r3, r3, #20
 800a458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a45a:	fb02 f303 	mul.w	r3, r2, r3
 800a45e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a460:	e060      	b.n	800a524 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a468:	d107      	bne.n	800a47a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d104      	bne.n	800a47a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	b2db      	uxtb	r3, r3
 800a476:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a478:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a480:	d050      	beq.n	800a524 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a482:	f7f9 f887 	bl	8003594 <HAL_GetTick>
 800a486:	4602      	mov	r2, r0
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a48e:	429a      	cmp	r2, r3
 800a490:	d902      	bls.n	800a498 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	2b00      	cmp	r3, #0
 800a496:	d13d      	bne.n	800a514 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a4a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a4b0:	d111      	bne.n	800a4d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4ba:	d004      	beq.n	800a4c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4c4:	d107      	bne.n	800a4d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4de:	d10f      	bne.n	800a500 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a4fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e010      	b.n	800a536 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a51a:	2300      	movs	r3, #0
 800a51c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	3b01      	subs	r3, #1
 800a522:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689a      	ldr	r2, [r3, #8]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	4013      	ands	r3, r2
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	429a      	cmp	r2, r3
 800a532:	d196      	bne.n	800a462 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3728      	adds	r7, #40	@ 0x28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000000 	.word	0x20000000

0800a544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af02      	add	r7, sp, #8
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2200      	movs	r2, #0
 800a558:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f7ff ff5b 	bl	800a418 <SPI_WaitFifoStateUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d007      	beq.n	800a578 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a56c:	f043 0220 	orr.w	r2, r3, #32
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e027      	b.n	800a5c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	2200      	movs	r2, #0
 800a580:	2180      	movs	r1, #128	@ 0x80
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7ff fec0 	bl	800a308 <SPI_WaitFlagStateUntilTimeout>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d007      	beq.n	800a59e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a592:	f043 0220 	orr.w	r2, r3, #32
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a59a:	2303      	movs	r3, #3
 800a59c:	e014      	b.n	800a5c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f7ff ff34 	bl	800a418 <SPI_WaitFifoStateUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d007      	beq.n	800a5c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5ba:	f043 0220 	orr.w	r2, r3, #32
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e000      	b.n	800a5c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e049      	b.n	800a676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f841 	bl	800a67e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3304      	adds	r3, #4
 800a60c:	4619      	mov	r1, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	f000 fcae 	bl	800af70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
	...

0800a694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d001      	beq.n	800a6ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e054      	b.n	800a756 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68da      	ldr	r2, [r3, #12]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f042 0201 	orr.w	r2, r2, #1
 800a6c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a26      	ldr	r2, [pc, #152]	@ (800a764 <HAL_TIM_Base_Start_IT+0xd0>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d022      	beq.n	800a714 <HAL_TIM_Base_Start_IT+0x80>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6d6:	d01d      	beq.n	800a714 <HAL_TIM_Base_Start_IT+0x80>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a22      	ldr	r2, [pc, #136]	@ (800a768 <HAL_TIM_Base_Start_IT+0xd4>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d018      	beq.n	800a714 <HAL_TIM_Base_Start_IT+0x80>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a21      	ldr	r2, [pc, #132]	@ (800a76c <HAL_TIM_Base_Start_IT+0xd8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d013      	beq.n	800a714 <HAL_TIM_Base_Start_IT+0x80>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a770 <HAL_TIM_Base_Start_IT+0xdc>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d00e      	beq.n	800a714 <HAL_TIM_Base_Start_IT+0x80>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a774 <HAL_TIM_Base_Start_IT+0xe0>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d009      	beq.n	800a714 <HAL_TIM_Base_Start_IT+0x80>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a1c      	ldr	r2, [pc, #112]	@ (800a778 <HAL_TIM_Base_Start_IT+0xe4>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d004      	beq.n	800a714 <HAL_TIM_Base_Start_IT+0x80>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a1b      	ldr	r2, [pc, #108]	@ (800a77c <HAL_TIM_Base_Start_IT+0xe8>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d115      	bne.n	800a740 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689a      	ldr	r2, [r3, #8]
 800a71a:	4b19      	ldr	r3, [pc, #100]	@ (800a780 <HAL_TIM_Base_Start_IT+0xec>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b06      	cmp	r3, #6
 800a724:	d015      	beq.n	800a752 <HAL_TIM_Base_Start_IT+0xbe>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a72c:	d011      	beq.n	800a752 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f042 0201 	orr.w	r2, r2, #1
 800a73c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a73e:	e008      	b.n	800a752 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f042 0201 	orr.w	r2, r2, #1
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	e000      	b.n	800a754 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	40012c00 	.word	0x40012c00
 800a768:	40000400 	.word	0x40000400
 800a76c:	40000800 	.word	0x40000800
 800a770:	40000c00 	.word	0x40000c00
 800a774:	40013400 	.word	0x40013400
 800a778:	40014000 	.word	0x40014000
 800a77c:	40015000 	.word	0x40015000
 800a780:	00010007 	.word	0x00010007

0800a784 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e049      	b.n	800a82a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7f7 f854 	bl	8001858 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f000 fbd4 	bl	800af70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d104      	bne.n	800a852 <HAL_TIM_IC_Start_IT+0x1e>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	e023      	b.n	800a89a <HAL_TIM_IC_Start_IT+0x66>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b04      	cmp	r3, #4
 800a856:	d104      	bne.n	800a862 <HAL_TIM_IC_Start_IT+0x2e>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	e01b      	b.n	800a89a <HAL_TIM_IC_Start_IT+0x66>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b08      	cmp	r3, #8
 800a866:	d104      	bne.n	800a872 <HAL_TIM_IC_Start_IT+0x3e>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	e013      	b.n	800a89a <HAL_TIM_IC_Start_IT+0x66>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b0c      	cmp	r3, #12
 800a876:	d104      	bne.n	800a882 <HAL_TIM_IC_Start_IT+0x4e>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	e00b      	b.n	800a89a <HAL_TIM_IC_Start_IT+0x66>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2b10      	cmp	r3, #16
 800a886:	d104      	bne.n	800a892 <HAL_TIM_IC_Start_IT+0x5e>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	e003      	b.n	800a89a <HAL_TIM_IC_Start_IT+0x66>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d104      	bne.n	800a8ac <HAL_TIM_IC_Start_IT+0x78>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	e013      	b.n	800a8d4 <HAL_TIM_IC_Start_IT+0xa0>
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d104      	bne.n	800a8bc <HAL_TIM_IC_Start_IT+0x88>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	e00b      	b.n	800a8d4 <HAL_TIM_IC_Start_IT+0xa0>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	d104      	bne.n	800a8cc <HAL_TIM_IC_Start_IT+0x98>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	e003      	b.n	800a8d4 <HAL_TIM_IC_Start_IT+0xa0>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d102      	bne.n	800a8e2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8dc:	7b7b      	ldrb	r3, [r7, #13]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d001      	beq.n	800a8e6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e0e2      	b.n	800aaac <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d104      	bne.n	800a8f6 <HAL_TIM_IC_Start_IT+0xc2>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8f4:	e023      	b.n	800a93e <HAL_TIM_IC_Start_IT+0x10a>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d104      	bne.n	800a906 <HAL_TIM_IC_Start_IT+0xd2>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a904:	e01b      	b.n	800a93e <HAL_TIM_IC_Start_IT+0x10a>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d104      	bne.n	800a916 <HAL_TIM_IC_Start_IT+0xe2>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2202      	movs	r2, #2
 800a910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a914:	e013      	b.n	800a93e <HAL_TIM_IC_Start_IT+0x10a>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b0c      	cmp	r3, #12
 800a91a:	d104      	bne.n	800a926 <HAL_TIM_IC_Start_IT+0xf2>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a924:	e00b      	b.n	800a93e <HAL_TIM_IC_Start_IT+0x10a>
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b10      	cmp	r3, #16
 800a92a:	d104      	bne.n	800a936 <HAL_TIM_IC_Start_IT+0x102>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2202      	movs	r2, #2
 800a930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a934:	e003      	b.n	800a93e <HAL_TIM_IC_Start_IT+0x10a>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2202      	movs	r2, #2
 800a93a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d104      	bne.n	800a94e <HAL_TIM_IC_Start_IT+0x11a>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a94c:	e013      	b.n	800a976 <HAL_TIM_IC_Start_IT+0x142>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b04      	cmp	r3, #4
 800a952:	d104      	bne.n	800a95e <HAL_TIM_IC_Start_IT+0x12a>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2202      	movs	r2, #2
 800a958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a95c:	e00b      	b.n	800a976 <HAL_TIM_IC_Start_IT+0x142>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b08      	cmp	r3, #8
 800a962:	d104      	bne.n	800a96e <HAL_TIM_IC_Start_IT+0x13a>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2202      	movs	r2, #2
 800a968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a96c:	e003      	b.n	800a976 <HAL_TIM_IC_Start_IT+0x142>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2202      	movs	r2, #2
 800a972:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b0c      	cmp	r3, #12
 800a97a:	d841      	bhi.n	800aa00 <HAL_TIM_IC_Start_IT+0x1cc>
 800a97c:	a201      	add	r2, pc, #4	@ (adr r2, 800a984 <HAL_TIM_IC_Start_IT+0x150>)
 800a97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a982:	bf00      	nop
 800a984:	0800a9b9 	.word	0x0800a9b9
 800a988:	0800aa01 	.word	0x0800aa01
 800a98c:	0800aa01 	.word	0x0800aa01
 800a990:	0800aa01 	.word	0x0800aa01
 800a994:	0800a9cb 	.word	0x0800a9cb
 800a998:	0800aa01 	.word	0x0800aa01
 800a99c:	0800aa01 	.word	0x0800aa01
 800a9a0:	0800aa01 	.word	0x0800aa01
 800a9a4:	0800a9dd 	.word	0x0800a9dd
 800a9a8:	0800aa01 	.word	0x0800aa01
 800a9ac:	0800aa01 	.word	0x0800aa01
 800a9b0:	0800aa01 	.word	0x0800aa01
 800a9b4:	0800a9ef 	.word	0x0800a9ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68da      	ldr	r2, [r3, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f042 0202 	orr.w	r2, r2, #2
 800a9c6:	60da      	str	r2, [r3, #12]
      break;
 800a9c8:	e01d      	b.n	800aa06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68da      	ldr	r2, [r3, #12]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f042 0204 	orr.w	r2, r2, #4
 800a9d8:	60da      	str	r2, [r3, #12]
      break;
 800a9da:	e014      	b.n	800aa06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68da      	ldr	r2, [r3, #12]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f042 0208 	orr.w	r2, r2, #8
 800a9ea:	60da      	str	r2, [r3, #12]
      break;
 800a9ec:	e00b      	b.n	800aa06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68da      	ldr	r2, [r3, #12]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f042 0210 	orr.w	r2, r2, #16
 800a9fc:	60da      	str	r2, [r3, #12]
      break;
 800a9fe:	e002      	b.n	800aa06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	73fb      	strb	r3, [r7, #15]
      break;
 800aa04:	bf00      	nop
  }

  if (status == HAL_OK)
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d14e      	bne.n	800aaaa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2201      	movs	r2, #1
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fc89 	bl	800b32c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a25      	ldr	r2, [pc, #148]	@ (800aab4 <HAL_TIM_IC_Start_IT+0x280>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d022      	beq.n	800aa6a <HAL_TIM_IC_Start_IT+0x236>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa2c:	d01d      	beq.n	800aa6a <HAL_TIM_IC_Start_IT+0x236>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a21      	ldr	r2, [pc, #132]	@ (800aab8 <HAL_TIM_IC_Start_IT+0x284>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d018      	beq.n	800aa6a <HAL_TIM_IC_Start_IT+0x236>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1f      	ldr	r2, [pc, #124]	@ (800aabc <HAL_TIM_IC_Start_IT+0x288>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d013      	beq.n	800aa6a <HAL_TIM_IC_Start_IT+0x236>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a1e      	ldr	r2, [pc, #120]	@ (800aac0 <HAL_TIM_IC_Start_IT+0x28c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d00e      	beq.n	800aa6a <HAL_TIM_IC_Start_IT+0x236>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1c      	ldr	r2, [pc, #112]	@ (800aac4 <HAL_TIM_IC_Start_IT+0x290>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d009      	beq.n	800aa6a <HAL_TIM_IC_Start_IT+0x236>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a1b      	ldr	r2, [pc, #108]	@ (800aac8 <HAL_TIM_IC_Start_IT+0x294>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d004      	beq.n	800aa6a <HAL_TIM_IC_Start_IT+0x236>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a19      	ldr	r2, [pc, #100]	@ (800aacc <HAL_TIM_IC_Start_IT+0x298>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d115      	bne.n	800aa96 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	4b17      	ldr	r3, [pc, #92]	@ (800aad0 <HAL_TIM_IC_Start_IT+0x29c>)
 800aa72:	4013      	ands	r3, r2
 800aa74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	2b06      	cmp	r3, #6
 800aa7a:	d015      	beq.n	800aaa8 <HAL_TIM_IC_Start_IT+0x274>
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa82:	d011      	beq.n	800aaa8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f042 0201 	orr.w	r2, r2, #1
 800aa92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa94:	e008      	b.n	800aaa8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f042 0201 	orr.w	r2, r2, #1
 800aaa4:	601a      	str	r2, [r3, #0]
 800aaa6:	e000      	b.n	800aaaa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaa8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	40012c00 	.word	0x40012c00
 800aab8:	40000400 	.word	0x40000400
 800aabc:	40000800 	.word	0x40000800
 800aac0:	40000c00 	.word	0x40000c00
 800aac4:	40013400 	.word	0x40013400
 800aac8:	40014000 	.word	0x40014000
 800aacc:	40015000 	.word	0x40015000
 800aad0:	00010007 	.word	0x00010007

0800aad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d020      	beq.n	800ab38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d01b      	beq.n	800ab38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f06f 0202 	mvn.w	r2, #2
 800ab08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	f003 0303 	and.w	r3, r3, #3
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7f7 fd2e 	bl	8002580 <HAL_TIM_IC_CaptureCallback>
 800ab24:	e005      	b.n	800ab32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fa04 	bl	800af34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fa0b 	bl	800af48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f003 0304 	and.w	r3, r3, #4
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d020      	beq.n	800ab84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01b      	beq.n	800ab84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f06f 0204 	mvn.w	r2, #4
 800ab54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2202      	movs	r2, #2
 800ab5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7f7 fd08 	bl	8002580 <HAL_TIM_IC_CaptureCallback>
 800ab70:	e005      	b.n	800ab7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f9de 	bl	800af34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f9e5 	bl	800af48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f003 0308 	and.w	r3, r3, #8
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d020      	beq.n	800abd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f003 0308 	and.w	r3, r3, #8
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01b      	beq.n	800abd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f06f 0208 	mvn.w	r2, #8
 800aba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2204      	movs	r2, #4
 800aba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	f003 0303 	and.w	r3, r3, #3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7f7 fce2 	bl	8002580 <HAL_TIM_IC_CaptureCallback>
 800abbc:	e005      	b.n	800abca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f9b8 	bl	800af34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f9bf 	bl	800af48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f003 0310 	and.w	r3, r3, #16
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d020      	beq.n	800ac1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f003 0310 	and.w	r3, r3, #16
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d01b      	beq.n	800ac1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f06f 0210 	mvn.w	r2, #16
 800abec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2208      	movs	r2, #8
 800abf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7f7 fcbc 	bl	8002580 <HAL_TIM_IC_CaptureCallback>
 800ac08:	e005      	b.n	800ac16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f992 	bl	800af34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f999 	bl	800af48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00c      	beq.n	800ac40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d007      	beq.n	800ac40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f06f 0201 	mvn.w	r2, #1
 800ac38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7f6 fbcc 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d104      	bne.n	800ac54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00c      	beq.n	800ac6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d007      	beq.n	800ac6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ac66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fc25 	bl	800b4b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00c      	beq.n	800ac92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d007      	beq.n	800ac92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ac8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fc1d 	bl	800b4cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00c      	beq.n	800acb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800acae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f953 	bl	800af5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	f003 0320 	and.w	r3, r3, #32
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00c      	beq.n	800acda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f003 0320 	and.w	r3, r3, #32
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d007      	beq.n	800acda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f06f 0220 	mvn.w	r2, #32
 800acd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fbe5 	bl	800b4a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00c      	beq.n	800acfe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d007      	beq.n	800acfe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800acf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fbf1 	bl	800b4e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00c      	beq.n	800ad22 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d007      	beq.n	800ad22 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ad1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fbe9 	bl	800b4f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00c      	beq.n	800ad46 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d007      	beq.n	800ad46 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ad3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fbe1 	bl	800b508 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00c      	beq.n	800ad6a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d007      	beq.n	800ad6a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ad62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fbd9 	bl	800b51c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad6a:	bf00      	nop
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b086      	sub	sp, #24
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d101      	bne.n	800ad90 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	e088      	b.n	800aea2 <HAL_TIM_IC_ConfigChannel+0x130>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d11b      	bne.n	800add6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800adae:	f000 f993 	bl	800b0d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	699a      	ldr	r2, [r3, #24]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 020c 	bic.w	r2, r2, #12
 800adc0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6999      	ldr	r1, [r3, #24]
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	689a      	ldr	r2, [r3, #8]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	619a      	str	r2, [r3, #24]
 800add4:	e060      	b.n	800ae98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b04      	cmp	r3, #4
 800adda:	d11c      	bne.n	800ae16 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800adec:	f000 f9e8 	bl	800b1c0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	699a      	ldr	r2, [r3, #24]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800adfe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6999      	ldr	r1, [r3, #24]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	021a      	lsls	r2, r3, #8
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	430a      	orrs	r2, r1
 800ae12:	619a      	str	r2, [r3, #24]
 800ae14:	e040      	b.n	800ae98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b08      	cmp	r3, #8
 800ae1a:	d11b      	bne.n	800ae54 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ae2c:	f000 fa05 	bl	800b23a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	69da      	ldr	r2, [r3, #28]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f022 020c 	bic.w	r2, r2, #12
 800ae3e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	69d9      	ldr	r1, [r3, #28]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	689a      	ldr	r2, [r3, #8]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	61da      	str	r2, [r3, #28]
 800ae52:	e021      	b.n	800ae98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b0c      	cmp	r3, #12
 800ae58:	d11c      	bne.n	800ae94 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ae6a:	f000 fa22 	bl	800b2b2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	69da      	ldr	r2, [r3, #28]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ae7c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69d9      	ldr	r1, [r3, #28]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	021a      	lsls	r2, r3, #8
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	61da      	str	r2, [r3, #28]
 800ae92:	e001      	b.n	800ae98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aea0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	2b0c      	cmp	r3, #12
 800aebe:	d831      	bhi.n	800af24 <HAL_TIM_ReadCapturedValue+0x78>
 800aec0:	a201      	add	r2, pc, #4	@ (adr r2, 800aec8 <HAL_TIM_ReadCapturedValue+0x1c>)
 800aec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec6:	bf00      	nop
 800aec8:	0800aefd 	.word	0x0800aefd
 800aecc:	0800af25 	.word	0x0800af25
 800aed0:	0800af25 	.word	0x0800af25
 800aed4:	0800af25 	.word	0x0800af25
 800aed8:	0800af07 	.word	0x0800af07
 800aedc:	0800af25 	.word	0x0800af25
 800aee0:	0800af25 	.word	0x0800af25
 800aee4:	0800af25 	.word	0x0800af25
 800aee8:	0800af11 	.word	0x0800af11
 800aeec:	0800af25 	.word	0x0800af25
 800aef0:	0800af25 	.word	0x0800af25
 800aef4:	0800af25 	.word	0x0800af25
 800aef8:	0800af1b 	.word	0x0800af1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af02:	60fb      	str	r3, [r7, #12]

      break;
 800af04:	e00f      	b.n	800af26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af0c:	60fb      	str	r3, [r7, #12]

      break;
 800af0e:	e00a      	b.n	800af26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af16:	60fb      	str	r3, [r7, #12]

      break;
 800af18:	e005      	b.n	800af26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af20:	60fb      	str	r3, [r7, #12]

      break;
 800af22:	e000      	b.n	800af26 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800af24:	bf00      	nop
  }

  return tmpreg;
 800af26:	68fb      	ldr	r3, [r7, #12]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a4c      	ldr	r2, [pc, #304]	@ (800b0b4 <TIM_Base_SetConfig+0x144>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d017      	beq.n	800afb8 <TIM_Base_SetConfig+0x48>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af8e:	d013      	beq.n	800afb8 <TIM_Base_SetConfig+0x48>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a49      	ldr	r2, [pc, #292]	@ (800b0b8 <TIM_Base_SetConfig+0x148>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d00f      	beq.n	800afb8 <TIM_Base_SetConfig+0x48>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a48      	ldr	r2, [pc, #288]	@ (800b0bc <TIM_Base_SetConfig+0x14c>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00b      	beq.n	800afb8 <TIM_Base_SetConfig+0x48>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a47      	ldr	r2, [pc, #284]	@ (800b0c0 <TIM_Base_SetConfig+0x150>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d007      	beq.n	800afb8 <TIM_Base_SetConfig+0x48>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a46      	ldr	r2, [pc, #280]	@ (800b0c4 <TIM_Base_SetConfig+0x154>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d003      	beq.n	800afb8 <TIM_Base_SetConfig+0x48>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a45      	ldr	r2, [pc, #276]	@ (800b0c8 <TIM_Base_SetConfig+0x158>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d108      	bne.n	800afca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a39      	ldr	r2, [pc, #228]	@ (800b0b4 <TIM_Base_SetConfig+0x144>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d023      	beq.n	800b01a <TIM_Base_SetConfig+0xaa>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afd8:	d01f      	beq.n	800b01a <TIM_Base_SetConfig+0xaa>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a36      	ldr	r2, [pc, #216]	@ (800b0b8 <TIM_Base_SetConfig+0x148>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d01b      	beq.n	800b01a <TIM_Base_SetConfig+0xaa>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a35      	ldr	r2, [pc, #212]	@ (800b0bc <TIM_Base_SetConfig+0x14c>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d017      	beq.n	800b01a <TIM_Base_SetConfig+0xaa>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a34      	ldr	r2, [pc, #208]	@ (800b0c0 <TIM_Base_SetConfig+0x150>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d013      	beq.n	800b01a <TIM_Base_SetConfig+0xaa>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a33      	ldr	r2, [pc, #204]	@ (800b0c4 <TIM_Base_SetConfig+0x154>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d00f      	beq.n	800b01a <TIM_Base_SetConfig+0xaa>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a33      	ldr	r2, [pc, #204]	@ (800b0cc <TIM_Base_SetConfig+0x15c>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d00b      	beq.n	800b01a <TIM_Base_SetConfig+0xaa>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a32      	ldr	r2, [pc, #200]	@ (800b0d0 <TIM_Base_SetConfig+0x160>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d007      	beq.n	800b01a <TIM_Base_SetConfig+0xaa>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a31      	ldr	r2, [pc, #196]	@ (800b0d4 <TIM_Base_SetConfig+0x164>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d003      	beq.n	800b01a <TIM_Base_SetConfig+0xaa>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a2c      	ldr	r2, [pc, #176]	@ (800b0c8 <TIM_Base_SetConfig+0x158>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d108      	bne.n	800b02c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	4313      	orrs	r3, r2
 800b02a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	689a      	ldr	r2, [r3, #8]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a18      	ldr	r2, [pc, #96]	@ (800b0b4 <TIM_Base_SetConfig+0x144>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d013      	beq.n	800b080 <TIM_Base_SetConfig+0x110>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a1a      	ldr	r2, [pc, #104]	@ (800b0c4 <TIM_Base_SetConfig+0x154>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d00f      	beq.n	800b080 <TIM_Base_SetConfig+0x110>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a1a      	ldr	r2, [pc, #104]	@ (800b0cc <TIM_Base_SetConfig+0x15c>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00b      	beq.n	800b080 <TIM_Base_SetConfig+0x110>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a19      	ldr	r2, [pc, #100]	@ (800b0d0 <TIM_Base_SetConfig+0x160>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d007      	beq.n	800b080 <TIM_Base_SetConfig+0x110>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a18      	ldr	r2, [pc, #96]	@ (800b0d4 <TIM_Base_SetConfig+0x164>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d003      	beq.n	800b080 <TIM_Base_SetConfig+0x110>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a13      	ldr	r2, [pc, #76]	@ (800b0c8 <TIM_Base_SetConfig+0x158>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d103      	bne.n	800b088 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	691a      	ldr	r2, [r3, #16]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b01      	cmp	r3, #1
 800b098:	d105      	bne.n	800b0a6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	f023 0201 	bic.w	r2, r3, #1
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	611a      	str	r2, [r3, #16]
  }
}
 800b0a6:	bf00      	nop
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	40012c00 	.word	0x40012c00
 800b0b8:	40000400 	.word	0x40000400
 800b0bc:	40000800 	.word	0x40000800
 800b0c0:	40000c00 	.word	0x40000c00
 800b0c4:	40013400 	.word	0x40013400
 800b0c8:	40015000 	.word	0x40015000
 800b0cc:	40014000 	.word	0x40014000
 800b0d0:	40014400 	.word	0x40014400
 800b0d4:	40014800 	.word	0x40014800

0800b0d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b087      	sub	sp, #28
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
 800b0e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
 800b0f0:	f023 0201 	bic.w	r2, r3, #1
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	4a28      	ldr	r2, [pc, #160]	@ (800b1a4 <TIM_TI1_SetConfig+0xcc>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d01b      	beq.n	800b13e <TIM_TI1_SetConfig+0x66>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b10c:	d017      	beq.n	800b13e <TIM_TI1_SetConfig+0x66>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	4a25      	ldr	r2, [pc, #148]	@ (800b1a8 <TIM_TI1_SetConfig+0xd0>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d013      	beq.n	800b13e <TIM_TI1_SetConfig+0x66>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	4a24      	ldr	r2, [pc, #144]	@ (800b1ac <TIM_TI1_SetConfig+0xd4>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d00f      	beq.n	800b13e <TIM_TI1_SetConfig+0x66>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4a23      	ldr	r2, [pc, #140]	@ (800b1b0 <TIM_TI1_SetConfig+0xd8>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d00b      	beq.n	800b13e <TIM_TI1_SetConfig+0x66>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	4a22      	ldr	r2, [pc, #136]	@ (800b1b4 <TIM_TI1_SetConfig+0xdc>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d007      	beq.n	800b13e <TIM_TI1_SetConfig+0x66>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4a21      	ldr	r2, [pc, #132]	@ (800b1b8 <TIM_TI1_SetConfig+0xe0>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d003      	beq.n	800b13e <TIM_TI1_SetConfig+0x66>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	4a20      	ldr	r2, [pc, #128]	@ (800b1bc <TIM_TI1_SetConfig+0xe4>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d101      	bne.n	800b142 <TIM_TI1_SetConfig+0x6a>
 800b13e:	2301      	movs	r3, #1
 800b140:	e000      	b.n	800b144 <TIM_TI1_SetConfig+0x6c>
 800b142:	2300      	movs	r3, #0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d008      	beq.n	800b15a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f023 0303 	bic.w	r3, r3, #3
 800b14e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4313      	orrs	r3, r2
 800b156:	617b      	str	r3, [r7, #20]
 800b158:	e003      	b.n	800b162 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f043 0301 	orr.w	r3, r3, #1
 800b160:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	011b      	lsls	r3, r3, #4
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	697a      	ldr	r2, [r7, #20]
 800b172:	4313      	orrs	r3, r2
 800b174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f023 030a 	bic.w	r3, r3, #10
 800b17c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	f003 030a 	and.w	r3, r3, #10
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	4313      	orrs	r3, r2
 800b188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	621a      	str	r2, [r3, #32]
}
 800b196:	bf00      	nop
 800b198:	371c      	adds	r7, #28
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	40012c00 	.word	0x40012c00
 800b1a8:	40000400 	.word	0x40000400
 800b1ac:	40000800 	.word	0x40000800
 800b1b0:	40000c00 	.word	0x40000c00
 800b1b4:	40013400 	.word	0x40013400
 800b1b8:	40014000 	.word	0x40014000
 800b1bc:	40015000 	.word	0x40015000

0800b1c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b087      	sub	sp, #28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	f023 0210 	bic.w	r2, r3, #16
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	021b      	lsls	r3, r3, #8
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b1fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	031b      	lsls	r3, r3, #12
 800b204:	b29b      	uxth	r3, r3
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	4313      	orrs	r3, r2
 800b20a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b212:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	011b      	lsls	r3, r3, #4
 800b218:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	621a      	str	r2, [r3, #32]
}
 800b22e:	bf00      	nop
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b087      	sub	sp, #28
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	607a      	str	r2, [r7, #4]
 800b246:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f023 0303 	bic.w	r3, r3, #3
 800b266:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b276:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	011b      	lsls	r3, r3, #4
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	4313      	orrs	r3, r2
 800b282:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800b28a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	021b      	lsls	r3, r3, #8
 800b290:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	4313      	orrs	r3, r2
 800b298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	621a      	str	r2, [r3, #32]
}
 800b2a6:	bf00      	nop
 800b2a8:	371c      	adds	r7, #28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b087      	sub	sp, #28
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	60f8      	str	r0, [r7, #12]
 800b2ba:	60b9      	str	r1, [r7, #8]
 800b2bc:	607a      	str	r2, [r7, #4]
 800b2be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6a1b      	ldr	r3, [r3, #32]
 800b2c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	69db      	ldr	r3, [r3, #28]
 800b2d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	021b      	lsls	r3, r3, #8
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b2f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	031b      	lsls	r3, r3, #12
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800b304:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	031b      	lsls	r3, r3, #12
 800b30a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	4313      	orrs	r3, r2
 800b312:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	621a      	str	r2, [r3, #32]
}
 800b320:	bf00      	nop
 800b322:	371c      	adds	r7, #28
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b087      	sub	sp, #28
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f003 031f 	and.w	r3, r3, #31
 800b33e:	2201      	movs	r2, #1
 800b340:	fa02 f303 	lsl.w	r3, r2, r3
 800b344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6a1a      	ldr	r2, [r3, #32]
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	43db      	mvns	r3, r3
 800b34e:	401a      	ands	r2, r3
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a1a      	ldr	r2, [r3, #32]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f003 031f 	and.w	r3, r3, #31
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	fa01 f303 	lsl.w	r3, r1, r3
 800b364:	431a      	orrs	r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	621a      	str	r2, [r3, #32]
}
 800b36a:	bf00      	nop
 800b36c:	371c      	adds	r7, #28
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
	...

0800b378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d101      	bne.n	800b390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b38c:	2302      	movs	r3, #2
 800b38e:	e074      	b.n	800b47a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2202      	movs	r2, #2
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a34      	ldr	r2, [pc, #208]	@ (800b488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d009      	beq.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a33      	ldr	r2, [pc, #204]	@ (800b48c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d004      	beq.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a31      	ldr	r2, [pc, #196]	@ (800b490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d108      	bne.n	800b3e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b3d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b3e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a21      	ldr	r2, [pc, #132]	@ (800b488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d022      	beq.n	800b44e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b410:	d01d      	beq.n	800b44e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a1f      	ldr	r2, [pc, #124]	@ (800b494 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d018      	beq.n	800b44e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a1d      	ldr	r2, [pc, #116]	@ (800b498 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d013      	beq.n	800b44e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a1c      	ldr	r2, [pc, #112]	@ (800b49c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d00e      	beq.n	800b44e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a15      	ldr	r2, [pc, #84]	@ (800b48c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d009      	beq.n	800b44e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a18      	ldr	r2, [pc, #96]	@ (800b4a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d004      	beq.n	800b44e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a11      	ldr	r2, [pc, #68]	@ (800b490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d10c      	bne.n	800b468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	40012c00 	.word	0x40012c00
 800b48c:	40013400 	.word	0x40013400
 800b490:	40015000 	.word	0x40015000
 800b494:	40000400 	.word	0x40000400
 800b498:	40000800 	.word	0x40000800
 800b49c:	40000c00 	.word	0x40000c00
 800b4a0:	40014000 	.word	0x40014000

0800b4a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d101      	bne.n	800b542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e042      	b.n	800b5c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d106      	bne.n	800b55a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7f6 fa13 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2224      	movs	r2, #36	@ 0x24
 800b55e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f022 0201 	bic.w	r2, r2, #1
 800b570:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fb24 	bl	800bbc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f825 	bl	800b5d0 <UART_SetConfig>
 800b586:	4603      	mov	r3, r0
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d101      	bne.n	800b590 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e01b      	b.n	800b5c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b59e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	689a      	ldr	r2, [r3, #8]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b5ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f042 0201 	orr.w	r2, r2, #1
 800b5be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fba3 	bl	800bd0c <UART_CheckIdleState>
 800b5c6:	4603      	mov	r3, r0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5d4:	b08c      	sub	sp, #48	@ 0x30
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	431a      	orrs	r2, r3
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	695b      	ldr	r3, [r3, #20]
 800b5ee:	431a      	orrs	r2, r3
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	4baa      	ldr	r3, [pc, #680]	@ (800b8a8 <UART_SetConfig+0x2d8>)
 800b600:	4013      	ands	r3, r2
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	6812      	ldr	r2, [r2, #0]
 800b606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b608:	430b      	orrs	r3, r1
 800b60a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	430a      	orrs	r2, r1
 800b620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a9f      	ldr	r2, [pc, #636]	@ (800b8ac <UART_SetConfig+0x2dc>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d004      	beq.n	800b63c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b638:	4313      	orrs	r3, r2
 800b63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b646:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	6812      	ldr	r2, [r2, #0]
 800b64e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b650:	430b      	orrs	r3, r1
 800b652:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65a:	f023 010f 	bic.w	r1, r3, #15
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	430a      	orrs	r2, r1
 800b668:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a90      	ldr	r2, [pc, #576]	@ (800b8b0 <UART_SetConfig+0x2e0>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d125      	bne.n	800b6c0 <UART_SetConfig+0xf0>
 800b674:	4b8f      	ldr	r3, [pc, #572]	@ (800b8b4 <UART_SetConfig+0x2e4>)
 800b676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b67a:	f003 0303 	and.w	r3, r3, #3
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d81a      	bhi.n	800b6b8 <UART_SetConfig+0xe8>
 800b682:	a201      	add	r2, pc, #4	@ (adr r2, 800b688 <UART_SetConfig+0xb8>)
 800b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b688:	0800b699 	.word	0x0800b699
 800b68c:	0800b6a9 	.word	0x0800b6a9
 800b690:	0800b6a1 	.word	0x0800b6a1
 800b694:	0800b6b1 	.word	0x0800b6b1
 800b698:	2301      	movs	r3, #1
 800b69a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b69e:	e116      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6a6:	e112      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b6a8:	2304      	movs	r3, #4
 800b6aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ae:	e10e      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b6b0:	2308      	movs	r3, #8
 800b6b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6b6:	e10a      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b6b8:	2310      	movs	r3, #16
 800b6ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6be:	e106      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a7c      	ldr	r2, [pc, #496]	@ (800b8b8 <UART_SetConfig+0x2e8>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d138      	bne.n	800b73c <UART_SetConfig+0x16c>
 800b6ca:	4b7a      	ldr	r3, [pc, #488]	@ (800b8b4 <UART_SetConfig+0x2e4>)
 800b6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6d0:	f003 030c 	and.w	r3, r3, #12
 800b6d4:	2b0c      	cmp	r3, #12
 800b6d6:	d82d      	bhi.n	800b734 <UART_SetConfig+0x164>
 800b6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e0 <UART_SetConfig+0x110>)
 800b6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6de:	bf00      	nop
 800b6e0:	0800b715 	.word	0x0800b715
 800b6e4:	0800b735 	.word	0x0800b735
 800b6e8:	0800b735 	.word	0x0800b735
 800b6ec:	0800b735 	.word	0x0800b735
 800b6f0:	0800b725 	.word	0x0800b725
 800b6f4:	0800b735 	.word	0x0800b735
 800b6f8:	0800b735 	.word	0x0800b735
 800b6fc:	0800b735 	.word	0x0800b735
 800b700:	0800b71d 	.word	0x0800b71d
 800b704:	0800b735 	.word	0x0800b735
 800b708:	0800b735 	.word	0x0800b735
 800b70c:	0800b735 	.word	0x0800b735
 800b710:	0800b72d 	.word	0x0800b72d
 800b714:	2300      	movs	r3, #0
 800b716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b71a:	e0d8      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b71c:	2302      	movs	r3, #2
 800b71e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b722:	e0d4      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b724:	2304      	movs	r3, #4
 800b726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b72a:	e0d0      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b72c:	2308      	movs	r3, #8
 800b72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b732:	e0cc      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b734:	2310      	movs	r3, #16
 800b736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b73a:	e0c8      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a5e      	ldr	r2, [pc, #376]	@ (800b8bc <UART_SetConfig+0x2ec>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d125      	bne.n	800b792 <UART_SetConfig+0x1c2>
 800b746:	4b5b      	ldr	r3, [pc, #364]	@ (800b8b4 <UART_SetConfig+0x2e4>)
 800b748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b74c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b750:	2b30      	cmp	r3, #48	@ 0x30
 800b752:	d016      	beq.n	800b782 <UART_SetConfig+0x1b2>
 800b754:	2b30      	cmp	r3, #48	@ 0x30
 800b756:	d818      	bhi.n	800b78a <UART_SetConfig+0x1ba>
 800b758:	2b20      	cmp	r3, #32
 800b75a:	d00a      	beq.n	800b772 <UART_SetConfig+0x1a2>
 800b75c:	2b20      	cmp	r3, #32
 800b75e:	d814      	bhi.n	800b78a <UART_SetConfig+0x1ba>
 800b760:	2b00      	cmp	r3, #0
 800b762:	d002      	beq.n	800b76a <UART_SetConfig+0x19a>
 800b764:	2b10      	cmp	r3, #16
 800b766:	d008      	beq.n	800b77a <UART_SetConfig+0x1aa>
 800b768:	e00f      	b.n	800b78a <UART_SetConfig+0x1ba>
 800b76a:	2300      	movs	r3, #0
 800b76c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b770:	e0ad      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b772:	2302      	movs	r3, #2
 800b774:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b778:	e0a9      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b77a:	2304      	movs	r3, #4
 800b77c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b780:	e0a5      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b782:	2308      	movs	r3, #8
 800b784:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b788:	e0a1      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b78a:	2310      	movs	r3, #16
 800b78c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b790:	e09d      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a4a      	ldr	r2, [pc, #296]	@ (800b8c0 <UART_SetConfig+0x2f0>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d125      	bne.n	800b7e8 <UART_SetConfig+0x218>
 800b79c:	4b45      	ldr	r3, [pc, #276]	@ (800b8b4 <UART_SetConfig+0x2e4>)
 800b79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b7a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7a8:	d016      	beq.n	800b7d8 <UART_SetConfig+0x208>
 800b7aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7ac:	d818      	bhi.n	800b7e0 <UART_SetConfig+0x210>
 800b7ae:	2b80      	cmp	r3, #128	@ 0x80
 800b7b0:	d00a      	beq.n	800b7c8 <UART_SetConfig+0x1f8>
 800b7b2:	2b80      	cmp	r3, #128	@ 0x80
 800b7b4:	d814      	bhi.n	800b7e0 <UART_SetConfig+0x210>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <UART_SetConfig+0x1f0>
 800b7ba:	2b40      	cmp	r3, #64	@ 0x40
 800b7bc:	d008      	beq.n	800b7d0 <UART_SetConfig+0x200>
 800b7be:	e00f      	b.n	800b7e0 <UART_SetConfig+0x210>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7c6:	e082      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ce:	e07e      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b7d0:	2304      	movs	r3, #4
 800b7d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7d6:	e07a      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b7d8:	2308      	movs	r3, #8
 800b7da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7de:	e076      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7e6:	e072      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a35      	ldr	r2, [pc, #212]	@ (800b8c4 <UART_SetConfig+0x2f4>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d12a      	bne.n	800b848 <UART_SetConfig+0x278>
 800b7f2:	4b30      	ldr	r3, [pc, #192]	@ (800b8b4 <UART_SetConfig+0x2e4>)
 800b7f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b800:	d01a      	beq.n	800b838 <UART_SetConfig+0x268>
 800b802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b806:	d81b      	bhi.n	800b840 <UART_SetConfig+0x270>
 800b808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b80c:	d00c      	beq.n	800b828 <UART_SetConfig+0x258>
 800b80e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b812:	d815      	bhi.n	800b840 <UART_SetConfig+0x270>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d003      	beq.n	800b820 <UART_SetConfig+0x250>
 800b818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b81c:	d008      	beq.n	800b830 <UART_SetConfig+0x260>
 800b81e:	e00f      	b.n	800b840 <UART_SetConfig+0x270>
 800b820:	2300      	movs	r3, #0
 800b822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b826:	e052      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b828:	2302      	movs	r3, #2
 800b82a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b82e:	e04e      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b830:	2304      	movs	r3, #4
 800b832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b836:	e04a      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b838:	2308      	movs	r3, #8
 800b83a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b83e:	e046      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b840:	2310      	movs	r3, #16
 800b842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b846:	e042      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a17      	ldr	r2, [pc, #92]	@ (800b8ac <UART_SetConfig+0x2dc>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d13a      	bne.n	800b8c8 <UART_SetConfig+0x2f8>
 800b852:	4b18      	ldr	r3, [pc, #96]	@ (800b8b4 <UART_SetConfig+0x2e4>)
 800b854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b858:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b85c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b860:	d01a      	beq.n	800b898 <UART_SetConfig+0x2c8>
 800b862:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b866:	d81b      	bhi.n	800b8a0 <UART_SetConfig+0x2d0>
 800b868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b86c:	d00c      	beq.n	800b888 <UART_SetConfig+0x2b8>
 800b86e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b872:	d815      	bhi.n	800b8a0 <UART_SetConfig+0x2d0>
 800b874:	2b00      	cmp	r3, #0
 800b876:	d003      	beq.n	800b880 <UART_SetConfig+0x2b0>
 800b878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b87c:	d008      	beq.n	800b890 <UART_SetConfig+0x2c0>
 800b87e:	e00f      	b.n	800b8a0 <UART_SetConfig+0x2d0>
 800b880:	2300      	movs	r3, #0
 800b882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b886:	e022      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b888:	2302      	movs	r3, #2
 800b88a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b88e:	e01e      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b890:	2304      	movs	r3, #4
 800b892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b896:	e01a      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b898:	2308      	movs	r3, #8
 800b89a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b89e:	e016      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8a6:	e012      	b.n	800b8ce <UART_SetConfig+0x2fe>
 800b8a8:	cfff69f3 	.word	0xcfff69f3
 800b8ac:	40008000 	.word	0x40008000
 800b8b0:	40013800 	.word	0x40013800
 800b8b4:	40021000 	.word	0x40021000
 800b8b8:	40004400 	.word	0x40004400
 800b8bc:	40004800 	.word	0x40004800
 800b8c0:	40004c00 	.word	0x40004c00
 800b8c4:	40005000 	.word	0x40005000
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4aae      	ldr	r2, [pc, #696]	@ (800bb8c <UART_SetConfig+0x5bc>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	f040 8097 	bne.w	800ba08 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b8da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8de:	2b08      	cmp	r3, #8
 800b8e0:	d823      	bhi.n	800b92a <UART_SetConfig+0x35a>
 800b8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e8 <UART_SetConfig+0x318>)
 800b8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e8:	0800b90d 	.word	0x0800b90d
 800b8ec:	0800b92b 	.word	0x0800b92b
 800b8f0:	0800b915 	.word	0x0800b915
 800b8f4:	0800b92b 	.word	0x0800b92b
 800b8f8:	0800b91b 	.word	0x0800b91b
 800b8fc:	0800b92b 	.word	0x0800b92b
 800b900:	0800b92b 	.word	0x0800b92b
 800b904:	0800b92b 	.word	0x0800b92b
 800b908:	0800b923 	.word	0x0800b923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b90c:	f7fd fcb4 	bl	8009278 <HAL_RCC_GetPCLK1Freq>
 800b910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b912:	e010      	b.n	800b936 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b914:	4b9e      	ldr	r3, [pc, #632]	@ (800bb90 <UART_SetConfig+0x5c0>)
 800b916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b918:	e00d      	b.n	800b936 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b91a:	f7fd fc3f 	bl	800919c <HAL_RCC_GetSysClockFreq>
 800b91e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b920:	e009      	b.n	800b936 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b928:	e005      	b.n	800b936 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b92a:	2300      	movs	r3, #0
 800b92c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b934:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 8130 	beq.w	800bb9e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b942:	4a94      	ldr	r2, [pc, #592]	@ (800bb94 <UART_SetConfig+0x5c4>)
 800b944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b948:	461a      	mov	r2, r3
 800b94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b950:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	4613      	mov	r3, r2
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	4413      	add	r3, r2
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d305      	bcc.n	800b96e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d903      	bls.n	800b976 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b974:	e113      	b.n	800bb9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b978:	2200      	movs	r2, #0
 800b97a:	60bb      	str	r3, [r7, #8]
 800b97c:	60fa      	str	r2, [r7, #12]
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b982:	4a84      	ldr	r2, [pc, #528]	@ (800bb94 <UART_SetConfig+0x5c4>)
 800b984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	2200      	movs	r2, #0
 800b98c:	603b      	str	r3, [r7, #0]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b994:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b998:	f7f4 fd5e 	bl	8000458 <__aeabi_uldivmod>
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	f04f 0200 	mov.w	r2, #0
 800b9a8:	f04f 0300 	mov.w	r3, #0
 800b9ac:	020b      	lsls	r3, r1, #8
 800b9ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9b2:	0202      	lsls	r2, r0, #8
 800b9b4:	6979      	ldr	r1, [r7, #20]
 800b9b6:	6849      	ldr	r1, [r1, #4]
 800b9b8:	0849      	lsrs	r1, r1, #1
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	460c      	mov	r4, r1
 800b9be:	4605      	mov	r5, r0
 800b9c0:	eb12 0804 	adds.w	r8, r2, r4
 800b9c4:	eb43 0905 	adc.w	r9, r3, r5
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	469a      	mov	sl, r3
 800b9d0:	4693      	mov	fp, r2
 800b9d2:	4652      	mov	r2, sl
 800b9d4:	465b      	mov	r3, fp
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	4649      	mov	r1, r9
 800b9da:	f7f4 fd3d 	bl	8000458 <__aeabi_uldivmod>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9ec:	d308      	bcc.n	800ba00 <UART_SetConfig+0x430>
 800b9ee:	6a3b      	ldr	r3, [r7, #32]
 800b9f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9f4:	d204      	bcs.n	800ba00 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6a3a      	ldr	r2, [r7, #32]
 800b9fc:	60da      	str	r2, [r3, #12]
 800b9fe:	e0ce      	b.n	800bb9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba06:	e0ca      	b.n	800bb9e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	69db      	ldr	r3, [r3, #28]
 800ba0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba10:	d166      	bne.n	800bae0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ba12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba16:	2b08      	cmp	r3, #8
 800ba18:	d827      	bhi.n	800ba6a <UART_SetConfig+0x49a>
 800ba1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba20 <UART_SetConfig+0x450>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba45 	.word	0x0800ba45
 800ba24:	0800ba4d 	.word	0x0800ba4d
 800ba28:	0800ba55 	.word	0x0800ba55
 800ba2c:	0800ba6b 	.word	0x0800ba6b
 800ba30:	0800ba5b 	.word	0x0800ba5b
 800ba34:	0800ba6b 	.word	0x0800ba6b
 800ba38:	0800ba6b 	.word	0x0800ba6b
 800ba3c:	0800ba6b 	.word	0x0800ba6b
 800ba40:	0800ba63 	.word	0x0800ba63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba44:	f7fd fc18 	bl	8009278 <HAL_RCC_GetPCLK1Freq>
 800ba48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba4a:	e014      	b.n	800ba76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba4c:	f7fd fc2a 	bl	80092a4 <HAL_RCC_GetPCLK2Freq>
 800ba50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba52:	e010      	b.n	800ba76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba54:	4b4e      	ldr	r3, [pc, #312]	@ (800bb90 <UART_SetConfig+0x5c0>)
 800ba56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba58:	e00d      	b.n	800ba76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba5a:	f7fd fb9f 	bl	800919c <HAL_RCC_GetSysClockFreq>
 800ba5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba60:	e009      	b.n	800ba76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba68:	e005      	b.n	800ba76 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 8090 	beq.w	800bb9e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba82:	4a44      	ldr	r2, [pc, #272]	@ (800bb94 <UART_SetConfig+0x5c4>)
 800ba84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba90:	005a      	lsls	r2, r3, #1
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	085b      	lsrs	r3, r3, #1
 800ba98:	441a      	add	r2, r3
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	2b0f      	cmp	r3, #15
 800baa8:	d916      	bls.n	800bad8 <UART_SetConfig+0x508>
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bab0:	d212      	bcs.n	800bad8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bab2:	6a3b      	ldr	r3, [r7, #32]
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	f023 030f 	bic.w	r3, r3, #15
 800baba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800babc:	6a3b      	ldr	r3, [r7, #32]
 800babe:	085b      	lsrs	r3, r3, #1
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	f003 0307 	and.w	r3, r3, #7
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	8bfb      	ldrh	r3, [r7, #30]
 800baca:	4313      	orrs	r3, r2
 800bacc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	8bfa      	ldrh	r2, [r7, #30]
 800bad4:	60da      	str	r2, [r3, #12]
 800bad6:	e062      	b.n	800bb9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bade:	e05e      	b.n	800bb9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bae0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	d828      	bhi.n	800bb3a <UART_SetConfig+0x56a>
 800bae8:	a201      	add	r2, pc, #4	@ (adr r2, 800baf0 <UART_SetConfig+0x520>)
 800baea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baee:	bf00      	nop
 800baf0:	0800bb15 	.word	0x0800bb15
 800baf4:	0800bb1d 	.word	0x0800bb1d
 800baf8:	0800bb25 	.word	0x0800bb25
 800bafc:	0800bb3b 	.word	0x0800bb3b
 800bb00:	0800bb2b 	.word	0x0800bb2b
 800bb04:	0800bb3b 	.word	0x0800bb3b
 800bb08:	0800bb3b 	.word	0x0800bb3b
 800bb0c:	0800bb3b 	.word	0x0800bb3b
 800bb10:	0800bb33 	.word	0x0800bb33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb14:	f7fd fbb0 	bl	8009278 <HAL_RCC_GetPCLK1Freq>
 800bb18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb1a:	e014      	b.n	800bb46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb1c:	f7fd fbc2 	bl	80092a4 <HAL_RCC_GetPCLK2Freq>
 800bb20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb22:	e010      	b.n	800bb46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb24:	4b1a      	ldr	r3, [pc, #104]	@ (800bb90 <UART_SetConfig+0x5c0>)
 800bb26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb28:	e00d      	b.n	800bb46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb2a:	f7fd fb37 	bl	800919c <HAL_RCC_GetSysClockFreq>
 800bb2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb30:	e009      	b.n	800bb46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb38:	e005      	b.n	800bb46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb44:	bf00      	nop
    }

    if (pclk != 0U)
 800bb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d028      	beq.n	800bb9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb50:	4a10      	ldr	r2, [pc, #64]	@ (800bb94 <UART_SetConfig+0x5c4>)
 800bb52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb56:	461a      	mov	r2, r3
 800bb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	085b      	lsrs	r3, r3, #1
 800bb64:	441a      	add	r2, r3
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	2b0f      	cmp	r3, #15
 800bb74:	d910      	bls.n	800bb98 <UART_SetConfig+0x5c8>
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb7c:	d20c      	bcs.n	800bb98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	60da      	str	r2, [r3, #12]
 800bb88:	e009      	b.n	800bb9e <UART_SetConfig+0x5ce>
 800bb8a:	bf00      	nop
 800bb8c:	40008000 	.word	0x40008000
 800bb90:	00f42400 	.word	0x00f42400
 800bb94:	0800e764 	.word	0x0800e764
      }
      else
      {
        ret = HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bbba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3730      	adds	r7, #48	@ 0x30
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bbc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd4:	f003 0308 	and.w	r3, r3, #8
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00a      	beq.n	800bbf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	430a      	orrs	r2, r1
 800bbf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00a      	beq.n	800bc14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	430a      	orrs	r2, r1
 800bc12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc18:	f003 0302 	and.w	r3, r3, #2
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00a      	beq.n	800bc36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc3a:	f003 0304 	and.w	r3, r3, #4
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00a      	beq.n	800bc58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	430a      	orrs	r2, r1
 800bc56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc5c:	f003 0310 	and.w	r3, r3, #16
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00a      	beq.n	800bc7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	430a      	orrs	r2, r1
 800bc78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc7e:	f003 0320 	and.w	r3, r3, #32
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00a      	beq.n	800bc9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d01a      	beq.n	800bcde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	430a      	orrs	r2, r1
 800bcbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcc6:	d10a      	bne.n	800bcde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	430a      	orrs	r2, r1
 800bcdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00a      	beq.n	800bd00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	430a      	orrs	r2, r1
 800bcfe:	605a      	str	r2, [r3, #4]
  }
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b098      	sub	sp, #96	@ 0x60
 800bd10:	af02      	add	r7, sp, #8
 800bd12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd1c:	f7f7 fc3a 	bl	8003594 <HAL_GetTick>
 800bd20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 0308 	and.w	r3, r3, #8
 800bd2c:	2b08      	cmp	r3, #8
 800bd2e:	d12f      	bne.n	800bd90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f88e 	bl	800be60 <UART_WaitOnFlagUntilTimeout>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d022      	beq.n	800bd90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd52:	e853 3f00 	ldrex	r3, [r3]
 800bd56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
 800bd66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd68:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd70:	e841 2300 	strex	r3, r2, [r1]
 800bd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1e6      	bne.n	800bd4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2220      	movs	r2, #32
 800bd80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	e063      	b.n	800be58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0304 	and.w	r3, r3, #4
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	d149      	bne.n	800be32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bda6:	2200      	movs	r2, #0
 800bda8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f857 	bl	800be60 <UART_WaitOnFlagUntilTimeout>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d03c      	beq.n	800be32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc0:	e853 3f00 	ldrex	r3, [r3]
 800bdc4:	623b      	str	r3, [r7, #32]
   return(result);
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bdd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdde:	e841 2300 	strex	r3, r2, [r1]
 800bde2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1e6      	bne.n	800bdb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3308      	adds	r3, #8
 800bdf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	e853 3f00 	ldrex	r3, [r3]
 800bdf8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f023 0301 	bic.w	r3, r3, #1
 800be00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	3308      	adds	r3, #8
 800be08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be0a:	61fa      	str	r2, [r7, #28]
 800be0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0e:	69b9      	ldr	r1, [r7, #24]
 800be10:	69fa      	ldr	r2, [r7, #28]
 800be12:	e841 2300 	strex	r3, r2, [r1]
 800be16:	617b      	str	r3, [r7, #20]
   return(result);
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1e5      	bne.n	800bdea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2220      	movs	r2, #32
 800be22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be2e:	2303      	movs	r3, #3
 800be30:	e012      	b.n	800be58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2220      	movs	r2, #32
 800be36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2220      	movs	r2, #32
 800be3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3758      	adds	r7, #88	@ 0x58
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	603b      	str	r3, [r7, #0]
 800be6c:	4613      	mov	r3, r2
 800be6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be70:	e04f      	b.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be78:	d04b      	beq.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be7a:	f7f7 fb8b 	bl	8003594 <HAL_GetTick>
 800be7e:	4602      	mov	r2, r0
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	69ba      	ldr	r2, [r7, #24]
 800be86:	429a      	cmp	r2, r3
 800be88:	d302      	bcc.n	800be90 <UART_WaitOnFlagUntilTimeout+0x30>
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800be90:	2303      	movs	r3, #3
 800be92:	e04e      	b.n	800bf32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 0304 	and.w	r3, r3, #4
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d037      	beq.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2b80      	cmp	r3, #128	@ 0x80
 800bea6:	d034      	beq.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2b40      	cmp	r3, #64	@ 0x40
 800beac:	d031      	beq.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	f003 0308 	and.w	r3, r3, #8
 800beb8:	2b08      	cmp	r3, #8
 800beba:	d110      	bne.n	800bede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2208      	movs	r2, #8
 800bec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f838 	bl	800bf3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2208      	movs	r2, #8
 800bece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e029      	b.n	800bf32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	69db      	ldr	r3, [r3, #28]
 800bee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800beec:	d111      	bne.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f000 f81e 	bl	800bf3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2220      	movs	r2, #32
 800bf02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e00f      	b.n	800bf32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	69da      	ldr	r2, [r3, #28]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	bf0c      	ite	eq
 800bf22:	2301      	moveq	r3, #1
 800bf24:	2300      	movne	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	461a      	mov	r2, r3
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d0a0      	beq.n	800be72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b095      	sub	sp, #84	@ 0x54
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf4a:	e853 3f00 	ldrex	r3, [r3]
 800bf4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf60:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf68:	e841 2300 	strex	r3, r2, [r1]
 800bf6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1e6      	bne.n	800bf42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3308      	adds	r3, #8
 800bf7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	6a3b      	ldr	r3, [r7, #32]
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf8a:	f023 0301 	bic.w	r3, r3, #1
 800bf8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3308      	adds	r3, #8
 800bf96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfa0:	e841 2300 	strex	r3, r2, [r1]
 800bfa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1e3      	bne.n	800bf74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d118      	bne.n	800bfe6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	e853 3f00 	ldrex	r3, [r3]
 800bfc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	f023 0310 	bic.w	r3, r3, #16
 800bfc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfd2:	61bb      	str	r3, [r7, #24]
 800bfd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd6:	6979      	ldr	r1, [r7, #20]
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	e841 2300 	strex	r3, r2, [r1]
 800bfde:	613b      	str	r3, [r7, #16]
   return(result);
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d1e6      	bne.n	800bfb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2220      	movs	r2, #32
 800bfea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bffa:	bf00      	nop
 800bffc:	3754      	adds	r7, #84	@ 0x54
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c006:	b480      	push	{r7}
 800c008:	b085      	sub	sp, #20
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c014:	2b01      	cmp	r3, #1
 800c016:	d101      	bne.n	800c01c <HAL_UARTEx_DisableFifoMode+0x16>
 800c018:	2302      	movs	r3, #2
 800c01a:	e027      	b.n	800c06c <HAL_UARTEx_DisableFifoMode+0x66>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2224      	movs	r2, #36	@ 0x24
 800c028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f022 0201 	bic.w	r2, r2, #1
 800c042:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c04a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2220      	movs	r2, #32
 800c05e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d101      	bne.n	800c090 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c08c:	2302      	movs	r3, #2
 800c08e:	e02d      	b.n	800c0ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2224      	movs	r2, #36	@ 0x24
 800c09c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f022 0201 	bic.w	r2, r2, #1
 800c0b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	430a      	orrs	r2, r1
 800c0ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f84f 	bl	800c170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c104:	2b01      	cmp	r3, #1
 800c106:	d101      	bne.n	800c10c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c108:	2302      	movs	r3, #2
 800c10a:	e02d      	b.n	800c168 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2224      	movs	r2, #36	@ 0x24
 800c118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f022 0201 	bic.w	r2, r2, #1
 800c132:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f811 	bl	800c170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2220      	movs	r2, #32
 800c15a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d108      	bne.n	800c192 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c190:	e031      	b.n	800c1f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c192:	2308      	movs	r3, #8
 800c194:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c196:	2308      	movs	r3, #8
 800c198:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	0e5b      	lsrs	r3, r3, #25
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	f003 0307 	and.w	r3, r3, #7
 800c1a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	0f5b      	lsrs	r3, r3, #29
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	f003 0307 	and.w	r3, r3, #7
 800c1b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	7b3a      	ldrb	r2, [r7, #12]
 800c1be:	4911      	ldr	r1, [pc, #68]	@ (800c204 <UARTEx_SetNbDataToProcess+0x94>)
 800c1c0:	5c8a      	ldrb	r2, [r1, r2]
 800c1c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1c6:	7b3a      	ldrb	r2, [r7, #12]
 800c1c8:	490f      	ldr	r1, [pc, #60]	@ (800c208 <UARTEx_SetNbDataToProcess+0x98>)
 800c1ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
 800c1da:	7b7a      	ldrb	r2, [r7, #13]
 800c1dc:	4909      	ldr	r1, [pc, #36]	@ (800c204 <UARTEx_SetNbDataToProcess+0x94>)
 800c1de:	5c8a      	ldrb	r2, [r1, r2]
 800c1e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c1e4:	7b7a      	ldrb	r2, [r7, #13]
 800c1e6:	4908      	ldr	r1, [pc, #32]	@ (800c208 <UARTEx_SetNbDataToProcess+0x98>)
 800c1e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	0800e77c 	.word	0x0800e77c
 800c208:	0800e784 	.word	0x0800e784

0800c20c <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b096      	sub	sp, #88	@ 0x58
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	3303      	adds	r3, #3
 800c21e:	f023 0303 	bic.w	r3, r3, #3
 800c222:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c224:	f3ef 8310 	mrs	r3, PRIMASK
 800c228:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800c22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800c22c:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800c22e:	b672      	cpsid	i
#endif
    return(int_posture);
 800c230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800c232:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c234:	4b55      	ldr	r3, [pc, #340]	@ (800c38c <_tx_byte_allocate+0x180>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800c23a:	2300      	movs	r3, #0
 800c23c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c242:	621a      	str	r2, [r3, #32]
 800c244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c246:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24a:	f383 8810 	msr	PRIMASK, r3
}
 800c24e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800c250:	6879      	ldr	r1, [r7, #4]
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 f9b2 	bl	800c5bc <_tx_byte_pool_search>
 800c258:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c25a:	f3ef 8310 	mrs	r3, PRIMASK
 800c25e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c262:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c264:	b672      	cpsid	i
    return(int_posture);
 800c266:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800c268:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800c26a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d002      	beq.n	800c276 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800c270:	2301      	movs	r3, #1
 800c272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c274:	e006      	b.n	800c284 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d101      	bne.n	800c284 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800c280:	2301      	movs	r3, #1
 800c282:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800c284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d0d9      	beq.n	800c23e <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c28e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800c290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c292:	2b00      	cmp	r3, #0
 800c294:	d008      	beq.n	800c2a8 <_tx_byte_allocate+0x9c>
 800c296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c298:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c29a:	6a3b      	ldr	r3, [r7, #32]
 800c29c:	f383 8810 	msr	PRIMASK, r3
}
 800c2a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2a6:	e06c      	b.n	800c382 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d061      	beq.n	800c372 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800c2ae:	4b38      	ldr	r3, [pc, #224]	@ (800c390 <_tx_byte_allocate+0x184>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d007      	beq.n	800c2c6 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800c2b6:	2310      	movs	r3, #16
 800c2b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	f383 8810 	msr	PRIMASK, r3
}
 800c2c4:	e05d      	b.n	800c382 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800c2c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2c8:	4a32      	ldr	r2, [pc, #200]	@ (800c394 <_tx_byte_allocate+0x188>)
 800c2ca:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800c2cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800c2d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800c2d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800c2de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2e8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2f0:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800c2fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c306:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c30a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c30c:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c30e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c312:	675a      	str	r2, [r3, #116]	@ 0x74
 800c314:	e011      	b.n	800c33a <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c31c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c31e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c320:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c326:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c32a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c32c:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c330:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c332:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c338:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800c33a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c33c:	2209      	movs	r2, #9
 800c33e:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c342:	2201      	movs	r2, #1
 800c344:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c348:	683a      	ldr	r2, [r7, #0]
 800c34a:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c34c:	4b10      	ldr	r3, [pc, #64]	@ (800c390 <_tx_byte_allocate+0x184>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	3301      	adds	r3, #1
 800c352:	4a0f      	ldr	r2, [pc, #60]	@ (800c390 <_tx_byte_allocate+0x184>)
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c358:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	f383 8810 	msr	PRIMASK, r3
}
 800c360:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c362:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c364:	f000 ff96 	bl	800d294 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800c368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c36e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c370:	e007      	b.n	800c382 <_tx_byte_allocate+0x176>
 800c372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c374:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	f383 8810 	msr	PRIMASK, r3
}
 800c37c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800c37e:	2310      	movs	r3, #16
 800c380:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800c382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800c384:	4618      	mov	r0, r3
 800c386:	3758      	adds	r7, #88	@ 0x58
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	20010bf8 	.word	0x20010bf8
 800c390:	20010c90 	.word	0x20010c90
 800c394:	0800c399 	.word	0x0800c399

0800c398 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08e      	sub	sp, #56	@ 0x38
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c3a6:	623b      	str	r3, [r7, #32]
    return(posture);
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c3aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c3ac:	b672      	cpsid	i
    return(int_posture);
 800c3ae:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800c3b0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3b6:	4a33      	ldr	r2, [pc, #204]	@ (800c484 <_tx_byte_pool_cleanup+0xec>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d158      	bne.n	800c46e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d152      	bne.n	800c46e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3cc:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d04c      	beq.n	800c46e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a2b      	ldr	r2, [pc, #172]	@ (800c488 <_tx_byte_pool_cleanup+0xf0>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d147      	bne.n	800c46e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800c3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d043      	beq.n	800c46e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3f0:	1e5a      	subs	r2, r3, #1
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f4:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d103      	bne.n	800c40a <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800c402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c404:	2200      	movs	r2, #0
 800c406:	625a      	str	r2, [r3, #36]	@ 0x24
 800c408:	e013      	b.n	800c432 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c40e:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c414:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c41a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c420:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800c422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d102      	bne.n	800c432 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800c42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c430:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c436:	2b09      	cmp	r3, #9
 800c438:	d119      	bne.n	800c46e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2210      	movs	r2, #16
 800c43e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c442:	4b12      	ldr	r3, [pc, #72]	@ (800c48c <_tx_byte_pool_cleanup+0xf4>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3301      	adds	r3, #1
 800c448:	4a10      	ldr	r2, [pc, #64]	@ (800c48c <_tx_byte_pool_cleanup+0xf4>)
 800c44a:	6013      	str	r3, [r2, #0]
 800c44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c44e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	f383 8810 	msr	PRIMASK, r3
}
 800c456:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fe1b 	bl	800d094 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c45e:	f3ef 8310 	mrs	r3, PRIMASK
 800c462:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c464:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c466:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c468:	b672      	cpsid	i
    return(int_posture);
 800c46a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c46c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c46e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c470:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f383 8810 	msr	PRIMASK, r3
}
 800c478:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c47a:	bf00      	nop
 800c47c:	3738      	adds	r7, #56	@ 0x38
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	0800c399 	.word	0x0800c399
 800c488:	42595445 	.word	0x42595445
 800c48c:	20010c90 	.word	0x20010c90

0800c490 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b08e      	sub	sp, #56	@ 0x38
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800c49e:	2234      	movs	r2, #52	@ 0x34
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	f002 f84c 	bl	800e540 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f023 0303 	bic.w	r3, r3, #3
 800c4ae:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	683a      	ldr	r2, [r7, #0]
 800c4c0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	f1a3 0208 	sub.w	r2, r3, #8
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2202      	movs	r2, #2
 800c4dc:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800c4e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ec:	3b04      	subs	r3, #4
 800c4ee:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800c4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800c4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4fc:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800c4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c500:	3b04      	subs	r3, #4
 800c502:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800c504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800c512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800c516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c51a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800c520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c522:	3304      	adds	r3, #4
 800c524:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800c526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c528:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800c52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5ac <_tx_byte_pool_create+0x11c>)
 800c52e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2200      	movs	r2, #0
 800c534:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c536:	f3ef 8310 	mrs	r3, PRIMASK
 800c53a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c53c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c53e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c540:	b672      	cpsid	i
    return(int_posture);
 800c542:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800c544:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	4a19      	ldr	r2, [pc, #100]	@ (800c5b0 <_tx_byte_pool_create+0x120>)
 800c54a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800c54c:	4b19      	ldr	r3, [pc, #100]	@ (800c5b4 <_tx_byte_pool_create+0x124>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d109      	bne.n	800c568 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800c554:	4a18      	ldr	r2, [pc, #96]	@ (800c5b8 <_tx_byte_pool_create+0x128>)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	631a      	str	r2, [r3, #48]	@ 0x30
 800c566:	e011      	b.n	800c58c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800c568:	4b13      	ldr	r3, [pc, #76]	@ (800c5b8 <_tx_byte_pool_create+0x128>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800c56e:	6a3b      	ldr	r3, [r7, #32]
 800c570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c572:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800c574:	6a3b      	ldr	r3, [r7, #32]
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	69fa      	ldr	r2, [r7, #28]
 800c584:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6a3a      	ldr	r2, [r7, #32]
 800c58a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800c58c:	4b09      	ldr	r3, [pc, #36]	@ (800c5b4 <_tx_byte_pool_create+0x124>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3301      	adds	r3, #1
 800c592:	4a08      	ldr	r2, [pc, #32]	@ (800c5b4 <_tx_byte_pool_create+0x124>)
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c598:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	f383 8810 	msr	PRIMASK, r3
}
 800c5a0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3738      	adds	r7, #56	@ 0x38
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	ffffeeee 	.word	0xffffeeee
 800c5b0:	42595445 	.word	0x42595445
 800c5b4:	20010bec 	.word	0x20010bec
 800c5b8:	20010be8 	.word	0x20010be8

0800c5bc <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b097      	sub	sp, #92	@ 0x5c
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5ca:	f3ef 8310 	mrs	r3, PRIMASK
 800c5ce:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800c5d2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5d4:	b672      	cpsid	i
    return(int_posture);
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800c5d8:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	689a      	ldr	r2, [r3, #8]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	3b02      	subs	r3, #2
 800c5e4:	00db      	lsls	r3, r3, #3
 800c5e6:	4413      	add	r3, r2
 800c5e8:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d308      	bcc.n	800c604 <_tx_byte_pool_search+0x48>
 800c5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5f4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	f383 8810 	msr	PRIMASK, r3
}
 800c5fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	653b      	str	r3, [r7, #80]	@ 0x50
 800c602:	e0dd      	b.n	800c7c0 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c604:	4b72      	ldr	r3, [pc, #456]	@ (800c7d0 <_tx_byte_pool_search+0x214>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c60e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	3301      	adds	r3, #1
 800c61c:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800c61e:	2300      	movs	r3, #0
 800c620:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800c622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c624:	3304      	adds	r3, #4
 800c626:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800c628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62a:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800c62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a68      	ldr	r2, [pc, #416]	@ (800c7d4 <_tx_byte_pool_search+0x218>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d143      	bne.n	800c6be <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800c636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d104      	bne.n	800c646 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c640:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800c642:	2301      	movs	r3, #1
 800c644:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800c646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c648:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800c64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800c650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800c658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c65a:	3b08      	subs	r3, #8
 800c65c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800c65e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	429a      	cmp	r2, r3
 800c664:	d257      	bcs.n	800c716 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800c666:	2300      	movs	r3, #0
 800c668:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800c66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c66c:	3304      	adds	r3, #4
 800c66e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800c670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c672:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800c674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a56      	ldr	r2, [pc, #344]	@ (800c7d4 <_tx_byte_pool_search+0x218>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d113      	bne.n	800c6a6 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800c67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c680:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c688:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	1e5a      	subs	r2, r3, #1
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d114      	bne.n	800c6c8 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6a2:	615a      	str	r2, [r3, #20]
 800c6a4:	e010      	b.n	800c6c8 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800c6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a8:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800c6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800c6b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d008      	beq.n	800c6c8 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800c6b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6bc:	e004      	b.n	800c6c8 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800c6be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6c0:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800c6c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800c6ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	f383 8810 	msr	PRIMASK, r3
}
 800c6de:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c6e4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c6e6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c6e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6ea:	b672      	cpsid	i
    return(int_posture);
 800c6ec:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800c6ee:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6a1b      	ldr	r3, [r3, #32]
 800c6f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d009      	beq.n	800c70e <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	3301      	adds	r3, #1
 800c706:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c70c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800c70e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c710:	2b00      	cmp	r3, #0
 800c712:	d186      	bne.n	800c622 <_tx_byte_pool_search+0x66>
 800c714:	e000      	b.n	800c718 <_tx_byte_pool_search+0x15c>
                    break;
 800c716:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800c718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d048      	beq.n	800c7b0 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800c71e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	2b13      	cmp	r3, #19
 800c726:	d91e      	bls.n	800c766 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	3308      	adds	r3, #8
 800c72c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c72e:	4413      	add	r3, r2
 800c730:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800c732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c734:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800c736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c738:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800c73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c740:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800c742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c744:	3304      	adds	r3, #4
 800c746:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74a:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800c74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c74e:	4a21      	ldr	r2, [pc, #132]	@ (800c7d4 <_tx_byte_pool_search+0x218>)
 800c750:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800c75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c760:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800c766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c768:	3304      	adds	r3, #4
 800c76a:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800c76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76e:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800c770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	689a      	ldr	r2, [r3, #8]
 800c77a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	f1a3 0208 	sub.w	r2, r3, #8
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d105      	bne.n	800c79c <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800c790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c792:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800c794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	615a      	str	r2, [r3, #20]
 800c79c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c79e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f383 8810 	msr	PRIMASK, r3
}
 800c7a6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800c7a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7ae:	e007      	b.n	800c7c0 <_tx_byte_pool_search+0x204>
 800c7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ba:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800c7c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	375c      	adds	r7, #92	@ 0x5c
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	20010bf8 	.word	0x20010bf8
 800c7d4:	ffffeeee 	.word	0xffffeeee

0800c7d8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800c7dc:	f000 fb18 	bl	800ce10 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800c7e0:	f001 f880 	bl	800d8e4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800c7e4:	4b12      	ldr	r3, [pc, #72]	@ (800c830 <_tx_initialize_high_level+0x58>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	601a      	str	r2, [r3, #0]
 800c7ea:	4b12      	ldr	r3, [pc, #72]	@ (800c834 <_tx_initialize_high_level+0x5c>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800c7f0:	4b11      	ldr	r3, [pc, #68]	@ (800c838 <_tx_initialize_high_level+0x60>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	4b11      	ldr	r3, [pc, #68]	@ (800c83c <_tx_initialize_high_level+0x64>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800c7fc:	4b10      	ldr	r3, [pc, #64]	@ (800c840 <_tx_initialize_high_level+0x68>)
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	4b10      	ldr	r3, [pc, #64]	@ (800c844 <_tx_initialize_high_level+0x6c>)
 800c804:	2200      	movs	r2, #0
 800c806:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800c808:	4b0f      	ldr	r3, [pc, #60]	@ (800c848 <_tx_initialize_high_level+0x70>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	601a      	str	r2, [r3, #0]
 800c80e:	4b0f      	ldr	r3, [pc, #60]	@ (800c84c <_tx_initialize_high_level+0x74>)
 800c810:	2200      	movs	r2, #0
 800c812:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800c814:	4b0e      	ldr	r3, [pc, #56]	@ (800c850 <_tx_initialize_high_level+0x78>)
 800c816:	2200      	movs	r2, #0
 800c818:	601a      	str	r2, [r3, #0]
 800c81a:	4b0e      	ldr	r3, [pc, #56]	@ (800c854 <_tx_initialize_high_level+0x7c>)
 800c81c:	2200      	movs	r2, #0
 800c81e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800c820:	4b0d      	ldr	r3, [pc, #52]	@ (800c858 <_tx_initialize_high_level+0x80>)
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	4b0d      	ldr	r3, [pc, #52]	@ (800c85c <_tx_initialize_high_level+0x84>)
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]
#endif
}
 800c82c:	bf00      	nop
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	20010bc0 	.word	0x20010bc0
 800c834:	20010bc4 	.word	0x20010bc4
 800c838:	20010bc8 	.word	0x20010bc8
 800c83c:	20010bcc 	.word	0x20010bcc
 800c840:	20010bd0 	.word	0x20010bd0
 800c844:	20010bd4 	.word	0x20010bd4
 800c848:	20010be0 	.word	0x20010be0
 800c84c:	20010be4 	.word	0x20010be4
 800c850:	20010be8 	.word	0x20010be8
 800c854:	20010bec 	.word	0x20010bec
 800c858:	20010bd8 	.word	0x20010bd8
 800c85c:	20010bdc 	.word	0x20010bdc

0800c860 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800c864:	4b10      	ldr	r3, [pc, #64]	@ (800c8a8 <_tx_initialize_kernel_enter+0x48>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800c86c:	d00c      	beq.n	800c888 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c86e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a8 <_tx_initialize_kernel_enter+0x48>)
 800c870:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800c874:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800c876:	f7f3 fcd3 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800c87a:	f7ff ffad 	bl	800c7d8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800c87e:	4b0b      	ldr	r3, [pc, #44]	@ (800c8ac <_tx_initialize_kernel_enter+0x4c>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3301      	adds	r3, #1
 800c884:	4a09      	ldr	r2, [pc, #36]	@ (800c8ac <_tx_initialize_kernel_enter+0x4c>)
 800c886:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c888:	4b07      	ldr	r3, [pc, #28]	@ (800c8a8 <_tx_initialize_kernel_enter+0x48>)
 800c88a:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800c88e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800c890:	4b07      	ldr	r3, [pc, #28]	@ (800c8b0 <_tx_initialize_kernel_enter+0x50>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f7f3 ff57 	bl	8000748 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800c89a:	4b03      	ldr	r3, [pc, #12]	@ (800c8a8 <_tx_initialize_kernel_enter+0x48>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800c8a0:	f7f3 fcfe 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800c8a4:	bf00      	nop
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20000054 	.word	0x20000054
 800c8ac:	20010c90 	.word	0x20010c90
 800c8b0:	20010bf0 	.word	0x20010bf0

0800c8b4 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b08e      	sub	sp, #56	@ 0x38
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8be:	f3ef 8310 	mrs	r3, PRIMASK
 800c8c2:	623b      	str	r3, [r7, #32]
    return(posture);
 800c8c4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c8c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8c8:	b672      	cpsid	i
    return(int_posture);
 800c8ca:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c8cc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8d2:	4a33      	ldr	r2, [pc, #204]	@ (800c9a0 <_tx_semaphore_cleanup+0xec>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d158      	bne.n	800c98a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d152      	bne.n	800c98a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e8:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d04c      	beq.n	800c98a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a2b      	ldr	r2, [pc, #172]	@ (800c9a4 <_tx_semaphore_cleanup+0xf0>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d147      	bne.n	800c98a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d043      	beq.n	800c98a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	1e5a      	subs	r2, r3, #1
 800c90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c910:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d103      	bne.n	800c926 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c920:	2200      	movs	r2, #0
 800c922:	60da      	str	r2, [r3, #12]
 800c924:	e013      	b.n	800c94e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c92a:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c930:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c936:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c93c:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	429a      	cmp	r2, r3
 800c946:	d102      	bne.n	800c94e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c94a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c94c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c952:	2b06      	cmp	r3, #6
 800c954:	d119      	bne.n	800c98a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	220d      	movs	r2, #13
 800c95a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c95e:	4b12      	ldr	r3, [pc, #72]	@ (800c9a8 <_tx_semaphore_cleanup+0xf4>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3301      	adds	r3, #1
 800c964:	4a10      	ldr	r2, [pc, #64]	@ (800c9a8 <_tx_semaphore_cleanup+0xf4>)
 800c966:	6013      	str	r3, [r2, #0]
 800c968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c96a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	f383 8810 	msr	PRIMASK, r3
}
 800c972:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fb8d 	bl	800d094 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c97a:	f3ef 8310 	mrs	r3, PRIMASK
 800c97e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c980:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c982:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c984:	b672      	cpsid	i
    return(int_posture);
 800c986:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c988:	637b      	str	r3, [r7, #52]	@ 0x34
 800c98a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c98c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f383 8810 	msr	PRIMASK, r3
}
 800c994:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c996:	bf00      	nop
 800c998:	3738      	adds	r7, #56	@ 0x38
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	0800c8b5 	.word	0x0800c8b5
 800c9a4:	53454d41 	.word	0x53454d41
 800c9a8:	20010c90 	.word	0x20010c90

0800c9ac <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b08a      	sub	sp, #40	@ 0x28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c9b8:	221c      	movs	r2, #28
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f001 fdbf 	bl	800e540 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9ce:	f3ef 8310 	mrs	r3, PRIMASK
 800c9d2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c9d4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c9d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9d8:	b672      	cpsid	i
    return(int_posture);
 800c9da:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c9dc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	4a18      	ldr	r2, [pc, #96]	@ (800ca44 <_tx_semaphore_create+0x98>)
 800c9e2:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c9e4:	4b18      	ldr	r3, [pc, #96]	@ (800ca48 <_tx_semaphore_create+0x9c>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d109      	bne.n	800ca00 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c9ec:	4a17      	ldr	r2, [pc, #92]	@ (800ca4c <_tx_semaphore_create+0xa0>)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	619a      	str	r2, [r3, #24]
 800c9fe:	e011      	b.n	800ca24 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800ca00:	4b12      	ldr	r3, [pc, #72]	@ (800ca4c <_tx_semaphore_create+0xa0>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	69fa      	ldr	r2, [r7, #28]
 800ca1c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6a3a      	ldr	r2, [r7, #32]
 800ca22:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800ca24:	4b08      	ldr	r3, [pc, #32]	@ (800ca48 <_tx_semaphore_create+0x9c>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	4a07      	ldr	r2, [pc, #28]	@ (800ca48 <_tx_semaphore_create+0x9c>)
 800ca2c:	6013      	str	r3, [r2, #0]
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca30:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	f383 8810 	msr	PRIMASK, r3
}
 800ca38:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3728      	adds	r7, #40	@ 0x28
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	53454d41 	.word	0x53454d41
 800ca48:	20010bc4 	.word	0x20010bc4
 800ca4c:	20010bc0 	.word	0x20010bc0

0800ca50 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08e      	sub	sp, #56	@ 0x38
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca5e:	f3ef 8310 	mrs	r3, PRIMASK
 800ca62:	623b      	str	r3, [r7, #32]
    return(posture);
 800ca64:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ca66:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca68:	b672      	cpsid	i
    return(int_posture);
 800ca6a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800ca6c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00a      	beq.n	800ca8c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	1e5a      	subs	r2, r3, #1
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	609a      	str	r2, [r3, #8]
 800ca80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca82:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	f383 8810 	msr	PRIMASK, r3
}
 800ca8a:	e068      	b.n	800cb5e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d05d      	beq.n	800cb4e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800ca92:	4b35      	ldr	r3, [pc, #212]	@ (800cb68 <_tx_semaphore_get+0x118>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d008      	beq.n	800caac <_tx_semaphore_get+0x5c>
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f383 8810 	msr	PRIMASK, r3
}
 800caa4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800caa6:	230d      	movs	r3, #13
 800caa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800caaa:	e058      	b.n	800cb5e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800caac:	4b2f      	ldr	r3, [pc, #188]	@ (800cb6c <_tx_semaphore_get+0x11c>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800cab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab4:	4a2e      	ldr	r2, [pc, #184]	@ (800cb70 <_tx_semaphore_get+0x120>)
 800cab6:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800cab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800cabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d109      	bne.n	800cae8 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cad8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800cada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cadc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cade:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800cae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cae4:	675a      	str	r2, [r3, #116]	@ 0x74
 800cae6:	e011      	b.n	800cb0c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800caee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800caf2:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800caf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caf8:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800cafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cafe:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb04:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800cb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb0a:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800cb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb18:	2206      	movs	r2, #6
 800cb1a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	2201      	movs	r2, #1
 800cb20:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cb28:	4b0f      	ldr	r3, [pc, #60]	@ (800cb68 <_tx_semaphore_get+0x118>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	4a0e      	ldr	r2, [pc, #56]	@ (800cb68 <_tx_semaphore_get+0x118>)
 800cb30:	6013      	str	r3, [r2, #0]
 800cb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	f383 8810 	msr	PRIMASK, r3
}
 800cb3c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800cb3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb40:	f000 fba8 	bl	800d294 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800cb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb4c:	e007      	b.n	800cb5e <_tx_semaphore_get+0x10e>
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb50:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f383 8810 	msr	PRIMASK, r3
}
 800cb58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800cb5a:	230d      	movs	r3, #13
 800cb5c:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800cb5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3738      	adds	r7, #56	@ 0x38
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	20010c90 	.word	0x20010c90
 800cb6c:	20010bf8 	.word	0x20010bf8
 800cb70:	0800c8b5 	.word	0x0800c8b5

0800cb74 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08c      	sub	sp, #48	@ 0x30
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb7c:	f3ef 8310 	mrs	r3, PRIMASK
 800cb80:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cb82:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cb84:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb86:	b672      	cpsid	i
    return(int_posture);
 800cb88:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800cb8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	691b      	ldr	r3, [r3, #16]
 800cb90:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800cb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10a      	bne.n	800cbae <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	609a      	str	r2, [r3, #8]
 800cba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	f383 8810 	msr	PRIMASK, r3
}
 800cbac:	e033      	b.n	800cc16 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800cbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800cbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d103      	bne.n	800cbc8 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	60da      	str	r2, [r3, #12]
 800cbc6:	e00e      	b.n	800cbe6 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbcc:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a3a      	ldr	r2, [r7, #32]
 800cbd2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbd8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800cbda:	6a3b      	ldr	r3, [r7, #32]
 800cbdc:	69fa      	ldr	r2, [r7, #28]
 800cbde:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	6a3a      	ldr	r2, [r7, #32]
 800cbe4:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbea:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbee:	2200      	movs	r2, #0
 800cbf0:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800cbfa:	4b09      	ldr	r3, [pc, #36]	@ (800cc20 <_tx_semaphore_put+0xac>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	4a07      	ldr	r2, [pc, #28]	@ (800cc20 <_tx_semaphore_put+0xac>)
 800cc02:	6013      	str	r3, [r2, #0]
 800cc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc06:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f383 8810 	msr	PRIMASK, r3
}
 800cc0e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800cc10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc12:	f000 fa3f 	bl	800d094 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3730      	adds	r7, #48	@ 0x30
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	20010c90 	.word	0x20010c90

0800cc24 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b092      	sub	sp, #72	@ 0x48
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
 800cc30:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800cc32:	2300      	movs	r3, #0
 800cc34:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800cc36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc38:	21ef      	movs	r1, #239	@ 0xef
 800cc3a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cc3c:	f001 fc80 	bl	800e540 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800cc40:	22b0      	movs	r2, #176	@ 0xb0
 800cc42:	2100      	movs	r1, #0
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f001 fc7b 	bl	800e540 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc60:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc66:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc72:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cc7a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cc80:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2220      	movs	r2, #32
 800cc86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cc8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800cc8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc90:	3b01      	subs	r3, #1
 800cc92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc94:	4413      	add	r3, r2
 800cc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc9c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800cc9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d007      	beq.n	800ccb6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800ccb4:	e006      	b.n	800ccc4 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccba:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccc0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2203      	movs	r2, #3
 800ccc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	4a48      	ldr	r2, [pc, #288]	@ (800cdf0 <_tx_thread_create+0x1cc>)
 800ccce:	655a      	str	r2, [r3, #84]	@ 0x54
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800ccd6:	4947      	ldr	r1, [pc, #284]	@ (800cdf4 <_tx_thread_create+0x1d0>)
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f7f3 fb41 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccde:	f3ef 8310 	mrs	r3, PRIMASK
 800cce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800cce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800cce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cce8:	b672      	cpsid	i
    return(int_posture);
 800ccea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ccec:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	4a41      	ldr	r2, [pc, #260]	@ (800cdf8 <_tx_thread_create+0x1d4>)
 800ccf2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800ccf4:	4b41      	ldr	r3, [pc, #260]	@ (800cdfc <_tx_thread_create+0x1d8>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10b      	bne.n	800cd14 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800ccfc:	4a40      	ldr	r2, [pc, #256]	@ (800ce00 <_tx_thread_create+0x1dc>)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800cd12:	e016      	b.n	800cd42 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800cd14:	4b3a      	ldr	r3, [pc, #232]	@ (800ce00 <_tx_thread_create+0x1dc>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800cd1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd20:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800cd22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800cd42:	4b2e      	ldr	r3, [pc, #184]	@ (800cdfc <_tx_thread_create+0x1d8>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	3301      	adds	r3, #1
 800cd48:	4a2c      	ldr	r2, [pc, #176]	@ (800cdfc <_tx_thread_create+0x1d8>)
 800cd4a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cd4c:	4b2d      	ldr	r3, [pc, #180]	@ (800ce04 <_tx_thread_create+0x1e0>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	3301      	adds	r3, #1
 800cd52:	4a2c      	ldr	r2, [pc, #176]	@ (800ce04 <_tx_thread_create+0x1e0>)
 800cd54:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800cd56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d129      	bne.n	800cdb0 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd5c:	f3ef 8305 	mrs	r3, IPSR
 800cd60:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800cd62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800cd64:	4b28      	ldr	r3, [pc, #160]	@ (800ce08 <_tx_thread_create+0x1e4>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800cd6e:	d30d      	bcc.n	800cd8c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800cd70:	4b26      	ldr	r3, [pc, #152]	@ (800ce0c <_tx_thread_create+0x1e8>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800cd76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d009      	beq.n	800cd90 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800cd7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd80:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800cd82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd88:	63da      	str	r2, [r3, #60]	@ 0x3c
 800cd8a:	e001      	b.n	800cd90 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd92:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd94:	6a3b      	ldr	r3, [r7, #32]
 800cd96:	f383 8810 	msr	PRIMASK, r3
}
 800cd9a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f000 f979 	bl	800d094 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cda2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d01e      	beq.n	800cde6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800cda8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdac:	63da      	str	r2, [r3, #60]	@ 0x3c
 800cdae:	e01a      	b.n	800cde6 <_tx_thread_create+0x1c2>
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	f383 8810 	msr	PRIMASK, r3
}
 800cdba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdbc:	f3ef 8310 	mrs	r3, PRIMASK
 800cdc0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cdc2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cdc4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdc6:	b672      	cpsid	i
    return(int_posture);
 800cdc8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800cdca:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cdcc:	4b0d      	ldr	r3, [pc, #52]	@ (800ce04 <_tx_thread_create+0x1e0>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	4a0c      	ldr	r2, [pc, #48]	@ (800ce04 <_tx_thread_create+0x1e0>)
 800cdd4:	6013      	str	r3, [r2, #0]
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	f383 8810 	msr	PRIMASK, r3
}
 800cde0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cde2:	f000 f91d 	bl	800d020 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3748      	adds	r7, #72	@ 0x48
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	0800d569 	.word	0x0800d569
 800cdf4:	0800ce89 	.word	0x0800ce89
 800cdf8:	54485244 	.word	0x54485244
 800cdfc:	20010c04 	.word	0x20010c04
 800ce00:	20010c00 	.word	0x20010c00
 800ce04:	20010c90 	.word	0x20010c90
 800ce08:	20000054 	.word	0x20000054
 800ce0c:	20010bfc 	.word	0x20010bfc

0800ce10 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800ce14:	4b12      	ldr	r3, [pc, #72]	@ (800ce60 <_tx_thread_initialize+0x50>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800ce1a:	4b12      	ldr	r3, [pc, #72]	@ (800ce64 <_tx_thread_initialize+0x54>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800ce20:	4b11      	ldr	r3, [pc, #68]	@ (800ce68 <_tx_thread_initialize+0x58>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ce26:	4b11      	ldr	r3, [pc, #68]	@ (800ce6c <_tx_thread_initialize+0x5c>)
 800ce28:	2220      	movs	r2, #32
 800ce2a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800ce2c:	2280      	movs	r2, #128	@ 0x80
 800ce2e:	2100      	movs	r1, #0
 800ce30:	480f      	ldr	r0, [pc, #60]	@ (800ce70 <_tx_thread_initialize+0x60>)
 800ce32:	f001 fb85 	bl	800e540 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800ce36:	4b0f      	ldr	r3, [pc, #60]	@ (800ce74 <_tx_thread_initialize+0x64>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800ce3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ce78 <_tx_thread_initialize+0x68>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800ce42:	4b0e      	ldr	r3, [pc, #56]	@ (800ce7c <_tx_thread_initialize+0x6c>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800ce48:	4b0d      	ldr	r3, [pc, #52]	@ (800ce80 <_tx_thread_initialize+0x70>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800ce4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce84 <_tx_thread_initialize+0x74>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800ce56:	4a0b      	ldr	r2, [pc, #44]	@ (800ce84 <_tx_thread_initialize+0x74>)
 800ce58:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800ce5a:	bf00      	nop
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	20010bf8 	.word	0x20010bf8
 800ce64:	20010bfc 	.word	0x20010bfc
 800ce68:	20010c08 	.word	0x20010c08
 800ce6c:	20010c0c 	.word	0x20010c0c
 800ce70:	20010c10 	.word	0x20010c10
 800ce74:	20010c00 	.word	0x20010c00
 800ce78:	20010c04 	.word	0x20010c04
 800ce7c:	20010c90 	.word	0x20010c90
 800ce80:	20010c94 	.word	0x20010c94
 800ce84:	20010c98 	.word	0x20010c98

0800ce88 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b088      	sub	sp, #32
 800ce8c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ce8e:	4b21      	ldr	r3, [pc, #132]	@ (800cf14 <_tx_thread_shell_entry+0x8c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce98:	69fa      	ldr	r2, [r7, #28]
 800ce9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800cea0:	4b1d      	ldr	r3, [pc, #116]	@ (800cf18 <_tx_thread_shell_entry+0x90>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d003      	beq.n	800ceb0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800cea8:	4b1b      	ldr	r3, [pc, #108]	@ (800cf18 <_tx_thread_shell_entry+0x90>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	69f8      	ldr	r0, [r7, #28]
 800ceae:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ceb0:	f3ef 8310 	mrs	r3, PRIMASK
 800ceb4:	607b      	str	r3, [r7, #4]
    return(posture);
 800ceb6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ceb8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ceba:	b672      	cpsid	i
    return(int_posture);
 800cebc:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800cebe:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	2201      	movs	r2, #1
 800cec4:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	2201      	movs	r2, #1
 800ceca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2200      	movs	r2, #0
 800ced0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ced2:	4b12      	ldr	r3, [pc, #72]	@ (800cf1c <_tx_thread_shell_entry+0x94>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3301      	adds	r3, #1
 800ced8:	4a10      	ldr	r2, [pc, #64]	@ (800cf1c <_tx_thread_shell_entry+0x94>)
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	f383 8810 	msr	PRIMASK, r3
}
 800cee6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800cee8:	f3ef 8314 	mrs	r3, CONTROL
 800ceec:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ceee:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800cef0:	617b      	str	r3, [r7, #20]
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f023 0304 	bic.w	r3, r3, #4
 800cef8:	617b      	str	r3, [r7, #20]
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	f383 8814 	msr	CONTROL, r3
}
 800cf04:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800cf06:	69f8      	ldr	r0, [r7, #28]
 800cf08:	f000 f9c4 	bl	800d294 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800cf0c:	bf00      	nop
 800cf0e:	3720      	adds	r7, #32
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	20010bf8 	.word	0x20010bf8
 800cf18:	20010c94 	.word	0x20010c94
 800cf1c:	20010c90 	.word	0x20010c90

0800cf20 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b08e      	sub	sp, #56	@ 0x38
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf28:	f3ef 8310 	mrs	r3, PRIMASK
 800cf2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800cf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800cf30:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf32:	b672      	cpsid	i
    return(int_posture);
 800cf34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cf36:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cf38:	4b35      	ldr	r3, [pc, #212]	@ (800d010 <_tx_thread_sleep+0xf0>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800cf3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d108      	bne.n	800cf56 <_tx_thread_sleep+0x36>
 800cf44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf46:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf48:	6a3b      	ldr	r3, [r7, #32]
 800cf4a:	f383 8810 	msr	PRIMASK, r3
}
 800cf4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cf50:	2313      	movs	r3, #19
 800cf52:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf54:	e056      	b.n	800d004 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf56:	f3ef 8305 	mrs	r3, IPSR
 800cf5a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800cf5c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cf5e:	4b2d      	ldr	r3, [pc, #180]	@ (800d014 <_tx_thread_sleep+0xf4>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d008      	beq.n	800cf7a <_tx_thread_sleep+0x5a>
 800cf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	f383 8810 	msr	PRIMASK, r3
}
 800cf72:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cf74:	2313      	movs	r3, #19
 800cf76:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf78:	e044      	b.n	800d004 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800cf7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7c:	4a26      	ldr	r2, [pc, #152]	@ (800d018 <_tx_thread_sleep+0xf8>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d108      	bne.n	800cf94 <_tx_thread_sleep+0x74>
 800cf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf84:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f383 8810 	msr	PRIMASK, r3
}
 800cf8c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cf8e:	2313      	movs	r3, #19
 800cf90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf92:	e037      	b.n	800d004 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d108      	bne.n	800cfac <_tx_thread_sleep+0x8c>
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	f383 8810 	msr	PRIMASK, r3
}
 800cfa4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfaa:	e02b      	b.n	800d004 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cfac:	4b1b      	ldr	r3, [pc, #108]	@ (800d01c <_tx_thread_sleep+0xfc>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d008      	beq.n	800cfc6 <_tx_thread_sleep+0xa6>
 800cfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f383 8810 	msr	PRIMASK, r3
}
 800cfbe:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800cfc0:	2313      	movs	r3, #19
 800cfc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfc4:	e01e      	b.n	800d004 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800cfc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc8:	2204      	movs	r2, #4
 800cfca:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfce:	2201      	movs	r2, #1
 800cfd0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800cfda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cfe0:	4b0e      	ldr	r3, [pc, #56]	@ (800d01c <_tx_thread_sleep+0xfc>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	4a0d      	ldr	r2, [pc, #52]	@ (800d01c <_tx_thread_sleep+0xfc>)
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfec:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	f383 8810 	msr	PRIMASK, r3
}
 800cff4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800cff6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cff8:	f000 f94c 	bl	800d294 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800cffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d002:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800d004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d006:	4618      	mov	r0, r3
 800d008:	3738      	adds	r7, #56	@ 0x38
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	20010bf8 	.word	0x20010bf8
 800d014:	20000054 	.word	0x20000054
 800d018:	20010d40 	.word	0x20010d40
 800d01c:	20010c90 	.word	0x20010c90

0800d020 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d020:	b480      	push	{r7}
 800d022:	b089      	sub	sp, #36	@ 0x24
 800d024:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d026:	4b17      	ldr	r3, [pc, #92]	@ (800d084 <_tx_thread_system_preempt_check+0x64>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d121      	bne.n	800d076 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d032:	4b15      	ldr	r3, [pc, #84]	@ (800d088 <_tx_thread_system_preempt_check+0x68>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d038:	4b14      	ldr	r3, [pc, #80]	@ (800d08c <_tx_thread_system_preempt_check+0x6c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d03e:	69ba      	ldr	r2, [r7, #24]
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	429a      	cmp	r2, r3
 800d044:	d017      	beq.n	800d076 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d046:	4b12      	ldr	r3, [pc, #72]	@ (800d090 <_tx_thread_system_preempt_check+0x70>)
 800d048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d04c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d04e:	f3ef 8305 	mrs	r3, IPSR
 800d052:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d054:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800d056:	2b00      	cmp	r3, #0
 800d058:	d10c      	bne.n	800d074 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d05a:	f3ef 8310 	mrs	r3, PRIMASK
 800d05e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d060:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800d062:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d064:	b662      	cpsie	i
}
 800d066:	bf00      	nop
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f383 8810 	msr	PRIMASK, r3
}
 800d072:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d074:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d076:	bf00      	nop
 800d078:	3724      	adds	r7, #36	@ 0x24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	20010c90 	.word	0x20010c90
 800d088:	20010bf8 	.word	0x20010bf8
 800d08c:	20010bfc 	.word	0x20010bfc
 800d090:	e000ed04 	.word	0xe000ed04

0800d094 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b096      	sub	sp, #88	@ 0x58
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d09c:	f3ef 8310 	mrs	r3, PRIMASK
 800d0a0:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800d0a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800d0a4:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0a6:	b672      	cpsid	i
    return(int_posture);
 800d0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d0aa:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d005      	beq.n	800d0c0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	334c      	adds	r3, #76	@ 0x4c
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f000 fcf1 	bl	800daa0 <_tx_timer_system_deactivate>
 800d0be:	e002      	b.n	800d0c6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d0c6:	4b6c      	ldr	r3, [pc, #432]	@ (800d278 <_tx_thread_system_resume+0x1e4>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	4a6a      	ldr	r2, [pc, #424]	@ (800d278 <_tx_thread_system_resume+0x1e4>)
 800d0ce:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f040 8083 	bne.w	800d1e0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f000 8097 	beq.w	800d212 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d172      	bne.n	800d1d2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f6:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d0f8:	4a60      	ldr	r2, [pc, #384]	@ (800d27c <_tx_thread_system_resume+0x1e8>)
 800d0fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d100:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800d102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d104:	2b00      	cmp	r3, #0
 800d106:	d154      	bne.n	800d1b2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d108:	495c      	ldr	r1, [pc, #368]	@ (800d27c <_tx_thread_system_resume+0x1e8>)
 800d10a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d11e:	2201      	movs	r2, #1
 800d120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d122:	fa02 f303 	lsl.w	r3, r2, r3
 800d126:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d128:	4b55      	ldr	r3, [pc, #340]	@ (800d280 <_tx_thread_system_resume+0x1ec>)
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d12e:	4313      	orrs	r3, r2
 800d130:	4a53      	ldr	r2, [pc, #332]	@ (800d280 <_tx_thread_system_resume+0x1ec>)
 800d132:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d134:	4b53      	ldr	r3, [pc, #332]	@ (800d284 <_tx_thread_system_resume+0x1f0>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d269      	bcs.n	800d212 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d13e:	4a51      	ldr	r2, [pc, #324]	@ (800d284 <_tx_thread_system_resume+0x1f0>)
 800d140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d142:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d144:	4b50      	ldr	r3, [pc, #320]	@ (800d288 <_tx_thread_system_resume+0x1f4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d14a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d103      	bne.n	800d158 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d150:	4a4d      	ldr	r2, [pc, #308]	@ (800d288 <_tx_thread_system_resume+0x1f4>)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6013      	str	r3, [r2, #0]
 800d156:	e05c      	b.n	800d212 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d15a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d15c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d15e:	429a      	cmp	r2, r3
 800d160:	d257      	bcs.n	800d212 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d162:	4a49      	ldr	r2, [pc, #292]	@ (800d288 <_tx_thread_system_resume+0x1f4>)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d16a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16e:	f383 8810 	msr	PRIMASK, r3
}
 800d172:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d174:	4b40      	ldr	r3, [pc, #256]	@ (800d278 <_tx_thread_system_resume+0x1e4>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800d17a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d174      	bne.n	800d26a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d180:	4b42      	ldr	r3, [pc, #264]	@ (800d28c <_tx_thread_system_resume+0x1f8>)
 800d182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d186:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d188:	f3ef 8305 	mrs	r3, IPSR
 800d18c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800d18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10c      	bne.n	800d1ae <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d194:	f3ef 8310 	mrs	r3, PRIMASK
 800d198:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800d19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800d19c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d19e:	b662      	cpsie	i
}
 800d1a0:	bf00      	nop
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	f383 8810 	msr	PRIMASK, r3
}
 800d1ac:	bf00      	nop
}
 800d1ae:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800d1b0:	e05b      	b.n	800d26a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d1b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d1b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d1be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1c8:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1ce:	621a      	str	r2, [r3, #32]
 800d1d0:	e01f      	b.n	800d212 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2203      	movs	r2, #3
 800d1dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800d1de:	e018      	b.n	800d212 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d014      	beq.n	800d212 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d010      	beq.n	800d212 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d106      	bne.n	800d206 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	631a      	str	r2, [r3, #48]	@ 0x30
 800d204:	e005      	b.n	800d212 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2203      	movs	r2, #3
 800d210:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d212:	4b1f      	ldr	r3, [pc, #124]	@ (800d290 <_tx_thread_system_resume+0x1fc>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d21a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	f383 8810 	msr	PRIMASK, r3
}
 800d222:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d224:	4b18      	ldr	r3, [pc, #96]	@ (800d288 <_tx_thread_system_resume+0x1f4>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d020      	beq.n	800d270 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d22e:	4b12      	ldr	r3, [pc, #72]	@ (800d278 <_tx_thread_system_resume+0x1e4>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800d234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d236:	2b00      	cmp	r3, #0
 800d238:	d11a      	bne.n	800d270 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d23a:	4b14      	ldr	r3, [pc, #80]	@ (800d28c <_tx_thread_system_resume+0x1f8>)
 800d23c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d240:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d242:	f3ef 8305 	mrs	r3, IPSR
 800d246:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d248:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d10f      	bne.n	800d26e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d24e:	f3ef 8310 	mrs	r3, PRIMASK
 800d252:	613b      	str	r3, [r7, #16]
    return(posture);
 800d254:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800d256:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d258:	b662      	cpsie	i
}
 800d25a:	bf00      	nop
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	f383 8810 	msr	PRIMASK, r3
}
 800d266:	bf00      	nop
}
 800d268:	e001      	b.n	800d26e <_tx_thread_system_resume+0x1da>
                                return;
 800d26a:	bf00      	nop
 800d26c:	e000      	b.n	800d270 <_tx_thread_system_resume+0x1dc>
 800d26e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d270:	3758      	adds	r7, #88	@ 0x58
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	20010c90 	.word	0x20010c90
 800d27c:	20010c10 	.word	0x20010c10
 800d280:	20010c08 	.word	0x20010c08
 800d284:	20010c0c 	.word	0x20010c0c
 800d288:	20010bfc 	.word	0x20010bfc
 800d28c:	e000ed04 	.word	0xe000ed04
 800d290:	20010bf8 	.word	0x20010bf8

0800d294 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b09e      	sub	sp, #120	@ 0x78
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d29c:	4b81      	ldr	r3, [pc, #516]	@ (800d4a4 <_tx_thread_system_suspend+0x210>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d2a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800d2a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800d2aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800d2ac:	b672      	cpsid	i
    return(int_posture);
 800d2ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d2b0:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d112      	bne.n	800d2e0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2be:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d2c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d008      	beq.n	800d2d8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d2c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2cc:	d004      	beq.n	800d2d8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	334c      	adds	r3, #76	@ 0x4c
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 fb82 	bl	800d9dc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	69db      	ldr	r3, [r3, #28]
 800d2dc:	4a72      	ldr	r2, [pc, #456]	@ (800d4a8 <_tx_thread_system_suspend+0x214>)
 800d2de:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d2e0:	4b72      	ldr	r3, [pc, #456]	@ (800d4ac <_tx_thread_system_suspend+0x218>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	4a71      	ldr	r2, [pc, #452]	@ (800d4ac <_tx_thread_system_suspend+0x218>)
 800d2e8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	f040 80a6 	bne.w	800d440 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2fe:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a1b      	ldr	r3, [r3, #32]
 800d304:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d306:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d015      	beq.n	800d33a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d312:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d316:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d318:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d31a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d31c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d31e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d320:	4a63      	ldr	r2, [pc, #396]	@ (800d4b0 <_tx_thread_system_suspend+0x21c>)
 800d322:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d157      	bne.n	800d3de <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d32e:	4960      	ldr	r1, [pc, #384]	@ (800d4b0 <_tx_thread_system_suspend+0x21c>)
 800d330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d332:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d338:	e051      	b.n	800d3de <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d33a:	4a5d      	ldr	r2, [pc, #372]	@ (800d4b0 <_tx_thread_system_suspend+0x21c>)
 800d33c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d33e:	2100      	movs	r1, #0
 800d340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d344:	2201      	movs	r2, #1
 800d346:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d348:	fa02 f303 	lsl.w	r3, r2, r3
 800d34c:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d34e:	4b59      	ldr	r3, [pc, #356]	@ (800d4b4 <_tx_thread_system_suspend+0x220>)
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d354:	43db      	mvns	r3, r3
 800d356:	4013      	ands	r3, r2
 800d358:	4a56      	ldr	r2, [pc, #344]	@ (800d4b4 <_tx_thread_system_suspend+0x220>)
 800d35a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d35c:	2300      	movs	r3, #0
 800d35e:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d360:	4b54      	ldr	r3, [pc, #336]	@ (800d4b4 <_tx_thread_system_suspend+0x220>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d366:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d12b      	bne.n	800d3c4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d36c:	4b52      	ldr	r3, [pc, #328]	@ (800d4b8 <_tx_thread_system_suspend+0x224>)
 800d36e:	2220      	movs	r2, #32
 800d370:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d372:	4b52      	ldr	r3, [pc, #328]	@ (800d4bc <_tx_thread_system_suspend+0x228>)
 800d374:	2200      	movs	r2, #0
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d37a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d37c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d37e:	f383 8810 	msr	PRIMASK, r3
}
 800d382:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d384:	4b49      	ldr	r3, [pc, #292]	@ (800d4ac <_tx_thread_system_suspend+0x218>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800d38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f040 8081 	bne.w	800d494 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d392:	4b4b      	ldr	r3, [pc, #300]	@ (800d4c0 <_tx_thread_system_suspend+0x22c>)
 800d394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d398:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d39a:	f3ef 8305 	mrs	r3, IPSR
 800d39e:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800d3a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d10c      	bne.n	800d3c0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800d3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800d3ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d3b0:	b662      	cpsie	i
}
 800d3b2:	bf00      	nop
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b6:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ba:	f383 8810 	msr	PRIMASK, r3
}
 800d3be:	bf00      	nop
}
 800d3c0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d3c2:	e067      	b.n	800d494 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d3c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3c6:	fa93 f3a3 	rbit	r3, r3
 800d3ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d3cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3ce:	fab3 f383 	clz	r3, r3
 800d3d2:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d3d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d3d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d3d8:	4413      	add	r3, r2
 800d3da:	4a37      	ldr	r2, [pc, #220]	@ (800d4b8 <_tx_thread_system_suspend+0x224>)
 800d3dc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d3de:	4b37      	ldr	r3, [pc, #220]	@ (800d4bc <_tx_thread_system_suspend+0x228>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d12b      	bne.n	800d440 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d3e8:	4b33      	ldr	r3, [pc, #204]	@ (800d4b8 <_tx_thread_system_suspend+0x224>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a30      	ldr	r2, [pc, #192]	@ (800d4b0 <_tx_thread_system_suspend+0x21c>)
 800d3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f2:	4a32      	ldr	r2, [pc, #200]	@ (800d4bc <_tx_thread_system_suspend+0x228>)
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d3f8:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fc:	f383 8810 	msr	PRIMASK, r3
}
 800d400:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d402:	4b2a      	ldr	r3, [pc, #168]	@ (800d4ac <_tx_thread_system_suspend+0x218>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800d408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d144      	bne.n	800d498 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d40e:	4b2c      	ldr	r3, [pc, #176]	@ (800d4c0 <_tx_thread_system_suspend+0x22c>)
 800d410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d414:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d416:	f3ef 8305 	mrs	r3, IPSR
 800d41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800d41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10c      	bne.n	800d43c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d422:	f3ef 8310 	mrs	r3, PRIMASK
 800d426:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800d428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800d42a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d42c:	b662      	cpsie	i
}
 800d42e:	bf00      	nop
 800d430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d432:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	f383 8810 	msr	PRIMASK, r3
}
 800d43a:	bf00      	nop
}
 800d43c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d43e:	e02b      	b.n	800d498 <_tx_thread_system_suspend+0x204>
 800d440:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d442:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	f383 8810 	msr	PRIMASK, r3
}
 800d44a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d44c:	4b1b      	ldr	r3, [pc, #108]	@ (800d4bc <_tx_thread_system_suspend+0x228>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d452:	429a      	cmp	r2, r3
 800d454:	d022      	beq.n	800d49c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d456:	4b15      	ldr	r3, [pc, #84]	@ (800d4ac <_tx_thread_system_suspend+0x218>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800d45c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d11c      	bne.n	800d49c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d462:	4b17      	ldr	r3, [pc, #92]	@ (800d4c0 <_tx_thread_system_suspend+0x22c>)
 800d464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d468:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d46a:	f3ef 8305 	mrs	r3, IPSR
 800d46e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d470:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10c      	bne.n	800d490 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d476:	f3ef 8310 	mrs	r3, PRIMASK
 800d47a:	617b      	str	r3, [r7, #20]
    return(posture);
 800d47c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d47e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d480:	b662      	cpsie	i
}
 800d482:	bf00      	nop
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f383 8810 	msr	PRIMASK, r3
}
 800d48e:	bf00      	nop
}
 800d490:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d492:	e003      	b.n	800d49c <_tx_thread_system_suspend+0x208>
                return;
 800d494:	bf00      	nop
 800d496:	e002      	b.n	800d49e <_tx_thread_system_suspend+0x20a>
            return;
 800d498:	bf00      	nop
 800d49a:	e000      	b.n	800d49e <_tx_thread_system_suspend+0x20a>
    return;
 800d49c:	bf00      	nop
}
 800d49e:	3778      	adds	r7, #120	@ 0x78
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	20010bf8 	.word	0x20010bf8
 800d4a8:	200111fc 	.word	0x200111fc
 800d4ac:	20010c90 	.word	0x20010c90
 800d4b0:	20010c10 	.word	0x20010c10
 800d4b4:	20010c08 	.word	0x20010c08
 800d4b8:	20010c0c 	.word	0x20010c0c
 800d4bc:	20010bfc 	.word	0x20010bfc
 800d4c0:	e000ed04 	.word	0xe000ed04

0800d4c4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b087      	sub	sp, #28
 800d4c8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d4ca:	4b21      	ldr	r3, [pc, #132]	@ (800d550 <_tx_thread_time_slice+0x8c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d4d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d4d4:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d4d8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d4da:	b672      	cpsid	i
    return(int_posture);
 800d4dc:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d4de:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d4e0:	4b1c      	ldr	r3, [pc, #112]	@ (800d554 <_tx_thread_time_slice+0x90>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d024      	beq.n	800d536 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d120      	bne.n	800d536 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	69da      	ldr	r2, [r3, #28]
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	699b      	ldr	r3, [r3, #24]
 800d500:	4a15      	ldr	r2, [pc, #84]	@ (800d558 <_tx_thread_time_slice+0x94>)
 800d502:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	6a1b      	ldr	r3, [r3, #32]
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d013      	beq.n	800d536 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d516:	429a      	cmp	r2, r3
 800d518:	d10d      	bne.n	800d536 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	6a12      	ldr	r2, [r2, #32]
 800d522:	490e      	ldr	r1, [pc, #56]	@ (800d55c <_tx_thread_time_slice+0x98>)
 800d524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d528:	4b0d      	ldr	r3, [pc, #52]	@ (800d560 <_tx_thread_time_slice+0x9c>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a0b      	ldr	r2, [pc, #44]	@ (800d55c <_tx_thread_time_slice+0x98>)
 800d52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d532:	4a0c      	ldr	r2, [pc, #48]	@ (800d564 <_tx_thread_time_slice+0xa0>)
 800d534:	6013      	str	r3, [r2, #0]
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f383 8810 	msr	PRIMASK, r3
}
 800d540:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d542:	bf00      	nop
 800d544:	371c      	adds	r7, #28
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	20010bf8 	.word	0x20010bf8
 800d554:	20010ca0 	.word	0x20010ca0
 800d558:	200111fc 	.word	0x200111fc
 800d55c:	20010c10 	.word	0x20010c10
 800d560:	20010c0c 	.word	0x20010c0c
 800d564:	20010bfc 	.word	0x20010bfc

0800d568 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	@ 0x28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d574:	f3ef 8310 	mrs	r3, PRIMASK
 800d578:	617b      	str	r3, [r7, #20]
    return(posture);
 800d57a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d57c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d57e:	b672      	cpsid	i
    return(int_posture);
 800d580:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d582:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d588:	2b04      	cmp	r3, #4
 800d58a:	d10e      	bne.n	800d5aa <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d58c:	4b13      	ldr	r3, [pc, #76]	@ (800d5dc <_tx_thread_timeout+0x74>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	3301      	adds	r3, #1
 800d592:	4a12      	ldr	r2, [pc, #72]	@ (800d5dc <_tx_thread_timeout+0x74>)
 800d594:	6013      	str	r3, [r2, #0]
 800d596:	6a3b      	ldr	r3, [r7, #32]
 800d598:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f383 8810 	msr	PRIMASK, r3
}
 800d5a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d5a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d5a4:	f7ff fd76 	bl	800d094 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d5a8:	e013      	b.n	800d5d2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d5ae:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d5b6:	61bb      	str	r3, [r7, #24]
 800d5b8:	6a3b      	ldr	r3, [r7, #32]
 800d5ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f383 8810 	msr	PRIMASK, r3
}
 800d5c2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d003      	beq.n	800d5d2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	69b9      	ldr	r1, [r7, #24]
 800d5ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d5d0:	4798      	blx	r3
}
 800d5d2:	bf00      	nop
 800d5d4:	3728      	adds	r7, #40	@ 0x28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	20010c90 	.word	0x20010c90

0800d5e0 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b088      	sub	sp, #32
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5e8:	f3ef 8310 	mrs	r3, PRIMASK
 800d5ec:	617b      	str	r3, [r7, #20]
    return(posture);
 800d5ee:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d5f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d5f2:	b672      	cpsid	i
    return(int_posture);
 800d5f4:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800d5f6:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6a1b      	ldr	r3, [r3, #32]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800d600:	2317      	movs	r3, #23
 800d602:	61fb      	str	r3, [r7, #28]
 800d604:	e00d      	b.n	800d622 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d102      	bne.n	800d614 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800d60e:	2317      	movs	r3, #23
 800d610:	61fb      	str	r3, [r7, #28]
 800d612:	e006      	b.n	800d622 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	3308      	adds	r3, #8
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 f9df 	bl	800d9dc <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800d61e:	2300      	movs	r3, #0
 800d620:	61fb      	str	r3, [r7, #28]
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f383 8810 	msr	PRIMASK, r3
}
 800d62c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800d62e:	69fb      	ldr	r3, [r7, #28]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3720      	adds	r7, #32
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800d638:	b480      	push	{r7}
 800d63a:	b089      	sub	sp, #36	@ 0x24
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d644:	f3ef 8310 	mrs	r3, PRIMASK
 800d648:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d64a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d64c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d64e:	b672      	cpsid	i
    return(int_posture);
 800d650:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800d652:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6a1b      	ldr	r3, [r3, #32]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d105      	bne.n	800d668 <_tx_timer_change+0x30>
    {

        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	68ba      	ldr	r2, [r7, #8]
 800d660:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	60da      	str	r2, [r3, #12]
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	f383 8810 	msr	PRIMASK, r3
}
 800d672:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d674:	2300      	movs	r3, #0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3724      	adds	r7, #36	@ 0x24
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr
	...

0800d684 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08a      	sub	sp, #40	@ 0x28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800d692:	222c      	movs	r2, #44	@ 0x2c
 800d694:	2100      	movs	r1, #0
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f000 ff52 	bl	800e540 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6a6:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6ac:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d6ba:	f3ef 8310 	mrs	r3, PRIMASK
 800d6be:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d6c0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d6c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d6c4:	b672      	cpsid	i
    return(int_posture);
 800d6c6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800d6c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	4a1c      	ldr	r2, [pc, #112]	@ (800d740 <_tx_timer_create+0xbc>)
 800d6ce:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800d6d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d744 <_tx_timer_create+0xc0>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d109      	bne.n	800d6ec <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800d6d8:	4a1b      	ldr	r2, [pc, #108]	@ (800d748 <_tx_timer_create+0xc4>)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	625a      	str	r2, [r3, #36]	@ 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	629a      	str	r2, [r3, #40]	@ 0x28
 800d6ea:	e011      	b.n	800d710 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800d6ec:	4b16      	ldr	r3, [pc, #88]	@ (800d748 <_tx_timer_create+0xc4>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f6:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800d6f8:	6a3b      	ldr	r3, [r7, #32]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	629a      	str	r2, [r3, #40]	@ 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6a3a      	ldr	r2, [r7, #32]
 800d70e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800d710:	4b0c      	ldr	r3, [pc, #48]	@ (800d744 <_tx_timer_create+0xc0>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	3301      	adds	r3, #1
 800d716:	4a0b      	ldr	r2, [pc, #44]	@ (800d744 <_tx_timer_create+0xc0>)
 800d718:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800d71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d104      	bne.n	800d72a <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	3308      	adds	r3, #8
 800d724:	4618      	mov	r0, r3
 800d726:	f000 f959 	bl	800d9dc <_tx_timer_system_activate>
 800d72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	f383 8810 	msr	PRIMASK, r3
}
 800d734:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d736:	2300      	movs	r3, #0
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3728      	adds	r7, #40	@ 0x28
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	4154494d 	.word	0x4154494d
 800d744:	20010d38 	.word	0x20010d38
 800d748:	20010d34 	.word	0x20010d34

0800d74c <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b08d      	sub	sp, #52	@ 0x34
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	3308      	adds	r3, #8
 800d758:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d75a:	f3ef 8310 	mrs	r3, PRIMASK
 800d75e:	613b      	str	r3, [r7, #16]
    return(posture);
 800d760:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800d762:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d764:	b672      	cpsid	i
    return(int_posture);
 800d766:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 800d768:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 800d76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76c:	699b      	ldr	r3, [r3, #24]
 800d76e:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d07f      	beq.n	800d876 <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800d776:	2300      	movs	r3, #0
 800d778:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 800d77a:	4b45      	ldr	r3, [pc, #276]	@ (800d890 <_tx_timer_deactivate+0x144>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	69fa      	ldr	r2, [r7, #28]
 800d780:	429a      	cmp	r2, r3
 800d782:	d306      	bcc.n	800d792 <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800d784:	4b43      	ldr	r3, [pc, #268]	@ (800d894 <_tx_timer_deactivate+0x148>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	69fa      	ldr	r2, [r7, #28]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d201      	bcs.n	800d792 <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 800d78e:	2301      	movs	r3, #1
 800d790:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800d792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d794:	2b01      	cmp	r3, #1
 800d796:	d12e      	bne.n	800d7f6 <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 800d798:	4b3f      	ldr	r3, [pc, #252]	@ (800d898 <_tx_timer_deactivate+0x14c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	69fa      	ldr	r2, [r7, #28]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d307      	bcc.n	800d7b2 <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800d7a2:	4b3d      	ldr	r3, [pc, #244]	@ (800d898 <_tx_timer_deactivate+0x14c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	69fa      	ldr	r2, [r7, #28]
 800d7a8:	1ad3      	subs	r3, r2, r3
 800d7aa:	109b      	asrs	r3, r3, #2
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7b0:	e010      	b.n	800d7d4 <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800d7b2:	4b37      	ldr	r3, [pc, #220]	@ (800d890 <_tx_timer_deactivate+0x144>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	69fa      	ldr	r2, [r7, #28]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	109b      	asrs	r3, r3, #2
 800d7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800d7be:	4b35      	ldr	r3, [pc, #212]	@ (800d894 <_tx_timer_deactivate+0x148>)
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	4b35      	ldr	r3, [pc, #212]	@ (800d898 <_tx_timer_deactivate+0x14c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	1ad3      	subs	r3, r2, r3
 800d7c8:	109b      	asrs	r3, r3, #2
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ce:	4413      	add	r3, r2
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b20      	cmp	r3, #32
 800d7da:	d908      	bls.n	800d7ee <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e2:	4413      	add	r3, r2
 800d7e4:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	e01c      	b.n	800d828 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	e018      	b.n	800d828 <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800d7f6:	4b29      	ldr	r3, [pc, #164]	@ (800d89c <_tx_timer_deactivate+0x150>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d00f      	beq.n	800d820 <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800d800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b20      	cmp	r3, #32
 800d806:	d906      	bls.n	800d816 <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800d808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 800d810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	e008      	b.n	800d828 <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800d816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d818:	685a      	ldr	r2, [r3, #4]
 800d81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	e003      	b.n	800d828 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800d820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d826:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 800d828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 800d82e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	429a      	cmp	r2, r3
 800d834:	d108      	bne.n	800d848 <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d117      	bne.n	800d870 <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	e013      	b.n	800d870 <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 800d848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	69ba      	ldr	r2, [r7, #24]
 800d858:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d860:	429a      	cmp	r2, r3
 800d862:	d105      	bne.n	800d870 <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	69fa      	ldr	r2, [r7, #28]
 800d868:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	69ba      	ldr	r2, [r7, #24]
 800d86e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800d870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d872:	2200      	movs	r2, #0
 800d874:	619a      	str	r2, [r3, #24]
 800d876:	6a3b      	ldr	r3, [r7, #32]
 800d878:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	f383 8810 	msr	PRIMASK, r3
}
 800d880:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3734      	adds	r7, #52	@ 0x34
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	20010d24 	.word	0x20010d24
 800d894:	20010d28 	.word	0x20010d28
 800d898:	20010d2c 	.word	0x20010d2c
 800d89c:	20010d3c 	.word	0x20010d3c

0800d8a0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d8aa:	607b      	str	r3, [r7, #4]
    return(posture);
 800d8ac:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d8ae:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8b0:	b672      	cpsid	i
    return(int_posture);
 800d8b2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800d8b4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800d8b6:	4b09      	ldr	r3, [pc, #36]	@ (800d8dc <_tx_timer_expiration_process+0x3c>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	4a07      	ldr	r2, [pc, #28]	@ (800d8dc <_tx_timer_expiration_process+0x3c>)
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	f383 8810 	msr	PRIMASK, r3
}
 800d8ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800d8cc:	4804      	ldr	r0, [pc, #16]	@ (800d8e0 <_tx_timer_expiration_process+0x40>)
 800d8ce:	f7ff fbe1 	bl	800d094 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d8d2:	bf00      	nop
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	20010c90 	.word	0x20010c90
 800d8e0:	20010d40 	.word	0x20010d40

0800d8e4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800d8e4:	b590      	push	{r4, r7, lr}
 800d8e6:	b089      	sub	sp, #36	@ 0x24
 800d8e8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800d8ea:	4b28      	ldr	r3, [pc, #160]	@ (800d98c <_tx_timer_initialize+0xa8>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800d8f0:	4b27      	ldr	r3, [pc, #156]	@ (800d990 <_tx_timer_initialize+0xac>)
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d8f6:	4b27      	ldr	r3, [pc, #156]	@ (800d994 <_tx_timer_initialize+0xb0>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800d8fc:	4b26      	ldr	r3, [pc, #152]	@ (800d998 <_tx_timer_initialize+0xb4>)
 800d8fe:	2200      	movs	r2, #0
 800d900:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800d902:	4b26      	ldr	r3, [pc, #152]	@ (800d99c <_tx_timer_initialize+0xb8>)
 800d904:	2200      	movs	r2, #0
 800d906:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800d908:	2280      	movs	r2, #128	@ 0x80
 800d90a:	2100      	movs	r1, #0
 800d90c:	4824      	ldr	r0, [pc, #144]	@ (800d9a0 <_tx_timer_initialize+0xbc>)
 800d90e:	f000 fe17 	bl	800e540 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800d912:	4b24      	ldr	r3, [pc, #144]	@ (800d9a4 <_tx_timer_initialize+0xc0>)
 800d914:	4a22      	ldr	r2, [pc, #136]	@ (800d9a0 <_tx_timer_initialize+0xbc>)
 800d916:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800d918:	4b23      	ldr	r3, [pc, #140]	@ (800d9a8 <_tx_timer_initialize+0xc4>)
 800d91a:	4a21      	ldr	r2, [pc, #132]	@ (800d9a0 <_tx_timer_initialize+0xbc>)
 800d91c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800d91e:	4b23      	ldr	r3, [pc, #140]	@ (800d9ac <_tx_timer_initialize+0xc8>)
 800d920:	4a23      	ldr	r2, [pc, #140]	@ (800d9b0 <_tx_timer_initialize+0xcc>)
 800d922:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800d924:	4b21      	ldr	r3, [pc, #132]	@ (800d9ac <_tx_timer_initialize+0xc8>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3304      	adds	r3, #4
 800d92a:	4a20      	ldr	r2, [pc, #128]	@ (800d9ac <_tx_timer_initialize+0xc8>)
 800d92c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800d92e:	4b21      	ldr	r3, [pc, #132]	@ (800d9b4 <_tx_timer_initialize+0xd0>)
 800d930:	4a21      	ldr	r2, [pc, #132]	@ (800d9b8 <_tx_timer_initialize+0xd4>)
 800d932:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800d934:	4b21      	ldr	r3, [pc, #132]	@ (800d9bc <_tx_timer_initialize+0xd8>)
 800d936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d93a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800d93c:	4b20      	ldr	r3, [pc, #128]	@ (800d9c0 <_tx_timer_initialize+0xdc>)
 800d93e:	2200      	movs	r2, #0
 800d940:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800d942:	4b1c      	ldr	r3, [pc, #112]	@ (800d9b4 <_tx_timer_initialize+0xd0>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a1d      	ldr	r2, [pc, #116]	@ (800d9bc <_tx_timer_initialize+0xd8>)
 800d948:	6812      	ldr	r2, [r2, #0]
 800d94a:	491d      	ldr	r1, [pc, #116]	@ (800d9c0 <_tx_timer_initialize+0xdc>)
 800d94c:	6809      	ldr	r1, [r1, #0]
 800d94e:	481c      	ldr	r0, [pc, #112]	@ (800d9c0 <_tx_timer_initialize+0xdc>)
 800d950:	6800      	ldr	r0, [r0, #0]
 800d952:	2400      	movs	r4, #0
 800d954:	9405      	str	r4, [sp, #20]
 800d956:	2400      	movs	r4, #0
 800d958:	9404      	str	r4, [sp, #16]
 800d95a:	9003      	str	r0, [sp, #12]
 800d95c:	9102      	str	r1, [sp, #8]
 800d95e:	9201      	str	r2, [sp, #4]
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	4b18      	ldr	r3, [pc, #96]	@ (800d9c4 <_tx_timer_initialize+0xe0>)
 800d964:	4a18      	ldr	r2, [pc, #96]	@ (800d9c8 <_tx_timer_initialize+0xe4>)
 800d966:	4919      	ldr	r1, [pc, #100]	@ (800d9cc <_tx_timer_initialize+0xe8>)
 800d968:	4819      	ldr	r0, [pc, #100]	@ (800d9d0 <_tx_timer_initialize+0xec>)
 800d96a:	f7ff f95b 	bl	800cc24 <_tx_thread_create>
 800d96e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1e5      	bne.n	800d942 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800d976:	4b17      	ldr	r3, [pc, #92]	@ (800d9d4 <_tx_timer_initialize+0xf0>)
 800d978:	2200      	movs	r2, #0
 800d97a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800d97c:	4b16      	ldr	r3, [pc, #88]	@ (800d9d8 <_tx_timer_initialize+0xf4>)
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800d982:	bf00      	nop
 800d984:	370c      	adds	r7, #12
 800d986:	46bd      	mov	sp, r7
 800d988:	bd90      	pop	{r4, r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20010c9c 	.word	0x20010c9c
 800d990:	200111fc 	.word	0x200111fc
 800d994:	20010ca0 	.word	0x20010ca0
 800d998:	20010d30 	.word	0x20010d30
 800d99c:	20010d3c 	.word	0x20010d3c
 800d9a0:	20010ca4 	.word	0x20010ca4
 800d9a4:	20010d24 	.word	0x20010d24
 800d9a8:	20010d2c 	.word	0x20010d2c
 800d9ac:	20010d28 	.word	0x20010d28
 800d9b0:	20010d20 	.word	0x20010d20
 800d9b4:	20010df0 	.word	0x20010df0
 800d9b8:	20010dfc 	.word	0x20010dfc
 800d9bc:	20010df4 	.word	0x20010df4
 800d9c0:	20010df8 	.word	0x20010df8
 800d9c4:	4154494d 	.word	0x4154494d
 800d9c8:	0800db11 	.word	0x0800db11
 800d9cc:	0800e720 	.word	0x0800e720
 800d9d0:	20010d40 	.word	0x20010d40
 800d9d4:	20010d34 	.word	0x20010d34
 800d9d8:	20010d38 	.word	0x20010d38

0800d9dc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b089      	sub	sp, #36	@ 0x24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d04a      	beq.n	800da86 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f6:	d046      	beq.n	800da86 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	699b      	ldr	r3, [r3, #24]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d142      	bne.n	800da86 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2b20      	cmp	r3, #32
 800da04:	d902      	bls.n	800da0c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800da06:	231f      	movs	r3, #31
 800da08:	61bb      	str	r3, [r7, #24]
 800da0a:	e002      	b.n	800da12 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	3b01      	subs	r3, #1
 800da10:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800da12:	4b20      	ldr	r3, [pc, #128]	@ (800da94 <_tx_timer_system_activate+0xb8>)
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	4413      	add	r3, r2
 800da1c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800da1e:	4b1e      	ldr	r3, [pc, #120]	@ (800da98 <_tx_timer_system_activate+0xbc>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	69fa      	ldr	r2, [r7, #28]
 800da24:	429a      	cmp	r2, r3
 800da26:	d30b      	bcc.n	800da40 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800da28:	4b1b      	ldr	r3, [pc, #108]	@ (800da98 <_tx_timer_system_activate+0xbc>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	69fa      	ldr	r2, [r7, #28]
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	109b      	asrs	r3, r3, #2
 800da32:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800da34:	4b19      	ldr	r3, [pc, #100]	@ (800da9c <_tx_timer_system_activate+0xc0>)
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4413      	add	r3, r2
 800da3e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d109      	bne.n	800da5c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	601a      	str	r2, [r3, #0]
 800da5a:	e011      	b.n	800da80 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	69fa      	ldr	r2, [r7, #28]
 800da84:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800da86:	bf00      	nop
 800da88:	3724      	adds	r7, #36	@ 0x24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	20010d2c 	.word	0x20010d2c
 800da98:	20010d28 	.word	0x20010d28
 800da9c:	20010d24 	.word	0x20010d24

0800daa0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b087      	sub	sp, #28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	699b      	ldr	r3, [r3, #24]
 800daac:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d026      	beq.n	800db02 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d108      	bne.n	800dad4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d117      	bne.n	800dafc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2200      	movs	r2, #0
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	e013      	b.n	800dafc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	695b      	ldr	r3, [r3, #20]
 800dad8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	693a      	ldr	r2, [r7, #16]
 800dae4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	429a      	cmp	r2, r3
 800daee:	d105      	bne.n	800dafc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	619a      	str	r2, [r3, #24]
    }
}
 800db02:	bf00      	nop
 800db04:	371c      	adds	r7, #28
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
	...

0800db10 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b098      	sub	sp, #96	@ 0x60
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800db18:	2300      	movs	r3, #0
 800db1a:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4a73      	ldr	r2, [pc, #460]	@ (800dcec <_tx_timer_thread_entry+0x1dc>)
 800db20:	4293      	cmp	r3, r2
 800db22:	f040 80de 	bne.w	800dce2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db26:	f3ef 8310 	mrs	r3, PRIMASK
 800db2a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800db2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800db2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800db30:	b672      	cpsid	i
    return(int_posture);
 800db32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800db34:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800db36:	4b6e      	ldr	r3, [pc, #440]	@ (800dcf0 <_tx_timer_thread_entry+0x1e0>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d003      	beq.n	800db4c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f107 020c 	add.w	r2, r7, #12
 800db4a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800db4c:	4b68      	ldr	r3, [pc, #416]	@ (800dcf0 <_tx_timer_thread_entry+0x1e0>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2200      	movs	r2, #0
 800db52:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800db54:	4b66      	ldr	r3, [pc, #408]	@ (800dcf0 <_tx_timer_thread_entry+0x1e0>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3304      	adds	r3, #4
 800db5a:	4a65      	ldr	r2, [pc, #404]	@ (800dcf0 <_tx_timer_thread_entry+0x1e0>)
 800db5c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800db5e:	4b64      	ldr	r3, [pc, #400]	@ (800dcf0 <_tx_timer_thread_entry+0x1e0>)
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	4b64      	ldr	r3, [pc, #400]	@ (800dcf4 <_tx_timer_thread_entry+0x1e4>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	d103      	bne.n	800db72 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800db6a:	4b63      	ldr	r3, [pc, #396]	@ (800dcf8 <_tx_timer_thread_entry+0x1e8>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a60      	ldr	r2, [pc, #384]	@ (800dcf0 <_tx_timer_thread_entry+0x1e0>)
 800db70:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800db72:	4b62      	ldr	r3, [pc, #392]	@ (800dcfc <_tx_timer_thread_entry+0x1ec>)
 800db74:	2200      	movs	r2, #0
 800db76:	601a      	str	r2, [r3, #0]
 800db78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db7a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7e:	f383 8810 	msr	PRIMASK, r3
}
 800db82:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db84:	f3ef 8310 	mrs	r3, PRIMASK
 800db88:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800db8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800db8c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800db8e:	b672      	cpsid	i
    return(int_posture);
 800db90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800db92:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800db94:	e07f      	b.n	800dc96 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	691b      	ldr	r3, [r3, #16]
 800db9e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800dba0:	2300      	movs	r3, #0
 800dba2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800dba4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d102      	bne.n	800dbb2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	e00e      	b.n	800dbd0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800dbb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbb4:	695b      	ldr	r3, [r3, #20]
 800dbb6:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dbb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbbc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbc2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800dbc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbc6:	f107 020c 	add.w	r2, r7, #12
 800dbca:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800dbcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbce:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800dbd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b20      	cmp	r3, #32
 800dbd6:	d911      	bls.n	800dbfc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800dbd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800dbe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbe2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dbe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbea:	f107 0208 	add.w	r2, r7, #8
 800dbee:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800dbf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dbf4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800dbf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbf8:	60bb      	str	r3, [r7, #8]
 800dbfa:	e01a      	b.n	800dc32 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800dbfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800dc02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800dc08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc0e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800dc10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d009      	beq.n	800dc2c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dc18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc1a:	f107 0208 	add.w	r2, r7, #8
 800dc1e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800dc20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dc24:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800dc26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc28:	60bb      	str	r3, [r7, #8]
 800dc2a:	e002      	b.n	800dc32 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800dc2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc2e:	2200      	movs	r2, #0
 800dc30:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800dc32:	4a33      	ldr	r2, [pc, #204]	@ (800dd00 <_tx_timer_thread_entry+0x1f0>)
 800dc34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc36:	6013      	str	r3, [r2, #0]
 800dc38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc3e:	f383 8810 	msr	PRIMASK, r3
}
 800dc42:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800dc44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d002      	beq.n	800dc50 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800dc4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc4c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800dc4e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dc50:	f3ef 8310 	mrs	r3, PRIMASK
 800dc54:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800dc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800dc58:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800dc5a:	b672      	cpsid	i
    return(int_posture);
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800dc5e:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800dc60:	4b27      	ldr	r3, [pc, #156]	@ (800dd00 <_tx_timer_thread_entry+0x1f0>)
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d105      	bne.n	800dc7a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800dc6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc70:	2200      	movs	r2, #0
 800dc72:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800dc74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800dc76:	f7ff feb1 	bl	800d9dc <_tx_timer_system_activate>
 800dc7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	f383 8810 	msr	PRIMASK, r3
}
 800dc84:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dc86:	f3ef 8310 	mrs	r3, PRIMASK
 800dc8a:	623b      	str	r3, [r7, #32]
    return(posture);
 800dc8c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800dc8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dc90:	b672      	cpsid	i
    return(int_posture);
 800dc92:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800dc94:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f47f af7c 	bne.w	800db96 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800dc9e:	4b17      	ldr	r3, [pc, #92]	@ (800dcfc <_tx_timer_thread_entry+0x1ec>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d116      	bne.n	800dcd4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800dca6:	4b17      	ldr	r3, [pc, #92]	@ (800dd04 <_tx_timer_thread_entry+0x1f4>)
 800dca8:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800dcaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcac:	2203      	movs	r2, #3
 800dcae:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800dcb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800dcb6:	4b14      	ldr	r3, [pc, #80]	@ (800dd08 <_tx_timer_thread_entry+0x1f8>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	4a12      	ldr	r2, [pc, #72]	@ (800dd08 <_tx_timer_thread_entry+0x1f8>)
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dcc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	f383 8810 	msr	PRIMASK, r3
}
 800dcca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800dccc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800dcce:	f7ff fae1 	bl	800d294 <_tx_thread_system_suspend>
 800dcd2:	e728      	b.n	800db26 <_tx_timer_thread_entry+0x16>
 800dcd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dcd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	f383 8810 	msr	PRIMASK, r3
}
 800dcde:	bf00      	nop
            TX_DISABLE
 800dce0:	e721      	b.n	800db26 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800dce2:	bf00      	nop
 800dce4:	3760      	adds	r7, #96	@ 0x60
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	4154494d 	.word	0x4154494d
 800dcf0:	20010d2c 	.word	0x20010d2c
 800dcf4:	20010d28 	.word	0x20010d28
 800dcf8:	20010d24 	.word	0x20010d24
 800dcfc:	20010d30 	.word	0x20010d30
 800dd00:	20010d3c 	.word	0x20010d3c
 800dd04:	20010d40 	.word	0x20010d40
 800dd08:	20010c90 	.word	0x20010c90

0800dd0c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b08a      	sub	sp, #40	@ 0x28
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
 800dd18:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d102      	bne.n	800dd2a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dd24:	2302      	movs	r3, #2
 800dd26:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd28:	e029      	b.n	800dd7e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a2d      	ldr	r2, [pc, #180]	@ (800dde4 <_txe_byte_allocate+0xd8>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d002      	beq.n	800dd3a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dd34:	2302      	movs	r3, #2
 800dd36:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd38:	e021      	b.n	800dd7e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d102      	bne.n	800dd46 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800dd40:	2303      	movs	r3, #3
 800dd42:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd44:	e01b      	b.n	800dd7e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d102      	bne.n	800dd52 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800dd4c:	2305      	movs	r3, #5
 800dd4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd50:	e015      	b.n	800dd7e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	69db      	ldr	r3, [r3, #28]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d902      	bls.n	800dd62 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800dd5c:	2305      	movs	r3, #5
 800dd5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd60:	e00d      	b.n	800dd7e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00a      	beq.n	800dd7e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dd68:	f3ef 8305 	mrs	r3, IPSR
 800dd6c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800dd6e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800dd70:	4b1d      	ldr	r3, [pc, #116]	@ (800dde8 <_txe_byte_allocate+0xdc>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800dd7a:	2304      	movs	r3, #4
 800dd7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800dd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d108      	bne.n	800dd96 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800dd84:	4b19      	ldr	r3, [pc, #100]	@ (800ddec <_txe_byte_allocate+0xe0>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800dd8a:	6a3b      	ldr	r3, [r7, #32]
 800dd8c:	4a18      	ldr	r2, [pc, #96]	@ (800ddf0 <_txe_byte_allocate+0xe4>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d101      	bne.n	800dd96 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800dd92:	2313      	movs	r3, #19
 800dd94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800dd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d114      	bne.n	800ddc6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dd9c:	f3ef 8305 	mrs	r3, IPSR
 800dda0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dda2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800dda4:	4b10      	ldr	r3, [pc, #64]	@ (800dde8 <_txe_byte_allocate+0xdc>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00b      	beq.n	800ddc6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ddae:	f3ef 8305 	mrs	r3, IPSR
 800ddb2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ddb4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ddb6:	4b0c      	ldr	r3, [pc, #48]	@ (800dde8 <_txe_byte_allocate+0xdc>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ddc0:	d201      	bcs.n	800ddc6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ddc2:	2313      	movs	r3, #19
 800ddc4:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d106      	bne.n	800ddda <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	68b9      	ldr	r1, [r7, #8]
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f7fe fa1a 	bl	800c20c <_tx_byte_allocate>
 800ddd8:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800ddda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3728      	adds	r7, #40	@ 0x28
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	42595445 	.word	0x42595445
 800dde8:	20000054 	.word	0x20000054
 800ddec:	20010bf8 	.word	0x20010bf8
 800ddf0:	20010d40 	.word	0x20010d40

0800ddf4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b092      	sub	sp, #72	@ 0x48
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
 800de00:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800de02:	2300      	movs	r3, #0
 800de04:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d102      	bne.n	800de12 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800de0c:	2302      	movs	r3, #2
 800de0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800de10:	e075      	b.n	800defe <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800de12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de14:	2b34      	cmp	r3, #52	@ 0x34
 800de16:	d002      	beq.n	800de1e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800de18:	2302      	movs	r3, #2
 800de1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800de1c:	e06f      	b.n	800defe <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de1e:	f3ef 8310 	mrs	r3, PRIMASK
 800de22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800de24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800de26:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800de28:	b672      	cpsid	i
    return(int_posture);
 800de2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800de2c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800de2e:	4b3b      	ldr	r3, [pc, #236]	@ (800df1c <_txe_byte_pool_create+0x128>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	3301      	adds	r3, #1
 800de34:	4a39      	ldr	r2, [pc, #228]	@ (800df1c <_txe_byte_pool_create+0x128>)
 800de36:	6013      	str	r3, [r2, #0]
 800de38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de3e:	f383 8810 	msr	PRIMASK, r3
}
 800de42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800de44:	4b36      	ldr	r3, [pc, #216]	@ (800df20 <_txe_byte_pool_create+0x12c>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800de4a:	2300      	movs	r3, #0
 800de4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800de4e:	e009      	b.n	800de64 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de54:	429a      	cmp	r2, r3
 800de56:	d00b      	beq.n	800de70 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800de58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800de5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de60:	3301      	adds	r3, #1
 800de62:	643b      	str	r3, [r7, #64]	@ 0x40
 800de64:	4b2f      	ldr	r3, [pc, #188]	@ (800df24 <_txe_byte_pool_create+0x130>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d3f0      	bcc.n	800de50 <_txe_byte_pool_create+0x5c>
 800de6e:	e000      	b.n	800de72 <_txe_byte_pool_create+0x7e>
                break;
 800de70:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de72:	f3ef 8310 	mrs	r3, PRIMASK
 800de76:	623b      	str	r3, [r7, #32]
    return(posture);
 800de78:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800de7a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de7c:	b672      	cpsid	i
    return(int_posture);
 800de7e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800de80:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800de82:	4b26      	ldr	r3, [pc, #152]	@ (800df1c <_txe_byte_pool_create+0x128>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	3b01      	subs	r3, #1
 800de88:	4a24      	ldr	r2, [pc, #144]	@ (800df1c <_txe_byte_pool_create+0x128>)
 800de8a:	6013      	str	r3, [r2, #0]
 800de8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de92:	f383 8810 	msr	PRIMASK, r3
}
 800de96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800de98:	f7ff f8c2 	bl	800d020 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d102      	bne.n	800deaa <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800dea4:	2302      	movs	r3, #2
 800dea6:	647b      	str	r3, [r7, #68]	@ 0x44
 800dea8:	e029      	b.n	800defe <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d102      	bne.n	800deb6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800deb0:	2303      	movs	r3, #3
 800deb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800deb4:	e023      	b.n	800defe <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	2b63      	cmp	r3, #99	@ 0x63
 800deba:	d802      	bhi.n	800dec2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800debc:	2305      	movs	r3, #5
 800debe:	647b      	str	r3, [r7, #68]	@ 0x44
 800dec0:	e01d      	b.n	800defe <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800dec2:	4b19      	ldr	r3, [pc, #100]	@ (800df28 <_txe_byte_pool_create+0x134>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800dec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deca:	4a18      	ldr	r2, [pc, #96]	@ (800df2c <_txe_byte_pool_create+0x138>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d101      	bne.n	800ded4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ded0:	2313      	movs	r3, #19
 800ded2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ded4:	f3ef 8305 	mrs	r3, IPSR
 800ded8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800deda:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800dedc:	4b14      	ldr	r3, [pc, #80]	@ (800df30 <_txe_byte_pool_create+0x13c>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d00b      	beq.n	800defe <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dee6:	f3ef 8305 	mrs	r3, IPSR
 800deea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800deec:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800deee:	4b10      	ldr	r3, [pc, #64]	@ (800df30 <_txe_byte_pool_create+0x13c>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4313      	orrs	r3, r2
 800def4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800def8:	d201      	bcs.n	800defe <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800defa:	2313      	movs	r3, #19
 800defc:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800defe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df00:	2b00      	cmp	r3, #0
 800df02:	d106      	bne.n	800df12 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	68b9      	ldr	r1, [r7, #8]
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f7fe fac0 	bl	800c490 <_tx_byte_pool_create>
 800df10:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800df12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800df14:	4618      	mov	r0, r3
 800df16:	3748      	adds	r7, #72	@ 0x48
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	20010c90 	.word	0x20010c90
 800df20:	20010be8 	.word	0x20010be8
 800df24:	20010bec 	.word	0x20010bec
 800df28:	20010bf8 	.word	0x20010bf8
 800df2c:	20010d40 	.word	0x20010d40
 800df30:	20000054 	.word	0x20000054

0800df34 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b092      	sub	sp, #72	@ 0x48
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
 800df40:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800df42:	2300      	movs	r3, #0
 800df44:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d102      	bne.n	800df52 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800df4c:	230c      	movs	r3, #12
 800df4e:	647b      	str	r3, [r7, #68]	@ 0x44
 800df50:	e054      	b.n	800dffc <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	2b1c      	cmp	r3, #28
 800df56:	d002      	beq.n	800df5e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800df58:	230c      	movs	r3, #12
 800df5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800df5c:	e04e      	b.n	800dffc <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df5e:	f3ef 8310 	mrs	r3, PRIMASK
 800df62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800df64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800df66:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800df68:	b672      	cpsid	i
    return(int_posture);
 800df6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800df6c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800df6e:	4b36      	ldr	r3, [pc, #216]	@ (800e048 <_txe_semaphore_create+0x114>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	3301      	adds	r3, #1
 800df74:	4a34      	ldr	r2, [pc, #208]	@ (800e048 <_txe_semaphore_create+0x114>)
 800df76:	6013      	str	r3, [r2, #0]
 800df78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df7a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7e:	f383 8810 	msr	PRIMASK, r3
}
 800df82:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800df84:	4b31      	ldr	r3, [pc, #196]	@ (800e04c <_txe_semaphore_create+0x118>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800df8a:	2300      	movs	r3, #0
 800df8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800df8e:	e009      	b.n	800dfa4 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df94:	429a      	cmp	r2, r3
 800df96:	d00b      	beq.n	800dfb0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800df98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df9a:	695b      	ldr	r3, [r3, #20]
 800df9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800df9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	643b      	str	r3, [r7, #64]	@ 0x40
 800dfa4:	4b2a      	ldr	r3, [pc, #168]	@ (800e050 <_txe_semaphore_create+0x11c>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d3f0      	bcc.n	800df90 <_txe_semaphore_create+0x5c>
 800dfae:	e000      	b.n	800dfb2 <_txe_semaphore_create+0x7e>
                break;
 800dfb0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dfb2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfb6:	623b      	str	r3, [r7, #32]
    return(posture);
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800dfba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dfbc:	b672      	cpsid	i
    return(int_posture);
 800dfbe:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800dfc0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800dfc2:	4b21      	ldr	r3, [pc, #132]	@ (800e048 <_txe_semaphore_create+0x114>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	4a1f      	ldr	r2, [pc, #124]	@ (800e048 <_txe_semaphore_create+0x114>)
 800dfca:	6013      	str	r3, [r2, #0]
 800dfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfce:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd2:	f383 8810 	msr	PRIMASK, r3
}
 800dfd6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800dfd8:	f7ff f822 	bl	800d020 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d102      	bne.n	800dfea <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800dfe4:	230c      	movs	r3, #12
 800dfe6:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfe8:	e008      	b.n	800dffc <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800dfea:	4b1a      	ldr	r3, [pc, #104]	@ (800e054 <_txe_semaphore_create+0x120>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800dff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dff2:	4a19      	ldr	r2, [pc, #100]	@ (800e058 <_txe_semaphore_create+0x124>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d101      	bne.n	800dffc <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800dff8:	2313      	movs	r3, #19
 800dffa:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800dffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d114      	bne.n	800e02c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e002:	f3ef 8305 	mrs	r3, IPSR
 800e006:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e008:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e00a:	4b14      	ldr	r3, [pc, #80]	@ (800e05c <_txe_semaphore_create+0x128>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4313      	orrs	r3, r2
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00b      	beq.n	800e02c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e014:	f3ef 8305 	mrs	r3, IPSR
 800e018:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e01a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e01c:	4b0f      	ldr	r3, [pc, #60]	@ (800e05c <_txe_semaphore_create+0x128>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4313      	orrs	r3, r2
 800e022:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800e026:	d201      	bcs.n	800e02c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e028:	2313      	movs	r3, #19
 800e02a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e02c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d105      	bne.n	800e03e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	68b9      	ldr	r1, [r7, #8]
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f7fe fcb8 	bl	800c9ac <_tx_semaphore_create>
 800e03c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800e03e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800e040:	4618      	mov	r0, r3
 800e042:	3748      	adds	r7, #72	@ 0x48
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	20010c90 	.word	0x20010c90
 800e04c:	20010bc0 	.word	0x20010bc0
 800e050:	20010bc4 	.word	0x20010bc4
 800e054:	20010bf8 	.word	0x20010bf8
 800e058:	20010d40 	.word	0x20010d40
 800e05c:	20000054 	.word	0x20000054

0800e060 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e06a:	2300      	movs	r3, #0
 800e06c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d102      	bne.n	800e07a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e074:	230c      	movs	r3, #12
 800e076:	617b      	str	r3, [r7, #20]
 800e078:	e01f      	b.n	800e0ba <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a15      	ldr	r2, [pc, #84]	@ (800e0d4 <_txe_semaphore_get+0x74>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d002      	beq.n	800e08a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e084:	230c      	movs	r3, #12
 800e086:	617b      	str	r3, [r7, #20]
 800e088:	e017      	b.n	800e0ba <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d014      	beq.n	800e0ba <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e090:	f3ef 8305 	mrs	r3, IPSR
 800e094:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e096:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e098:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d8 <_txe_semaphore_get+0x78>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4313      	orrs	r3, r2
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d002      	beq.n	800e0a8 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e0a2:	2304      	movs	r3, #4
 800e0a4:	617b      	str	r3, [r7, #20]
 800e0a6:	e008      	b.n	800e0ba <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e0a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e0dc <_txe_semaphore_get+0x7c>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	4a0b      	ldr	r2, [pc, #44]	@ (800e0e0 <_txe_semaphore_get+0x80>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d101      	bne.n	800e0ba <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e0b6:	2304      	movs	r3, #4
 800e0b8:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d104      	bne.n	800e0ca <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f7fe fcc4 	bl	800ca50 <_tx_semaphore_get>
 800e0c8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e0ca:	697b      	ldr	r3, [r7, #20]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3718      	adds	r7, #24
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	53454d41 	.word	0x53454d41
 800e0d8:	20000054 	.word	0x20000054
 800e0dc:	20010bf8 	.word	0x20010bf8
 800e0e0:	20010d40 	.word	0x20010d40

0800e0e4 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d102      	bne.n	800e0f8 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e0f2:	230c      	movs	r3, #12
 800e0f4:	60fb      	str	r3, [r7, #12]
 800e0f6:	e00b      	b.n	800e110 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a07      	ldr	r2, [pc, #28]	@ (800e11c <_txe_semaphore_put+0x38>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d002      	beq.n	800e108 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e102:	230c      	movs	r3, #12
 800e104:	60fb      	str	r3, [r7, #12]
 800e106:	e003      	b.n	800e110 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7fe fd33 	bl	800cb74 <_tx_semaphore_put>
 800e10e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e110:	68fb      	ldr	r3, [r7, #12]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	53454d41 	.word	0x53454d41

0800e120 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b09a      	sub	sp, #104	@ 0x68
 800e124:	af06      	add	r7, sp, #24
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	607a      	str	r2, [r7, #4]
 800e12c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e12e:	2300      	movs	r3, #0
 800e130:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d102      	bne.n	800e13e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e138:	230e      	movs	r3, #14
 800e13a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e13c:	e0bb      	b.n	800e2b6 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e13e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e140:	2bb0      	cmp	r3, #176	@ 0xb0
 800e142:	d002      	beq.n	800e14a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e144:	230e      	movs	r3, #14
 800e146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e148:	e0b5      	b.n	800e2b6 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e14a:	f3ef 8310 	mrs	r3, PRIMASK
 800e14e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800e150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800e152:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e154:	b672      	cpsid	i
    return(int_posture);
 800e156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e158:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e15a:	4b64      	ldr	r3, [pc, #400]	@ (800e2ec <_txe_thread_create+0x1cc>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	3301      	adds	r3, #1
 800e160:	4a62      	ldr	r2, [pc, #392]	@ (800e2ec <_txe_thread_create+0x1cc>)
 800e162:	6013      	str	r3, [r2, #0]
 800e164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e166:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	f383 8810 	msr	PRIMASK, r3
}
 800e16e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e170:	2300      	movs	r3, #0
 800e172:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800e174:	4b5e      	ldr	r3, [pc, #376]	@ (800e2f0 <_txe_thread_create+0x1d0>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e17a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e17c:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e17e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e180:	3b01      	subs	r3, #1
 800e182:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e184:	4413      	add	r3, r2
 800e186:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e18a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e18c:	2300      	movs	r3, #0
 800e18e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e190:	e02b      	b.n	800e1ea <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e196:	429a      	cmp	r2, r3
 800e198:	d101      	bne.n	800e19e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e19a:	2301      	movs	r3, #1
 800e19c:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e19e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d028      	beq.n	800e1f6 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e1a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d308      	bcc.n	800e1c0 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e1ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1b0:	691b      	ldr	r3, [r3, #16]
 800e1b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d203      	bcs.n	800e1c0 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d308      	bcc.n	800e1dc <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e1ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d203      	bcs.n	800e1dc <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e1dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1e2:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e1e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1ea:	4b42      	ldr	r3, [pc, #264]	@ (800e2f4 <_txe_thread_create+0x1d4>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d3ce      	bcc.n	800e192 <_txe_thread_create+0x72>
 800e1f4:	e000      	b.n	800e1f8 <_txe_thread_create+0xd8>
                break;
 800e1f6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1f8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1fc:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e1fe:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e200:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e202:	b672      	cpsid	i
    return(int_posture);
 800e204:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e206:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e208:	4b38      	ldr	r3, [pc, #224]	@ (800e2ec <_txe_thread_create+0x1cc>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3b01      	subs	r3, #1
 800e20e:	4a37      	ldr	r2, [pc, #220]	@ (800e2ec <_txe_thread_create+0x1cc>)
 800e210:	6013      	str	r3, [r2, #0]
 800e212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e214:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e216:	6a3b      	ldr	r3, [r7, #32]
 800e218:	f383 8810 	msr	PRIMASK, r3
}
 800e21c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e21e:	f7fe feff 	bl	800d020 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e226:	429a      	cmp	r2, r3
 800e228:	d102      	bne.n	800e230 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e22a:	230e      	movs	r3, #14
 800e22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e22e:	e042      	b.n	800e2b6 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e232:	2b00      	cmp	r3, #0
 800e234:	d102      	bne.n	800e23c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e236:	2303      	movs	r3, #3
 800e238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e23a:	e03c      	b.n	800e2b6 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d102      	bne.n	800e248 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e242:	2303      	movs	r3, #3
 800e244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e246:	e036      	b.n	800e2b6 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e24a:	2bc7      	cmp	r3, #199	@ 0xc7
 800e24c:	d802      	bhi.n	800e254 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e24e:	2305      	movs	r3, #5
 800e250:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e252:	e030      	b.n	800e2b6 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e254:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e256:	2b1f      	cmp	r3, #31
 800e258:	d902      	bls.n	800e260 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e25a:	230f      	movs	r3, #15
 800e25c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e25e:	e02a      	b.n	800e2b6 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e260:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e262:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e264:	429a      	cmp	r2, r3
 800e266:	d902      	bls.n	800e26e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e268:	2318      	movs	r3, #24
 800e26a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e26c:	e023      	b.n	800e2b6 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e26e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e270:	2b01      	cmp	r3, #1
 800e272:	d902      	bls.n	800e27a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e274:	2310      	movs	r3, #16
 800e276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e278:	e01d      	b.n	800e2b6 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e27a:	4b1f      	ldr	r3, [pc, #124]	@ (800e2f8 <_txe_thread_create+0x1d8>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e282:	4a1e      	ldr	r2, [pc, #120]	@ (800e2fc <_txe_thread_create+0x1dc>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d101      	bne.n	800e28c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e288:	2313      	movs	r3, #19
 800e28a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e28c:	f3ef 8305 	mrs	r3, IPSR
 800e290:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e292:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e294:	4b1a      	ldr	r3, [pc, #104]	@ (800e300 <_txe_thread_create+0x1e0>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4313      	orrs	r3, r2
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00b      	beq.n	800e2b6 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e29e:	f3ef 8305 	mrs	r3, IPSR
 800e2a2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e2a4:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e2a6:	4b16      	ldr	r3, [pc, #88]	@ (800e300 <_txe_thread_create+0x1e0>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800e2b0:	d201      	bcs.n	800e2b6 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e2b2:	2313      	movs	r3, #19
 800e2b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e2b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d112      	bne.n	800e2e2 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e2bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2be:	9305      	str	r3, [sp, #20]
 800e2c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e2c2:	9304      	str	r3, [sp, #16]
 800e2c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e2c6:	9303      	str	r3, [sp, #12]
 800e2c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2ca:	9302      	str	r3, [sp, #8]
 800e2cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2ce:	9301      	str	r3, [sp, #4]
 800e2d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	68b9      	ldr	r1, [r7, #8]
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f7fe fca2 	bl	800cc24 <_tx_thread_create>
 800e2e0:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e2e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3750      	adds	r7, #80	@ 0x50
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	20010c90 	.word	0x20010c90
 800e2f0:	20010c00 	.word	0x20010c00
 800e2f4:	20010c04 	.word	0x20010c04
 800e2f8:	20010bf8 	.word	0x20010bf8
 800e2fc:	20010d40 	.word	0x20010d40
 800e300:	20000054 	.word	0x20000054

0800e304 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d102      	bne.n	800e318 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e312:	2315      	movs	r3, #21
 800e314:	60fb      	str	r3, [r7, #12]
 800e316:	e00b      	b.n	800e330 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a07      	ldr	r2, [pc, #28]	@ (800e33c <_txe_timer_activate+0x38>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d002      	beq.n	800e328 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e322:	2315      	movs	r3, #21
 800e324:	60fb      	str	r3, [r7, #12]
 800e326:	e003      	b.n	800e330 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7ff f959 	bl	800d5e0 <_tx_timer_activate>
 800e32e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e330:	68fb      	ldr	r3, [r7, #12]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	4154494d 	.word	0x4154494d

0800e340 <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d102      	bne.n	800e358 <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e352:	2315      	movs	r3, #21
 800e354:	617b      	str	r3, [r7, #20]
 800e356:	e020      	b.n	800e39a <_txe_timer_change+0x5a>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a11      	ldr	r2, [pc, #68]	@ (800e3a4 <_txe_timer_change+0x64>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d002      	beq.n	800e368 <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e362:	2315      	movs	r3, #21
 800e364:	617b      	str	r3, [r7, #20]
 800e366:	e018      	b.n	800e39a <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d102      	bne.n	800e374 <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 800e36e:	2316      	movs	r3, #22
 800e370:	617b      	str	r3, [r7, #20]
 800e372:	e012      	b.n	800e39a <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e374:	f3ef 8305 	mrs	r3, IPSR
 800e378:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e37a:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800e37c:	4b0a      	ldr	r3, [pc, #40]	@ (800e3a8 <_txe_timer_change+0x68>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4313      	orrs	r3, r2
 800e382:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800e386:	d302      	bcc.n	800e38e <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800e388:	2313      	movs	r3, #19
 800e38a:	617b      	str	r3, [r7, #20]
 800e38c:	e005      	b.n	800e39a <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	68b9      	ldr	r1, [r7, #8]
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f7ff f950 	bl	800d638 <_tx_timer_change>
 800e398:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e39a:	697b      	ldr	r3, [r7, #20]
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3718      	adds	r7, #24
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	4154494d 	.word	0x4154494d
 800e3a8:	20000054 	.word	0x20000054

0800e3ac <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b096      	sub	sp, #88	@ 0x58
 800e3b0:	af04      	add	r7, sp, #16
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
 800e3b8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e3c4:	2315      	movs	r3, #21
 800e3c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3c8:	e059      	b.n	800e47e <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800e3ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3cc:	2b2c      	cmp	r3, #44	@ 0x2c
 800e3ce:	d002      	beq.n	800e3d6 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e3d0:	2315      	movs	r3, #21
 800e3d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3d4:	e053      	b.n	800e47e <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3d6:	f3ef 8310 	mrs	r3, PRIMASK
 800e3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800e3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800e3de:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3e0:	b672      	cpsid	i
    return(int_posture);
 800e3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e3e4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e3e6:	4b41      	ldr	r3, [pc, #260]	@ (800e4ec <_txe_timer_create+0x140>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	4a3f      	ldr	r2, [pc, #252]	@ (800e4ec <_txe_timer_create+0x140>)
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f6:	f383 8810 	msr	PRIMASK, r3
}
 800e3fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800e3fc:	4b3c      	ldr	r3, [pc, #240]	@ (800e4f0 <_txe_timer_create+0x144>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800e402:	2300      	movs	r3, #0
 800e404:	643b      	str	r3, [r7, #64]	@ 0x40
 800e406:	e009      	b.n	800e41c <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800e408:	68fa      	ldr	r2, [r7, #12]
 800e40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d00b      	beq.n	800e428 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800e410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800e416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e418:	3301      	adds	r3, #1
 800e41a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e41c:	4b35      	ldr	r3, [pc, #212]	@ (800e4f4 <_txe_timer_create+0x148>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e422:	429a      	cmp	r2, r3
 800e424:	d3f0      	bcc.n	800e408 <_txe_timer_create+0x5c>
 800e426:	e000      	b.n	800e42a <_txe_timer_create+0x7e>
                break;
 800e428:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e42a:	f3ef 8310 	mrs	r3, PRIMASK
 800e42e:	623b      	str	r3, [r7, #32]
    return(posture);
 800e430:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e432:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e434:	b672      	cpsid	i
    return(int_posture);
 800e436:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e438:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e43a:	4b2c      	ldr	r3, [pc, #176]	@ (800e4ec <_txe_timer_create+0x140>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	3b01      	subs	r3, #1
 800e440:	4a2a      	ldr	r2, [pc, #168]	@ (800e4ec <_txe_timer_create+0x140>)
 800e442:	6013      	str	r3, [r2, #0]
 800e444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e446:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e44a:	f383 8810 	msr	PRIMASK, r3
}
 800e44e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e450:	f7fe fde6 	bl	800d020 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e458:	429a      	cmp	r2, r3
 800e45a:	d102      	bne.n	800e462 <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800e45c:	2315      	movs	r3, #21
 800e45e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e460:	e00d      	b.n	800e47e <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800e462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800e468:	2316      	movs	r3, #22
 800e46a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e46c:	e007      	b.n	800e47e <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800e46e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e470:	2b01      	cmp	r3, #1
 800e472:	d004      	beq.n	800e47e <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800e474:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e476:	2b00      	cmp	r3, #0
 800e478:	d001      	beq.n	800e47e <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800e47a:	2317      	movs	r3, #23
 800e47c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e47e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e480:	2b00      	cmp	r3, #0
 800e482:	d11d      	bne.n	800e4c0 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e484:	4b1c      	ldr	r3, [pc, #112]	@ (800e4f8 <_txe_timer_create+0x14c>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800e48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e48c:	4a1b      	ldr	r2, [pc, #108]	@ (800e4fc <_txe_timer_create+0x150>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d101      	bne.n	800e496 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800e492:	2313      	movs	r3, #19
 800e494:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e496:	f3ef 8305 	mrs	r3, IPSR
 800e49a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e49c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e49e:	4b18      	ldr	r3, [pc, #96]	@ (800e500 <_txe_timer_create+0x154>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00b      	beq.n	800e4c0 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4a8:	f3ef 8305 	mrs	r3, IPSR
 800e4ac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e4ae:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e4b0:	4b13      	ldr	r3, [pc, #76]	@ (800e500 <_txe_timer_create+0x154>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800e4ba:	d201      	bcs.n	800e4c0 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e4bc:	2313      	movs	r3, #19
 800e4be:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d10c      	bne.n	800e4e0 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800e4c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4c8:	9302      	str	r3, [sp, #8]
 800e4ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4cc:	9301      	str	r3, [sp, #4]
 800e4ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	68b9      	ldr	r1, [r7, #8]
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f7ff f8d3 	bl	800d684 <_tx_timer_create>
 800e4de:	6478      	str	r0, [r7, #68]	@ 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800e4e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3748      	adds	r7, #72	@ 0x48
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	20010c90 	.word	0x20010c90
 800e4f0:	20010d34 	.word	0x20010d34
 800e4f4:	20010d38 	.word	0x20010d38
 800e4f8:	20010bf8 	.word	0x20010bf8
 800e4fc:	20010d40 	.word	0x20010d40
 800e500:	20000054 	.word	0x20000054

0800e504 <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d102      	bne.n	800e518 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e512:	2315      	movs	r3, #21
 800e514:	60fb      	str	r3, [r7, #12]
 800e516:	e00b      	b.n	800e530 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a07      	ldr	r2, [pc, #28]	@ (800e53c <_txe_timer_deactivate+0x38>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d002      	beq.n	800e528 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e522:	2315      	movs	r3, #21
 800e524:	60fb      	str	r3, [r7, #12]
 800e526:	e003      	b.n	800e530 <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f7ff f90f 	bl	800d74c <_tx_timer_deactivate>
 800e52e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e530:	68fb      	ldr	r3, [r7, #12]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	4154494d 	.word	0x4154494d

0800e540 <memset>:
 800e540:	4402      	add	r2, r0
 800e542:	4603      	mov	r3, r0
 800e544:	4293      	cmp	r3, r2
 800e546:	d100      	bne.n	800e54a <memset+0xa>
 800e548:	4770      	bx	lr
 800e54a:	f803 1b01 	strb.w	r1, [r3], #1
 800e54e:	e7f9      	b.n	800e544 <memset+0x4>

0800e550 <__libc_init_array>:
 800e550:	b570      	push	{r4, r5, r6, lr}
 800e552:	4d0d      	ldr	r5, [pc, #52]	@ (800e588 <__libc_init_array+0x38>)
 800e554:	4c0d      	ldr	r4, [pc, #52]	@ (800e58c <__libc_init_array+0x3c>)
 800e556:	1b64      	subs	r4, r4, r5
 800e558:	10a4      	asrs	r4, r4, #2
 800e55a:	2600      	movs	r6, #0
 800e55c:	42a6      	cmp	r6, r4
 800e55e:	d109      	bne.n	800e574 <__libc_init_array+0x24>
 800e560:	4d0b      	ldr	r5, [pc, #44]	@ (800e590 <__libc_init_array+0x40>)
 800e562:	4c0c      	ldr	r4, [pc, #48]	@ (800e594 <__libc_init_array+0x44>)
 800e564:	f000 f818 	bl	800e598 <_init>
 800e568:	1b64      	subs	r4, r4, r5
 800e56a:	10a4      	asrs	r4, r4, #2
 800e56c:	2600      	movs	r6, #0
 800e56e:	42a6      	cmp	r6, r4
 800e570:	d105      	bne.n	800e57e <__libc_init_array+0x2e>
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	f855 3b04 	ldr.w	r3, [r5], #4
 800e578:	4798      	blx	r3
 800e57a:	3601      	adds	r6, #1
 800e57c:	e7ee      	b.n	800e55c <__libc_init_array+0xc>
 800e57e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e582:	4798      	blx	r3
 800e584:	3601      	adds	r6, #1
 800e586:	e7f2      	b.n	800e56e <__libc_init_array+0x1e>
 800e588:	0800e794 	.word	0x0800e794
 800e58c:	0800e794 	.word	0x0800e794
 800e590:	0800e794 	.word	0x0800e794
 800e594:	0800e798 	.word	0x0800e798

0800e598 <_init>:
 800e598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e59a:	bf00      	nop
 800e59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e59e:	bc08      	pop	{r3}
 800e5a0:	469e      	mov	lr, r3
 800e5a2:	4770      	bx	lr

0800e5a4 <_fini>:
 800e5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a6:	bf00      	nop
 800e5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5aa:	bc08      	pop	{r3}
 800e5ac:	469e      	mov	lr, r3
 800e5ae:	4770      	bx	lr
