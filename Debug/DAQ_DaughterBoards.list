
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c24c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800c42c  0800c42c  0000d42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c57c  0800c57c  0000e190  2**0
                  CONTENTS
  4 .ARM          00000008  0800c57c  0800c57c  0000d57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c584  0800c584  0000e190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c584  0800c584  0000d584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c588  0800c588  0000d588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  0800c58c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  20000190  0800c71c  0000e190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012e0  0800c71c  0000e2e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e198  2**0
                  CONTENTS, READONLY
 12 .debug_info   000361ea  00000000  00000000  0000e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008c09  00000000  00000000  000443aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002810  00000000  00000000  0004cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001dc4  00000000  00000000  0004f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003327b  00000000  00000000  0005158c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fb28  00000000  00000000  00084807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012755a  00000000  00000000  000c432f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001eb889  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c9c  00000000  00000000  001eb8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fd  00000000  00000000  001f5568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000198 	.word	0x20000198
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c414 	.word	0x0800c414

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000194 	.word	0x20000194
 800021c:	0800c414 	.word	0x0800c414

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20000cf4 	.word	0x20000cf4
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	0019f09f 	.word	0x0019f09f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20000d90 	.word	0x20000d90
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20000cf8 	.word	0x20000cf8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20000cfc 	.word	0x20000cfc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	200012fc 	.word	0x200012fc

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f00b f98f 	bl	800b71c <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f00a ff9c 	bl	800b340 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20000d9c 	.word	0x20000d9c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	200012fc 	.word	0x200012fc
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20000da0 	.word	0x20000da0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20000e2c 	.word	0x20000e2c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20000e30 	.word	0x20000e30
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20000e28 	.word	0x20000e28
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20000e24 	.word	0x20000e24
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20000d90 	.word	0x20000d90
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20000cf8 	.word	0x20000cf8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20000cfc 	.word	0x20000cfc
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	@ 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_d2uiz>:
 80007d0:	004a      	lsls	r2, r1, #1
 80007d2:	d211      	bcs.n	80007f8 <__aeabi_d2uiz+0x28>
 80007d4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007d8:	d211      	bcs.n	80007fe <__aeabi_d2uiz+0x2e>
 80007da:	d50d      	bpl.n	80007f8 <__aeabi_d2uiz+0x28>
 80007dc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e4:	d40e      	bmi.n	8000804 <__aeabi_d2uiz+0x34>
 80007e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f2:	fa23 f002 	lsr.w	r0, r3, r2
 80007f6:	4770      	bx	lr
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	4770      	bx	lr
 80007fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000802:	d102      	bne.n	800080a <__aeabi_d2uiz+0x3a>
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	4770      	bx	lr
 800080a:	f04f 0000 	mov.w	r0, #0
 800080e:	4770      	bx	lr

08000810 <__aeabi_uldivmod>:
 8000810:	b953      	cbnz	r3, 8000828 <__aeabi_uldivmod+0x18>
 8000812:	b94a      	cbnz	r2, 8000828 <__aeabi_uldivmod+0x18>
 8000814:	2900      	cmp	r1, #0
 8000816:	bf08      	it	eq
 8000818:	2800      	cmpeq	r0, #0
 800081a:	bf1c      	itt	ne
 800081c:	f04f 31ff 	movne.w	r1, #4294967295
 8000820:	f04f 30ff 	movne.w	r0, #4294967295
 8000824:	f000 b96a 	b.w	8000afc <__aeabi_idiv0>
 8000828:	f1ad 0c08 	sub.w	ip, sp, #8
 800082c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000830:	f000 f806 	bl	8000840 <__udivmoddi4>
 8000834:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr

08000840 <__udivmoddi4>:
 8000840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000844:	9d08      	ldr	r5, [sp, #32]
 8000846:	460c      	mov	r4, r1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d14e      	bne.n	80008ea <__udivmoddi4+0xaa>
 800084c:	4694      	mov	ip, r2
 800084e:	458c      	cmp	ip, r1
 8000850:	4686      	mov	lr, r0
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	d962      	bls.n	800091e <__udivmoddi4+0xde>
 8000858:	b14a      	cbz	r2, 800086e <__udivmoddi4+0x2e>
 800085a:	f1c2 0320 	rsb	r3, r2, #32
 800085e:	4091      	lsls	r1, r2
 8000860:	fa20 f303 	lsr.w	r3, r0, r3
 8000864:	fa0c fc02 	lsl.w	ip, ip, r2
 8000868:	4319      	orrs	r1, r3
 800086a:	fa00 fe02 	lsl.w	lr, r0, r2
 800086e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000872:	fa1f f68c 	uxth.w	r6, ip
 8000876:	fbb1 f4f7 	udiv	r4, r1, r7
 800087a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800087e:	fb07 1114 	mls	r1, r7, r4, r1
 8000882:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000886:	fb04 f106 	mul.w	r1, r4, r6
 800088a:	4299      	cmp	r1, r3
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x64>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f104 30ff 	add.w	r0, r4, #4294967295
 8000896:	f080 8112 	bcs.w	8000abe <__udivmoddi4+0x27e>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 810f 	bls.w	8000abe <__udivmoddi4+0x27e>
 80008a0:	3c02      	subs	r4, #2
 80008a2:	4463      	add	r3, ip
 80008a4:	1a59      	subs	r1, r3, r1
 80008a6:	fa1f f38e 	uxth.w	r3, lr
 80008aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ae:	fb07 1110 	mls	r1, r7, r0, r1
 80008b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b6:	fb00 f606 	mul.w	r6, r0, r6
 80008ba:	429e      	cmp	r6, r3
 80008bc:	d90a      	bls.n	80008d4 <__udivmoddi4+0x94>
 80008be:	eb1c 0303 	adds.w	r3, ip, r3
 80008c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c6:	f080 80fc 	bcs.w	8000ac2 <__udivmoddi4+0x282>
 80008ca:	429e      	cmp	r6, r3
 80008cc:	f240 80f9 	bls.w	8000ac2 <__udivmoddi4+0x282>
 80008d0:	4463      	add	r3, ip
 80008d2:	3802      	subs	r0, #2
 80008d4:	1b9b      	subs	r3, r3, r6
 80008d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008da:	2100      	movs	r1, #0
 80008dc:	b11d      	cbz	r5, 80008e6 <__udivmoddi4+0xa6>
 80008de:	40d3      	lsrs	r3, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	e9c5 3200 	strd	r3, r2, [r5]
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d905      	bls.n	80008fa <__udivmoddi4+0xba>
 80008ee:	b10d      	cbz	r5, 80008f4 <__udivmoddi4+0xb4>
 80008f0:	e9c5 0100 	strd	r0, r1, [r5]
 80008f4:	2100      	movs	r1, #0
 80008f6:	4608      	mov	r0, r1
 80008f8:	e7f5      	b.n	80008e6 <__udivmoddi4+0xa6>
 80008fa:	fab3 f183 	clz	r1, r3
 80008fe:	2900      	cmp	r1, #0
 8000900:	d146      	bne.n	8000990 <__udivmoddi4+0x150>
 8000902:	42a3      	cmp	r3, r4
 8000904:	d302      	bcc.n	800090c <__udivmoddi4+0xcc>
 8000906:	4290      	cmp	r0, r2
 8000908:	f0c0 80f0 	bcc.w	8000aec <__udivmoddi4+0x2ac>
 800090c:	1a86      	subs	r6, r0, r2
 800090e:	eb64 0303 	sbc.w	r3, r4, r3
 8000912:	2001      	movs	r0, #1
 8000914:	2d00      	cmp	r5, #0
 8000916:	d0e6      	beq.n	80008e6 <__udivmoddi4+0xa6>
 8000918:	e9c5 6300 	strd	r6, r3, [r5]
 800091c:	e7e3      	b.n	80008e6 <__udivmoddi4+0xa6>
 800091e:	2a00      	cmp	r2, #0
 8000920:	f040 8090 	bne.w	8000a44 <__udivmoddi4+0x204>
 8000924:	eba1 040c 	sub.w	r4, r1, ip
 8000928:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800092c:	fa1f f78c 	uxth.w	r7, ip
 8000930:	2101      	movs	r1, #1
 8000932:	fbb4 f6f8 	udiv	r6, r4, r8
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb08 4416 	mls	r4, r8, r6, r4
 800093e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000942:	fb07 f006 	mul.w	r0, r7, r6
 8000946:	4298      	cmp	r0, r3
 8000948:	d908      	bls.n	800095c <__udivmoddi4+0x11c>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x11a>
 8000954:	4298      	cmp	r0, r3
 8000956:	f200 80cd 	bhi.w	8000af4 <__udivmoddi4+0x2b4>
 800095a:	4626      	mov	r6, r4
 800095c:	1a1c      	subs	r4, r3, r0
 800095e:	fa1f f38e 	uxth.w	r3, lr
 8000962:	fbb4 f0f8 	udiv	r0, r4, r8
 8000966:	fb08 4410 	mls	r4, r8, r0, r4
 800096a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096e:	fb00 f707 	mul.w	r7, r0, r7
 8000972:	429f      	cmp	r7, r3
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x148>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 34ff 	add.w	r4, r0, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x146>
 8000980:	429f      	cmp	r7, r3
 8000982:	f200 80b0 	bhi.w	8000ae6 <__udivmoddi4+0x2a6>
 8000986:	4620      	mov	r0, r4
 8000988:	1bdb      	subs	r3, r3, r7
 800098a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098e:	e7a5      	b.n	80008dc <__udivmoddi4+0x9c>
 8000990:	f1c1 0620 	rsb	r6, r1, #32
 8000994:	408b      	lsls	r3, r1
 8000996:	fa22 f706 	lsr.w	r7, r2, r6
 800099a:	431f      	orrs	r7, r3
 800099c:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a0:	fa04 f301 	lsl.w	r3, r4, r1
 80009a4:	ea43 030c 	orr.w	r3, r3, ip
 80009a8:	40f4      	lsrs	r4, r6
 80009aa:	fa00 f801 	lsl.w	r8, r0, r1
 80009ae:	0c38      	lsrs	r0, r7, #16
 80009b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b4:	fbb4 fef0 	udiv	lr, r4, r0
 80009b8:	fa1f fc87 	uxth.w	ip, r7
 80009bc:	fb00 441e 	mls	r4, r0, lr, r4
 80009c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c4:	fb0e f90c 	mul.w	r9, lr, ip
 80009c8:	45a1      	cmp	r9, r4
 80009ca:	fa02 f201 	lsl.w	r2, r2, r1
 80009ce:	d90a      	bls.n	80009e6 <__udivmoddi4+0x1a6>
 80009d0:	193c      	adds	r4, r7, r4
 80009d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009d6:	f080 8084 	bcs.w	8000ae2 <__udivmoddi4+0x2a2>
 80009da:	45a1      	cmp	r9, r4
 80009dc:	f240 8081 	bls.w	8000ae2 <__udivmoddi4+0x2a2>
 80009e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e4:	443c      	add	r4, r7
 80009e6:	eba4 0409 	sub.w	r4, r4, r9
 80009ea:	fa1f f983 	uxth.w	r9, r3
 80009ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f2:	fb00 4413 	mls	r4, r0, r3, r4
 80009f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80009fe:	45a4      	cmp	ip, r4
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x1d2>
 8000a02:	193c      	adds	r4, r7, r4
 8000a04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a08:	d267      	bcs.n	8000ada <__udivmoddi4+0x29a>
 8000a0a:	45a4      	cmp	ip, r4
 8000a0c:	d965      	bls.n	8000ada <__udivmoddi4+0x29a>
 8000a0e:	3b02      	subs	r3, #2
 8000a10:	443c      	add	r4, r7
 8000a12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a16:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1a:	eba4 040c 	sub.w	r4, r4, ip
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	46ce      	mov	lr, r9
 8000a22:	469c      	mov	ip, r3
 8000a24:	d351      	bcc.n	8000aca <__udivmoddi4+0x28a>
 8000a26:	d04e      	beq.n	8000ac6 <__udivmoddi4+0x286>
 8000a28:	b155      	cbz	r5, 8000a40 <__udivmoddi4+0x200>
 8000a2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000a2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000a32:	fa04 f606 	lsl.w	r6, r4, r6
 8000a36:	40cb      	lsrs	r3, r1
 8000a38:	431e      	orrs	r6, r3
 8000a3a:	40cc      	lsrs	r4, r1
 8000a3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	e750      	b.n	80008e6 <__udivmoddi4+0xa6>
 8000a44:	f1c2 0320 	rsb	r3, r2, #32
 8000a48:	fa20 f103 	lsr.w	r1, r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa24 f303 	lsr.w	r3, r4, r3
 8000a54:	4094      	lsls	r4, r2
 8000a56:	430c      	orrs	r4, r1
 8000a58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3110 	mls	r1, r8, r0, r3
 8000a6c:	0c23      	lsrs	r3, r4, #16
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb00 f107 	mul.w	r1, r0, r7
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x24c>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a82:	d22c      	bcs.n	8000ade <__udivmoddi4+0x29e>
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d92a      	bls.n	8000ade <__udivmoddi4+0x29e>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1a5b      	subs	r3, r3, r1
 8000a8e:	b2a4      	uxth	r4, r4
 8000a90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a94:	fb08 3311 	mls	r3, r8, r1, r3
 8000a98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a9c:	fb01 f307 	mul.w	r3, r1, r7
 8000aa0:	42a3      	cmp	r3, r4
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x276>
 8000aa4:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000aac:	d213      	bcs.n	8000ad6 <__udivmoddi4+0x296>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d911      	bls.n	8000ad6 <__udivmoddi4+0x296>
 8000ab2:	3902      	subs	r1, #2
 8000ab4:	4464      	add	r4, ip
 8000ab6:	1ae4      	subs	r4, r4, r3
 8000ab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000abc:	e739      	b.n	8000932 <__udivmoddi4+0xf2>
 8000abe:	4604      	mov	r4, r0
 8000ac0:	e6f0      	b.n	80008a4 <__udivmoddi4+0x64>
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e706      	b.n	80008d4 <__udivmoddi4+0x94>
 8000ac6:	45c8      	cmp	r8, r9
 8000ac8:	d2ae      	bcs.n	8000a28 <__udivmoddi4+0x1e8>
 8000aca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ace:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	e7a8      	b.n	8000a28 <__udivmoddi4+0x1e8>
 8000ad6:	4631      	mov	r1, r6
 8000ad8:	e7ed      	b.n	8000ab6 <__udivmoddi4+0x276>
 8000ada:	4603      	mov	r3, r0
 8000adc:	e799      	b.n	8000a12 <__udivmoddi4+0x1d2>
 8000ade:	4630      	mov	r0, r6
 8000ae0:	e7d4      	b.n	8000a8c <__udivmoddi4+0x24c>
 8000ae2:	46d6      	mov	lr, sl
 8000ae4:	e77f      	b.n	80009e6 <__udivmoddi4+0x1a6>
 8000ae6:	4463      	add	r3, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e74d      	b.n	8000988 <__udivmoddi4+0x148>
 8000aec:	4606      	mov	r6, r0
 8000aee:	4623      	mov	r3, r4
 8000af0:	4608      	mov	r0, r1
 8000af2:	e70f      	b.n	8000914 <__udivmoddi4+0xd4>
 8000af4:	3e02      	subs	r6, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	e730      	b.n	800095c <__udivmoddi4+0x11c>
 8000afa:	bf00      	nop

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000b0c:	2334      	movs	r3, #52	@ 0x34
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <tx_application_define+0x4c>)
 8000b16:	490e      	ldr	r1, [pc, #56]	@ (8000b50 <tx_application_define+0x50>)
 8000b18:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <tx_application_define+0x54>)
 8000b1a:	f00b f8a9 	bl	800bc70 <_txe_byte_pool_create>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10e      	bne.n	8000b42 <tx_application_define+0x42>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <tx_application_define+0x54>)
 8000b26:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f000 fa4d 	bl	8000fc8 <App_ThreadX_Init>
 8000b2e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000b3a:	68b8      	ldr	r0, [r7, #8]
 8000b3c:	f001 fa32 	bl	8001fa4 <ThreadX_Init>
 8000b40:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001ac 	.word	0x200001ac
 8000b50:	0800c42c 	.word	0x0800c42c
 8000b54:	200005ac 	.word	0x200005ac

08000b58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00b fc23 	bl	800c3bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b76:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b7e:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b92:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b98:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9e:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000baa:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb6:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bbe:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be0:	4817      	ldr	r0, [pc, #92]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000be2:	f002 fa5b 	bl	800309c <HAL_ADC_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000bec:	f000 fe1c 	bl	8001828 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bfc:	f003 fd1e 	bl	800463c <HAL_ADCEx_MultiModeConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c06:	f000 fe0f 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_ADC1_Init+0xec>)
 8000c0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c0e:	2306      	movs	r3, #6
 8000c10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c16:	237f      	movs	r3, #127	@ 0x7f
 8000c18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000c28:	f002 ff46 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c32:	f000 fdf9 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	@ 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200005e8 	.word	0x200005e8
 8000c44:	10c00010 	.word	0x10c00010

08000c48 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2220      	movs	r2, #32
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f00b fbb1 	bl	800c3bc <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000c5a:	4b5e      	ldr	r3, [pc, #376]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8000dd8 <MX_ADC4_Init+0x190>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c60:	4b5c      	ldr	r3, [pc, #368]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c62:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c66:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000c68:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6e:	4b59      	ldr	r3, [pc, #356]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000c74:	4b57      	ldr	r3, [pc, #348]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7a:	4b56      	ldr	r3, [pc, #344]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c80:	4b54      	ldr	r3, [pc, #336]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b53      	ldr	r3, [pc, #332]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000c8c:	4b51      	ldr	r3, [pc, #324]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 8000c92:	4b50      	ldr	r3, [pc, #320]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c94:	2208      	movs	r2, #8
 8000c96:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b49      	ldr	r3, [pc, #292]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cb4:	4b47      	ldr	r3, [pc, #284]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000cbc:	4b45      	ldr	r3, [pc, #276]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000cc4:	4843      	ldr	r0, [pc, #268]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cc6:	f002 f9e9 	bl	800309c <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000cd0:	f000 fdaa 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cd4:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <MX_ADC4_Init+0x194>)
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce0:	237f      	movs	r3, #127	@ 0x7f
 8000ce2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4838      	ldr	r0, [pc, #224]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cf2:	f002 fee1 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000cfc:	f000 fd94 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <MX_ADC4_Init+0x198>)
 8000d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d04:	230c      	movs	r3, #12
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4831      	ldr	r0, [pc, #196]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d0e:	f002 fed3 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000d18:	f000 fd86 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d1c:	4b31      	ldr	r3, [pc, #196]	@ (8000de4 <MX_ADC4_Init+0x19c>)
 8000d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d20:	2312      	movs	r3, #18
 8000d22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	482a      	ldr	r0, [pc, #168]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d2a:	f002 fec5 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 8000d34:	f000 fd78 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <MX_ADC4_Init+0x1a0>)
 8000d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d3c:	2318      	movs	r3, #24
 8000d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	4619      	mov	r1, r3
 8000d44:	4823      	ldr	r0, [pc, #140]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d46:	f002 feb7 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000d50:	f000 fd6a 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d54:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <MX_ADC4_Init+0x1a4>)
 8000d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	481c      	ldr	r0, [pc, #112]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d64:	f002 fea8 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 8000d6e:	f000 fd5b 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_ADC4_Init+0x1a8>)
 8000d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d76:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4814      	ldr	r0, [pc, #80]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d82:	f002 fe99 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 8000d8c:	f000 fd4c 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_ADC4_Init+0x1ac>)
 8000d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d94:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000d98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000da0:	f002 fe8a 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 8000daa:	f000 fd3d 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_ADC4_Init+0x1b0>)
 8000db0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000db2:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000db6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000dbe:	f002 fe7b 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000dc8:	f000 fd2e 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000654 	.word	0x20000654
 8000dd8:	50000500 	.word	0x50000500
 8000ddc:	14f00020 	.word	0x14f00020
 8000de0:	32601000 	.word	0x32601000
 8000de4:	2a000400 	.word	0x2a000400
 8000de8:	2e300800 	.word	0x2e300800
 8000dec:	36902000 	.word	0x36902000
 8000df0:	1d500080 	.word	0x1d500080
 8000df4:	21800100 	.word	0x21800100
 8000df8:	25b00200 	.word	0x25b00200

08000dfc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0a2      	sub	sp, #136	@ 0x88
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	2254      	movs	r2, #84	@ 0x54
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f00b facd 	bl	800c3bc <memset>
  if(adcHandle->Instance==ADC1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e2a:	d135      	bne.n	8000e98 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e30:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e32:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e36:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 f80d 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e48:	f000 fcee 	bl	8001828 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e4c:	4b58      	ldr	r3, [pc, #352]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	4a57      	ldr	r2, [pc, #348]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e58:	4b55      	ldr	r3, [pc, #340]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b52      	ldr	r3, [pc, #328]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e68:	4a51      	ldr	r2, [pc, #324]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e70:	4b4f      	ldr	r3, [pc, #316]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e80:	2303      	movs	r3, #3
 8000e82:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f004 fddd 	bl	8005a50 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000e96:	e086      	b.n	8000fa6 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a45      	ldr	r2, [pc, #276]	@ (8000fb4 <HAL_ADC_MspInit+0x1b8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	f040 8081 	bne.w	8000fa6 <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000eaa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000eae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 ffd1 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000ec0:	f000 fcb2 	bl	8001828 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	4a39      	ldr	r2, [pc, #228]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed0:	4b37      	ldr	r3, [pc, #220]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	4a33      	ldr	r2, [pc, #204]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee8:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f00:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f10:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4825      	ldr	r0, [pc, #148]	@ (8000fb8 <HAL_ADC_MspInit+0x1bc>)
 8000f22:	f004 fd95 	bl	8005a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000f26:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000f2a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4820      	ldr	r0, [pc, #128]	@ (8000fbc <HAL_ADC_MspInit+0x1c0>)
 8000f3c:	f004 fd88 	bl	8005a50 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f42:	4a20      	ldr	r2, [pc, #128]	@ (8000fc4 <HAL_ADC_MspInit+0x1c8>)
 8000f44:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f48:	2226      	movs	r2, #38	@ 0x26
 8000f4a:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f64:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f70:	2220      	movs	r2, #32
 8000f72:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000f7a:	4811      	ldr	r0, [pc, #68]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f7c:	f003 fe38 	bl	8004bf0 <HAL_DMA_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000f86:	f000 fc4f 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f90:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	203d      	movs	r0, #61	@ 0x3d
 8000f9c:	f003 fd0e 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000fa0:	203d      	movs	r0, #61	@ 0x3d
 8000fa2:	f003 fd25 	bl	80049f0 <HAL_NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3788      	adds	r7, #136	@ 0x88
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	50000500 	.word	0x50000500
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000c00 	.word	0x48000c00
 8000fc0:	200006c0 	.word	0x200006c0
 8000fc4:	40020030 	.word	0x40020030

08000fc8 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000fe6:	f009 fb79 	bl	800a6dc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <MX_CRC_Init+0x3c>)
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <MX_CRC_Init+0x40>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_CRC_Init+0x3c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <MX_CRC_Init+0x3c>)
 8001002:	2200      	movs	r2, #0
 8001004:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_CRC_Init+0x3c>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <MX_CRC_Init+0x3c>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_CRC_Init+0x3c>)
 8001014:	2201      	movs	r2, #1
 8001016:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <MX_CRC_Init+0x3c>)
 800101a:	f003 fcf7 	bl	8004a0c <HAL_CRC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001024:	f000 fc00 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000720 	.word	0x20000720
 8001030:	40023000 	.word	0x40023000

08001034 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <HAL_CRC_MspInit+0x38>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10b      	bne.n	800105e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_CRC_MspInit+0x3c>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <HAL_CRC_MspInit+0x3c>)
 800104c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001050:	6493      	str	r3, [r2, #72]	@ 0x48
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <HAL_CRC_MspInit+0x3c>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023000 	.word	0x40023000
 8001070:	40021000 	.word	0x40021000

08001074 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_DMA_Init+0x70>)
 800107c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107e:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <MX_DMA_Init+0x70>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6493      	str	r3, [r2, #72]	@ 0x48
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_DMA_Init+0x70>)
 8001088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_DMA_Init+0x70>)
 8001094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001096:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <MX_DMA_Init+0x70>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6493      	str	r3, [r2, #72]	@ 0x48
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_DMA_Init+0x70>)
 80010a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	200b      	movs	r0, #11
 80010b0:	f003 fc84 	bl	80049bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b4:	200b      	movs	r0, #11
 80010b6:	f003 fc9b 	bl	80049f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	200c      	movs	r0, #12
 80010c0:	f003 fc7c 	bl	80049bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010c4:	200c      	movs	r0, #12
 80010c6:	f003 fc93 	bl	80049f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	200d      	movs	r0, #13
 80010d0:	f003 fc74 	bl	80049bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010d4:	200d      	movs	r0, #13
 80010d6:	f003 fc8b 	bl	80049f0 <HAL_NVIC_EnableIRQ>

}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <MX_FDCAN1_Init+0x84>)
 80010ee:	4a20      	ldr	r2, [pc, #128]	@ (8001170 <MX_FDCAN1_Init+0x88>)
 80010f0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <MX_FDCAN1_Init+0x84>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <MX_FDCAN1_Init+0x84>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001104:	4b19      	ldr	r3, [pc, #100]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001106:	2200      	movs	r2, #0
 8001108:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800110c:	2200      	movs	r2, #0
 800110e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001112:	2200      	movs	r2, #0
 8001114:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001118:	2204      	movs	r2, #4
 800111a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800111e:	2201      	movs	r2, #1
 8001120:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001122:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001124:	2205      	movs	r2, #5
 8001126:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001128:	4b10      	ldr	r3, [pc, #64]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800112a:	2202      	movs	r2, #2
 800112c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800112e:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001130:	2201      	movs	r2, #1
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001136:	2201      	movs	r2, #1
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800113c:	2201      	movs	r2, #1
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001142:	2201      	movs	r2, #1
 8001144:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001148:	2200      	movs	r2, #0
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800114e:	2200      	movs	r2, #0
 8001150:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001154:	2200      	movs	r2, #0
 8001156:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800115a:	f004 f831 	bl	80051c0 <HAL_FDCAN_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001164:	f000 fb60 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000744 	.word	0x20000744
 8001170:	40006400 	.word	0x40006400

08001174 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09e      	sub	sp, #120	@ 0x78
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2254      	movs	r2, #84	@ 0x54
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00b f911 	bl	800c3bc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <HAL_FDCAN_MspInit+0xcc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d149      	bne.n	8001238 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80011aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 fe51 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80011c0:	f000 fb32 	bl	8001828 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	4a18      	ldr	r2, [pc, #96]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001206:	2309      	movs	r3, #9
 8001208:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001214:	f004 fc1c 	bl	8005a50 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	2015      	movs	r0, #21
 800121e:	f003 fbcd 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001222:	2015      	movs	r0, #21
 8001224:	f003 fbe4 	bl	80049f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2016      	movs	r0, #22
 800122e:	f003 fbc5 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001232:	2016      	movs	r0, #22
 8001234:	f003 fbdc 	bl	80049f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001238:	bf00      	nop
 800123a:	3778      	adds	r7, #120	@ 0x78
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40006400 	.word	0x40006400
 8001244:	40021000 	.word	0x40021000

08001248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125e:	4b5b      	ldr	r3, [pc, #364]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a5a      	ldr	r2, [pc, #360]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001264:	f043 0320 	orr.w	r3, r3, #32
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b58      	ldr	r3, [pc, #352]	@ (80013cc <MX_GPIO_Init+0x184>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b55      	ldr	r3, [pc, #340]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a54      	ldr	r2, [pc, #336]	@ (80013cc <MX_GPIO_Init+0x184>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b52      	ldr	r3, [pc, #328]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b4f      	ldr	r3, [pc, #316]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	4a4e      	ldr	r2, [pc, #312]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129a:	4b4c      	ldr	r3, [pc, #304]	@ (80013cc <MX_GPIO_Init+0x184>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b49      	ldr	r3, [pc, #292]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	4a48      	ldr	r2, [pc, #288]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b2:	4b46      	ldr	r3, [pc, #280]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	4b43      	ldr	r3, [pc, #268]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	4a42      	ldr	r2, [pc, #264]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ca:	4b40      	ldr	r3, [pc, #256]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d6:	4b3d      	ldr	r3, [pc, #244]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	4a3c      	ldr	r2, [pc, #240]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e2:	4b3a      	ldr	r3, [pc, #232]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 80012ee:	2200      	movs	r2, #0
 80012f0:	f641 7130 	movw	r1, #7984	@ 0x1f30
 80012f4:	4836      	ldr	r0, [pc, #216]	@ (80013d0 <MX_GPIO_Init+0x188>)
 80012f6:	f004 fd2d 	bl	8005d54 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f246 0103 	movw	r1, #24579	@ 0x6003
 8001300:	4834      	ldr	r0, [pc, #208]	@ (80013d4 <MX_GPIO_Init+0x18c>)
 8001302:	f004 fd27 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800130c:	4832      	ldr	r0, [pc, #200]	@ (80013d8 <MX_GPIO_Init+0x190>)
 800130e:	f004 fd21 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001318:	4830      	ldr	r0, [pc, #192]	@ (80013dc <MX_GPIO_Init+0x194>)
 800131a:	f004 fd1b 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001328:	f004 fd14 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 800132c:	f641 7330 	movw	r3, #7984	@ 0x1f30
 8001330:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4822      	ldr	r0, [pc, #136]	@ (80013d0 <MX_GPIO_Init+0x188>)
 8001346:	f004 fb83 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 800134a:	f246 0303 	movw	r3, #24579	@ 0x6003
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	481c      	ldr	r0, [pc, #112]	@ (80013d4 <MX_GPIO_Init+0x18c>)
 8001364:	f004 fb74 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin;
 8001368:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4815      	ldr	r0, [pc, #84]	@ (80013d8 <MX_GPIO_Init+0x190>)
 8001382:	f004 fb65 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 8001386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	480f      	ldr	r0, [pc, #60]	@ (80013dc <MX_GPIO_Init+0x194>)
 80013a0:	f004 fb56 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 80013a4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c0:	f004 fb46 	bl	8005a50 <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3730      	adds	r7, #48	@ 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48000c00 	.word	0x48000c00

080013e0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <MX_I2C1_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013ec:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <MX_I2C1_Init+0x7c>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_I2C1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141a:	480e      	ldr	r0, [pc, #56]	@ (8001454 <MX_I2C1_Init+0x74>)
 800141c:	f004 fccc 	bl	8005db8 <HAL_I2C_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001426:	f000 f9ff 	bl	8001828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	4809      	ldr	r0, [pc, #36]	@ (8001454 <MX_I2C1_Init+0x74>)
 800142e:	f005 fe69 	bl	8007104 <HAL_I2CEx_ConfigAnalogFilter>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001438:	f000 f9f6 	bl	8001828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800143c:	2100      	movs	r1, #0
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001440:	f005 feab 	bl	800719a <HAL_I2CEx_ConfigDigitalFilter>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800144a:	f000 f9ed 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200007a8 	.word	0x200007a8
 8001458:	40005400 	.word	0x40005400
 800145c:	30a0a7fb 	.word	0x30a0a7fb

08001460 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001466:	4a1c      	ldr	r2, [pc, #112]	@ (80014d8 <MX_I2C4_Init+0x78>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10802D9B;
 800146a:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <MX_I2C4_Init+0x74>)
 800146c:	4a1b      	ldr	r2, [pc, #108]	@ (80014dc <MX_I2C4_Init+0x7c>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001478:	2201      	movs	r2, #1
 800147a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <MX_I2C4_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001482:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <MX_I2C4_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800149a:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <MX_I2C4_Init+0x74>)
 800149c:	f004 fc8c 	bl	8005db8 <HAL_I2C_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80014a6:	f000 f9bf 	bl	8001828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4809      	ldr	r0, [pc, #36]	@ (80014d4 <MX_I2C4_Init+0x74>)
 80014ae:	f005 fe29 	bl	8007104 <HAL_I2CEx_ConfigAnalogFilter>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80014b8:	f000 f9b6 	bl	8001828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80014bc:	2100      	movs	r1, #0
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_I2C4_Init+0x74>)
 80014c0:	f005 fe6b 	bl	800719a <HAL_I2CEx_ConfigDigitalFilter>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80014ca:	f000 f9ad 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200007fc 	.word	0x200007fc
 80014d8:	40008400 	.word	0x40008400
 80014dc:	10802d9b 	.word	0x10802d9b

080014e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0a2      	sub	sp, #136	@ 0x88
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	2254      	movs	r2, #84	@ 0x54
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f00a ff5b 	bl	800c3bc <memset>
  if(i2cHandle->Instance==I2C1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a80      	ldr	r2, [pc, #512]	@ (800170c <HAL_I2C_MspInit+0x22c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d158      	bne.n	80015c2 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001510:	2340      	movs	r3, #64	@ 0x40
 8001512:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001514:	2300      	movs	r3, #0
 8001516:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f006 fc9d 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001528:	f000 f97e 	bl	8001828 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b78      	ldr	r3, [pc, #480]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	4a77      	ldr	r2, [pc, #476]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001538:	4b75      	ldr	r3, [pc, #468]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b72      	ldr	r3, [pc, #456]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001548:	4a71      	ldr	r2, [pc, #452]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001550:	4b6f      	ldr	r3, [pc, #444]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800155c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001560:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001562:	2312      	movs	r3, #18
 8001564:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001570:	2304      	movs	r3, #4
 8001572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001580:	f004 fa66 	bl	8005a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001596:	2304      	movs	r3, #4
 8001598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015a0:	4619      	mov	r1, r3
 80015a2:	485c      	ldr	r0, [pc, #368]	@ (8001714 <HAL_I2C_MspInit+0x234>)
 80015a4:	f004 fa54 	bl	8005a50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a8:	4b59      	ldr	r3, [pc, #356]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	4a58      	ldr	r2, [pc, #352]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b4:	4b56      	ldr	r3, [pc, #344]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80015c0:	e0a0      	b.n	8001704 <HAL_I2C_MspInit+0x224>
  else if(i2cHandle->Instance==I2C4)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a54      	ldr	r2, [pc, #336]	@ (8001718 <HAL_I2C_MspInit+0x238>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	f040 809b 	bne.w	8001704 <HAL_I2C_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	4618      	mov	r0, r3
 80015de:	f006 fc3d 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_I2C_MspInit+0x10c>
      Error_Handler();
 80015e8:	f000 f91e 	bl	8001828 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ec:	4b48      	ldr	r3, [pc, #288]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	4a47      	ldr	r2, [pc, #284]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f8:	4b45      	ldr	r3, [pc, #276]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001604:	23c0      	movs	r3, #192	@ 0xc0
 8001606:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001608:	2312      	movs	r3, #18
 800160a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001616:	2308      	movs	r3, #8
 8001618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001620:	4619      	mov	r1, r3
 8001622:	483e      	ldr	r0, [pc, #248]	@ (800171c <HAL_I2C_MspInit+0x23c>)
 8001624:	f004 fa14 	bl	8005a50 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001628:	4b39      	ldr	r3, [pc, #228]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800162a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162c:	4a38      	ldr	r2, [pc, #224]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001634:	4b36      	ldr	r3, [pc, #216]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 8001636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001640:	4b37      	ldr	r3, [pc, #220]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001642:	4a38      	ldr	r2, [pc, #224]	@ (8001724 <HAL_I2C_MspInit+0x244>)
 8001644:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001646:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001648:	2216      	movs	r2, #22
 800164a:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164c:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001652:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	4b31      	ldr	r3, [pc, #196]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165e:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001664:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001676:	482a      	ldr	r0, [pc, #168]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001678:	f003 faba 	bl	8004bf0 <HAL_DMA_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_MspInit+0x1a6>
      Error_Handler();
 8001682:	f000 f8d1 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a25      	ldr	r2, [pc, #148]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800168a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800168c:	4a24      	ldr	r2, [pc, #144]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001692:	4b25      	ldr	r3, [pc, #148]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 8001694:	4a25      	ldr	r2, [pc, #148]	@ (800172c <HAL_I2C_MspInit+0x24c>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001698:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 800169a:	2217      	movs	r2, #23
 800169c:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80016c8:	4817      	ldr	r0, [pc, #92]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016ca:	f003 fa91 	bl	8004bf0 <HAL_DMA_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_MspInit+0x1f8>
      Error_Handler();
 80016d4:	f000 f8a8 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a13      	ldr	r2, [pc, #76]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2052      	movs	r0, #82	@ 0x52
 80016ea:	f003 f967 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80016ee:	2052      	movs	r0, #82	@ 0x52
 80016f0:	f003 f97e 	bl	80049f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	2053      	movs	r0, #83	@ 0x53
 80016fa:	f003 f95f 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80016fe:	2053      	movs	r0, #83	@ 0x53
 8001700:	f003 f976 	bl	80049f0 <HAL_NVIC_EnableIRQ>
}
 8001704:	bf00      	nop
 8001706:	3788      	adds	r7, #136	@ 0x88
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40005400 	.word	0x40005400
 8001710:	40021000 	.word	0x40021000
 8001714:	48000400 	.word	0x48000400
 8001718:	40008400 	.word	0x40008400
 800171c:	48000800 	.word	0x48000800
 8001720:	20000850 	.word	0x20000850
 8001724:	40020008 	.word	0x40020008
 8001728:	200008b0 	.word	0x200008b0
 800172c:	4002001c 	.word	0x4002001c

08001730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001734:	f001 fa18 	bl	8002b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001738:	f000 f81a 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173c:	f7ff fd84 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 8001740:	f7ff fc98 	bl	8001074 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001744:	f7ff fcd0 	bl	80010e8 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001748:	f000 fa1c 	bl	8001b84 <MX_TIM2_Init>
  MX_CRC_Init();
 800174c:	f7ff fc50 	bl	8000ff0 <MX_CRC_Init>
  MX_ADC4_Init();
 8001750:	f7ff fa7a 	bl	8000c48 <MX_ADC4_Init>
  MX_SPI4_Init();
 8001754:	f000 f86e 	bl	8001834 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001758:	f7ff f9fe 	bl	8000b58 <MX_ADC1_Init>
  MX_I2C1_Init();
 800175c:	f7ff fe40 	bl	80013e0 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001760:	f7ff fe7e 	bl	8001460 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001764:	f000 facc 	bl	8001d00 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001768:	f7ff fc3b 	bl	8000fe2 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <main+0x3c>

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b094      	sub	sp, #80	@ 0x50
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	2238      	movs	r2, #56	@ 0x38
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f00a fe1c 	bl	800c3bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001792:	2000      	movs	r0, #0
 8001794:	f005 fd4e 	bl	8007234 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	2301      	movs	r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a6:	2303      	movs	r3, #3
 80017a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80017aa:	2306      	movs	r3, #6
 80017ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017ae:	2355      	movs	r3, #85	@ 0x55
 80017b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b2:	2302      	movs	r3, #2
 80017b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 fdea 	bl	800739c <HAL_RCC_OscConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80017ce:	f000 f82b 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d2:	230f      	movs	r3, #15
 80017d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d6:	2303      	movs	r3, #3
 80017d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2104      	movs	r1, #4
 80017ea:	4618      	mov	r0, r3
 80017ec:	f006 f8e8 	bl	80079c0 <HAL_RCC_ClockConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017f6:	f000 f817 	bl	8001828 <Error_Handler>
  }
}
 80017fa:	bf00      	nop
 80017fc:	3750      	adds	r7, #80	@ 0x50
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001816:	f001 f9bf 	bl	8002b98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40001000 	.word	0x40001000

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <Error_Handler+0x8>

08001834 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <MX_SPI4_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	@ (80018ac <MX_SPI4_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_SPI4_Init+0x74>)
 8001840:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <MX_SPI4_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <MX_SPI4_Init+0x74>)
 800184e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001852:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <MX_SPI4_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <MX_SPI4_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <MX_SPI4_Init+0x74>)
 8001862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001866:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <MX_SPI4_Init+0x74>)
 800186a:	2210      	movs	r2, #16
 800186c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <MX_SPI4_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <MX_SPI4_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <MX_SPI4_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <MX_SPI4_Init+0x74>)
 8001882:	2207      	movs	r2, #7
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <MX_SPI4_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <MX_SPI4_Init+0x74>)
 800188e:	2208      	movs	r2, #8
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_SPI4_Init+0x74>)
 8001894:	f006 fd30 	bl	80082f8 <HAL_SPI_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800189e:	f7ff ffc3 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000910 	.word	0x20000910
 80018ac:	40013c00 	.word	0x40013c00

080018b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a17      	ldr	r2, [pc, #92]	@ (800192c <HAL_SPI_MspInit+0x7c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d128      	bne.n	8001924 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <HAL_SPI_MspInit+0x80>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	4a16      	ldr	r2, [pc, #88]	@ (8001930 <HAL_SPI_MspInit+0x80>)
 80018d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018de:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <HAL_SPI_MspInit+0x80>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <HAL_SPI_MspInit+0x80>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	4a10      	ldr	r2, [pc, #64]	@ (8001930 <HAL_SPI_MspInit+0x80>)
 80018f0:	f043 0310 	orr.w	r3, r3, #16
 80018f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_SPI_MspInit+0x80>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001902:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001914:	2305      	movs	r3, #5
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4805      	ldr	r0, [pc, #20]	@ (8001934 <HAL_SPI_MspInit+0x84>)
 8001920:	f004 f896 	bl	8005a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	@ 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40013c00 	.word	0x40013c00
 8001930:	40021000 	.word	0x40021000
 8001934:	48001000 	.word	0x48001000

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_MspInit+0x4c>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <HAL_MspInit+0x4c>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6613      	str	r3, [r2, #96]	@ 0x60
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_MspInit+0x4c>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_MspInit+0x4c>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <HAL_MspInit+0x4c>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001960:	6593      	str	r3, [r2, #88]	@ 0x58
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_MspInit+0x4c>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800196e:	f001 f945 	bl	8002bfc <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001972:	2002      	movs	r0, #2
 8001974:	f001 f92e 	bl	8002bd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001978:	f005 fd00 	bl	800737c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08c      	sub	sp, #48	@ 0x30
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001998:	4b2c      	ldr	r3, [pc, #176]	@ (8001a4c <HAL_InitTick+0xc4>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a4c <HAL_InitTick+0xc4>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a4:	4b29      	ldr	r3, [pc, #164]	@ (8001a4c <HAL_InitTick+0xc4>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b0:	f107 020c 	add.w	r2, r7, #12
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f006 f9d6 	bl	8007d6c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019c0:	f006 f9a8 	bl	8007d14 <HAL_RCC_GetPCLK1Freq>
 80019c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c8:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <HAL_InitTick+0xc8>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	3b01      	subs	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <HAL_InitTick+0xcc>)
 80019d6:	4a20      	ldr	r2, [pc, #128]	@ (8001a58 <HAL_InitTick+0xd0>)
 80019d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019da:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <HAL_InitTick+0xcc>)
 80019dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a54 <HAL_InitTick+0xcc>)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_InitTick+0xcc>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <HAL_InitTick+0xcc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80019f4:	4817      	ldr	r0, [pc, #92]	@ (8001a54 <HAL_InitTick+0xcc>)
 80019f6:	f006 fd2a 	bl	800844e <HAL_TIM_Base_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11b      	bne.n	8001a40 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a08:	4812      	ldr	r0, [pc, #72]	@ (8001a54 <HAL_InitTick+0xcc>)
 8001a0a:	f006 fd81 	bl	8008510 <HAL_TIM_Base_Start_IT>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d111      	bne.n	8001a40 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a1c:	2036      	movs	r0, #54	@ 0x36
 8001a1e:	f002 ffe7 	bl	80049f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b0f      	cmp	r3, #15
 8001a26:	d808      	bhi.n	8001a3a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	2036      	movs	r0, #54	@ 0x36
 8001a2e:	f002 ffc5 	bl	80049bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <HAL_InitTick+0xd4>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e002      	b.n	8001a40 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3730      	adds	r7, #48	@ 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	431bde83 	.word	0x431bde83
 8001a54:	20000974 	.word	0x20000974
 8001a58:	40001000 	.word	0x40001000
 8001a5c:	2000018c 	.word	0x2000018c

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <NMI_Handler+0x4>

08001a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <MemManage_Handler+0x4>

08001a78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <DMA1_Channel1_IRQHandler+0x10>)
 8001a9e:	f003 fa31 	bl	8004f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000850 	.word	0x20000850

08001aac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <DMA1_Channel2_IRQHandler+0x10>)
 8001ab2:	f003 fa27 	bl	8004f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200008b0 	.word	0x200008b0

08001ac0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <DMA1_Channel3_IRQHandler+0x10>)
 8001ac6:	f003 fa1d 	bl	8004f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200006c0 	.word	0x200006c0

08001ad4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <FDCAN1_IT0_IRQHandler+0x10>)
 8001ada:	f003 fd37 	bl	800554c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000744 	.word	0x20000744

08001ae8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <FDCAN1_IT1_IRQHandler+0x10>)
 8001aee:	f003 fd2d 	bl	800554c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000744 	.word	0x20000744

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f006 ff25 	bl	8008950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200009c0 	.word	0x200009c0

08001b10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <TIM6_DAC_IRQHandler+0x10>)
 8001b16:	f006 ff1b 	bl	8008950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000974 	.word	0x20000974

08001b24 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <ADC4_IRQHandler+0x10>)
 8001b2a:	f001 fd47 	bl	80035bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000654 	.word	0x20000654

08001b38 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <I2C4_EV_IRQHandler+0x10>)
 8001b3e:	f004 faef 	bl	8006120 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200007fc 	.word	0x200007fc

08001b4c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001b50:	4802      	ldr	r0, [pc, #8]	@ (8001b5c <I2C4_ER_IRQHandler+0x10>)
 8001b52:	f004 faff 	bl	8006154 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200007fc 	.word	0x200007fc

08001b60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <SystemInit+0x20>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b6a:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <SystemInit+0x20>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ba2:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001ba4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001baa:	4b2f      	ldr	r3, [pc, #188]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bca:	4827      	ldr	r0, [pc, #156]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001bcc:	f006 fd18 	bl	8008600 <HAL_TIM_IC_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bd6:	f7ff fe27 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	481f      	ldr	r0, [pc, #124]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001bea:	f007 fb03 	bl	80091f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001bf4:	f7ff fe18 	bl	8001828 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4816      	ldr	r0, [pc, #88]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001c10:	f006 ffed 	bl	8008bee <HAL_TIM_IC_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c1a:	f7ff fe05 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2204      	movs	r2, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4810      	ldr	r0, [pc, #64]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001c26:	f006 ffe2 	bl	8008bee <HAL_TIM_IC_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001c30:	f7ff fdfa 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2208      	movs	r2, #8
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480b      	ldr	r0, [pc, #44]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001c3c:	f006 ffd7 	bl	8008bee <HAL_TIM_IC_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001c46:	f7ff fdef 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <MX_TIM2_Init+0xe4>)
 8001c52:	f006 ffcc 	bl	8008bee <HAL_TIM_IC_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001c5c:	f7ff fde4 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200009c0 	.word	0x200009c0

08001c6c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8c:	d12f      	bne.n	8001cee <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <HAL_TIM_IC_MspInit+0x8c>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	4a19      	ldr	r2, [pc, #100]	@ (8001cf8 <HAL_TIM_IC_MspInit+0x8c>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <HAL_TIM_IC_MspInit+0x8c>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca6:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <HAL_TIM_IC_MspInit+0x8c>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	4a13      	ldr	r2, [pc, #76]	@ (8001cf8 <HAL_TIM_IC_MspInit+0x8c>)
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <HAL_TIM_IC_MspInit+0x8c>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 8001cbe:	23d8      	movs	r3, #216	@ 0xd8
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4808      	ldr	r0, [pc, #32]	@ (8001cfc <HAL_TIM_IC_MspInit+0x90>)
 8001cda:	f003 feb9 	bl	8005a50 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	201c      	movs	r0, #28
 8001ce4:	f002 fe6a 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce8:	201c      	movs	r0, #28
 8001cea:	f002 fe81 	bl	80049f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	@ 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	48000c00 	.word	0x48000c00

08001d00 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d04:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d06:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <MX_LPUART1_UART_Init+0x8c>)
 8001d08:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d0c:	4a20      	ldr	r2, [pc, #128]	@ (8001d90 <MX_LPUART1_UART_Init+0x90>)
 8001d0e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d24:	220c      	movs	r2, #12
 8001d26:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d40:	4811      	ldr	r0, [pc, #68]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d42:	f007 fb33 	bl	80093ac <HAL_UART_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001d4c:	f7ff fd6c 	bl	8001828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d50:	2100      	movs	r1, #0
 8001d52:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d54:	f008 f8ce 	bl	8009ef4 <HAL_UARTEx_SetTxFifoThreshold>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001d5e:	f7ff fd63 	bl	8001828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d62:	2100      	movs	r1, #0
 8001d64:	4808      	ldr	r0, [pc, #32]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d66:	f008 f903 	bl	8009f70 <HAL_UARTEx_SetRxFifoThreshold>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001d70:	f7ff fd5a 	bl	8001828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <MX_LPUART1_UART_Init+0x88>)
 8001d76:	f008 f884 	bl	8009e82 <HAL_UARTEx_DisableFifoMode>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001d80:	f7ff fd52 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000a0c 	.word	0x20000a0c
 8001d8c:	40008000 	.word	0x40008000
 8001d90:	00033324 	.word	0x00033324

08001d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b09e      	sub	sp, #120	@ 0x78
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	2254      	movs	r2, #84	@ 0x54
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00a fb01 	bl	800c3bc <memset>
  if(uartHandle->Instance==LPUART1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001e38 <HAL_UART_MspInit+0xa4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d135      	bne.n	8001e30 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 f843 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ddc:	f7ff fd24 	bl	8001828 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001de0:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <HAL_UART_MspInit+0xa8>)
 8001de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de4:	4a15      	ldr	r2, [pc, #84]	@ (8001e3c <HAL_UART_MspInit+0xa8>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001dec:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <HAL_UART_MspInit+0xa8>)
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df8:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_UART_MspInit+0xa8>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <HAL_UART_MspInit+0xa8>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e04:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <HAL_UART_MspInit+0xa8>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e10:	2303      	movs	r3, #3
 8001e12:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001e20:	2308      	movs	r3, #8
 8001e22:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <HAL_UART_MspInit+0xac>)
 8001e2c:	f003 fe10 	bl	8005a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001e30:	bf00      	nop
 8001e32:	3778      	adds	r7, #120	@ 0x78
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40008000 	.word	0x40008000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	48000800 	.word	0x48000800

08001e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e44:	480d      	ldr	r0, [pc, #52]	@ (8001e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e48:	f7ff fe8a 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e4c:	480c      	ldr	r0, [pc, #48]	@ (8001e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4e:	490d      	ldr	r1, [pc, #52]	@ (8001e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e50:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <LoopForever+0xe>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e64:	4c0a      	ldr	r4, [pc, #40]	@ (8001e90 <LoopForever+0x16>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e72:	f00a faab 	bl	800c3cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e76:	f7ff fc5b 	bl	8001730 <main>

08001e7a <LoopForever>:

LoopForever:
    b LoopForever
 8001e7a:	e7fe      	b.n	8001e7a <LoopForever>
  ldr   r0, =_estack
 8001e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001e88:	0800c58c 	.word	0x0800c58c
  ldr r2, =_sbss
 8001e8c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001e90:	20001300 	.word	0x20001300

08001e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC1_2_IRQHandler>
	...

08001e98 <HAL_ADC_ConvCpltCallback>:
	analogSwitch8
};

void HAL_ADC_ConvCpltCallback(
    ADC_HandleTypeDef* hadc
){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
    tx_semaphore_put(&semaphoreAnalog);
 8001ea0:	4804      	ldr	r0, [pc, #16]	@ (8001eb4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001ea2:	f00a f85d 	bl	800bf60 <_txe_semaphore_put>
    TransmitToAll();
 8001ea6:	f000 f867 	bl	8001f78 <TransmitToAll>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000b48 	.word	0x20000b48

08001eb4 <setAnalogSwitches>:

uint8_t setAnalogSwitches(
	const uint8_t switchSettings[NUM_ADC_CHANNELS]
){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e01d      	b.n	8001f02 <setAnalogSwitches+0x4e>
		if(switchSettings[i]){
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <setAnalogSwitches+0x34>
			set12VSensor(&analogSwitches[i]);
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <setAnalogSwitches+0x60>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f819 	bl	8001f18 <set12VSensor>
 8001ee6:	e009      	b.n	8001efc <setAnalogSwitches+0x48>
		}else{
			set5VSensor(&analogSwitches[i]);
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	4a08      	ldr	r2, [pc, #32]	@ (8001f14 <setAnalogSwitches+0x60>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f825 	bl	8001f46 <set5VSensor>
	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3301      	adds	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b07      	cmp	r3, #7
 8001f06:	d9de      	bls.n	8001ec6 <setAnalogSwitches+0x12>
		}
	}
	return retval;
 8001f08:	7afb      	ldrb	r3, [r7, #11]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000004 	.word	0x20000004

08001f18 <set12VSensor>:

uint8_t set12VSensor(
	gpio_control_t *self
){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <set12VSensor+0x16>
		retval = UCR_NPTR;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(&self->port, self->pin, SET_12V);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f003 ff0a 	bl	8005d54 <HAL_GPIO_WritePin>
	return retval;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <set5VSensor>:

uint8_t set5VSensor(
	gpio_control_t *self
){
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <set5VSensor+0x16>
		retval = UCR_NPTR;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(&self->port, self->pin, SET_5V);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f66:	2200      	movs	r2, #0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f003 fef3 	bl	8005d54 <HAL_GPIO_WritePin>
	return retval;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f78 <TransmitToAll>:
void SetChannel(uint8_t sensor){
    uint8_t data = 1 << (sensor - 1);
    HAL_I2C_Master_Transmit(&hi2c4, SWITCH_ADDRESS, &data, 1, 1000);
}

uint8_t TransmitToAll(){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af02      	add	r7, sp, #8
    uint8_t data = 0b00000111;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c4, SWITCH_ADDRESS, &data, 1, 1000);
 8001f82:	1dfa      	adds	r2, r7, #7
 8001f84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	2170      	movs	r1, #112	@ 0x70
 8001f8e:	4804      	ldr	r0, [pc, #16]	@ (8001fa0 <TransmitToAll+0x28>)
 8001f90:	f003 ffae 	bl	8005ef0 <HAL_I2C_Master_Transmit>
    return UCR_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200007f4 	.word	0x200007f4

08001fa4 <ThreadX_Init>:


uint8_t frequencyData[16];


UINT ThreadX_Init(VOID *memory_ptr){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	@ 0x38
 8001fa8:	af08      	add	r7, sp, #32
 8001faa:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001fb4:	f107 010c 	add.w	r1, r7, #12
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fbe:	6938      	ldr	r0, [r7, #16]
 8001fc0:	f009 fde2 	bl	800bb88 <_txe_byte_allocate>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <ThreadX_Init+0x2a>
	  return TX_POOL_ERROR;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e094      	b.n	80020f8 <ThreadX_Init+0x154>
	}


	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	22b0      	movs	r2, #176	@ 0xb0
 8001fd2:	9206      	str	r2, [sp, #24]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	9205      	str	r2, [sp, #20]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	9204      	str	r2, [sp, #16]
 8001fdc:	220a      	movs	r2, #10
 8001fde:	9203      	str	r2, [sp, #12]
 8001fe0:	220a      	movs	r2, #10
 8001fe2:	9202      	str	r2, [sp, #8]
 8001fe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe8:	9201      	str	r2, [sp, #4]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2300      	movs	r3, #0
 8001fee:	4a44      	ldr	r2, [pc, #272]	@ (8002100 <ThreadX_Init+0x15c>)
 8001ff0:	4944      	ldr	r1, [pc, #272]	@ (8002104 <ThreadX_Init+0x160>)
 8001ff2:	4845      	ldr	r0, [pc, #276]	@ (8002108 <ThreadX_Init+0x164>)
 8001ff4:	f009 ffd2 	bl	800bf9c <_txe_thread_create>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <ThreadX_Init+0x5e>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
	  return TX_THREAD_ERROR;
 8001ffe:	230e      	movs	r3, #14
 8002000:	e07a      	b.n	80020f8 <ThreadX_Init+0x154>
	}

	if(tx_thread_create(&txMainThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	22b0      	movs	r2, #176	@ 0xb0
 8002006:	9206      	str	r2, [sp, #24]
 8002008:	2201      	movs	r2, #1
 800200a:	9205      	str	r2, [sp, #20]
 800200c:	2200      	movs	r2, #0
 800200e:	9204      	str	r2, [sp, #16]
 8002010:	220a      	movs	r2, #10
 8002012:	9203      	str	r2, [sp, #12]
 8002014:	220a      	movs	r2, #10
 8002016:	9202      	str	r2, [sp, #8]
 8002018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800201c:	9201      	str	r2, [sp, #4]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2300      	movs	r3, #0
 8002022:	4a3a      	ldr	r2, [pc, #232]	@ (800210c <ThreadX_Init+0x168>)
 8002024:	493a      	ldr	r1, [pc, #232]	@ (8002110 <ThreadX_Init+0x16c>)
 8002026:	4838      	ldr	r0, [pc, #224]	@ (8002108 <ThreadX_Init+0x164>)
 8002028:	f009 ffb8 	bl	800bf9c <_txe_thread_create>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <ThreadX_Init+0x92>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
	  return TX_THREAD_ERROR;
 8002032:	230e      	movs	r3, #14
 8002034:	e060      	b.n	80020f8 <ThreadX_Init+0x154>
	}

	if(tx_thread_create(&txMainThread, "txAeroThread", txAeroThreadEntry, 0, pointer,
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	22b0      	movs	r2, #176	@ 0xb0
 800203a:	9206      	str	r2, [sp, #24]
 800203c:	2201      	movs	r2, #1
 800203e:	9205      	str	r2, [sp, #20]
 8002040:	2200      	movs	r2, #0
 8002042:	9204      	str	r2, [sp, #16]
 8002044:	220a      	movs	r2, #10
 8002046:	9203      	str	r2, [sp, #12]
 8002048:	220a      	movs	r2, #10
 800204a:	9202      	str	r2, [sp, #8]
 800204c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002050:	9201      	str	r2, [sp, #4]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2300      	movs	r3, #0
 8002056:	4a2f      	ldr	r2, [pc, #188]	@ (8002114 <ThreadX_Init+0x170>)
 8002058:	492f      	ldr	r1, [pc, #188]	@ (8002118 <ThreadX_Init+0x174>)
 800205a:	482b      	ldr	r0, [pc, #172]	@ (8002108 <ThreadX_Init+0x164>)
 800205c:	f009 ff9e 	bl	800bf9c <_txe_thread_create>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <ThreadX_Init+0xc6>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 8002066:	230e      	movs	r3, #14
 8002068:	e046      	b.n	80020f8 <ThreadX_Init+0x154>
	}
	if(tx_thread_create(&txMainThread, "txCAN500Hz", txCAN500HzThreadEntry, 0, pointer,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	22b0      	movs	r2, #176	@ 0xb0
 800206e:	9206      	str	r2, [sp, #24]
 8002070:	2201      	movs	r2, #1
 8002072:	9205      	str	r2, [sp, #20]
 8002074:	2200      	movs	r2, #0
 8002076:	9204      	str	r2, [sp, #16]
 8002078:	220a      	movs	r2, #10
 800207a:	9203      	str	r2, [sp, #12]
 800207c:	220a      	movs	r2, #10
 800207e:	9202      	str	r2, [sp, #8]
 8002080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002084:	9201      	str	r2, [sp, #4]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2300      	movs	r3, #0
 800208a:	4a24      	ldr	r2, [pc, #144]	@ (800211c <ThreadX_Init+0x178>)
 800208c:	4924      	ldr	r1, [pc, #144]	@ (8002120 <ThreadX_Init+0x17c>)
 800208e:	481e      	ldr	r0, [pc, #120]	@ (8002108 <ThreadX_Init+0x164>)
 8002090:	f009 ff84 	bl	800bf9c <_txe_thread_create>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <ThreadX_Init+0xfa>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 800209a:	230e      	movs	r3, #14
 800209c:	e02c      	b.n	80020f8 <ThreadX_Init+0x154>
	}

	if(tx_thread_create(&txMainThread, "txCAN100Hz", txCAN100HzThreadEntry, 0, pointer,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	22b0      	movs	r2, #176	@ 0xb0
 80020a2:	9206      	str	r2, [sp, #24]
 80020a4:	2201      	movs	r2, #1
 80020a6:	9205      	str	r2, [sp, #20]
 80020a8:	2200      	movs	r2, #0
 80020aa:	9204      	str	r2, [sp, #16]
 80020ac:	220a      	movs	r2, #10
 80020ae:	9203      	str	r2, [sp, #12]
 80020b0:	220a      	movs	r2, #10
 80020b2:	9202      	str	r2, [sp, #8]
 80020b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b8:	9201      	str	r2, [sp, #4]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2300      	movs	r3, #0
 80020be:	4a19      	ldr	r2, [pc, #100]	@ (8002124 <ThreadX_Init+0x180>)
 80020c0:	4919      	ldr	r1, [pc, #100]	@ (8002128 <ThreadX_Init+0x184>)
 80020c2:	4811      	ldr	r0, [pc, #68]	@ (8002108 <ThreadX_Init+0x164>)
 80020c4:	f009 ff6a 	bl	800bf9c <_txe_thread_create>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <ThreadX_Init+0x12e>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 80020ce:	230e      	movs	r3, #14
 80020d0:	e012      	b.n	80020f8 <ThreadX_Init+0x154>
	}

	tx_semaphore_create(&semaphoreAnalog, "semaphoreAnalog", 0);
 80020d2:	231c      	movs	r3, #28
 80020d4:	2200      	movs	r2, #0
 80020d6:	4915      	ldr	r1, [pc, #84]	@ (800212c <ThreadX_Init+0x188>)
 80020d8:	4815      	ldr	r0, [pc, #84]	@ (8002130 <ThreadX_Init+0x18c>)
 80020da:	f009 fe69 	bl	800bdb0 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreAero, "semaphoreAero", 0);
 80020de:	231c      	movs	r3, #28
 80020e0:	2200      	movs	r2, #0
 80020e2:	4914      	ldr	r1, [pc, #80]	@ (8002134 <ThreadX_Init+0x190>)
 80020e4:	4814      	ldr	r0, [pc, #80]	@ (8002138 <ThreadX_Init+0x194>)
 80020e6:	f009 fe63 	bl	800bdb0 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreFrequency, "semaphoreFrequency", 1);
 80020ea:	231c      	movs	r3, #28
 80020ec:	2201      	movs	r2, #1
 80020ee:	4913      	ldr	r1, [pc, #76]	@ (800213c <ThreadX_Init+0x198>)
 80020f0:	4813      	ldr	r0, [pc, #76]	@ (8002140 <ThreadX_Init+0x19c>)
 80020f2:	f009 fe5d 	bl	800bdb0 <_txe_semaphore_create>

	return ret;
 80020f6:	697b      	ldr	r3, [r7, #20]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	08002145 	.word	0x08002145
 8002104:	0800c440 	.word	0x0800c440
 8002108:	20000a98 	.word	0x20000a98
 800210c:	08002195 	.word	0x08002195
 8002110:	0800c450 	.word	0x0800c450
 8002114:	08002211 	.word	0x08002211
 8002118:	0800c460 	.word	0x0800c460
 800211c:	08002227 	.word	0x08002227
 8002120:	0800c470 	.word	0x0800c470
 8002124:	08002235 	.word	0x08002235
 8002128:	0800c47c 	.word	0x0800c47c
 800212c:	0800c488 	.word	0x0800c488
 8002130:	20000b48 	.word	0x20000b48
 8002134:	0800c498 	.word	0x0800c498
 8002138:	20000b64 	.word	0x20000b64
 800213c:	0800c4a8 	.word	0x0800c4a8
 8002140:	20000b80 	.word	0x20000b80

08002144 <txMainThreadEntry>:


void txMainThreadEntry(ULONG threadInput){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

    HAL_FDCAN_Start(&hfdcan1);
 800214c:	480e      	ldr	r0, [pc, #56]	@ (8002188 <txMainThreadEntry+0x44>)
 800214e:	f003 f991 	bl	8005474 <HAL_FDCAN_Start>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002152:	2100      	movs	r1, #0
 8002154:	480d      	ldr	r0, [pc, #52]	@ (800218c <txMainThreadEntry+0x48>)
 8002156:	f006 faab 	bl	80086b0 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800215a:	2104      	movs	r1, #4
 800215c:	480b      	ldr	r0, [pc, #44]	@ (800218c <txMainThreadEntry+0x48>)
 800215e:	f006 faa7 	bl	80086b0 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8002162:	2108      	movs	r1, #8
 8002164:	4809      	ldr	r0, [pc, #36]	@ (800218c <txMainThreadEntry+0x48>)
 8002166:	f006 faa3 	bl	80086b0 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800216a:	210c      	movs	r1, #12
 800216c:	4807      	ldr	r0, [pc, #28]	@ (800218c <txMainThreadEntry+0x48>)
 800216e:	f006 fa9f 	bl	80086b0 <HAL_TIM_IC_Start_IT>

	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002172:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002176:	4806      	ldr	r0, [pc, #24]	@ (8002190 <txMainThreadEntry+0x4c>)
 8002178:	f003 fe04 	bl	8005d84 <HAL_GPIO_TogglePin>
	    tx_thread_sleep(1000);
 800217c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002180:	f008 fe0c 	bl	800ad9c <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002184:	bf00      	nop
 8002186:	e7f4      	b.n	8002172 <txMainThreadEntry+0x2e>
 8002188:	2000073c 	.word	0x2000073c
 800218c:	200009b8 	.word	0x200009b8
 8002190:	48000800 	.word	0x48000800

08002194 <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 8002194:	b580      	push	{r7, lr}
 8002196:	b092      	sub	sp, #72	@ 0x48
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
    uint8_t analogRxData[16];
    uint32_t adcValues[8];
    setAnalogSwitches(analogSwitchStates);
 800219c:	4819      	ldr	r0, [pc, #100]	@ (8002204 <txAnalogThreadEntry+0x70>)
 800219e:	f7ff fe8b 	bl	8001eb8 <setAnalogSwitches>


//    struct
    while(1){
        HAL_ADC_Start_DMA(&hadc1, adcValues, NUM_ADC_CHANNELS);
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	2208      	movs	r2, #8
 80021a8:	4619      	mov	r1, r3
 80021aa:	4817      	ldr	r0, [pc, #92]	@ (8002208 <txAnalogThreadEntry+0x74>)
 80021ac:	f001 f932 	bl	8003414 <HAL_ADC_Start_DMA>
        tx_semaphore_get(&semaphoreAnalog, TX_WAIT_FOREVER);
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295
 80021b4:	4815      	ldr	r0, [pc, #84]	@ (800220c <txAnalogThreadEntry+0x78>)
 80021b6:	f009 fe91 	bl	800bedc <_txe_semaphore_get>
        struct ucr_01_front_analog_t analogStruct = {
                .analog1 = adcValues[0],
 80021ba:	69bb      	ldr	r3, [r7, #24]
        struct ucr_01_front_analog_t analogStruct = {
 80021bc:	b29b      	uxth	r3, r3
 80021be:	813b      	strh	r3, [r7, #8]
				.analog2 = adcValues[1],
 80021c0:	69fb      	ldr	r3, [r7, #28]
        struct ucr_01_front_analog_t analogStruct = {
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	817b      	strh	r3, [r7, #10]
				.analog3 = adcValues[2],
 80021c6:	6a3b      	ldr	r3, [r7, #32]
        struct ucr_01_front_analog_t analogStruct = {
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	81bb      	strh	r3, [r7, #12]
				.analog4 = adcValues[3],
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        struct ucr_01_front_analog_t analogStruct = {
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	81fb      	strh	r3, [r7, #14]
				.analog5 = adcValues[4],
 80021d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        struct ucr_01_front_analog_t analogStruct = {
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	823b      	strh	r3, [r7, #16]
				.analog6 = adcValues[5],
 80021d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        struct ucr_01_front_analog_t analogStruct = {
 80021da:	b29b      	uxth	r3, r3
 80021dc:	827b      	strh	r3, [r7, #18]
				.analog7 = adcValues[6],
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        struct ucr_01_front_analog_t analogStruct = {
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	82bb      	strh	r3, [r7, #20]
				.analog8 = adcValues[7]
 80021e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
        struct ucr_01_front_analog_t analogStruct = {
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	82fb      	strh	r3, [r7, #22]
        };
        ucr_01_front_analog_pack(analogRxData, &analogStruct, UCR_01_FRONT_ANALOG_LENGTH);
 80021ea:	f107 0108 	add.w	r1, r7, #8
 80021ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021f2:	2210      	movs	r2, #16
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fa61 	bl	80026bc <ucr_01_front_analog_pack>
        tx_thread_sleep(2);
 80021fa:	2002      	movs	r0, #2
 80021fc:	f008 fdce 	bl	800ad9c <_tx_thread_sleep>
    while(1){
 8002200:	bf00      	nop
 8002202:	e7ce      	b.n	80021a2 <txAnalogThreadEntry+0xe>
 8002204:	0800c53c 	.word	0x0800c53c
 8002208:	200005e0 	.word	0x200005e0
 800220c:	20000b48 	.word	0x20000b48

08002210 <txAeroThreadEntry>:
    }
}

void txAeroThreadEntry(ULONG threadInput){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

    while(1){
    	TransmitToAll();
 8002218:	f7ff feae 	bl	8001f78 <TransmitToAll>
//    	SetChannel(2);
//		ReadData();
//		SetChannel(3);
//		ReadData();

		tx_thread_sleep(10);
 800221c:	200a      	movs	r0, #10
 800221e:	f008 fdbd 	bl	800ad9c <_tx_thread_sleep>
    	TransmitToAll();
 8002222:	bf00      	nop
 8002224:	e7f8      	b.n	8002218 <txAeroThreadEntry+0x8>

08002226 <txCAN500HzThreadEntry>:
    }
}

void txCAN500HzThreadEntry(ULONG threadInput){
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

    while(1){
 800222e:	bf00      	nop
 8002230:	e7fd      	b.n	800222e <txCAN500HzThreadEntry+0x8>
	...

08002234 <txCAN100HzThreadEntry>:

    }
}

void txCAN100HzThreadEntry(ULONG threadInput){
 8002234:	b5b0      	push	{r4, r5, r7, lr}
 8002236:	b09c      	sub	sp, #112	@ 0x70
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    if(UCR_OK != FrequencyInit()){
 800223c:	f000 f874 	bl	8002328 <FrequencyInit>

    }
	uint8_t preScalar = htim2.Init.Prescaler + 1;
 8002240:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <txCAN100HzThreadEntry+0xdc>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3301      	adds	r3, #1
 8002248:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    float refClock = TIMCLOCK/(preScalar);
 800224c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002250:	4a30      	ldr	r2, [pc, #192]	@ (8002314 <txCAN100HzThreadEntry+0xe0>)
 8002252:	fb92 f3f3 	sdiv	r3, r2, r3
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	uint32_t frequency[4];
	uint8_t frequencyData[16];
	FDCAN_TxHeaderTypeDef frequencyHeader = {
 8002262:	4b2d      	ldr	r3, [pc, #180]	@ (8002318 <txCAN100HzThreadEntry+0xe4>)
 8002264:	f107 041c 	add.w	r4, r7, #28
 8002268:	461d      	mov	r5, r3
 800226a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002272:	682b      	ldr	r3, [r5, #0]
 8002274:	6023      	str	r3, [r4, #0]
	        .MessageMarker = 0
	};

    while(1){
        // Acquire the semaphore
    	tx_semaphore_get(&semaphoreFrequency, TX_WAIT_FOREVER);
 8002276:	f04f 31ff 	mov.w	r1, #4294967295
 800227a:	4828      	ldr	r0, [pc, #160]	@ (800231c <txCAN100HzThreadEntry+0xe8>)
 800227c:	f009 fe2e 	bl	800bedc <_txe_semaphore_get>
    	// Convert the data to frequency and encode it
    	for(int i = 0; i < 4; i ++){
 8002280:	2300      	movs	r3, #0
 8002282:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002284:	e022      	b.n	80022cc <txCAN100HzThreadEntry+0x98>
			float value = refClock / channelData[i].difference;
 8002286:	4a26      	ldr	r2, [pc, #152]	@ (8002320 <txCAN100HzThreadEntry+0xec>)
 8002288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800228a:	019b      	lsls	r3, r3, #6
 800228c:	4413      	add	r3, r2
 800228e:	333c      	adds	r3, #60	@ 0x3c
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800229a:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 800229e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			frequency[i] = ucr_01_front_frequency_frequency1_encode(value);
 80022a6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80022a8:	f7fe fa3a 	bl	8000720 <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	ec43 2b10 	vmov	d0, r2, r3
 80022b4:	f000 fc4a 	bl	8002b4c <ucr_01_front_frequency_frequency1_encode>
 80022b8:	4602      	mov	r2, r0
 80022ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	3370      	adds	r3, #112	@ 0x70
 80022c0:	443b      	add	r3, r7
 80022c2:	f843 2c20 	str.w	r2, [r3, #-32]
    	for(int i = 0; i < 4; i ++){
 80022c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c8:	3301      	adds	r3, #1
 80022ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	ddd9      	ble.n	8002286 <txCAN100HzThreadEntry+0x52>
    	}
    	struct ucr_01_front_frequency_t frequencyStruct = {
    	        .frequency1 = frequency[0],
 80022d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    	struct ucr_01_front_frequency_t frequencyStruct = {
 80022d4:	60fb      	str	r3, [r7, #12]
    	        .frequency2 = frequency[1],
 80022d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    	struct ucr_01_front_frequency_t frequencyStruct = {
 80022d8:	613b      	str	r3, [r7, #16]
    	        .frequency3 = frequency[2],
 80022da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
    	struct ucr_01_front_frequency_t frequencyStruct = {
 80022dc:	617b      	str	r3, [r7, #20]
    	        .frequency4 = frequency[3]
 80022de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    	struct ucr_01_front_frequency_t frequencyStruct = {
 80022e0:	61bb      	str	r3, [r7, #24]
    	};
    	ucr_01_front_frequency_pack(frequencyData, &frequencyStruct, UCR_01_FRONT_FREQUENCY_LENGTH);
 80022e2:	f107 010c 	add.w	r1, r7, #12
 80022e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022ea:	2210      	movs	r2, #16
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fb09 	bl	8002904 <ucr_01_front_frequency_pack>
    	tx_semaphore_put(&semaphoreFrequency);
 80022f2:	480a      	ldr	r0, [pc, #40]	@ (800231c <txCAN100HzThreadEntry+0xe8>)
 80022f4:	f009 fe34 	bl	800bf60 <_txe_semaphore_put>
    	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frequencyHeader, frequencyData);
 80022f8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	4619      	mov	r1, r3
 8002302:	4808      	ldr	r0, [pc, #32]	@ (8002324 <txCAN100HzThreadEntry+0xf0>)
 8002304:	f003 f8de 	bl	80054c4 <HAL_FDCAN_AddMessageToTxFifoQ>
    	tx_thread_sleep(10);
 8002308:	200a      	movs	r0, #10
 800230a:	f008 fd47 	bl	800ad9c <_tx_thread_sleep>
    while(1){
 800230e:	e7b2      	b.n	8002276 <txCAN100HzThreadEntry+0x42>
 8002310:	200009b8 	.word	0x200009b8
 8002314:	0a21fe80 	.word	0x0a21fe80
 8002318:	0800c4bc 	.word	0x0800c4bc
 800231c:	20000b80 	.word	0x20000b80
 8002320:	20000b9c 	.word	0x20000b9c
 8002324:	2000073c 	.word	0x2000073c

08002328 <FrequencyInit>:
static uint8_t CalculateFrequency(
        frequency_t* channel,
        TIM_HandleTypeDef* htim
);

uint8_t FrequencyInit(void){
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af04      	add	r7, sp, #16
    uint8_t retVal = UCR_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	70fb      	strb	r3, [r7, #3]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	e016      	b.n	8002366 <FrequencyInit+0x3e>
        channelData[i].firstValue = 0;
 8002338:	4a35      	ldr	r2, [pc, #212]	@ (8002410 <FrequencyInit+0xe8>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	019b      	lsls	r3, r3, #6
 800233e:	4413      	add	r3, r2
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
        channelData[i].secondValue = 0;
 8002344:	4a32      	ldr	r2, [pc, #200]	@ (8002410 <FrequencyInit+0xe8>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
        channelData[i].isFirstCapture = false;
 8002352:	4a2f      	ldr	r2, [pc, #188]	@ (8002410 <FrequencyInit+0xe8>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	019b      	lsls	r3, r3, #6
 8002358:	4413      	add	r3, r2
 800235a:	3308      	adds	r3, #8
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3301      	adds	r3, #1
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d9e5      	bls.n	8002338 <FrequencyInit+0x10>
    }
    channelData[0].halChannel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236c:	4b28      	ldr	r3, [pc, #160]	@ (8002410 <FrequencyInit+0xe8>)
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    channelData[1].halChannel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002374:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <FrequencyInit+0xe8>)
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    channelData[2].halChannel = HAL_TIM_ACTIVE_CHANNEL_3;
 800237c:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <FrequencyInit+0xe8>)
 800237e:	2204      	movs	r2, #4
 8002380:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    channelData[3].halChannel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002384:	4b22      	ldr	r3, [pc, #136]	@ (8002410 <FrequencyInit+0xe8>)
 8002386:	2208      	movs	r2, #8
 8002388:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8


    tx_timer_create(&channelData[0].resetTimer, "resetTimer1", timerExpirationFrequency, 0,
 800238c:	232c      	movs	r3, #44	@ 0x2c
 800238e:	9303      	str	r3, [sp, #12]
 8002390:	2300      	movs	r3, #0
 8002392:	9302      	str	r3, [sp, #8]
 8002394:	2300      	movs	r3, #0
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2300      	movs	r3, #0
 80023a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002414 <FrequencyInit+0xec>)
 80023a2:	491d      	ldr	r1, [pc, #116]	@ (8002418 <FrequencyInit+0xf0>)
 80023a4:	481d      	ldr	r0, [pc, #116]	@ (800241c <FrequencyInit+0xf4>)
 80023a6:	f009 ff3f 	bl	800c228 <_txe_timer_create>
                    FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&channelData[1].resetTimer, "resetTimer2", timerExpirationFrequency, 1,
 80023aa:	232c      	movs	r3, #44	@ 0x2c
 80023ac:	9303      	str	r3, [sp, #12]
 80023ae:	2300      	movs	r3, #0
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	2300      	movs	r3, #0
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2301      	movs	r3, #1
 80023be:	4a15      	ldr	r2, [pc, #84]	@ (8002414 <FrequencyInit+0xec>)
 80023c0:	4917      	ldr	r1, [pc, #92]	@ (8002420 <FrequencyInit+0xf8>)
 80023c2:	4818      	ldr	r0, [pc, #96]	@ (8002424 <FrequencyInit+0xfc>)
 80023c4:	f009 ff30 	bl	800c228 <_txe_timer_create>
                        FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&channelData[2].resetTimer, "resetTimer3", timerExpirationFrequency, 2,
 80023c8:	232c      	movs	r3, #44	@ 0x2c
 80023ca:	9303      	str	r3, [sp, #12]
 80023cc:	2300      	movs	r3, #0
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	2300      	movs	r3, #0
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2302      	movs	r3, #2
 80023dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <FrequencyInit+0xec>)
 80023de:	4912      	ldr	r1, [pc, #72]	@ (8002428 <FrequencyInit+0x100>)
 80023e0:	4812      	ldr	r0, [pc, #72]	@ (800242c <FrequencyInit+0x104>)
 80023e2:	f009 ff21 	bl	800c228 <_txe_timer_create>
                        FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&channelData[3].resetTimer, "resetTimer4", timerExpirationFrequency, 3,
 80023e6:	232c      	movs	r3, #44	@ 0x2c
 80023e8:	9303      	str	r3, [sp, #12]
 80023ea:	2300      	movs	r3, #0
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	2300      	movs	r3, #0
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2303      	movs	r3, #3
 80023fa:	4a06      	ldr	r2, [pc, #24]	@ (8002414 <FrequencyInit+0xec>)
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <FrequencyInit+0x108>)
 80023fe:	480d      	ldr	r0, [pc, #52]	@ (8002434 <FrequencyInit+0x10c>)
 8002400:	f009 ff12 	bl	800c228 <_txe_timer_create>
                        FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    return retVal;
 8002404:	78fb      	ldrb	r3, [r7, #3]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000b9c 	.word	0x20000b9c
 8002414:	08002595 	.word	0x08002595
 8002418:	0800c4e0 	.word	0x0800c4e0
 800241c:	20000ba8 	.word	0x20000ba8
 8002420:	0800c4ec 	.word	0x0800c4ec
 8002424:	20000be8 	.word	0x20000be8
 8002428:	0800c4f8 	.word	0x0800c4f8
 800242c:	20000c28 	.word	0x20000c28
 8002430:	0800c504 	.word	0x0800c504
 8002434:	20000c68 	.word	0x20000c68

08002438 <HAL_TIM_IC_CaptureCallback>:
  * @param htim: Timer handle
  * @retval void
  */
void HAL_TIM_IC_CaptureCallback(
    TIM_HandleTypeDef* htim
){
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
    switch (htim->Channel){
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7f1b      	ldrb	r3, [r3, #28]
 8002448:	3b01      	subs	r3, #1
 800244a:	2b07      	cmp	r3, #7
 800244c:	d827      	bhi.n	800249e <HAL_TIM_IC_CaptureCallback+0x66>
 800244e:	a201      	add	r2, pc, #4	@ (adr r2, 8002454 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	08002475 	.word	0x08002475
 8002458:	0800247b 	.word	0x0800247b
 800245c:	0800249f 	.word	0x0800249f
 8002460:	08002481 	.word	0x08002481
 8002464:	0800249f 	.word	0x0800249f
 8002468:	0800249f 	.word	0x0800249f
 800246c:	0800249f 	.word	0x0800249f
 8002470:	08002487 	.word	0x08002487
        case HAL_TIM_ACTIVE_CHANNEL_1:
            channel = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
            break;
 8002478:	e008      	b.n	800248c <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_2:
            channel = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
            break;
 800247e:	e005      	b.n	800248c <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            channel = 2;
 8002480:	2302      	movs	r3, #2
 8002482:	73fb      	strb	r3, [r7, #15]
            break;
 8002484:	e002      	b.n	800248c <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_4:
            channel = 3;
 8002486:	2303      	movs	r3, #3
 8002488:	73fb      	strb	r3, [r7, #15]
            break;
 800248a:	bf00      	nop
        default:
            return;
    }
    CalculateFrequency(&channelData[channel], htim);
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	019b      	lsls	r3, r3, #6
 8002490:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002492:	4413      	add	r3, r2
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f808 	bl	80024ac <CalculateFrequency>
 800249c:	e000      	b.n	80024a0 <HAL_TIM_IC_CaptureCallback+0x68>
            return;
 800249e:	bf00      	nop
}
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000b9c 	.word	0x20000b9c

080024ac <CalculateFrequency>:

static uint8_t CalculateFrequency(
    frequency_t* channel,
    TIM_HandleTypeDef* htim
){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    uint8_t retVal = UCR_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
    // Check if first rising edge to begin capture
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 80024ba:	2100      	movs	r1, #0
 80024bc:	4834      	ldr	r0, [pc, #208]	@ (8002590 <CalculateFrequency+0xe4>)
 80024be:	f009 fd0d 	bl	800bedc <_txe_semaphore_get>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <CalculateFrequency+0x24>
        retVal = UCR_NOT_OK;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
        return retVal;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	e05a      	b.n	8002586 <CalculateFrequency+0xda>
    }
    if (channel->isFirstCapture == false){
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7a1b      	ldrb	r3, [r3, #8]
 80024d4:	f083 0301 	eor.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d012      	beq.n	8002504 <CalculateFrequency+0x58>
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	330c      	adds	r3, #12
 80024e2:	4618      	mov	r0, r3
 80024e4:	f009 fe4c 	bl	800c180 <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
        channel->firstValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024ee:	4619      	mov	r1, r3
 80024f0:	6838      	ldr	r0, [r7, #0]
 80024f2:	f006 fc19 	bl	8008d28 <HAL_TIM_ReadCapturedValue>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	601a      	str	r2, [r3, #0]
        // Set flag to indicate next value will be second rising edge
        channel->isFirstCapture = true;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	721a      	strb	r2, [r3, #8]
 8002502:	e034      	b.n	800256e <CalculateFrequency+0xc2>
    } else if (true == channel->isFirstCapture){
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7a1b      	ldrb	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d030      	beq.n	800256e <CalculateFrequency+0xc2>
        // Stop the reset timer
        if(TX_SUCCESS != tx_timer_deactivate(&channel->resetTimer)){
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	330c      	adds	r3, #12
 8002510:	4618      	mov	r0, r3
 8002512:	f009 ff35 	bl	800c380 <_txe_timer_deactivate>
            // ADD error handler stuff here;
        }
        channel->secondValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800251c:	4619      	mov	r1, r3
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f006 fc02 	bl	8008d28 <HAL_TIM_ReadCapturedValue>
 8002524:	4602      	mov	r2, r0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	605a      	str	r2, [r3, #4]
        // Check if the first capture was before the second
        if (channel->secondValue > channel->firstValue){
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d907      	bls.n	8002546 <CalculateFrequency+0x9a>
            // Calculate the difference
            channel->difference = channel->secondValue - channel->firstValue;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002544:	e010      	b.n	8002568 <CalculateFrequency+0xbc>
        } else if (channel->secondValue < channel->firstValue){
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d20a      	bcs.n	8002568 <CalculateFrequency+0xbc>
            channel->difference = ((htim->Init.Period - channel->firstValue) + channel->secondValue) + 1;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	1ad2      	subs	r2, r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4413      	add	r3, r2
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        // Reset the first capture state
        channel->isFirstCapture = false;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	721a      	strb	r2, [r3, #8]
    }
    // Release the semaphore
    if(TX_SUCCESS != tx_semaphore_put(&semaphoreFrequency)){
 800256e:	4808      	ldr	r0, [pc, #32]	@ (8002590 <CalculateFrequency+0xe4>)
 8002570:	f009 fcf6 	bl	800bf60 <_txe_semaphore_put>
        // ADD error handler stuff here;
    }
    // Reset the timer;
    if(TX_SUCCESS != tx_timer_change(&channel->resetTimer, FREQUENCY_RESET_TIME, 0)){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	330c      	adds	r3, #12
 8002578:	2200      	movs	r2, #0
 800257a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800257e:	4618      	mov	r0, r3
 8002580:	f009 fe1c 	bl	800c1bc <_txe_timer_change>
        // ADD error handler stuff here;
    }
    return retVal;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000b80 	.word	0x20000b80

08002594 <timerExpirationFrequency>:
  * @param channel: the number of the timer
  * @retval void
  */
void timerExpirationFrequency(
    ULONG channel
){
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    // Attempt to acquire the semaphore
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 800259c:	2100      	movs	r1, #0
 800259e:	4818      	ldr	r0, [pc, #96]	@ (8002600 <timerExpirationFrequency+0x6c>)
 80025a0:	f009 fc9c 	bl	800bedc <_txe_semaphore_get>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d126      	bne.n	80025f8 <timerExpirationFrequency+0x64>
        return;
    }
    // Set the first capture and difference to zero
    channelData[channel].isFirstCapture = false;
 80025aa:	4a16      	ldr	r2, [pc, #88]	@ (8002604 <timerExpirationFrequency+0x70>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	019b      	lsls	r3, r3, #6
 80025b0:	4413      	add	r3, r2
 80025b2:	3308      	adds	r3, #8
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
    channelData[channel].difference = 0;
 80025b8:	4a12      	ldr	r2, [pc, #72]	@ (8002604 <timerExpirationFrequency+0x70>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	019b      	lsls	r3, r3, #6
 80025be:	4413      	add	r3, r2
 80025c0:	333c      	adds	r3, #60	@ 0x3c
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    // Reset the timer
    tx_timer_deactivate(&channelData[channel].resetTimer);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	019b      	lsls	r3, r3, #6
 80025ca:	3308      	adds	r3, #8
 80025cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002604 <timerExpirationFrequency+0x70>)
 80025ce:	4413      	add	r3, r2
 80025d0:	3304      	adds	r3, #4
 80025d2:	4618      	mov	r0, r3
 80025d4:	f009 fed4 	bl	800c380 <_txe_timer_deactivate>
    tx_timer_change(&channelData[channel].resetTimer, FREQUENCY_RESET_TIME, 0);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	019b      	lsls	r3, r3, #6
 80025dc:	3308      	adds	r3, #8
 80025de:	4a09      	ldr	r2, [pc, #36]	@ (8002604 <timerExpirationFrequency+0x70>)
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80025ea:	4618      	mov	r0, r3
 80025ec:	f009 fde6 	bl	800c1bc <_txe_timer_change>
    // Release the semaphore
    tx_semaphore_put(&semaphoreFrequency);
 80025f0:	4803      	ldr	r0, [pc, #12]	@ (8002600 <timerExpirationFrequency+0x6c>)
 80025f2:	f009 fcb5 	bl	800bf60 <_txe_semaphore_put>
    return;
 80025f6:	e000      	b.n	80025fa <timerExpirationFrequency+0x66>
        return;
 80025f8:	bf00      	nop
}
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000b80 	.word	0x20000b80
 8002604:	20000b9c 	.word	0x20000b9c

08002608 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
 8002612:	460b      	mov	r3, r1
 8002614:	717b      	strb	r3, [r7, #5]
 8002616:	4613      	mov	r3, r2
 8002618:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	797b      	ldrb	r3, [r7, #5]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	b2da      	uxtb	r2, r3
 8002624:	793b      	ldrb	r3, [r7, #4]
 8002626:	4013      	ands	r3, r2
 8002628:	b2db      	uxtb	r3, r3
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <pack_left_shift_u32>:

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	70fb      	strb	r3, [r7, #3]
 8002642:	4613      	mov	r3, r2
 8002644:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	b2da      	uxtb	r2, r3
 8002650:	78bb      	ldrb	r3, [r7, #2]
 8002652:	4013      	ands	r3, r2
 8002654:	b2db      	uxtb	r3, r3
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	80fb      	strh	r3, [r7, #6]
 800266c:	460b      	mov	r3, r1
 800266e:	717b      	strb	r3, [r7, #5]
 8002670:	4613      	mov	r3, r2
 8002672:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	797b      	ldrb	r3, [r7, #5]
 8002678:	fa42 f303 	asr.w	r3, r2, r3
 800267c:	b2da      	uxtb	r2, r3
 800267e:	793b      	ldrb	r3, [r7, #4]
 8002680:	4013      	ands	r3, r2
 8002682:	b2db      	uxtb	r3, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <pack_right_shift_u32>:

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
 800269c:	4613      	mov	r3, r2
 800269e:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	78bb      	ldrb	r3, [r7, #2]
 80026ac:	4013      	ands	r3, r2
 80026ae:	b2db      	uxtb	r3, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <ucr_01_front_analog_pack>:

int ucr_01_front_analog_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_analog_t *src_p,
    size_t size)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
    if (size < 16u) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	d802      	bhi.n	80026d4 <ucr_01_front_analog_pack+0x18>
        return (-EINVAL);
 80026ce:	f06f 0315 	mvn.w	r3, #21
 80026d2:	e113      	b.n	80028fc <ucr_01_front_analog_pack+0x240>
    }

    memset(&dst_p[0], 0, 16);
 80026d4:	2210      	movs	r2, #16
 80026d6:	2100      	movs	r1, #0
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f009 fe6f 	bl	800c3bc <memset>

    dst_p[0] |= pack_left_shift_u16(src_p->analog1, 0u, 0xffu);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	22ff      	movs	r2, #255	@ 0xff
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff8e 	bl	8002608 <pack_left_shift_u16>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(src_p->analog1, 8u, 0xffu);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	22ff      	movs	r2, #255	@ 0xff
 8002702:	2108      	movs	r1, #8
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ffac 	bl	8002662 <pack_right_shift_u16>
 800270a:	4603      	mov	r3, r0
 800270c:	4619      	mov	r1, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3301      	adds	r3, #1
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3301      	adds	r3, #1
 8002718:	430a      	orrs	r2, r1
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u16(src_p->analog2, 0u, 0xffu);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	885b      	ldrh	r3, [r3, #2]
 8002722:	22ff      	movs	r2, #255	@ 0xff
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff6e 	bl	8002608 <pack_left_shift_u16>
 800272c:	4603      	mov	r3, r0
 800272e:	4619      	mov	r1, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3302      	adds	r3, #2
 8002734:	781a      	ldrb	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3302      	adds	r3, #2
 800273a:	430a      	orrs	r2, r1
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->analog2, 8u, 0xffu);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	885b      	ldrh	r3, [r3, #2]
 8002744:	22ff      	movs	r2, #255	@ 0xff
 8002746:	2108      	movs	r1, #8
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff8a 	bl	8002662 <pack_right_shift_u16>
 800274e:	4603      	mov	r3, r0
 8002750:	4619      	mov	r1, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3303      	adds	r3, #3
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3303      	adds	r3, #3
 800275c:	430a      	orrs	r2, r1
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u16(src_p->analog3, 0u, 0xffu);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	889b      	ldrh	r3, [r3, #4]
 8002766:	22ff      	movs	r2, #255	@ 0xff
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff4c 	bl	8002608 <pack_left_shift_u16>
 8002770:	4603      	mov	r3, r0
 8002772:	4619      	mov	r1, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3304      	adds	r3, #4
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	430a      	orrs	r2, r1
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(src_p->analog3, 8u, 0xffu);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	889b      	ldrh	r3, [r3, #4]
 8002788:	22ff      	movs	r2, #255	@ 0xff
 800278a:	2108      	movs	r1, #8
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff68 	bl	8002662 <pack_right_shift_u16>
 8002792:	4603      	mov	r3, r0
 8002794:	4619      	mov	r1, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3305      	adds	r3, #5
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3305      	adds	r3, #5
 80027a0:	430a      	orrs	r2, r1
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u16(src_p->analog4, 0u, 0xffu);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	88db      	ldrh	r3, [r3, #6]
 80027aa:	22ff      	movs	r2, #255	@ 0xff
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff2a 	bl	8002608 <pack_left_shift_u16>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4619      	mov	r1, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3306      	adds	r3, #6
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3306      	adds	r3, #6
 80027c2:	430a      	orrs	r2, r1
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(src_p->analog4, 8u, 0xffu);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	88db      	ldrh	r3, [r3, #6]
 80027cc:	22ff      	movs	r2, #255	@ 0xff
 80027ce:	2108      	movs	r1, #8
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff46 	bl	8002662 <pack_right_shift_u16>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4619      	mov	r1, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3307      	adds	r3, #7
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3307      	adds	r3, #7
 80027e4:	430a      	orrs	r2, r1
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_left_shift_u16(src_p->analog5, 0u, 0xffu);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	891b      	ldrh	r3, [r3, #8]
 80027ee:	22ff      	movs	r2, #255	@ 0xff
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff08 	bl	8002608 <pack_left_shift_u16>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4619      	mov	r1, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3308      	adds	r3, #8
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3308      	adds	r3, #8
 8002806:	430a      	orrs	r2, r1
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u16(src_p->analog5, 8u, 0xffu);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	891b      	ldrh	r3, [r3, #8]
 8002810:	22ff      	movs	r2, #255	@ 0xff
 8002812:	2108      	movs	r1, #8
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff24 	bl	8002662 <pack_right_shift_u16>
 800281a:	4603      	mov	r3, r0
 800281c:	4619      	mov	r1, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3309      	adds	r3, #9
 8002822:	781a      	ldrb	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3309      	adds	r3, #9
 8002828:	430a      	orrs	r2, r1
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_left_shift_u16(src_p->analog6, 0u, 0xffu);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	895b      	ldrh	r3, [r3, #10]
 8002832:	22ff      	movs	r2, #255	@ 0xff
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fee6 	bl	8002608 <pack_left_shift_u16>
 800283c:	4603      	mov	r3, r0
 800283e:	4619      	mov	r1, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	330a      	adds	r3, #10
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	330a      	adds	r3, #10
 800284a:	430a      	orrs	r2, r1
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u16(src_p->analog6, 8u, 0xffu);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	895b      	ldrh	r3, [r3, #10]
 8002854:	22ff      	movs	r2, #255	@ 0xff
 8002856:	2108      	movs	r1, #8
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff02 	bl	8002662 <pack_right_shift_u16>
 800285e:	4603      	mov	r3, r0
 8002860:	4619      	mov	r1, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	330b      	adds	r3, #11
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	330b      	adds	r3, #11
 800286c:	430a      	orrs	r2, r1
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u16(src_p->analog7, 0u, 0xffu);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	899b      	ldrh	r3, [r3, #12]
 8002876:	22ff      	movs	r2, #255	@ 0xff
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fec4 	bl	8002608 <pack_left_shift_u16>
 8002880:	4603      	mov	r3, r0
 8002882:	4619      	mov	r1, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	330c      	adds	r3, #12
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	330c      	adds	r3, #12
 800288e:	430a      	orrs	r2, r1
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u16(src_p->analog7, 8u, 0xffu);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	899b      	ldrh	r3, [r3, #12]
 8002898:	22ff      	movs	r2, #255	@ 0xff
 800289a:	2108      	movs	r1, #8
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fee0 	bl	8002662 <pack_right_shift_u16>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4619      	mov	r1, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	330d      	adds	r3, #13
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	330d      	adds	r3, #13
 80028b0:	430a      	orrs	r2, r1
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_left_shift_u16(src_p->analog8, 0u, 0xffu);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	89db      	ldrh	r3, [r3, #14]
 80028ba:	22ff      	movs	r2, #255	@ 0xff
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fea2 	bl	8002608 <pack_left_shift_u16>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4619      	mov	r1, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	330e      	adds	r3, #14
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	330e      	adds	r3, #14
 80028d2:	430a      	orrs	r2, r1
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u16(src_p->analog8, 8u, 0xffu);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	89db      	ldrh	r3, [r3, #14]
 80028dc:	22ff      	movs	r2, #255	@ 0xff
 80028de:	2108      	movs	r1, #8
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff febe 	bl	8002662 <pack_right_shift_u16>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4619      	mov	r1, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	330f      	adds	r3, #15
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	330f      	adds	r3, #15
 80028f4:	430a      	orrs	r2, r1
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    return (16);
 80028fa:	2310      	movs	r3, #16
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <ucr_01_front_frequency_pack>:

int ucr_01_front_frequency_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_frequency_t *src_p,
    size_t size)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
    if (size < 16u) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	d802      	bhi.n	800291c <ucr_01_front_frequency_pack+0x18>
        return (-EINVAL);
 8002916:	f06f 0315 	mvn.w	r3, #21
 800291a:	e113      	b.n	8002b44 <ucr_01_front_frequency_pack+0x240>
    }

    memset(&dst_p[0], 0, 16);
 800291c:	2210      	movs	r2, #16
 800291e:	2100      	movs	r1, #0
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f009 fd4b 	bl	800c3bc <memset>

    dst_p[0] |= pack_left_shift_u32(src_p->frequency1, 0u, 0xffu);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	22ff      	movs	r2, #255	@ 0xff
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fe81 	bl	8002636 <pack_left_shift_u32>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(src_p->frequency1, 8u, 0xffu);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	22ff      	movs	r2, #255	@ 0xff
 800294a:	2108      	movs	r1, #8
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fe9f 	bl	8002690 <pack_right_shift_u32>
 8002952:	4603      	mov	r3, r0
 8002954:	4619      	mov	r1, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3301      	adds	r3, #1
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3301      	adds	r3, #1
 8002960:	430a      	orrs	r2, r1
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(src_p->frequency1, 16u, 0xffu);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	22ff      	movs	r2, #255	@ 0xff
 800296c:	2110      	movs	r1, #16
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fe8e 	bl	8002690 <pack_right_shift_u32>
 8002974:	4603      	mov	r3, r0
 8002976:	4619      	mov	r1, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3302      	adds	r3, #2
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3302      	adds	r3, #2
 8002982:	430a      	orrs	r2, r1
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u32(src_p->frequency1, 24u, 0xffu);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	22ff      	movs	r2, #255	@ 0xff
 800298e:	2118      	movs	r1, #24
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fe7d 	bl	8002690 <pack_right_shift_u32>
 8002996:	4603      	mov	r3, r0
 8002998:	4619      	mov	r1, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3303      	adds	r3, #3
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3303      	adds	r3, #3
 80029a4:	430a      	orrs	r2, r1
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u32(src_p->frequency2, 0u, 0xffu);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	22ff      	movs	r2, #255	@ 0xff
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fe3f 	bl	8002636 <pack_left_shift_u32>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4619      	mov	r1, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3304      	adds	r3, #4
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3304      	adds	r3, #4
 80029c6:	430a      	orrs	r2, r1
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(src_p->frequency2, 8u, 0xffu);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	22ff      	movs	r2, #255	@ 0xff
 80029d2:	2108      	movs	r1, #8
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fe5b 	bl	8002690 <pack_right_shift_u32>
 80029da:	4603      	mov	r3, r0
 80029dc:	4619      	mov	r1, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3305      	adds	r3, #5
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3305      	adds	r3, #5
 80029e8:	430a      	orrs	r2, r1
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u32(src_p->frequency2, 16u, 0xffu);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	22ff      	movs	r2, #255	@ 0xff
 80029f4:	2110      	movs	r1, #16
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fe4a 	bl	8002690 <pack_right_shift_u32>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4619      	mov	r1, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3306      	adds	r3, #6
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3306      	adds	r3, #6
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(src_p->frequency2, 24u, 0xffu);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	22ff      	movs	r2, #255	@ 0xff
 8002a16:	2118      	movs	r1, #24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fe39 	bl	8002690 <pack_right_shift_u32>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4619      	mov	r1, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3307      	adds	r3, #7
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3307      	adds	r3, #7
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_left_shift_u32(src_p->frequency3, 0u, 0xffu);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	22ff      	movs	r2, #255	@ 0xff
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fdfb 	bl	8002636 <pack_left_shift_u32>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4619      	mov	r1, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3308      	adds	r3, #8
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u32(src_p->frequency3, 8u, 0xffu);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	22ff      	movs	r2, #255	@ 0xff
 8002a5a:	2108      	movs	r1, #8
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fe17 	bl	8002690 <pack_right_shift_u32>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4619      	mov	r1, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3309      	adds	r3, #9
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3309      	adds	r3, #9
 8002a70:	430a      	orrs	r2, r1
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(src_p->frequency3, 16u, 0xffu);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	22ff      	movs	r2, #255	@ 0xff
 8002a7c:	2110      	movs	r1, #16
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fe06 	bl	8002690 <pack_right_shift_u32>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4619      	mov	r1, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	330a      	adds	r3, #10
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	330a      	adds	r3, #10
 8002a92:	430a      	orrs	r2, r1
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(src_p->frequency3, 24u, 0xffu);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	22ff      	movs	r2, #255	@ 0xff
 8002a9e:	2118      	movs	r1, #24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fdf5 	bl	8002690 <pack_right_shift_u32>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	330b      	adds	r3, #11
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	330b      	adds	r3, #11
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u32(src_p->frequency4, 0u, 0xffu);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	22ff      	movs	r2, #255	@ 0xff
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fdb7 	bl	8002636 <pack_left_shift_u32>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4619      	mov	r1, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(src_p->frequency4, 8u, 0xffu);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	22ff      	movs	r2, #255	@ 0xff
 8002ae2:	2108      	movs	r1, #8
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fdd3 	bl	8002690 <pack_right_shift_u32>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4619      	mov	r1, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	330d      	adds	r3, #13
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	330d      	adds	r3, #13
 8002af8:	430a      	orrs	r2, r1
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(src_p->frequency4, 16u, 0xffu);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	22ff      	movs	r2, #255	@ 0xff
 8002b04:	2110      	movs	r1, #16
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fdc2 	bl	8002690 <pack_right_shift_u32>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	330e      	adds	r3, #14
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	330e      	adds	r3, #14
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u32(src_p->frequency4, 24u, 0xffu);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	22ff      	movs	r2, #255	@ 0xff
 8002b26:	2118      	movs	r1, #24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fdb1 	bl	8002690 <pack_right_shift_u32>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4619      	mov	r1, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	330f      	adds	r3, #15
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	330e      	adds	r3, #14
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	330e      	adds	r3, #14
 8002b42:	430a      	orrs	r2, r1
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u32(src_p->frequency4, 24u, 0xffu);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	22ff      	movs	r2, #255	@ 0xff
 8002b4e:	2118      	movs	r1, #24
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fdb1 	bl	80026b8 <pack_right_shift_u32>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	330f      	adds	r3, #15
 8002b5e:	781a      	ldrb	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	330f      	adds	r3, #15
 8002b64:	430a      	orrs	r2, r1
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

    return (16);
 8002b6a:	2310      	movs	r3, #16
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b4c <ucr_01_front_frequency_frequency1_encode>:

    return 0;
}

uint32_t ucr_01_front_frequency_frequency1_encode(double value)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	ed87 0b00 	vstr	d0, [r7]
    return (uint32_t)(value);
 8002b56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b5a:	f7fd fe39 	bl	80007d0 <__aeabi_d2uiz>
 8002b5e:	4603      	mov	r3, r0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b72:	2003      	movs	r0, #3
 8002b74:	f001 ff17 	bl	80049a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b78:	200f      	movs	r0, #15
 8002b7a:	f7fe ff05 	bl	8001988 <HAL_InitTick>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	e001      	b.n	8002b8e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b8a:	f7fe fed5 	bl	8001938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b8e:	79fb      	ldrb	r3, [r7, #7]

}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_IncTick+0x1c>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_IncTick+0x20>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a03      	ldr	r2, [pc, #12]	@ (8002bb4 <HAL_IncTick+0x1c>)
 8002ba8:	6013      	str	r3, [r2, #0]
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	20000c9c 	.word	0x20000c9c
 8002bb8:	20000188 	.word	0x20000188

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000c9c 	.word	0x20000c9c

08002bd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 0202 	bic.w	r2, r3, #2
 8002be4:	4904      	ldr	r1, [pc, #16]	@ (8002bf8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40010030 	.word	0x40010030

08002bfc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40010030 	.word	0x40010030

08002c1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3360      	adds	r3, #96	@ 0x60
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <LL_ADC_SetOffset+0x44>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	03fff000 	.word	0x03fff000

08002ccc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3360      	adds	r3, #96	@ 0x60
 8002cda:	461a      	mov	r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3360      	adds	r3, #96	@ 0x60
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b087      	sub	sp, #28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3360      	adds	r3, #96	@ 0x60
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3360      	adds	r3, #96	@ 0x60
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	615a      	str	r2, [r3, #20]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b087      	sub	sp, #28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3330      	adds	r3, #48	@ 0x30
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	4413      	add	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	211f      	movs	r1, #31
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	401a      	ands	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	f003 011f 	and.w	r1, r3, #31
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3314      	adds	r3, #20
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	0e5b      	lsrs	r3, r3, #25
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	0d1b      	lsrs	r3, r3, #20
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2107      	movs	r1, #7
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	401a      	ands	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	0d1b      	lsrs	r3, r3, #20
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002eae:	bf00      	nop
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0318 	and.w	r3, r3, #24
 8002ede:	4908      	ldr	r1, [pc, #32]	@ (8002f00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ee0:	40d9      	lsrs	r1, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	0007ffff 	.word	0x0007ffff

08002f04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 031f 	and.w	r3, r3, #31
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6093      	str	r3, [r2, #8]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f74:	d101      	bne.n	8002f7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fc4:	d101      	bne.n	8002fca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fe8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <LL_ADC_IsEnabled+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_IsEnabled+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003036:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d101      	bne.n	8003066 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b08      	cmp	r3, #8
 8003086:	d101      	bne.n	800308c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b089      	sub	sp, #36	@ 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e1a9      	b.n	800340a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7fd fe99 	bl	8000dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff3f 	bl	8002f60 <LL_ADC_IsDeepPowerDownEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff25 	bl	8002f3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff ff5a 	bl	8002fb0 <LL_ADC_IsInternalRegulatorEnabled>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d115      	bne.n	800312e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff3e 	bl	8002f88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800310c:	4b9c      	ldr	r3, [pc, #624]	@ (8003380 <HAL_ADC_Init+0x2e4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	4a9c      	ldr	r2, [pc, #624]	@ (8003384 <HAL_ADC_Init+0x2e8>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	3301      	adds	r3, #1
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003120:	e002      	b.n	8003128 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3b01      	subs	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f9      	bne.n	8003122 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff3c 	bl	8002fb0 <LL_ADC_IsInternalRegulatorEnabled>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	f043 0210 	orr.w	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff75 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 8003164:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 8142 	bne.w	80033f8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 813e 	bne.w	80033f8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003184:	f043 0202 	orr.w	r2, r3, #2
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff35 	bl	8003000 <LL_ADC_IsEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d141      	bne.n	8003220 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031a4:	d004      	beq.n	80031b0 <HAL_ADC_Init+0x114>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a77      	ldr	r2, [pc, #476]	@ (8003388 <HAL_ADC_Init+0x2ec>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10f      	bne.n	80031d0 <HAL_ADC_Init+0x134>
 80031b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80031b4:	f7ff ff24 	bl	8003000 <LL_ADC_IsEnabled>
 80031b8:	4604      	mov	r4, r0
 80031ba:	4873      	ldr	r0, [pc, #460]	@ (8003388 <HAL_ADC_Init+0x2ec>)
 80031bc:	f7ff ff20 	bl	8003000 <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4323      	orrs	r3, r4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e012      	b.n	80031f6 <HAL_ADC_Init+0x15a>
 80031d0:	486e      	ldr	r0, [pc, #440]	@ (800338c <HAL_ADC_Init+0x2f0>)
 80031d2:	f7ff ff15 	bl	8003000 <LL_ADC_IsEnabled>
 80031d6:	4604      	mov	r4, r0
 80031d8:	486d      	ldr	r0, [pc, #436]	@ (8003390 <HAL_ADC_Init+0x2f4>)
 80031da:	f7ff ff11 	bl	8003000 <LL_ADC_IsEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	431c      	orrs	r4, r3
 80031e2:	486c      	ldr	r0, [pc, #432]	@ (8003394 <HAL_ADC_Init+0x2f8>)
 80031e4:	f7ff ff0c 	bl	8003000 <LL_ADC_IsEnabled>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4323      	orrs	r3, r4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d012      	beq.n	8003220 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003202:	d004      	beq.n	800320e <HAL_ADC_Init+0x172>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a5f      	ldr	r2, [pc, #380]	@ (8003388 <HAL_ADC_Init+0x2ec>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_ADC_Init+0x176>
 800320e:	4a62      	ldr	r2, [pc, #392]	@ (8003398 <HAL_ADC_Init+0x2fc>)
 8003210:	e000      	b.n	8003214 <HAL_ADC_Init+0x178>
 8003212:	4a62      	ldr	r2, [pc, #392]	@ (800339c <HAL_ADC_Init+0x300>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f7ff fcfe 	bl	8002c1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7f5b      	ldrb	r3, [r3, #29]
 8003224:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800322a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003230:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003236:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800323e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800324a:	2b01      	cmp	r3, #1
 800324c:	d106      	bne.n	800325c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	045b      	lsls	r3, r3, #17
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d009      	beq.n	8003278 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	4b48      	ldr	r3, [pc, #288]	@ (80033a0 <HAL_ADC_Init+0x304>)
 8003280:	4013      	ands	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	69b9      	ldr	r1, [r7, #24]
 8003288:	430b      	orrs	r3, r1
 800328a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fee4 	bl	8003074 <LL_ADC_INJ_IsConversionOngoing>
 80032ac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d17f      	bne.n	80033b4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d17c      	bne.n	80033b4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032be:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032d6:	f023 0302 	bic.w	r3, r3, #2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	69b9      	ldr	r1, [r7, #24]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d017      	beq.n	800331c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80032fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003304:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003308:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6911      	ldr	r1, [r2, #16]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	430b      	orrs	r3, r1
 8003316:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800331a:	e013      	b.n	8003344 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800332a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800333c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003340:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800334a:	2b01      	cmp	r3, #1
 800334c:	d12a      	bne.n	80033a4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003364:	4311      	orrs	r1, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003370:	430a      	orrs	r2, r1
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	611a      	str	r2, [r3, #16]
 800337e:	e019      	b.n	80033b4 <HAL_ADC_Init+0x318>
 8003380:	20000000 	.word	0x20000000
 8003384:	053e2d63 	.word	0x053e2d63
 8003388:	50000100 	.word	0x50000100
 800338c:	50000400 	.word	0x50000400
 8003390:	50000500 	.word	0x50000500
 8003394:	50000600 	.word	0x50000600
 8003398:	50000300 	.word	0x50000300
 800339c:	50000700 	.word	0x50000700
 80033a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d10c      	bne.n	80033d6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	f023 010f 	bic.w	r1, r3, #15
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	1e5a      	subs	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80033d4:	e007      	b.n	80033e6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 020f 	bic.w	r2, r2, #15
 80033e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033f6:	e007      	b.n	8003408 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	f043 0210 	orr.w	r2, r3, #16
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003408:	7ffb      	ldrb	r3, [r7, #31]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3724      	adds	r7, #36	@ 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd90      	pop	{r4, r7, pc}
 8003412:	bf00      	nop

08003414 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003428:	d004      	beq.n	8003434 <HAL_ADC_Start_DMA+0x20>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5a      	ldr	r2, [pc, #360]	@ (8003598 <HAL_ADC_Start_DMA+0x184>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_ADC_Start_DMA+0x24>
 8003434:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_ADC_Start_DMA+0x188>)
 8003436:	e000      	b.n	800343a <HAL_ADC_Start_DMA+0x26>
 8003438:	4b59      	ldr	r3, [pc, #356]	@ (80035a0 <HAL_ADC_Start_DMA+0x18c>)
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fd62 	bl	8002f04 <LL_ADC_GetMultimode>
 8003440:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fe01 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 809b 	bne.w	800358a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_ADC_Start_DMA+0x4e>
 800345e:	2302      	movs	r3, #2
 8003460:	e096      	b.n	8003590 <HAL_ADC_Start_DMA+0x17c>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a4d      	ldr	r2, [pc, #308]	@ (80035a4 <HAL_ADC_Start_DMA+0x190>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d008      	beq.n	8003486 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d002      	beq.n	8003486 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b09      	cmp	r3, #9
 8003484:	d17a      	bne.n	800357c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 ff56 	bl	8004338 <ADC_Enable>
 800348c:	4603      	mov	r3, r0
 800348e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d16d      	bne.n	8003572 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003598 <HAL_ADC_Start_DMA+0x184>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_ADC_Start_DMA+0xb4>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3b      	ldr	r2, [pc, #236]	@ (80035a8 <HAL_ADC_Start_DMA+0x194>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d002      	beq.n	80034c4 <HAL_ADC_Start_DMA+0xb0>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	e003      	b.n	80034cc <HAL_ADC_Start_DMA+0xb8>
 80034c4:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <HAL_ADC_Start_DMA+0x198>)
 80034c6:	e001      	b.n	80034cc <HAL_ADC_Start_DMA+0xb8>
 80034c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d002      	beq.n	80034da <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d105      	bne.n	80034e6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d006      	beq.n	8003500 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f6:	f023 0206 	bic.w	r2, r3, #6
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80034fe:	e002      	b.n	8003506 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	4a29      	ldr	r2, [pc, #164]	@ (80035b0 <HAL_ADC_Start_DMA+0x19c>)
 800350c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	4a28      	ldr	r2, [pc, #160]	@ (80035b4 <HAL_ADC_Start_DMA+0x1a0>)
 8003514:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351a:	4a27      	ldr	r2, [pc, #156]	@ (80035b8 <HAL_ADC_Start_DMA+0x1a4>)
 800351c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	221c      	movs	r2, #28
 8003524:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0210 	orr.w	r2, r2, #16
 800353c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3340      	adds	r3, #64	@ 0x40
 8003558:	4619      	mov	r1, r3
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f001 fbef 	bl	8004d40 <HAL_DMA_Start_IT>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fd5b 	bl	8003026 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003570:	e00d      	b.n	800358e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800357a:	e008      	b.n	800358e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003588:	e001      	b.n	800358e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800358a:	2302      	movs	r3, #2
 800358c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	50000100 	.word	0x50000100
 800359c:	50000300 	.word	0x50000300
 80035a0:	50000700 	.word	0x50000700
 80035a4:	50000600 	.word	0x50000600
 80035a8:	50000500 	.word	0x50000500
 80035ac:	50000400 	.word	0x50000400
 80035b0:	08004465 	.word	0x08004465
 80035b4:	0800453d 	.word	0x0800453d
 80035b8:	08004559 	.word	0x08004559

080035bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035c4:	2300      	movs	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e0:	d004      	beq.n	80035ec <HAL_ADC_IRQHandler+0x30>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a8e      	ldr	r2, [pc, #568]	@ (8003820 <HAL_ADC_IRQHandler+0x264>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <HAL_ADC_IRQHandler+0x34>
 80035ec:	4b8d      	ldr	r3, [pc, #564]	@ (8003824 <HAL_ADC_IRQHandler+0x268>)
 80035ee:	e000      	b.n	80035f2 <HAL_ADC_IRQHandler+0x36>
 80035f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003828 <HAL_ADC_IRQHandler+0x26c>)
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fc86 	bl	8002f04 <LL_ADC_GetMultimode>
 80035f8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_ADC_IRQHandler+0x78>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fffe 	bl	8004628 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2202      	movs	r2, #2
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_ADC_IRQHandler+0x8c>
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8094 	beq.w	800377c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 808e 	beq.w	800377c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	d105      	bne.n	8003678 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fb9f 	bl	8002dc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d072      	beq.n	800376e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a64      	ldr	r2, [pc, #400]	@ (8003820 <HAL_ADC_IRQHandler+0x264>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_ADC_IRQHandler+0xea>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a65      	ldr	r2, [pc, #404]	@ (800382c <HAL_ADC_IRQHandler+0x270>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d002      	beq.n	80036a2 <HAL_ADC_IRQHandler+0xe6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	e003      	b.n	80036aa <HAL_ADC_IRQHandler+0xee>
 80036a2:	4b63      	ldr	r3, [pc, #396]	@ (8003830 <HAL_ADC_IRQHandler+0x274>)
 80036a4:	e001      	b.n	80036aa <HAL_ADC_IRQHandler+0xee>
 80036a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d008      	beq.n	80036c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d002      	beq.n	80036c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b09      	cmp	r3, #9
 80036c2:	d104      	bne.n	80036ce <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	623b      	str	r3, [r7, #32]
 80036cc:	e014      	b.n	80036f8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a53      	ldr	r2, [pc, #332]	@ (8003820 <HAL_ADC_IRQHandler+0x264>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_ADC_IRQHandler+0x130>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a53      	ldr	r2, [pc, #332]	@ (800382c <HAL_ADC_IRQHandler+0x270>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d002      	beq.n	80036e8 <HAL_ADC_IRQHandler+0x12c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	e003      	b.n	80036f0 <HAL_ADC_IRQHandler+0x134>
 80036e8:	4b51      	ldr	r3, [pc, #324]	@ (8003830 <HAL_ADC_IRQHandler+0x274>)
 80036ea:	e001      	b.n	80036f0 <HAL_ADC_IRQHandler+0x134>
 80036ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d135      	bne.n	800376e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b08      	cmp	r3, #8
 800370e:	d12e      	bne.n	800376e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fc9a 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11a      	bne.n	8003756 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 020c 	bic.w	r2, r2, #12
 800372e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d112      	bne.n	800376e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003754:	e00b      	b.n	800376e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fe fb92 	bl	8001e98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	220c      	movs	r2, #12
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <HAL_ADC_IRQHandler+0x1d4>
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80b3 	beq.w	8003902 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80ad 	beq.w	8003902 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fb3a 	bl	8002e3e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80037ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff faf5 	bl	8002dc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a10      	ldr	r2, [pc, #64]	@ (8003820 <HAL_ADC_IRQHandler+0x264>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x23a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a11      	ldr	r2, [pc, #68]	@ (800382c <HAL_ADC_IRQHandler+0x270>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d002      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x236>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	e003      	b.n	80037fa <HAL_ADC_IRQHandler+0x23e>
 80037f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003830 <HAL_ADC_IRQHandler+0x274>)
 80037f4:	e001      	b.n	80037fa <HAL_ADC_IRQHandler+0x23e>
 80037f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	4293      	cmp	r3, r2
 8003800:	d008      	beq.n	8003814 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b06      	cmp	r3, #6
 800380c:	d002      	beq.n	8003814 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b07      	cmp	r3, #7
 8003812:	d10f      	bne.n	8003834 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	e01f      	b.n	800385e <HAL_ADC_IRQHandler+0x2a2>
 800381e:	bf00      	nop
 8003820:	50000100 	.word	0x50000100
 8003824:	50000300 	.word	0x50000300
 8003828:	50000700 	.word	0x50000700
 800382c:	50000500 	.word	0x50000500
 8003830:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a8b      	ldr	r2, [pc, #556]	@ (8003a68 <HAL_ADC_IRQHandler+0x4ac>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <HAL_ADC_IRQHandler+0x296>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a8a      	ldr	r2, [pc, #552]	@ (8003a6c <HAL_ADC_IRQHandler+0x4b0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d002      	beq.n	800384e <HAL_ADC_IRQHandler+0x292>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	e003      	b.n	8003856 <HAL_ADC_IRQHandler+0x29a>
 800384e:	4b88      	ldr	r3, [pc, #544]	@ (8003a70 <HAL_ADC_IRQHandler+0x4b4>)
 8003850:	e001      	b.n	8003856 <HAL_ADC_IRQHandler+0x29a>
 8003852:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003856:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d047      	beq.n	80038f4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <HAL_ADC_IRQHandler+0x2c2>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d03f      	beq.n	80038f4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800387a:	2b00      	cmp	r3, #0
 800387c:	d13a      	bne.n	80038f4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	d133      	bne.n	80038f4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d12e      	bne.n	80038f4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fbea 	bl	8003074 <LL_ADC_INJ_IsConversionOngoing>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11a      	bne.n	80038dc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038b4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d112      	bne.n	80038f4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038da:	e00b      	b.n	80038f4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	f043 0210 	orr.w	r2, r3, #16
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fe6f 	bl	80045d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2260      	movs	r2, #96	@ 0x60
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d011      	beq.n	8003930 <HAL_ADC_IRQHandler+0x374>
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8b4 	bl	8003a90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2280      	movs	r2, #128	@ 0x80
 800392e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d012      	beq.n	8003960 <HAL_ADC_IRQHandler+0x3a4>
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003948:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fe55 	bl	8004600 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800395e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003966:	2b00      	cmp	r3, #0
 8003968:	d012      	beq.n	8003990 <HAL_ADC_IRQHandler+0x3d4>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003978:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fe47 	bl	8004614 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	d043      	beq.n	8003a22 <HAL_ADC_IRQHandler+0x466>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d03e      	beq.n	8003a22 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80039ac:	2301      	movs	r3, #1
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b0:	e021      	b.n	80039f6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d015      	beq.n	80039e4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c0:	d004      	beq.n	80039cc <HAL_ADC_IRQHandler+0x410>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a28      	ldr	r2, [pc, #160]	@ (8003a68 <HAL_ADC_IRQHandler+0x4ac>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_ADC_IRQHandler+0x414>
 80039cc:	4b29      	ldr	r3, [pc, #164]	@ (8003a74 <HAL_ADC_IRQHandler+0x4b8>)
 80039ce:	e000      	b.n	80039d2 <HAL_ADC_IRQHandler+0x416>
 80039d0:	4b29      	ldr	r3, [pc, #164]	@ (8003a78 <HAL_ADC_IRQHandler+0x4bc>)
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff faa4 	bl	8002f20 <LL_ADC_GetMultiDMATransfer>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80039de:	2301      	movs	r3, #1
 80039e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e2:	e008      	b.n	80039f6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80039f2:	2301      	movs	r3, #1
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10e      	bne.n	8003a1a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a00:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0c:	f043 0202 	orr.w	r2, r3, #2
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f845 	bl	8003aa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2210      	movs	r2, #16
 8003a20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d018      	beq.n	8003a5e <HAL_ADC_IRQHandler+0x4a2>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d013      	beq.n	8003a5e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a46:	f043 0208 	orr.w	r2, r3, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a56:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fdc7 	bl	80045ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a5e:	bf00      	nop
 8003a60:	3728      	adds	r7, #40	@ 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	50000100 	.word	0x50000100
 8003a6c:	50000500 	.word	0x50000500
 8003a70:	50000400 	.word	0x50000400
 8003a74:	50000300 	.word	0x50000300
 8003a78:	50000700 	.word	0x50000700

08003a7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b0b6      	sub	sp, #216	@ 0xd8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x24>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	f000 bc13 	b.w	8004302 <HAL_ADC_ConfigChannel+0x84a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fab0 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f040 83f3 	bne.w	80042dc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6859      	ldr	r1, [r3, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f7ff f96f 	bl	8002de6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fa9e 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 8003b12:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff faaa 	bl	8003074 <LL_ADC_INJ_IsConversionOngoing>
 8003b20:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 81d9 	bne.w	8003ee0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f040 81d4 	bne.w	8003ee0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b40:	d10f      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f7ff f989 	bl	8002e64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff f91d 	bl	8002d9a <LL_ADC_SetSamplingTimeCommonConfig>
 8003b60:	e00e      	b.n	8003b80 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f7ff f978 	bl	8002e64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff f90d 	bl	8002d9a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	08db      	lsrs	r3, r3, #3
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d022      	beq.n	8003be8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6919      	ldr	r1, [r3, #16]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bb2:	f7ff f867 	bl	8002c84 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6919      	ldr	r1, [r3, #16]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f7ff f8b3 	bl	8002d2e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d102      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x126>
 8003bd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bdc:	e000      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x128>
 8003bde:	2300      	movs	r3, #0
 8003be0:	461a      	mov	r2, r3
 8003be2:	f7ff f8bf 	bl	8002d64 <LL_ADC_SetOffsetSaturation>
 8003be6:	e17b      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f86c 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x15c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff f861 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	0e9b      	lsrs	r3, r3, #26
 8003c0e:	f003 021f 	and.w	r2, r3, #31
 8003c12:	e01e      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x19a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f856 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003c42:	2320      	movs	r3, #32
 8003c44:	e004      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003c46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d105      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x1b2>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	0e9b      	lsrs	r3, r3, #26
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	e018      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x1e4>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003c86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003c8e:	2320      	movs	r3, #32
 8003c90:	e004      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d106      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff f825 	bl	8002cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff f809 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x222>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe fffe 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	0e9b      	lsrs	r3, r3, #26
 8003cd4:	f003 021f 	and.w	r2, r3, #31
 8003cd8:	e01e      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x260>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe fff3 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cf0:	fa93 f3a3 	rbit	r3, r3
 8003cf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003cf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003d08:	2320      	movs	r3, #32
 8003d0a:	e004      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003d0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x278>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0e9b      	lsrs	r3, r3, #26
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	e018      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x2aa>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003d44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003d54:	2320      	movs	r3, #32
 8003d56:	e004      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d106      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe ffc2 	bl	8002cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2102      	movs	r1, #2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe ffa6 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x2e8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2102      	movs	r1, #2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe ff9b 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003d96:	4603      	mov	r3, r0
 8003d98:	0e9b      	lsrs	r3, r3, #26
 8003d9a:	f003 021f 	and.w	r2, r3, #31
 8003d9e:	e01e      	b.n	8003dde <HAL_ADC_ConfigChannel+0x326>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2102      	movs	r1, #2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe ff90 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	e004      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d105      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x33e>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	0e9b      	lsrs	r3, r3, #26
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	e016      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x36c>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003e08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003e16:	2320      	movs	r3, #32
 8003e18:	e004      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d106      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2102      	movs	r1, #2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe ff61 	bl	8002cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe ff45 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x3aa>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2103      	movs	r1, #3
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe ff3a 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	0e9b      	lsrs	r3, r3, #26
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	e017      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x3da>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2103      	movs	r1, #3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe ff2f 	bl	8002ccc <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003e7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003e84:	2320      	movs	r3, #32
 8003e86:	e003      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x3f2>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	0e9b      	lsrs	r3, r3, #26
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	e011      	b.n	8003ece <HAL_ADC_ConfigChannel+0x416>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003ec2:	2320      	movs	r3, #32
 8003ec4:	e003      	b.n	8003ece <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d106      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2103      	movs	r1, #3
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe ff0c 	bl	8002cf8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff f88b 	bl	8003000 <LL_ADC_IsEnabled>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f040 813d 	bne.w	800416c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6819      	ldr	r1, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	461a      	mov	r2, r3
 8003f00:	f7fe ffdc 	bl	8002ebc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4aa2      	ldr	r2, [pc, #648]	@ (8004194 <HAL_ADC_ConfigChannel+0x6dc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	f040 812e 	bne.w	800416c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x480>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0e9b      	lsrs	r3, r3, #26
 8003f26:	3301      	adds	r3, #1
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	2b09      	cmp	r3, #9
 8003f2e:	bf94      	ite	ls
 8003f30:	2301      	movls	r3, #1
 8003f32:	2300      	movhi	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e019      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x4b4>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f48:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	e003      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003f54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	2b09      	cmp	r3, #9
 8003f64:	bf94      	ite	ls
 8003f66:	2301      	movls	r3, #1
 8003f68:	2300      	movhi	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d079      	beq.n	8004064 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x4d4>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	0e9b      	lsrs	r3, r3, #26
 8003f82:	3301      	adds	r3, #1
 8003f84:	069b      	lsls	r3, r3, #26
 8003f86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f8a:	e015      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x500>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003fa4:	2320      	movs	r3, #32
 8003fa6:	e003      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	069b      	lsls	r3, r3, #26
 8003fb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x520>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0e9b      	lsrs	r3, r3, #26
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	e017      	b.n	8004008 <HAL_ADC_ConfigChannel+0x550>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	e003      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2101      	movs	r1, #1
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_ADC_ConfigChannel+0x576>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	3301      	adds	r3, #1
 8004020:	f003 021f 	and.w	r2, r3, #31
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	051b      	lsls	r3, r3, #20
 800402c:	e018      	b.n	8004060 <HAL_ADC_ConfigChannel+0x5a8>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004036:	fa93 f3a3 	rbit	r3, r3
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004046:	2320      	movs	r3, #32
 8004048:	e003      	b.n	8004052 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	3301      	adds	r3, #1
 8004054:	f003 021f 	and.w	r2, r3, #31
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004060:	430b      	orrs	r3, r1
 8004062:	e07e      	b.n	8004162 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x5c8>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	3301      	adds	r3, #1
 8004078:	069b      	lsls	r3, r3, #26
 800407a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800407e:	e015      	b.n	80040ac <HAL_ADC_ConfigChannel+0x5f4>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e003      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	3301      	adds	r3, #1
 80040a6:	069b      	lsls	r3, r3, #26
 80040a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x614>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0e9b      	lsrs	r3, r3, #26
 80040be:	3301      	adds	r3, #1
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	2101      	movs	r1, #1
 80040c6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ca:	e017      	b.n	80040fc <HAL_ADC_ConfigChannel+0x644>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	fa93 f3a3 	rbit	r3, r3
 80040d8:	61fb      	str	r3, [r7, #28]
  return result;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80040e4:	2320      	movs	r3, #32
 80040e6:	e003      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	3301      	adds	r3, #1
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	2101      	movs	r1, #1
 80040f8:	fa01 f303 	lsl.w	r3, r1, r3
 80040fc:	ea42 0103 	orr.w	r1, r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x670>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	3301      	adds	r3, #1
 8004114:	f003 021f 	and.w	r2, r3, #31
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	3b1e      	subs	r3, #30
 8004120:	051b      	lsls	r3, r3, #20
 8004122:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004126:	e01b      	b.n	8004160 <HAL_ADC_ConfigChannel+0x6a8>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	613b      	str	r3, [r7, #16]
  return result;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004140:	2320      	movs	r3, #32
 8004142:	e003      	b.n	800414c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	3301      	adds	r3, #1
 800414e:	f003 021f 	and.w	r2, r3, #31
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	3b1e      	subs	r3, #30
 800415a:	051b      	lsls	r3, r3, #20
 800415c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004160:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004166:	4619      	mov	r1, r3
 8004168:	f7fe fe7c 	bl	8002e64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <HAL_ADC_ConfigChannel+0x6e0>)
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80be 	beq.w	80042f6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004182:	d004      	beq.n	800418e <HAL_ADC_ConfigChannel+0x6d6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a04      	ldr	r2, [pc, #16]	@ (800419c <HAL_ADC_ConfigChannel+0x6e4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d10a      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x6ec>
 800418e:	4b04      	ldr	r3, [pc, #16]	@ (80041a0 <HAL_ADC_ConfigChannel+0x6e8>)
 8004190:	e009      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x6ee>
 8004192:	bf00      	nop
 8004194:	407f0000 	.word	0x407f0000
 8004198:	80080000 	.word	0x80080000
 800419c:	50000100 	.word	0x50000100
 80041a0:	50000300 	.word	0x50000300
 80041a4:	4b59      	ldr	r3, [pc, #356]	@ (800430c <HAL_ADC_ConfigChannel+0x854>)
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fd5e 	bl	8002c68 <LL_ADC_GetCommonPathInternalCh>
 80041ac:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a56      	ldr	r2, [pc, #344]	@ (8004310 <HAL_ADC_ConfigChannel+0x858>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <HAL_ADC_ConfigChannel+0x70c>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a55      	ldr	r2, [pc, #340]	@ (8004314 <HAL_ADC_ConfigChannel+0x85c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d13a      	bne.n	800423a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d134      	bne.n	800423a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041d8:	d005      	beq.n	80041e6 <HAL_ADC_ConfigChannel+0x72e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a4e      	ldr	r2, [pc, #312]	@ (8004318 <HAL_ADC_ConfigChannel+0x860>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	f040 8085 	bne.w	80042f0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ee:	d004      	beq.n	80041fa <HAL_ADC_ConfigChannel+0x742>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a49      	ldr	r2, [pc, #292]	@ (800431c <HAL_ADC_ConfigChannel+0x864>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x746>
 80041fa:	4a49      	ldr	r2, [pc, #292]	@ (8004320 <HAL_ADC_ConfigChannel+0x868>)
 80041fc:	e000      	b.n	8004200 <HAL_ADC_ConfigChannel+0x748>
 80041fe:	4a43      	ldr	r2, [pc, #268]	@ (800430c <HAL_ADC_ConfigChannel+0x854>)
 8004200:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004204:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f7fe fd19 	bl	8002c42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004210:	4b44      	ldr	r3, [pc, #272]	@ (8004324 <HAL_ADC_ConfigChannel+0x86c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	4a44      	ldr	r2, [pc, #272]	@ (8004328 <HAL_ADC_ConfigChannel+0x870>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	4613      	mov	r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800422a:	e002      	b.n	8004232 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f9      	bne.n	800422c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004238:	e05a      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a3b      	ldr	r2, [pc, #236]	@ (800432c <HAL_ADC_ConfigChannel+0x874>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d125      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004248:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11f      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a31      	ldr	r2, [pc, #196]	@ (800431c <HAL_ADC_ConfigChannel+0x864>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d104      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x7ac>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a34      	ldr	r2, [pc, #208]	@ (8004330 <HAL_ADC_ConfigChannel+0x878>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d047      	beq.n	80042f4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800426c:	d004      	beq.n	8004278 <HAL_ADC_ConfigChannel+0x7c0>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2a      	ldr	r2, [pc, #168]	@ (800431c <HAL_ADC_ConfigChannel+0x864>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d101      	bne.n	800427c <HAL_ADC_ConfigChannel+0x7c4>
 8004278:	4a29      	ldr	r2, [pc, #164]	@ (8004320 <HAL_ADC_ConfigChannel+0x868>)
 800427a:	e000      	b.n	800427e <HAL_ADC_ConfigChannel+0x7c6>
 800427c:	4a23      	ldr	r2, [pc, #140]	@ (800430c <HAL_ADC_ConfigChannel+0x854>)
 800427e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f7fe fcda 	bl	8002c42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800428e:	e031      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a27      	ldr	r2, [pc, #156]	@ (8004334 <HAL_ADC_ConfigChannel+0x87c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d12d      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800429a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800429e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d127      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1c      	ldr	r2, [pc, #112]	@ (800431c <HAL_ADC_ConfigChannel+0x864>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d022      	beq.n	80042f6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042b8:	d004      	beq.n	80042c4 <HAL_ADC_ConfigChannel+0x80c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a17      	ldr	r2, [pc, #92]	@ (800431c <HAL_ADC_ConfigChannel+0x864>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d101      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x810>
 80042c4:	4a16      	ldr	r2, [pc, #88]	@ (8004320 <HAL_ADC_ConfigChannel+0x868>)
 80042c6:	e000      	b.n	80042ca <HAL_ADC_ConfigChannel+0x812>
 80042c8:	4a10      	ldr	r2, [pc, #64]	@ (800430c <HAL_ADC_ConfigChannel+0x854>)
 80042ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f7fe fcb4 	bl	8002c42 <LL_ADC_SetCommonPathInternalCh>
 80042da:	e00c      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80042ee:	e002      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80042fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004302:	4618      	mov	r0, r3
 8004304:	37d8      	adds	r7, #216	@ 0xd8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	50000700 	.word	0x50000700
 8004310:	c3210000 	.word	0xc3210000
 8004314:	90c00010 	.word	0x90c00010
 8004318:	50000600 	.word	0x50000600
 800431c:	50000100 	.word	0x50000100
 8004320:	50000300 	.word	0x50000300
 8004324:	20000000 	.word	0x20000000
 8004328:	053e2d63 	.word	0x053e2d63
 800432c:	c7520000 	.word	0xc7520000
 8004330:	50000500 	.word	0x50000500
 8004334:	cb840000 	.word	0xcb840000

08004338 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004340:	2300      	movs	r3, #0
 8004342:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fe59 	bl	8003000 <LL_ADC_IsEnabled>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d176      	bne.n	8004442 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	4b3c      	ldr	r3, [pc, #240]	@ (800444c <ADC_Enable+0x114>)
 800435c:	4013      	ands	r3, r2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	f043 0210 	orr.w	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e062      	b.n	8004444 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fe28 	bl	8002fd8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004390:	d004      	beq.n	800439c <ADC_Enable+0x64>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2e      	ldr	r2, [pc, #184]	@ (8004450 <ADC_Enable+0x118>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <ADC_Enable+0x68>
 800439c:	4b2d      	ldr	r3, [pc, #180]	@ (8004454 <ADC_Enable+0x11c>)
 800439e:	e000      	b.n	80043a2 <ADC_Enable+0x6a>
 80043a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004458 <ADC_Enable+0x120>)
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe fc60 	bl	8002c68 <LL_ADC_GetCommonPathInternalCh>
 80043a8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80043aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d013      	beq.n	80043da <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043b2:	4b2a      	ldr	r3, [pc, #168]	@ (800445c <ADC_Enable+0x124>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	4a29      	ldr	r2, [pc, #164]	@ (8004460 <ADC_Enable+0x128>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	4613      	mov	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043cc:	e002      	b.n	80043d4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f9      	bne.n	80043ce <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043da:	f7fe fbef 	bl	8002bbc <HAL_GetTick>
 80043de:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043e0:	e028      	b.n	8004434 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fe0a 	bl	8003000 <LL_ADC_IsEnabled>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fdee 	bl	8002fd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043fc:	f7fe fbde 	bl	8002bbc <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d914      	bls.n	8004434 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d00d      	beq.n	8004434 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441c:	f043 0210 	orr.w	r2, r3, #16
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004428:	f043 0201 	orr.w	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e007      	b.n	8004444 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d1cf      	bne.n	80043e2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	8000003f 	.word	0x8000003f
 8004450:	50000100 	.word	0x50000100
 8004454:	50000300 	.word	0x50000300
 8004458:	50000700 	.word	0x50000700
 800445c:	20000000 	.word	0x20000000
 8004460:	053e2d63 	.word	0x053e2d63

08004464 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004476:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	d14b      	bne.n	8004516 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004482:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d021      	beq.n	80044dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe fc8f 	bl	8002dc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d032      	beq.n	800450e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d12b      	bne.n	800450e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d11f      	bne.n	800450e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d2:	f043 0201 	orr.w	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044da:	e018      	b.n	800450e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d111      	bne.n	800450e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d105      	bne.n	800450e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7fd fcc2 	bl	8001e98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004514:	e00e      	b.n	8004534 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fabe 	bl	8003aa4 <HAL_ADC_ErrorCallback>
}
 8004528:	e004      	b.n	8004534 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
}
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff fa96 	bl	8003a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff fa90 	bl	8003aa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <LL_ADC_IsEnabled>:
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <LL_ADC_IsEnabled+0x18>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <LL_ADC_IsEnabled+0x1a>
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d101      	bne.n	80045ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b0a1      	sub	sp, #132	@ 0x84
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004656:	2302      	movs	r3, #2
 8004658:	e0e7      	b.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004662:	2300      	movs	r3, #0
 8004664:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004666:	2300      	movs	r3, #0
 8004668:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004672:	d102      	bne.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004674:	4b6f      	ldr	r3, [pc, #444]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	e009      	b.n	800468e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6e      	ldr	r2, [pc, #440]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d102      	bne.n	800468a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004684:	4b6d      	ldr	r3, [pc, #436]	@ (800483c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	e001      	b.n	800468e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004698:	f043 0220 	orr.w	r2, r3, #32
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0be      	b.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff ff7f 	bl	80045b2 <LL_ADC_REG_IsConversionOngoing>
 80046b4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff ff79 	bl	80045b2 <LL_ADC_REG_IsConversionOngoing>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 80a0 	bne.w	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80046c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 809c 	bne.w	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046d8:	d004      	beq.n	80046e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a55      	ldr	r2, [pc, #340]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d101      	bne.n	80046e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80046e4:	4b56      	ldr	r3, [pc, #344]	@ (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80046e6:	e000      	b.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80046e8:	4b56      	ldr	r3, [pc, #344]	@ (8004844 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80046ea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d04b      	beq.n	800478c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80046f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6859      	ldr	r1, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004706:	035b      	lsls	r3, r3, #13
 8004708:	430b      	orrs	r3, r1
 800470a:	431a      	orrs	r2, r3
 800470c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800470e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004718:	d004      	beq.n	8004724 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a45      	ldr	r2, [pc, #276]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d10f      	bne.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004724:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004728:	f7ff ff30 	bl	800458c <LL_ADC_IsEnabled>
 800472c:	4604      	mov	r4, r0
 800472e:	4841      	ldr	r0, [pc, #260]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004730:	f7ff ff2c 	bl	800458c <LL_ADC_IsEnabled>
 8004734:	4603      	mov	r3, r0
 8004736:	4323      	orrs	r3, r4
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e012      	b.n	800476a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004744:	483c      	ldr	r0, [pc, #240]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004746:	f7ff ff21 	bl	800458c <LL_ADC_IsEnabled>
 800474a:	4604      	mov	r4, r0
 800474c:	483b      	ldr	r0, [pc, #236]	@ (800483c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800474e:	f7ff ff1d 	bl	800458c <LL_ADC_IsEnabled>
 8004752:	4603      	mov	r3, r0
 8004754:	431c      	orrs	r4, r3
 8004756:	483c      	ldr	r0, [pc, #240]	@ (8004848 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004758:	f7ff ff18 	bl	800458c <LL_ADC_IsEnabled>
 800475c:	4603      	mov	r3, r0
 800475e:	4323      	orrs	r3, r4
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d056      	beq.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800476e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004776:	f023 030f 	bic.w	r3, r3, #15
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	6811      	ldr	r1, [r2, #0]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	6892      	ldr	r2, [r2, #8]
 8004782:	430a      	orrs	r2, r1
 8004784:	431a      	orrs	r2, r3
 8004786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004788:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800478a:	e047      	b.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800478c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004796:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047a0:	d004      	beq.n	80047ac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a23      	ldr	r2, [pc, #140]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10f      	bne.n	80047cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80047ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047b0:	f7ff feec 	bl	800458c <LL_ADC_IsEnabled>
 80047b4:	4604      	mov	r4, r0
 80047b6:	481f      	ldr	r0, [pc, #124]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047b8:	f7ff fee8 	bl	800458c <LL_ADC_IsEnabled>
 80047bc:	4603      	mov	r3, r0
 80047be:	4323      	orrs	r3, r4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e012      	b.n	80047f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80047cc:	481a      	ldr	r0, [pc, #104]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047ce:	f7ff fedd 	bl	800458c <LL_ADC_IsEnabled>
 80047d2:	4604      	mov	r4, r0
 80047d4:	4819      	ldr	r0, [pc, #100]	@ (800483c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047d6:	f7ff fed9 	bl	800458c <LL_ADC_IsEnabled>
 80047da:	4603      	mov	r3, r0
 80047dc:	431c      	orrs	r4, r3
 80047de:	481a      	ldr	r0, [pc, #104]	@ (8004848 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80047e0:	f7ff fed4 	bl	800458c <LL_ADC_IsEnabled>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4323      	orrs	r3, r4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d012      	beq.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047fe:	f023 030f 	bic.w	r3, r3, #15
 8004802:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004804:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004806:	e009      	b.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800481a:	e000      	b.n	800481e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800481c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004826:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800482a:	4618      	mov	r0, r3
 800482c:	3784      	adds	r7, #132	@ 0x84
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	bf00      	nop
 8004834:	50000100 	.word	0x50000100
 8004838:	50000400 	.word	0x50000400
 800483c:	50000500 	.word	0x50000500
 8004840:	50000300 	.word	0x50000300
 8004844:	50000700 	.word	0x50000700
 8004848:	50000600 	.word	0x50000600

0800484c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800485c:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800487e:	4a04      	ldr	r2, [pc, #16]	@ (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	60d3      	str	r3, [r2, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004898:	4b04      	ldr	r3, [pc, #16]	@ (80048ac <__NVIC_GetPriorityGrouping+0x18>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 0307 	and.w	r3, r3, #7
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db0b      	blt.n	80048da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	f003 021f 	and.w	r2, r3, #31
 80048c8:	4907      	ldr	r1, [pc, #28]	@ (80048e8 <__NVIC_EnableIRQ+0x38>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2001      	movs	r0, #1
 80048d2:	fa00 f202 	lsl.w	r2, r0, r2
 80048d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000e100 	.word	0xe000e100

080048ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	6039      	str	r1, [r7, #0]
 80048f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	db0a      	blt.n	8004916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	b2da      	uxtb	r2, r3
 8004904:	490c      	ldr	r1, [pc, #48]	@ (8004938 <__NVIC_SetPriority+0x4c>)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	0112      	lsls	r2, r2, #4
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	440b      	add	r3, r1
 8004910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004914:	e00a      	b.n	800492c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4908      	ldr	r1, [pc, #32]	@ (800493c <__NVIC_SetPriority+0x50>)
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	3b04      	subs	r3, #4
 8004924:	0112      	lsls	r2, r2, #4
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	440b      	add	r3, r1
 800492a:	761a      	strb	r2, [r3, #24]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000e100 	.word	0xe000e100
 800493c:	e000ed00 	.word	0xe000ed00

08004940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	@ 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f1c3 0307 	rsb	r3, r3, #7
 800495a:	2b04      	cmp	r3, #4
 800495c:	bf28      	it	cs
 800495e:	2304      	movcs	r3, #4
 8004960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3304      	adds	r3, #4
 8004966:	2b06      	cmp	r3, #6
 8004968:	d902      	bls.n	8004970 <NVIC_EncodePriority+0x30>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3b03      	subs	r3, #3
 800496e:	e000      	b.n	8004972 <NVIC_EncodePriority+0x32>
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004974:	f04f 32ff 	mov.w	r2, #4294967295
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43da      	mvns	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	401a      	ands	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004988:	f04f 31ff 	mov.w	r1, #4294967295
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	43d9      	mvns	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004998:	4313      	orrs	r3, r2
         );
}
 800499a:	4618      	mov	r0, r3
 800499c:	3724      	adds	r7, #36	@ 0x24
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ff4c 	bl	800484c <__NVIC_SetPriorityGrouping>
}
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049ca:	f7ff ff63 	bl	8004894 <__NVIC_GetPriorityGrouping>
 80049ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	6978      	ldr	r0, [r7, #20]
 80049d6:	f7ff ffb3 	bl	8004940 <NVIC_EncodePriority>
 80049da:	4602      	mov	r2, r0
 80049dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff ff82 	bl	80048ec <__NVIC_SetPriority>
}
 80049e8:	bf00      	nop
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff56 	bl	80048b0 <__NVIC_EnableIRQ>
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e054      	b.n	8004ac8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	7f5b      	ldrb	r3, [r3, #29]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fc fb00 	bl	8001034 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	791b      	ldrb	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10c      	bne.n	8004a5c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a22      	ldr	r2, [pc, #136]	@ (8004ad0 <HAL_CRC_Init+0xc4>)
 8004a48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0218 	bic.w	r2, r2, #24
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	e00c      	b.n	8004a76 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f834 	bl	8004ad4 <HAL_CRCEx_Polynomial_Set>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e028      	b.n	8004ac8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	795b      	ldrb	r3, [r3, #5]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d105      	bne.n	8004a8a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f04f 32ff 	mov.w	r2, #4294967295
 8004a86:	611a      	str	r2, [r3, #16]
 8004a88:	e004      	b.n	8004a94 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6912      	ldr	r2, [r2, #16]
 8004a92:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699a      	ldr	r2, [r3, #24]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	04c11db7 	.word	0x04c11db7

08004ad4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004ae4:	231f      	movs	r3, #31
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
 8004af6:	e063      	b.n	8004bc0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004af8:	bf00      	nop
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1e5a      	subs	r2, r3, #1
 8004afe:	613a      	str	r2, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HAL_CRCEx_Polynomial_Set+0x44>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b18      	cmp	r3, #24
 8004b1c:	d846      	bhi.n	8004bac <HAL_CRCEx_Polynomial_Set+0xd8>
 8004b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004bb3 	.word	0x08004bb3
 8004b28:	08004bad 	.word	0x08004bad
 8004b2c:	08004bad 	.word	0x08004bad
 8004b30:	08004bad 	.word	0x08004bad
 8004b34:	08004bad 	.word	0x08004bad
 8004b38:	08004bad 	.word	0x08004bad
 8004b3c:	08004bad 	.word	0x08004bad
 8004b40:	08004bad 	.word	0x08004bad
 8004b44:	08004ba1 	.word	0x08004ba1
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004bad 	.word	0x08004bad
 8004b50:	08004bad 	.word	0x08004bad
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004bad 	.word	0x08004bad
 8004b64:	08004b95 	.word	0x08004b95
 8004b68:	08004bad 	.word	0x08004bad
 8004b6c:	08004bad 	.word	0x08004bad
 8004b70:	08004bad 	.word	0x08004bad
 8004b74:	08004bad 	.word	0x08004bad
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bad 	.word	0x08004bad
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004b89 	.word	0x08004b89
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d913      	bls.n	8004bb6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004b92:	e010      	b.n	8004bb6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b07      	cmp	r3, #7
 8004b98:	d90f      	bls.n	8004bba <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004b9e:	e00c      	b.n	8004bba <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b0f      	cmp	r3, #15
 8004ba4:	d90b      	bls.n	8004bbe <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004baa:	e008      	b.n	8004bbe <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]
        break;
 8004bb0:	e006      	b.n	8004bc0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004bb2:	bf00      	nop
 8004bb4:	e004      	b.n	8004bc0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e002      	b.n	8004bc0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004bba:	bf00      	nop
 8004bbc:	e000      	b.n	8004bc0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004bbe:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10d      	bne.n	8004be2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f023 0118 	bic.w	r1, r3, #24
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e08d      	b.n	8004d1e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b47      	ldr	r3, [pc, #284]	@ (8004d28 <HAL_DMA_Init+0x138>)
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d80f      	bhi.n	8004c2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	4b45      	ldr	r3, [pc, #276]	@ (8004d2c <HAL_DMA_Init+0x13c>)
 8004c16:	4413      	add	r3, r2
 8004c18:	4a45      	ldr	r2, [pc, #276]	@ (8004d30 <HAL_DMA_Init+0x140>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	009a      	lsls	r2, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a42      	ldr	r2, [pc, #264]	@ (8004d34 <HAL_DMA_Init+0x144>)
 8004c2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c2c:	e00e      	b.n	8004c4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b40      	ldr	r3, [pc, #256]	@ (8004d38 <HAL_DMA_Init+0x148>)
 8004c36:	4413      	add	r3, r2
 8004c38:	4a3d      	ldr	r2, [pc, #244]	@ (8004d30 <HAL_DMA_Init+0x140>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	009a      	lsls	r2, r3, #2
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a3c      	ldr	r2, [pc, #240]	@ (8004d3c <HAL_DMA_Init+0x14c>)
 8004c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa2c 	bl	80050fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cac:	d102      	bne.n	8004cb4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cc8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d010      	beq.n	8004cf4 <HAL_DMA_Init+0x104>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d80c      	bhi.n	8004cf4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa4c 	bl	8005178 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	e008      	b.n	8004d06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40020407 	.word	0x40020407
 8004d2c:	bffdfff8 	.word	0xbffdfff8
 8004d30:	cccccccd 	.word	0xcccccccd
 8004d34:	40020000 	.word	0x40020000
 8004d38:	bffdfbf8 	.word	0xbffdfbf8
 8004d3c:	40020400 	.word	0x40020400

08004d40 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_DMA_Start_IT+0x20>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e066      	b.n	8004e2e <HAL_DMA_Start_IT+0xee>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d155      	bne.n	8004e20 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f970 	bl	800507e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 020e 	orr.w	r2, r2, #14
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e00f      	b.n	8004dd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0204 	bic.w	r2, r2, #4
 8004dc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 020a 	orr.w	r2, r2, #10
 8004dd6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e0c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0201 	orr.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e005      	b.n	8004e2c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d00d      	beq.n	8004e6a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2204      	movs	r2, #4
 8004e52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
 8004e68:	e047      	b.n	8004efa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 020e 	bic.w	r2, r2, #14
 8004e78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0201 	bic.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	f003 021f 	and.w	r2, r3, #31
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8004eac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004eb6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00c      	beq.n	8004eda <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ece:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ed8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
    }
  }
  return status;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2204      	movs	r2, #4
 8004f26:	409a      	lsls	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d026      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x7a>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d021      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d107      	bne.n	8004f58 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5c:	f003 021f 	and.w	r2, r3, #31
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	2104      	movs	r1, #4
 8004f66:	fa01 f202 	lsl.w	r2, r1, r2
 8004f6a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d071      	beq.n	8005058 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f7c:	e06c      	b.n	8005058 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	2202      	movs	r2, #2
 8004f88:	409a      	lsls	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d02e      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d029      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 020a 	bic.w	r2, r2, #10
 8004fb8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc6:	f003 021f 	and.w	r2, r3, #31
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	2102      	movs	r1, #2
 8004fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d038      	beq.n	8005058 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004fee:	e033      	b.n	8005058 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02a      	beq.n	800505a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d025      	beq.n	800505a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 020e 	bic.w	r2, r2, #14
 800501c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005022:	f003 021f 	and.w	r2, r3, #31
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	2101      	movs	r1, #1
 800502c:	fa01 f202 	lsl.w	r2, r1, r2
 8005030:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005058:	bf00      	nop
 800505a:	bf00      	nop
}
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005070:	b2db      	uxtb	r3, r3
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005094:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050a6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ac:	f003 021f 	and.w	r2, r3, #31
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d108      	bne.n	80050de <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050dc:	e007      	b.n	80050ee <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	60da      	str	r2, [r3, #12]
}
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	4b16      	ldr	r3, [pc, #88]	@ (8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800510c:	429a      	cmp	r2, r3
 800510e:	d802      	bhi.n	8005116 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005110:	4b15      	ldr	r3, [pc, #84]	@ (8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e001      	b.n	800511a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005116:	4b15      	ldr	r3, [pc, #84]	@ (800516c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005118:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	3b08      	subs	r3, #8
 8005126:	4a12      	ldr	r2, [pc, #72]	@ (8005170 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005134:	089b      	lsrs	r3, r3, #2
 8005136:	009a      	lsls	r2, r3, #2
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	461a      	mov	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a0b      	ldr	r2, [pc, #44]	@ (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005146:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2201      	movs	r2, #1
 8005150:	409a      	lsls	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40020407 	.word	0x40020407
 8005168:	40020800 	.word	0x40020800
 800516c:	40020820 	.word	0x40020820
 8005170:	cccccccd 	.word	0xcccccccd
 8005174:	40020880 	.word	0x40020880

08005178 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	461a      	mov	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a08      	ldr	r2, [pc, #32]	@ (80051bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800519a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b01      	subs	r3, #1
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	2201      	movs	r2, #1
 80051a6:	409a      	lsls	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	1000823f 	.word	0x1000823f
 80051bc:	40020940 	.word	0x40020940

080051c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e147      	b.n	8005462 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fb ffc4 	bl	8001174 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0210 	bic.w	r2, r2, #16
 80051fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051fc:	f7fd fcde 	bl	8002bbc <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005202:	e012      	b.n	800522a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005204:	f7fd fcda 	bl	8002bbc <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b0a      	cmp	r3, #10
 8005210:	d90b      	bls.n	800522a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005216:	f043 0201 	orr.w	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2203      	movs	r2, #3
 8005222:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e11b      	b.n	8005462 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b08      	cmp	r3, #8
 8005236:	d0e5      	beq.n	8005204 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005248:	f7fd fcb8 	bl	8002bbc <HAL_GetTick>
 800524c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800524e:	e012      	b.n	8005276 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005250:	f7fd fcb4 	bl	8002bbc <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b0a      	cmp	r3, #10
 800525c:	d90b      	bls.n	8005276 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005262:	f043 0201 	orr.w	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2203      	movs	r2, #3
 800526e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e0f5      	b.n	8005462 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0e5      	beq.n	8005250 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0202 	orr.w	r2, r2, #2
 8005292:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a74      	ldr	r2, [pc, #464]	@ (800546c <HAL_FDCAN_Init+0x2ac>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d103      	bne.n	80052a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800529e:	4a74      	ldr	r2, [pc, #464]	@ (8005470 <HAL_FDCAN_Init+0x2b0>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	7c1b      	ldrb	r3, [r3, #16]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d108      	bne.n	80052c0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052bc:	619a      	str	r2, [r3, #24]
 80052be:	e007      	b.n	80052d0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7c5b      	ldrb	r3, [r3, #17]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d108      	bne.n	80052ea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052e6:	619a      	str	r2, [r3, #24]
 80052e8:	e007      	b.n	80052fa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7c9b      	ldrb	r3, [r3, #18]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d108      	bne.n	8005314 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005310:	619a      	str	r2, [r3, #24]
 8005312:	e007      	b.n	8005324 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005322:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005348:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0210 	bic.w	r2, r2, #16
 8005358:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d108      	bne.n	8005374 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0204 	orr.w	r2, r2, #4
 8005370:	619a      	str	r2, [r3, #24]
 8005372:	e02c      	b.n	80053ce <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d028      	beq.n	80053ce <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d01c      	beq.n	80053be <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005392:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0210 	orr.w	r2, r2, #16
 80053a2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d110      	bne.n	80053ce <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0220 	orr.w	r2, r2, #32
 80053ba:	619a      	str	r2, [r3, #24]
 80053bc:	e007      	b.n	80053ce <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0220 	orr.w	r2, r2, #32
 80053cc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	3b01      	subs	r3, #1
 80053dc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053de:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80053e6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80053f6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053f8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005402:	d115      	bne.n	8005430 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	3b01      	subs	r3, #1
 8005410:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005412:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	3b01      	subs	r3, #1
 800541a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800541c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	3b01      	subs	r3, #1
 8005426:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800542c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800542e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fa1a 	bl	8005880 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40006400 	.word	0x40006400
 8005470:	40006500 	.word	0x40006500

08005474 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d110      	bne.n	80054aa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0201 	bic.w	r2, r2, #1
 800549e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e006      	b.n	80054b8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ae:	f043 0204 	orr.w	r2, r3, #4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
  }
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d12c      	bne.n	8005536 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80054e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e023      	b.n	8005544 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fa20 	bl	8005958 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2101      	movs	r1, #1
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	fa01 f202 	lsl.w	r2, r1, r2
 8005524:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005528:	2201      	movs	r2, #1
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	409a      	lsls	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	e006      	b.n	8005544 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800553a:	f043 0208 	orr.w	r2, r3, #8
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
  }
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	@ 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800555a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800555e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005568:	4013      	ands	r3, r2
 800556a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005580:	4013      	ands	r3, r2
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005598:	4013      	ands	r3, r2
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80055a6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	4013      	ands	r3, r2
 80055b2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80055be:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	4013      	ands	r3, r2
 80055ca:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055da:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2240      	movs	r2, #64	@ 0x40
 80055f6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f921 	bl	8005840 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d019      	beq.n	800563c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d014      	beq.n	800563c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800561a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4013      	ands	r3, r2
 8005628:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005632:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005634:	6939      	ldr	r1, [r7, #16]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f8e3 	bl	8005802 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800563c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d007      	beq.n	8005652 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005648:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800564a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f8a2 	bl	8005796 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800565e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f8a2 	bl	80057ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005674:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005676:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8a2 	bl	80057c2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800569a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f89b 	bl	80057d8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d018      	beq.n	80056de <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d013      	beq.n	80056de <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80056be:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4013      	ands	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2280      	movs	r2, #128	@ 0x80
 80056d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f887 	bl	80057ec <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00c      	beq.n	8005702 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d007      	beq.n	8005702 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f88b 	bl	8005818 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800571e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f883 	bl	800582c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00f      	beq.n	8005750 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005742:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005748:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800575e:	69f9      	ldr	r1, [r7, #28]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f881 	bl	8005868 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a3a      	ldr	r2, [r7, #32]
 8005772:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f863 	bl	8005854 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800578e:	bf00      	nop
 8005790:	3730      	adds	r7, #48	@ 0x30
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005888:	4b30      	ldr	r3, [pc, #192]	@ (800594c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800588a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2f      	ldr	r2, [pc, #188]	@ (8005950 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d103      	bne.n	800589e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800589c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005954 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d103      	bne.n	80058b0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80058ae:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058be:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c6:	041a      	lsls	r2, r3, #16
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ec:	061a      	lsls	r2, r3, #24
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e005      	b.n	8005932 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3304      	adds	r3, #4
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	429a      	cmp	r2, r3
 800593c:	d3f3      	bcc.n	8005926 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	4000a400 	.word	0x4000a400
 8005950:	40006800 	.word	0x40006800
 8005954:	40006c00 	.word	0x40006c00

08005958 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005958:	b480      	push	{r7}
 800595a:	b089      	sub	sp, #36	@ 0x24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005976:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800597e:	4313      	orrs	r3, r2
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	e00a      	b.n	800599a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800598c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005992:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005994:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005998:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80059a4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80059aa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80059b0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	4613      	mov	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	4413      	add	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	440b      	add	r3, r1
 80059cc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	3304      	adds	r3, #4
 80059d8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	3304      	adds	r3, #4
 80059e4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e020      	b.n	8005a2e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	3303      	adds	r3, #3
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	3302      	adds	r3, #2
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	440b      	add	r3, r1
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005a04:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	440b      	add	r3, r1
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005a12:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	440a      	add	r2, r1
 8005a1a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005a1c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	3304      	adds	r3, #4
 8005a26:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	4a06      	ldr	r2, [pc, #24]	@ (8005a4c <FDCAN_CopyMessageToRAM+0xf4>)
 8005a34:	5cd3      	ldrb	r3, [r2, r3]
 8005a36:	461a      	mov	r2, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d3d6      	bcc.n	80059ec <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8005a3e:	bf00      	nop
 8005a40:	bf00      	nop
 8005a42:	3724      	adds	r7, #36	@ 0x24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	0800c544 	.word	0x0800c544

08005a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a5e:	e15a      	b.n	8005d16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	2101      	movs	r1, #1
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 814c 	beq.w	8005d10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d005      	beq.n	8005a90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d130      	bne.n	8005af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	f003 0201 	and.w	r2, r3, #1
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d017      	beq.n	8005b2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	2203      	movs	r2, #3
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4013      	ands	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d123      	bne.n	8005b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	08da      	lsrs	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3208      	adds	r2, #8
 8005b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	220f      	movs	r2, #15
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43db      	mvns	r3, r3
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	08da      	lsrs	r2, r3, #3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3208      	adds	r2, #8
 8005b7c:	6939      	ldr	r1, [r7, #16]
 8005b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4013      	ands	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0203 	and.w	r2, r3, #3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 80a6 	beq.w	8005d10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bc4:	4b5b      	ldr	r3, [pc, #364]	@ (8005d34 <HAL_GPIO_Init+0x2e4>)
 8005bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8005d34 <HAL_GPIO_Init+0x2e4>)
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	6613      	str	r3, [r2, #96]	@ 0x60
 8005bd0:	4b58      	ldr	r3, [pc, #352]	@ (8005d34 <HAL_GPIO_Init+0x2e4>)
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bdc:	4a56      	ldr	r2, [pc, #344]	@ (8005d38 <HAL_GPIO_Init+0x2e8>)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	089b      	lsrs	r3, r3, #2
 8005be2:	3302      	adds	r3, #2
 8005be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	220f      	movs	r2, #15
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c06:	d01f      	beq.n	8005c48 <HAL_GPIO_Init+0x1f8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a4c      	ldr	r2, [pc, #304]	@ (8005d3c <HAL_GPIO_Init+0x2ec>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d019      	beq.n	8005c44 <HAL_GPIO_Init+0x1f4>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a4b      	ldr	r2, [pc, #300]	@ (8005d40 <HAL_GPIO_Init+0x2f0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_GPIO_Init+0x1f0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8005d44 <HAL_GPIO_Init+0x2f4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00d      	beq.n	8005c3c <HAL_GPIO_Init+0x1ec>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a49      	ldr	r2, [pc, #292]	@ (8005d48 <HAL_GPIO_Init+0x2f8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <HAL_GPIO_Init+0x1e8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a48      	ldr	r2, [pc, #288]	@ (8005d4c <HAL_GPIO_Init+0x2fc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d101      	bne.n	8005c34 <HAL_GPIO_Init+0x1e4>
 8005c30:	2305      	movs	r3, #5
 8005c32:	e00a      	b.n	8005c4a <HAL_GPIO_Init+0x1fa>
 8005c34:	2306      	movs	r3, #6
 8005c36:	e008      	b.n	8005c4a <HAL_GPIO_Init+0x1fa>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	e006      	b.n	8005c4a <HAL_GPIO_Init+0x1fa>
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e004      	b.n	8005c4a <HAL_GPIO_Init+0x1fa>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e002      	b.n	8005c4a <HAL_GPIO_Init+0x1fa>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <HAL_GPIO_Init+0x1fa>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	f002 0203 	and.w	r2, r2, #3
 8005c50:	0092      	lsls	r2, r2, #2
 8005c52:	4093      	lsls	r3, r2
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c5a:	4937      	ldr	r1, [pc, #220]	@ (8005d38 <HAL_GPIO_Init+0x2e8>)
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	089b      	lsrs	r3, r3, #2
 8005c60:	3302      	adds	r3, #2
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c68:	4b39      	ldr	r3, [pc, #228]	@ (8005d50 <HAL_GPIO_Init+0x300>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	43db      	mvns	r3, r3
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4013      	ands	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c8c:	4a30      	ldr	r2, [pc, #192]	@ (8005d50 <HAL_GPIO_Init+0x300>)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c92:	4b2f      	ldr	r3, [pc, #188]	@ (8005d50 <HAL_GPIO_Init+0x300>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005cb6:	4a26      	ldr	r2, [pc, #152]	@ (8005d50 <HAL_GPIO_Init+0x300>)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005cbc:	4b24      	ldr	r3, [pc, #144]	@ (8005d50 <HAL_GPIO_Init+0x300>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d50 <HAL_GPIO_Init+0x300>)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d50 <HAL_GPIO_Init+0x300>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d0a:	4a11      	ldr	r2, [pc, #68]	@ (8005d50 <HAL_GPIO_Init+0x300>)
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	3301      	adds	r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f47f ae9d 	bne.w	8005a60 <HAL_GPIO_Init+0x10>
  }
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	40021000 	.word	0x40021000
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	48000400 	.word	0x48000400
 8005d40:	48000800 	.word	0x48000800
 8005d44:	48000c00 	.word	0x48000c00
 8005d48:	48001000 	.word	0x48001000
 8005d4c:	48001400 	.word	0x48001400
 8005d50:	40010400 	.word	0x40010400

08005d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d64:	787b      	ldrb	r3, [r7, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d70:	e002      	b.n	8005d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d72:	887a      	ldrh	r2, [r7, #2]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d96:	887a      	ldrh	r2, [r7, #2]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	041a      	lsls	r2, r3, #16
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	43d9      	mvns	r1, r3
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	400b      	ands	r3, r1
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	619a      	str	r2, [r3, #24]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e08d      	b.n	8005ee6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fb fb7e 	bl	80014e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2224      	movs	r2, #36	@ 0x24
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0201 	bic.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d107      	bne.n	8005e32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e2e:	609a      	str	r2, [r3, #8]
 8005e30:	e006      	b.n	8005e40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005e3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d108      	bne.n	8005e5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e56:	605a      	str	r2, [r3, #4]
 8005e58:	e007      	b.n	8005e6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69d9      	ldr	r1, [r3, #28]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	461a      	mov	r2, r3
 8005efc:	460b      	mov	r3, r1
 8005efe:	817b      	strh	r3, [r7, #10]
 8005f00:	4613      	mov	r3, r2
 8005f02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	f040 80fd 	bne.w	800610c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_I2C_Master_Transmit+0x30>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e0f6      	b.n	800610e <HAL_I2C_Master_Transmit+0x21e>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f28:	f7fc fe48 	bl	8002bbc <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	2319      	movs	r3, #25
 8005f34:	2201      	movs	r2, #1
 8005f36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fe8f 	bl	8006c5e <I2C_WaitOnFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e0e1      	b.n	800610e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2221      	movs	r2, #33	@ 0x21
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2210      	movs	r2, #16
 8005f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	893a      	ldrh	r2, [r7, #8]
 8005f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2bff      	cmp	r3, #255	@ 0xff
 8005f7a:	d906      	bls.n	8005f8a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	22ff      	movs	r2, #255	@ 0xff
 8005f80:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e007      	b.n	8005f9a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005f94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f98:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d024      	beq.n	8005fec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	781a      	ldrb	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	3301      	adds	r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	8979      	ldrh	r1, [r7, #10]
 8005fde:	4b4e      	ldr	r3, [pc, #312]	@ (8006118 <HAL_I2C_Master_Transmit+0x228>)
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fffd 	bl	8006fe4 <I2C_TransferConfig>
 8005fea:	e066      	b.n	80060ba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	8979      	ldrh	r1, [r7, #10]
 8005ff4:	4b48      	ldr	r3, [pc, #288]	@ (8006118 <HAL_I2C_Master_Transmit+0x228>)
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fff2 	bl	8006fe4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006000:	e05b      	b.n	80060ba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	6a39      	ldr	r1, [r7, #32]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 fe82 	bl	8006d10 <I2C_WaitOnTXISFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e07b      	b.n	800610e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	781a      	ldrb	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d034      	beq.n	80060ba <HAL_I2C_Master_Transmit+0x1ca>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006054:	2b00      	cmp	r3, #0
 8006056:	d130      	bne.n	80060ba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	2200      	movs	r2, #0
 8006060:	2180      	movs	r1, #128	@ 0x80
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fdfb 	bl	8006c5e <I2C_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e04d      	b.n	800610e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	2bff      	cmp	r3, #255	@ 0xff
 800607a:	d90e      	bls.n	800609a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	22ff      	movs	r2, #255	@ 0xff
 8006080:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006086:	b2da      	uxtb	r2, r3
 8006088:	8979      	ldrh	r1, [r7, #10]
 800608a:	2300      	movs	r3, #0
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 ffa6 	bl	8006fe4 <I2C_TransferConfig>
 8006098:	e00f      	b.n	80060ba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	8979      	ldrh	r1, [r7, #10]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 ff95 	bl	8006fe4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d19e      	bne.n	8006002 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	6a39      	ldr	r1, [r7, #32]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fe68 	bl	8006d9e <I2C_WaitOnSTOPFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e01a      	b.n	800610e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2220      	movs	r2, #32
 80060de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6859      	ldr	r1, [r3, #4]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b0c      	ldr	r3, [pc, #48]	@ (800611c <HAL_I2C_Master_Transmit+0x22c>)
 80060ec:	400b      	ands	r3, r1
 80060ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e000      	b.n	800610e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	80002000 	.word	0x80002000
 800611c:	fe00e800 	.word	0xfe00e800

08006120 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
  }
}
 800614c:	bf00      	nop
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006184:	f043 0201 	orr.w	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006194:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00f      	beq.n	80061c0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	f043 0208 	orr.w	r2, r3, #8
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00f      	beq.n	80061ea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d8:	f043 0202 	orr.w	r2, r3, #2
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f003 030b 	and.w	r3, r3, #11
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fbd5 	bl	80069ac <I2C_ITError>
  }
}
 8006202:	bf00      	nop
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	70fb      	strb	r3, [r7, #3]
 800623e:	4613      	mov	r3, r2
 8006240:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <I2C_Slave_ISR_IT+0x24>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e0e2      	b.n	8006474 <I2C_Slave_ISR_IT+0x1ea>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d009      	beq.n	80062d4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80062ca:	6939      	ldr	r1, [r7, #16]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f9b5 	bl	800663c <I2C_ITSlaveCplt>
 80062d2:	e0ca      	b.n	800646a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d04b      	beq.n	8006376 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d046      	beq.n	8006376 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d128      	bne.n	8006344 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b28      	cmp	r3, #40	@ 0x28
 80062fc:	d108      	bne.n	8006310 <I2C_Slave_ISR_IT+0x86>
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006304:	d104      	bne.n	8006310 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006306:	6939      	ldr	r1, [r7, #16]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fafb 	bl	8006904 <I2C_ITListenCplt>
 800630e:	e031      	b.n	8006374 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b29      	cmp	r3, #41	@ 0x29
 800631a:	d10e      	bne.n	800633a <I2C_Slave_ISR_IT+0xb0>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006322:	d00a      	beq.n	800633a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2210      	movs	r2, #16
 800632a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fc54 	bl	8006bda <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f926 	bl	8006584 <I2C_ITSlaveSeqCplt>
 8006338:	e01c      	b.n	8006374 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2210      	movs	r2, #16
 8006340:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006342:	e08f      	b.n	8006464 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2210      	movs	r2, #16
 800634a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006350:	f043 0204 	orr.w	r2, r3, #4
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <I2C_Slave_ISR_IT+0xdc>
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006364:	d17e      	bne.n	8006464 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636a:	4619      	mov	r1, r3
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fb1d 	bl	80069ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006372:	e077      	b.n	8006464 <I2C_Slave_ISR_IT+0x1da>
 8006374:	e076      	b.n	8006464 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d02f      	beq.n	80063e0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006386:	2b00      	cmp	r3, #0
 8006388:	d02a      	beq.n	80063e0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d018      	beq.n	80063c6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d14b      	bne.n	8006468 <I2C_Slave_ISR_IT+0x1de>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063d6:	d047      	beq.n	8006468 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f8d3 	bl	8006584 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80063de:	e043      	b.n	8006468 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d009      	beq.n	80063fe <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80063f4:	6939      	ldr	r1, [r7, #16]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 f840 	bl	800647c <I2C_ITAddrCplt>
 80063fc:	e035      	b.n	800646a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d030      	beq.n	800646a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800640e:	2b00      	cmp	r3, #0
 8006410:	d02b      	beq.n	800646a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d018      	beq.n	800644e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800644c:	e00d      	b.n	800646a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006454:	d002      	beq.n	800645c <I2C_Slave_ISR_IT+0x1d2>
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f891 	bl	8006584 <I2C_ITSlaveSeqCplt>
 8006462:	e002      	b.n	800646a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006468:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006492:	2b28      	cmp	r3, #40	@ 0x28
 8006494:	d16a      	bne.n	800656c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	0c1b      	lsrs	r3, r3, #16
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	0c1b      	lsrs	r3, r3, #16
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80064b4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80064d0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d138      	bne.n	800654c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80064da:	897b      	ldrh	r3, [r7, #10]
 80064dc:	09db      	lsrs	r3, r3, #7
 80064de:	b29a      	uxth	r2, r3
 80064e0:	89bb      	ldrh	r3, [r7, #12]
 80064e2:	4053      	eors	r3, r2
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f003 0306 	and.w	r3, r3, #6
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d11c      	bne.n	8006528 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80064ee:	897b      	ldrh	r3, [r7, #10]
 80064f0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006500:	2b02      	cmp	r3, #2
 8006502:	d13b      	bne.n	800657c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2208      	movs	r2, #8
 8006510:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800651a:	89ba      	ldrh	r2, [r7, #12]
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff fe86 	bl	8006232 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006526:	e029      	b.n	800657c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006528:	893b      	ldrh	r3, [r7, #8]
 800652a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800652c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fd89 	bl	8007048 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800653e:	89ba      	ldrh	r2, [r7, #12]
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fe74 	bl	8006232 <HAL_I2C_AddrCallback>
}
 800654a:	e017      	b.n	800657c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800654c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fd79 	bl	8007048 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800655e:	89ba      	ldrh	r2, [r7, #12]
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fe64 	bl	8006232 <HAL_I2C_AddrCallback>
}
 800656a:	e007      	b.n	800657c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e00c      	b.n	80065d2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b29      	cmp	r3, #41	@ 0x29
 80065dc:	d112      	bne.n	8006604 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2228      	movs	r2, #40	@ 0x28
 80065e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2221      	movs	r2, #33	@ 0x21
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80065ec:	2101      	movs	r1, #1
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fd2a 	bl	8007048 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fe04 	bl	800620a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006602:	e017      	b.n	8006634 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b2a      	cmp	r3, #42	@ 0x2a
 800660e:	d111      	bne.n	8006634 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2228      	movs	r2, #40	@ 0x28
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2222      	movs	r2, #34	@ 0x22
 800661c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800661e:	2102      	movs	r1, #2
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fd11 	bl	8007048 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fdf5 	bl	800621e <HAL_I2C_SlaveRxCpltCallback>
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006656:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2220      	movs	r2, #32
 8006666:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	2b21      	cmp	r3, #33	@ 0x21
 800666c:	d002      	beq.n	8006674 <I2C_ITSlaveCplt+0x38>
 800666e:	7afb      	ldrb	r3, [r7, #11]
 8006670:	2b29      	cmp	r3, #41	@ 0x29
 8006672:	d108      	bne.n	8006686 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006674:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fce5 	bl	8007048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2221      	movs	r2, #33	@ 0x21
 8006682:	631a      	str	r2, [r3, #48]	@ 0x30
 8006684:	e019      	b.n	80066ba <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006686:	7afb      	ldrb	r3, [r7, #11]
 8006688:	2b22      	cmp	r3, #34	@ 0x22
 800668a:	d002      	beq.n	8006692 <I2C_ITSlaveCplt+0x56>
 800668c:	7afb      	ldrb	r3, [r7, #11]
 800668e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006690:	d108      	bne.n	80066a4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006692:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fcd6 	bl	8007048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2222      	movs	r2, #34	@ 0x22
 80066a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80066a2:	e00a      	b.n	80066ba <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	2b28      	cmp	r3, #40	@ 0x28
 80066a8:	d107      	bne.n	80066ba <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80066aa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fcca 	bl	8007048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066c8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6859      	ldr	r1, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b89      	ldr	r3, [pc, #548]	@ (80068fc <I2C_ITSlaveCplt+0x2c0>)
 80066d6:	400b      	ands	r3, r1
 80066d8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa7d 	bl	8006bda <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d013      	beq.n	8006712 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01f      	beq.n	8006742 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	b29a      	uxth	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006710:	e017      	b.n	8006742 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d012      	beq.n	8006742 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800672a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d020      	beq.n	800678e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0304 	bic.w	r3, r3, #4
 8006752:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00c      	beq.n	800678e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679c:	f043 0204 	orr.w	r2, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d049      	beq.n	8006842 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d044      	beq.n	8006842 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d128      	bne.n	8006814 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b28      	cmp	r3, #40	@ 0x28
 80067cc:	d108      	bne.n	80067e0 <I2C_ITSlaveCplt+0x1a4>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067d4:	d104      	bne.n	80067e0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80067d6:	6979      	ldr	r1, [r7, #20]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f893 	bl	8006904 <I2C_ITListenCplt>
 80067de:	e030      	b.n	8006842 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b29      	cmp	r3, #41	@ 0x29
 80067ea:	d10e      	bne.n	800680a <I2C_ITSlaveCplt+0x1ce>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067f2:	d00a      	beq.n	800680a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2210      	movs	r2, #16
 80067fa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f9ec 	bl	8006bda <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff febe 	bl	8006584 <I2C_ITSlaveSeqCplt>
 8006808:	e01b      	b.n	8006842 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2210      	movs	r2, #16
 8006810:	61da      	str	r2, [r3, #28]
 8006812:	e016      	b.n	8006842 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2210      	movs	r2, #16
 800681a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006820:	f043 0204 	orr.w	r2, r3, #4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <I2C_ITSlaveCplt+0x1fa>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006834:	d105      	bne.n	8006842 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f8b5 	bl	80069ac <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f8a4 	bl	80069ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b28      	cmp	r3, #40	@ 0x28
 800686e:	d141      	bne.n	80068f4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006870:	6979      	ldr	r1, [r7, #20]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f846 	bl	8006904 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006878:	e03c      	b.n	80068f4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006882:	d014      	beq.n	80068ae <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff fe7d 	bl	8006584 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1c      	ldr	r2, [pc, #112]	@ (8006900 <I2C_ITSlaveCplt+0x2c4>)
 800688e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fcd1 	bl	800624e <HAL_I2C_ListenCpltCallback>
}
 80068ac:	e022      	b.n	80068f4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b22      	cmp	r3, #34	@ 0x22
 80068b8:	d10e      	bne.n	80068d8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff fca4 	bl	800621e <HAL_I2C_SlaveRxCpltCallback>
}
 80068d6:	e00d      	b.n	80068f4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff fc8b 	bl	800620a <HAL_I2C_SlaveTxCpltCallback>
}
 80068f4:	bf00      	nop
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	fe00e800 	.word	0xfe00e800
 8006900:	ffff0000 	.word	0xffff0000

08006904 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a25      	ldr	r2, [pc, #148]	@ (80069a8 <I2C_ITListenCplt+0xa4>)
 8006912:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d022      	beq.n	8006980 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006956:	2b00      	cmp	r3, #0
 8006958:	d012      	beq.n	8006980 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006978:	f043 0204 	orr.w	r2, r3, #4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006980:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fb5f 	bl	8007048 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2210      	movs	r2, #16
 8006990:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff fc57 	bl	800624e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	ffff0000 	.word	0xffff0000

080069ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069bc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a6d      	ldr	r2, [pc, #436]	@ (8006b80 <I2C_ITError+0x1d4>)
 80069ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b28      	cmp	r3, #40	@ 0x28
 80069e2:	d005      	beq.n	80069f0 <I2C_ITError+0x44>
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b29      	cmp	r3, #41	@ 0x29
 80069e8:	d002      	beq.n	80069f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80069ee:	d10b      	bne.n	8006a08 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80069f0:	2103      	movs	r1, #3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fb28 	bl	8007048 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2228      	movs	r2, #40	@ 0x28
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a60      	ldr	r2, [pc, #384]	@ (8006b84 <I2C_ITError+0x1d8>)
 8006a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8006a06:	e030      	b.n	8006a6a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a08:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fb1b 	bl	8007048 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f8e1 	bl	8006bda <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b60      	cmp	r3, #96	@ 0x60
 8006a22:	d01f      	beq.n	8006a64 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d114      	bne.n	8006a64 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f003 0310 	and.w	r3, r3, #16
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d109      	bne.n	8006a5c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2210      	movs	r2, #16
 8006a4e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a54:	f043 0204 	orr.w	r2, r3, #4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2220      	movs	r2, #32
 8006a62:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d039      	beq.n	8006aec <I2C_ITError+0x140>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b11      	cmp	r3, #17
 8006a7c:	d002      	beq.n	8006a84 <I2C_ITError+0xd8>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b21      	cmp	r3, #33	@ 0x21
 8006a82:	d133      	bne.n	8006aec <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a92:	d107      	bne.n	8006aa4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006aa2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fada 	bl	8005062 <HAL_DMA_GetState>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d017      	beq.n	8006ae4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab8:	4a33      	ldr	r2, [pc, #204]	@ (8006b88 <I2C_ITError+0x1dc>)
 8006aba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe f9b4 	bl	8004e36 <HAL_DMA_Abort_IT>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d04d      	beq.n	8006b70 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ae2:	e045      	b.n	8006b70 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f851 	bl	8006b8c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006aea:	e041      	b.n	8006b70 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d039      	beq.n	8006b68 <I2C_ITError+0x1bc>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b12      	cmp	r3, #18
 8006af8:	d002      	beq.n	8006b00 <I2C_ITError+0x154>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b22      	cmp	r3, #34	@ 0x22
 8006afe:	d133      	bne.n	8006b68 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b0e:	d107      	bne.n	8006b20 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe fa9c 	bl	8005062 <HAL_DMA_GetState>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d017      	beq.n	8006b60 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b34:	4a14      	ldr	r2, [pc, #80]	@ (8006b88 <I2C_ITError+0x1dc>)
 8006b36:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fe f976 	bl	8004e36 <HAL_DMA_Abort_IT>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d011      	beq.n	8006b74 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b5e:	e009      	b.n	8006b74 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f813 	bl	8006b8c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b66:	e005      	b.n	8006b74 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f80f 	bl	8006b8c <I2C_TreatErrorCallback>
  }
}
 8006b6e:	e002      	b.n	8006b76 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b70:	bf00      	nop
 8006b72:	e000      	b.n	8006b76 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b74:	bf00      	nop
}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	ffff0000 	.word	0xffff0000
 8006b84:	0800628b 	.word	0x0800628b
 8006b88:	08006c23 	.word	0x08006c23

08006b8c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b60      	cmp	r3, #96	@ 0x60
 8006b9e:	d10e      	bne.n	8006bbe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff fb5d 	bl	8006276 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006bbc:	e009      	b.n	8006bd2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff fb48 	bl	8006262 <HAL_I2C_ErrorCallback>
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d103      	bne.n	8006bf8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d007      	beq.n	8006c16 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	619a      	str	r2, [r3, #24]
  }
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff ff9b 	bl	8006b8c <I2C_TreatErrorCallback>
}
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c6e:	e03b      	b.n	8006ce8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f8d5 	bl	8006e24 <I2C_IsErrorOccurred>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e041      	b.n	8006d08 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	d02d      	beq.n	8006ce8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8c:	f7fb ff96 	bl	8002bbc <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d302      	bcc.n	8006ca2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d122      	bne.n	8006ce8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699a      	ldr	r2, [r3, #24]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4013      	ands	r3, r2
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	bf0c      	ite	eq
 8006cb2:	2301      	moveq	r3, #1
 8006cb4:	2300      	movne	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d113      	bne.n	8006ce8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc4:	f043 0220 	orr.w	r2, r3, #32
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e00f      	b.n	8006d08 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699a      	ldr	r2, [r3, #24]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2301      	moveq	r3, #1
 8006cfa:	2300      	movne	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d0b4      	beq.n	8006c70 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d1c:	e033      	b.n	8006d86 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 f87e 	bl	8006e24 <I2C_IsErrorOccurred>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e031      	b.n	8006d96 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d38:	d025      	beq.n	8006d86 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3a:	f7fb ff3f 	bl	8002bbc <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d302      	bcc.n	8006d50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11a      	bne.n	8006d86 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d013      	beq.n	8006d86 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e007      	b.n	8006d96 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d1c4      	bne.n	8006d1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006daa:	e02f      	b.n	8006e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f837 	bl	8006e24 <I2C_IsErrorOccurred>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e02d      	b.n	8006e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc0:	f7fb fefc 	bl	8002bbc <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d302      	bcc.n	8006dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d11a      	bne.n	8006e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d013      	beq.n	8006e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de8:	f043 0220 	orr.w	r2, r3, #32
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e007      	b.n	8006e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d1c8      	bne.n	8006dac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08a      	sub	sp, #40	@ 0x28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d068      	beq.n	8006f22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2210      	movs	r2, #16
 8006e56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e58:	e049      	b.n	8006eee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e60:	d045      	beq.n	8006eee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e62:	f7fb feab 	bl	8002bbc <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d302      	bcc.n	8006e78 <I2C_IsErrorOccurred+0x54>
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d13a      	bne.n	8006eee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e9a:	d121      	bne.n	8006ee0 <I2C_IsErrorOccurred+0xbc>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ea2:	d01d      	beq.n	8006ee0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006ea4:	7cfb      	ldrb	r3, [r7, #19]
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	d01a      	beq.n	8006ee0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006eba:	f7fb fe7f 	bl	8002bbc <HAL_GetTick>
 8006ebe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ec0:	e00e      	b.n	8006ee0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ec2:	f7fb fe7b 	bl	8002bbc <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b19      	cmp	r3, #25
 8006ece:	d907      	bls.n	8006ee0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	f043 0320 	orr.w	r3, r3, #32
 8006ed6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006ede:	e006      	b.n	8006eee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b20      	cmp	r3, #32
 8006eec:	d1e9      	bne.n	8006ec2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d003      	beq.n	8006f04 <I2C_IsErrorOccurred+0xe0>
 8006efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0aa      	beq.n	8006e5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2220      	movs	r2, #32
 8006f12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	f043 0304 	orr.w	r3, r3, #4
 8006f1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	f043 0301 	orr.w	r3, r3, #1
 8006f3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	f043 0308 	orr.w	r3, r3, #8
 8006f5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	f043 0302 	orr.w	r3, r3, #2
 8006f7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006f90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01c      	beq.n	8006fd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f7ff fe1e 	bl	8006bda <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6859      	ldr	r1, [r3, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe0 <I2C_IsErrorOccurred+0x1bc>)
 8006faa:	400b      	ands	r3, r1
 8006fac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3728      	adds	r7, #40	@ 0x28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	fe00e800 	.word	0xfe00e800

08006fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	607b      	str	r3, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	817b      	strh	r3, [r7, #10]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ff6:	897b      	ldrh	r3, [r7, #10]
 8006ff8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ffc:	7a7b      	ldrb	r3, [r7, #9]
 8006ffe:	041b      	lsls	r3, r3, #16
 8007000:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007004:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	4313      	orrs	r3, r2
 800700e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007012:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	0d5b      	lsrs	r3, r3, #21
 800701e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007022:	4b08      	ldr	r3, [pc, #32]	@ (8007044 <I2C_TransferConfig+0x60>)
 8007024:	430b      	orrs	r3, r1
 8007026:	43db      	mvns	r3, r3
 8007028:	ea02 0103 	and.w	r1, r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	03ff63ff 	.word	0x03ff63ff

08007048 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007058:	887b      	ldrh	r3, [r7, #2]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00f      	beq.n	8007082 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007068:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007076:	2b28      	cmp	r3, #40	@ 0x28
 8007078:	d003      	beq.n	8007082 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007080:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007082:	887b      	ldrh	r3, [r7, #2]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00f      	beq.n	80070ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007092:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80070a0:	2b28      	cmp	r3, #40	@ 0x28
 80070a2:	d003      	beq.n	80070ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80070aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80070ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da03      	bge.n	80070bc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80070ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80070bc:	887b      	ldrh	r3, [r7, #2]
 80070be:	2b10      	cmp	r3, #16
 80070c0:	d103      	bne.n	80070ca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80070c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80070ca:	887b      	ldrh	r3, [r7, #2]
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d103      	bne.n	80070d8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f043 0320 	orr.w	r3, r3, #32
 80070d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80070d8:	887b      	ldrh	r3, [r7, #2]
 80070da:	2b40      	cmp	r3, #64	@ 0x40
 80070dc:	d103      	bne.n	80070e6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070e4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6819      	ldr	r1, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	43da      	mvns	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	400a      	ands	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]
}
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b20      	cmp	r3, #32
 8007118:	d138      	bne.n	800718c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007124:	2302      	movs	r3, #2
 8007126:	e032      	b.n	800718e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2224      	movs	r2, #36	@ 0x24
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0201 	bic.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007156:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6819      	ldr	r1, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	e000      	b.n	800718e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
  }
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d139      	bne.n	8007224 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e033      	b.n	8007226 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2224      	movs	r2, #36	@ 0x24
 80071ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80071ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	021b      	lsls	r3, r3, #8
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	e000      	b.n	8007226 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007224:	2302      	movs	r3, #2
  }
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d141      	bne.n	80072c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007242:	4b4b      	ldr	r3, [pc, #300]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800724a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800724e:	d131      	bne.n	80072b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007250:	4b47      	ldr	r3, [pc, #284]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007256:	4a46      	ldr	r2, [pc, #280]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800725c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007260:	4b43      	ldr	r3, [pc, #268]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007268:	4a41      	ldr	r2, [pc, #260]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800726a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800726e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007270:	4b40      	ldr	r3, [pc, #256]	@ (8007374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2232      	movs	r2, #50	@ 0x32
 8007276:	fb02 f303 	mul.w	r3, r2, r3
 800727a:	4a3f      	ldr	r2, [pc, #252]	@ (8007378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800727c:	fba2 2303 	umull	r2, r3, r2, r3
 8007280:	0c9b      	lsrs	r3, r3, #18
 8007282:	3301      	adds	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007286:	e002      	b.n	800728e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3b01      	subs	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800728e:	4b38      	ldr	r3, [pc, #224]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800729a:	d102      	bne.n	80072a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f2      	bne.n	8007288 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072a2:	4b33      	ldr	r3, [pc, #204]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ae:	d158      	bne.n	8007362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e057      	b.n	8007364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80072c4:	e04d      	b.n	8007362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072cc:	d141      	bne.n	8007352 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072ce:	4b28      	ldr	r3, [pc, #160]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072da:	d131      	bne.n	8007340 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072dc:	4b24      	ldr	r3, [pc, #144]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072e2:	4a23      	ldr	r2, [pc, #140]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072ec:	4b20      	ldr	r3, [pc, #128]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2232      	movs	r2, #50	@ 0x32
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	4a1c      	ldr	r2, [pc, #112]	@ (8007378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007308:	fba2 2303 	umull	r2, r3, r2, r3
 800730c:	0c9b      	lsrs	r3, r3, #18
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007312:	e002      	b.n	800731a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3b01      	subs	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800731a:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007326:	d102      	bne.n	800732e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f2      	bne.n	8007314 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800732e:	4b10      	ldr	r3, [pc, #64]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733a:	d112      	bne.n	8007362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e011      	b.n	8007364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007340:	4b0b      	ldr	r3, [pc, #44]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007346:	4a0a      	ldr	r2, [pc, #40]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800734c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007350:	e007      	b.n	8007362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007352:	4b07      	ldr	r3, [pc, #28]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800735a:	4a05      	ldr	r2, [pc, #20]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800735c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007360:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40007000 	.word	0x40007000
 8007374:	20000000 	.word	0x20000000
 8007378:	431bde83 	.word	0x431bde83

0800737c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007380:	4b05      	ldr	r3, [pc, #20]	@ (8007398 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4a04      	ldr	r2, [pc, #16]	@ (8007398 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800738a:	6093      	str	r3, [r2, #8]
}
 800738c:	bf00      	nop
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40007000 	.word	0x40007000

0800739c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e2fe      	b.n	80079ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d075      	beq.n	80074a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073ba:	4b97      	ldr	r3, [pc, #604]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 030c 	and.w	r3, r3, #12
 80073c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073c4:	4b94      	ldr	r3, [pc, #592]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2b0c      	cmp	r3, #12
 80073d2:	d102      	bne.n	80073da <HAL_RCC_OscConfig+0x3e>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d002      	beq.n	80073e0 <HAL_RCC_OscConfig+0x44>
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d10b      	bne.n	80073f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e0:	4b8d      	ldr	r3, [pc, #564]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d05b      	beq.n	80074a4 <HAL_RCC_OscConfig+0x108>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d157      	bne.n	80074a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e2d9      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007400:	d106      	bne.n	8007410 <HAL_RCC_OscConfig+0x74>
 8007402:	4b85      	ldr	r3, [pc, #532]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a84      	ldr	r2, [pc, #528]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	e01d      	b.n	800744c <HAL_RCC_OscConfig+0xb0>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007418:	d10c      	bne.n	8007434 <HAL_RCC_OscConfig+0x98>
 800741a:	4b7f      	ldr	r3, [pc, #508]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a7e      	ldr	r2, [pc, #504]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	4b7c      	ldr	r3, [pc, #496]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a7b      	ldr	r2, [pc, #492]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 800742c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	e00b      	b.n	800744c <HAL_RCC_OscConfig+0xb0>
 8007434:	4b78      	ldr	r3, [pc, #480]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a77      	ldr	r2, [pc, #476]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 800743a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	4b75      	ldr	r3, [pc, #468]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a74      	ldr	r2, [pc, #464]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800744a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d013      	beq.n	800747c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007454:	f7fb fbb2 	bl	8002bbc <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800745a:	e008      	b.n	800746e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800745c:	f7fb fbae 	bl	8002bbc <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b64      	cmp	r3, #100	@ 0x64
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e29e      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800746e:	4b6a      	ldr	r3, [pc, #424]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0f0      	beq.n	800745c <HAL_RCC_OscConfig+0xc0>
 800747a:	e014      	b.n	80074a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747c:	f7fb fb9e 	bl	8002bbc <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007484:	f7fb fb9a 	bl	8002bbc <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b64      	cmp	r3, #100	@ 0x64
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e28a      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007496:	4b60      	ldr	r3, [pc, #384]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <HAL_RCC_OscConfig+0xe8>
 80074a2:	e000      	b.n	80074a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d075      	beq.n	800759e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074b2:	4b59      	ldr	r3, [pc, #356]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 030c 	and.w	r3, r3, #12
 80074ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074bc:	4b56      	ldr	r3, [pc, #344]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b0c      	cmp	r3, #12
 80074ca:	d102      	bne.n	80074d2 <HAL_RCC_OscConfig+0x136>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d002      	beq.n	80074d8 <HAL_RCC_OscConfig+0x13c>
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d11f      	bne.n	8007518 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074d8:	4b4f      	ldr	r3, [pc, #316]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <HAL_RCC_OscConfig+0x154>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e25d      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f0:	4b49      	ldr	r3, [pc, #292]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	061b      	lsls	r3, r3, #24
 80074fe:	4946      	ldr	r1, [pc, #280]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007500:	4313      	orrs	r3, r2
 8007502:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007504:	4b45      	ldr	r3, [pc, #276]	@ (800761c <HAL_RCC_OscConfig+0x280>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4618      	mov	r0, r3
 800750a:	f7fa fa3d 	bl	8001988 <HAL_InitTick>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d043      	beq.n	800759c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e249      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d023      	beq.n	8007568 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007520:	4b3d      	ldr	r3, [pc, #244]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a3c      	ldr	r2, [pc, #240]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800752a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800752c:	f7fb fb46 	bl	8002bbc <HAL_GetTick>
 8007530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007532:	e008      	b.n	8007546 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007534:	f7fb fb42 	bl	8002bbc <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d901      	bls.n	8007546 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e232      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007546:	4b34      	ldr	r3, [pc, #208]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f0      	beq.n	8007534 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007552:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	061b      	lsls	r3, r3, #24
 8007560:	492d      	ldr	r1, [pc, #180]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007562:	4313      	orrs	r3, r2
 8007564:	604b      	str	r3, [r1, #4]
 8007566:	e01a      	b.n	800759e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007568:	4b2b      	ldr	r3, [pc, #172]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a2a      	ldr	r2, [pc, #168]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 800756e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007574:	f7fb fb22 	bl	8002bbc <HAL_GetTick>
 8007578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800757a:	e008      	b.n	800758e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800757c:	f7fb fb1e 	bl	8002bbc <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e20e      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800758e:	4b22      	ldr	r3, [pc, #136]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f0      	bne.n	800757c <HAL_RCC_OscConfig+0x1e0>
 800759a:	e000      	b.n	800759e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800759c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d041      	beq.n	800762e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d01c      	beq.n	80075ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075b2:	4b19      	ldr	r3, [pc, #100]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80075b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075b8:	4a17      	ldr	r2, [pc, #92]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80075ba:	f043 0301 	orr.w	r3, r3, #1
 80075be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c2:	f7fb fafb 	bl	8002bbc <HAL_GetTick>
 80075c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075c8:	e008      	b.n	80075dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ca:	f7fb faf7 	bl	8002bbc <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e1e7      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80075de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0ef      	beq.n	80075ca <HAL_RCC_OscConfig+0x22e>
 80075ea:	e020      	b.n	800762e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80075ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075f2:	4a09      	ldr	r2, [pc, #36]	@ (8007618 <HAL_RCC_OscConfig+0x27c>)
 80075f4:	f023 0301 	bic.w	r3, r3, #1
 80075f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fc:	f7fb fade 	bl	8002bbc <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007602:	e00d      	b.n	8007620 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007604:	f7fb fada 	bl	8002bbc <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d906      	bls.n	8007620 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e1ca      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
 8007616:	bf00      	nop
 8007618:	40021000 	.word	0x40021000
 800761c:	20000184 	.word	0x20000184
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007620:	4b8c      	ldr	r3, [pc, #560]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 8007622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1ea      	bne.n	8007604 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 80a6 	beq.w	8007788 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800763c:	2300      	movs	r3, #0
 800763e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007640:	4b84      	ldr	r3, [pc, #528]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 8007642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_RCC_OscConfig+0x2b4>
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <HAL_RCC_OscConfig+0x2b6>
 8007650:	2300      	movs	r3, #0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00d      	beq.n	8007672 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007656:	4b7f      	ldr	r3, [pc, #508]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 8007658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765a:	4a7e      	ldr	r2, [pc, #504]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 800765c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007660:	6593      	str	r3, [r2, #88]	@ 0x58
 8007662:	4b7c      	ldr	r3, [pc, #496]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 8007664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800766e:	2301      	movs	r3, #1
 8007670:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007672:	4b79      	ldr	r3, [pc, #484]	@ (8007858 <HAL_RCC_OscConfig+0x4bc>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800767a:	2b00      	cmp	r3, #0
 800767c:	d118      	bne.n	80076b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800767e:	4b76      	ldr	r3, [pc, #472]	@ (8007858 <HAL_RCC_OscConfig+0x4bc>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a75      	ldr	r2, [pc, #468]	@ (8007858 <HAL_RCC_OscConfig+0x4bc>)
 8007684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800768a:	f7fb fa97 	bl	8002bbc <HAL_GetTick>
 800768e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007690:	e008      	b.n	80076a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007692:	f7fb fa93 	bl	8002bbc <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e183      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076a4:	4b6c      	ldr	r3, [pc, #432]	@ (8007858 <HAL_RCC_OscConfig+0x4bc>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0f0      	beq.n	8007692 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d108      	bne.n	80076ca <HAL_RCC_OscConfig+0x32e>
 80076b8:	4b66      	ldr	r3, [pc, #408]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80076ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076be:	4a65      	ldr	r2, [pc, #404]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80076c0:	f043 0301 	orr.w	r3, r3, #1
 80076c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076c8:	e024      	b.n	8007714 <HAL_RCC_OscConfig+0x378>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	d110      	bne.n	80076f4 <HAL_RCC_OscConfig+0x358>
 80076d2:	4b60      	ldr	r3, [pc, #384]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80076d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d8:	4a5e      	ldr	r2, [pc, #376]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80076da:	f043 0304 	orr.w	r3, r3, #4
 80076de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80076e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e8:	4a5a      	ldr	r2, [pc, #360]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80076ea:	f043 0301 	orr.w	r3, r3, #1
 80076ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076f2:	e00f      	b.n	8007714 <HAL_RCC_OscConfig+0x378>
 80076f4:	4b57      	ldr	r3, [pc, #348]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80076f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076fa:	4a56      	ldr	r2, [pc, #344]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80076fc:	f023 0301 	bic.w	r3, r3, #1
 8007700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007704:	4b53      	ldr	r3, [pc, #332]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770a:	4a52      	ldr	r2, [pc, #328]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 800770c:	f023 0304 	bic.w	r3, r3, #4
 8007710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d016      	beq.n	800774a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800771c:	f7fb fa4e 	bl	8002bbc <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007722:	e00a      	b.n	800773a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007724:	f7fb fa4a 	bl	8002bbc <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007732:	4293      	cmp	r3, r2
 8007734:	d901      	bls.n	800773a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e138      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800773a:	4b46      	ldr	r3, [pc, #280]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0ed      	beq.n	8007724 <HAL_RCC_OscConfig+0x388>
 8007748:	e015      	b.n	8007776 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774a:	f7fb fa37 	bl	8002bbc <HAL_GetTick>
 800774e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007750:	e00a      	b.n	8007768 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007752:	f7fb fa33 	bl	8002bbc <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007760:	4293      	cmp	r3, r2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e121      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007768:	4b3a      	ldr	r3, [pc, #232]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 800776a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1ed      	bne.n	8007752 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007776:	7ffb      	ldrb	r3, [r7, #31]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d105      	bne.n	8007788 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800777c:	4b35      	ldr	r3, [pc, #212]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 800777e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007780:	4a34      	ldr	r2, [pc, #208]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 8007782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007786:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0320 	and.w	r3, r3, #32
 8007790:	2b00      	cmp	r3, #0
 8007792:	d03c      	beq.n	800780e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01c      	beq.n	80077d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800779c:	4b2d      	ldr	r3, [pc, #180]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 800779e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077a2:	4a2c      	ldr	r2, [pc, #176]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80077a4:	f043 0301 	orr.w	r3, r3, #1
 80077a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ac:	f7fb fa06 	bl	8002bbc <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077b4:	f7fb fa02 	bl	8002bbc <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e0f2      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077c6:	4b23      	ldr	r3, [pc, #140]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80077c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0ef      	beq.n	80077b4 <HAL_RCC_OscConfig+0x418>
 80077d4:	e01b      	b.n	800780e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80077d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 80077de:	f023 0301 	bic.w	r3, r3, #1
 80077e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e6:	f7fb f9e9 	bl	8002bbc <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ee:	f7fb f9e5 	bl	8002bbc <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e0d5      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007800:	4b14      	ldr	r3, [pc, #80]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 8007802:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1ef      	bne.n	80077ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80c9 	beq.w	80079aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007818:	4b0e      	ldr	r3, [pc, #56]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 030c 	and.w	r3, r3, #12
 8007820:	2b0c      	cmp	r3, #12
 8007822:	f000 8083 	beq.w	800792c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	2b02      	cmp	r3, #2
 800782c:	d15e      	bne.n	80078ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800782e:	4b09      	ldr	r3, [pc, #36]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a08      	ldr	r2, [pc, #32]	@ (8007854 <HAL_RCC_OscConfig+0x4b8>)
 8007834:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783a:	f7fb f9bf 	bl	8002bbc <HAL_GetTick>
 800783e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007840:	e00c      	b.n	800785c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007842:	f7fb f9bb 	bl	8002bbc <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d905      	bls.n	800785c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e0ab      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
 8007854:	40021000 	.word	0x40021000
 8007858:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800785c:	4b55      	ldr	r3, [pc, #340]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1ec      	bne.n	8007842 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007868:	4b52      	ldr	r3, [pc, #328]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	4b52      	ldr	r3, [pc, #328]	@ (80079b8 <HAL_RCC_OscConfig+0x61c>)
 800786e:	4013      	ands	r3, r2
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6a11      	ldr	r1, [r2, #32]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007878:	3a01      	subs	r2, #1
 800787a:	0112      	lsls	r2, r2, #4
 800787c:	4311      	orrs	r1, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007882:	0212      	lsls	r2, r2, #8
 8007884:	4311      	orrs	r1, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800788a:	0852      	lsrs	r2, r2, #1
 800788c:	3a01      	subs	r2, #1
 800788e:	0552      	lsls	r2, r2, #21
 8007890:	4311      	orrs	r1, r2
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007896:	0852      	lsrs	r2, r2, #1
 8007898:	3a01      	subs	r2, #1
 800789a:	0652      	lsls	r2, r2, #25
 800789c:	4311      	orrs	r1, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80078a2:	06d2      	lsls	r2, r2, #27
 80078a4:	430a      	orrs	r2, r1
 80078a6:	4943      	ldr	r1, [pc, #268]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078ac:	4b41      	ldr	r3, [pc, #260]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a40      	ldr	r2, [pc, #256]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 80078b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078b8:	4b3e      	ldr	r3, [pc, #248]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	4a3d      	ldr	r2, [pc, #244]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 80078be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c4:	f7fb f97a 	bl	8002bbc <HAL_GetTick>
 80078c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078ca:	e008      	b.n	80078de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078cc:	f7fb f976 	bl	8002bbc <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e066      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078de:	4b35      	ldr	r3, [pc, #212]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0f0      	beq.n	80078cc <HAL_RCC_OscConfig+0x530>
 80078ea:	e05e      	b.n	80079aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ec:	4b31      	ldr	r3, [pc, #196]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a30      	ldr	r2, [pc, #192]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 80078f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f8:	f7fb f960 	bl	8002bbc <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007900:	f7fb f95c 	bl	8002bbc <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e04c      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007912:	4b28      	ldr	r3, [pc, #160]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1f0      	bne.n	8007900 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800791e:	4b25      	ldr	r3, [pc, #148]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	4924      	ldr	r1, [pc, #144]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 8007924:	4b25      	ldr	r3, [pc, #148]	@ (80079bc <HAL_RCC_OscConfig+0x620>)
 8007926:	4013      	ands	r3, r2
 8007928:	60cb      	str	r3, [r1, #12]
 800792a:	e03e      	b.n	80079aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e039      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007938:	4b1e      	ldr	r3, [pc, #120]	@ (80079b4 <HAL_RCC_OscConfig+0x618>)
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f003 0203 	and.w	r2, r3, #3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	429a      	cmp	r2, r3
 800794a:	d12c      	bne.n	80079a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007956:	3b01      	subs	r3, #1
 8007958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800795a:	429a      	cmp	r2, r3
 800795c:	d123      	bne.n	80079a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007968:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800796a:	429a      	cmp	r2, r3
 800796c:	d11b      	bne.n	80079a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007978:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800797a:	429a      	cmp	r2, r3
 800797c:	d113      	bne.n	80079a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007988:	085b      	lsrs	r3, r3, #1
 800798a:	3b01      	subs	r3, #1
 800798c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800798e:	429a      	cmp	r2, r3
 8007990:	d109      	bne.n	80079a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800799c:	085b      	lsrs	r3, r3, #1
 800799e:	3b01      	subs	r3, #1
 80079a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d001      	beq.n	80079aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40021000 	.word	0x40021000
 80079b8:	019f800c 	.word	0x019f800c
 80079bc:	feeefffc 	.word	0xfeeefffc

080079c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80079ca:	2300      	movs	r3, #0
 80079cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e11e      	b.n	8007c16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079d8:	4b91      	ldr	r3, [pc, #580]	@ (8007c20 <HAL_RCC_ClockConfig+0x260>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d910      	bls.n	8007a08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e6:	4b8e      	ldr	r3, [pc, #568]	@ (8007c20 <HAL_RCC_ClockConfig+0x260>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f023 020f 	bic.w	r2, r3, #15
 80079ee:	498c      	ldr	r1, [pc, #560]	@ (8007c20 <HAL_RCC_ClockConfig+0x260>)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f6:	4b8a      	ldr	r3, [pc, #552]	@ (8007c20 <HAL_RCC_ClockConfig+0x260>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d001      	beq.n	8007a08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e106      	b.n	8007c16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d073      	beq.n	8007afc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d129      	bne.n	8007a70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a1c:	4b81      	ldr	r3, [pc, #516]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e0f4      	b.n	8007c16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007a2c:	f000 f9d0 	bl	8007dd0 <RCC_GetSysClockFreqFromPLLSource>
 8007a30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	4a7c      	ldr	r2, [pc, #496]	@ (8007c28 <HAL_RCC_ClockConfig+0x268>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d93f      	bls.n	8007aba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d009      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d033      	beq.n	8007aba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d12f      	bne.n	8007aba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a5a:	4b72      	ldr	r3, [pc, #456]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a62:	4a70      	ldr	r2, [pc, #448]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a6a:	2380      	movs	r3, #128	@ 0x80
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	e024      	b.n	8007aba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d107      	bne.n	8007a88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a78:	4b6a      	ldr	r3, [pc, #424]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d109      	bne.n	8007a98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e0c6      	b.n	8007c16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a88:	4b66      	ldr	r3, [pc, #408]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e0be      	b.n	8007c16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007a98:	f000 f8ce 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8007a9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	4a61      	ldr	r2, [pc, #388]	@ (8007c28 <HAL_RCC_ClockConfig+0x268>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d909      	bls.n	8007aba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aae:	4a5d      	ldr	r2, [pc, #372]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007ab6:	2380      	movs	r3, #128	@ 0x80
 8007ab8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007aba:	4b5a      	ldr	r3, [pc, #360]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f023 0203 	bic.w	r2, r3, #3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	4957      	ldr	r1, [pc, #348]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007acc:	f7fb f876 	bl	8002bbc <HAL_GetTick>
 8007ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad2:	e00a      	b.n	8007aea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ad4:	f7fb f872 	bl	8002bbc <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e095      	b.n	8007c16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aea:	4b4e      	ldr	r3, [pc, #312]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 020c 	and.w	r2, r3, #12
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d1eb      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d023      	beq.n	8007b50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b14:	4b43      	ldr	r3, [pc, #268]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	4a42      	ldr	r2, [pc, #264]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007b1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007b1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d007      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b34:	4a3b      	ldr	r2, [pc, #236]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007b36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007b3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b3c:	4b39      	ldr	r3, [pc, #228]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	4936      	ldr	r1, [pc, #216]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	608b      	str	r3, [r1, #8]
 8007b4e:	e008      	b.n	8007b62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	2b80      	cmp	r3, #128	@ 0x80
 8007b54:	d105      	bne.n	8007b62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b56:	4b33      	ldr	r3, [pc, #204]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	4a32      	ldr	r2, [pc, #200]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007b5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b62:	4b2f      	ldr	r3, [pc, #188]	@ (8007c20 <HAL_RCC_ClockConfig+0x260>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d21d      	bcs.n	8007bac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b70:	4b2b      	ldr	r3, [pc, #172]	@ (8007c20 <HAL_RCC_ClockConfig+0x260>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f023 020f 	bic.w	r2, r3, #15
 8007b78:	4929      	ldr	r1, [pc, #164]	@ (8007c20 <HAL_RCC_ClockConfig+0x260>)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b80:	f7fb f81c 	bl	8002bbc <HAL_GetTick>
 8007b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b86:	e00a      	b.n	8007b9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b88:	f7fb f818 	bl	8002bbc <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e03b      	b.n	8007c16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b9e:	4b20      	ldr	r3, [pc, #128]	@ (8007c20 <HAL_RCC_ClockConfig+0x260>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 030f 	and.w	r3, r3, #15
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d1ed      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d008      	beq.n	8007bca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	4917      	ldr	r1, [pc, #92]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d009      	beq.n	8007bea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bd6:	4b13      	ldr	r3, [pc, #76]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	490f      	ldr	r1, [pc, #60]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bea:	f000 f825 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8007c24 <HAL_RCC_ClockConfig+0x264>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	091b      	lsrs	r3, r3, #4
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	490c      	ldr	r1, [pc, #48]	@ (8007c2c <HAL_RCC_ClockConfig+0x26c>)
 8007bfc:	5ccb      	ldrb	r3, [r1, r3]
 8007bfe:	f003 031f 	and.w	r3, r3, #31
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	4a0a      	ldr	r2, [pc, #40]	@ (8007c30 <HAL_RCC_ClockConfig+0x270>)
 8007c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c34 <HAL_RCC_ClockConfig+0x274>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7f9 feba 	bl	8001988 <HAL_InitTick>
 8007c14:	4603      	mov	r3, r0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	40022000 	.word	0x40022000
 8007c24:	40021000 	.word	0x40021000
 8007c28:	04c4b400 	.word	0x04c4b400
 8007c2c:	0800c524 	.word	0x0800c524
 8007c30:	20000000 	.word	0x20000000
 8007c34:	20000184 	.word	0x20000184

08007c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 030c 	and.w	r3, r3, #12
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d102      	bne.n	8007c50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	e047      	b.n	8007ce0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c50:	4b27      	ldr	r3, [pc, #156]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 030c 	and.w	r3, r3, #12
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d102      	bne.n	8007c62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c5c:	4b26      	ldr	r3, [pc, #152]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	e03e      	b.n	8007ce0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007c62:	4b23      	ldr	r3, [pc, #140]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f003 030c 	and.w	r3, r3, #12
 8007c6a:	2b0c      	cmp	r3, #12
 8007c6c:	d136      	bne.n	8007cdc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c6e:	4b20      	ldr	r3, [pc, #128]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c78:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	091b      	lsrs	r3, r3, #4
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	3301      	adds	r3, #1
 8007c84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d10c      	bne.n	8007ca6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c94:	4a16      	ldr	r2, [pc, #88]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c96:	68d2      	ldr	r2, [r2, #12]
 8007c98:	0a12      	lsrs	r2, r2, #8
 8007c9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ca2:	617b      	str	r3, [r7, #20]
      break;
 8007ca4:	e00c      	b.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ca6:	4a13      	ldr	r2, [pc, #76]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cae:	4a10      	ldr	r2, [pc, #64]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cb0:	68d2      	ldr	r2, [r2, #12]
 8007cb2:	0a12      	lsrs	r2, r2, #8
 8007cb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007cb8:	fb02 f303 	mul.w	r3, r2, r3
 8007cbc:	617b      	str	r3, [r7, #20]
      break;
 8007cbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	0e5b      	lsrs	r3, r3, #25
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	3301      	adds	r3, #1
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	e001      	b.n	8007ce0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007ce0:	693b      	ldr	r3, [r7, #16]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	00f42400 	.word	0x00f42400
 8007cf8:	016e3600 	.word	0x016e3600

08007cfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d00:	4b03      	ldr	r3, [pc, #12]	@ (8007d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d02:	681b      	ldr	r3, [r3, #0]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	20000000 	.word	0x20000000

08007d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d18:	f7ff fff0 	bl	8007cfc <HAL_RCC_GetHCLKFreq>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	4b06      	ldr	r3, [pc, #24]	@ (8007d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	0a1b      	lsrs	r3, r3, #8
 8007d24:	f003 0307 	and.w	r3, r3, #7
 8007d28:	4904      	ldr	r1, [pc, #16]	@ (8007d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d2a:	5ccb      	ldrb	r3, [r1, r3]
 8007d2c:	f003 031f 	and.w	r3, r3, #31
 8007d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	0800c534 	.word	0x0800c534

08007d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d44:	f7ff ffda 	bl	8007cfc <HAL_RCC_GetHCLKFreq>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	4b06      	ldr	r3, [pc, #24]	@ (8007d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	0adb      	lsrs	r3, r3, #11
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	4904      	ldr	r1, [pc, #16]	@ (8007d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d56:	5ccb      	ldrb	r3, [r1, r3]
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	40021000 	.word	0x40021000
 8007d68:	0800c534 	.word	0x0800c534

08007d6c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	220f      	movs	r2, #15
 8007d7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007d7c:	4b12      	ldr	r3, [pc, #72]	@ (8007dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f003 0203 	and.w	r2, r3, #3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007d88:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007d94:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007da0:	4b09      	ldr	r3, [pc, #36]	@ (8007dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	08db      	lsrs	r3, r3, #3
 8007da6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007dae:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <HAL_RCC_GetClockConfig+0x60>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 020f 	and.w	r2, r3, #15
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	601a      	str	r2, [r3, #0]
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40021000 	.word	0x40021000
 8007dcc:	40022000 	.word	0x40022000

08007dd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8007e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007de0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	3301      	adds	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d10c      	bne.n	8007e0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007df4:	4a17      	ldr	r2, [pc, #92]	@ (8007e54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfc:	4a14      	ldr	r2, [pc, #80]	@ (8007e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dfe:	68d2      	ldr	r2, [r2, #12]
 8007e00:	0a12      	lsrs	r2, r2, #8
 8007e02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	617b      	str	r3, [r7, #20]
    break;
 8007e0c:	e00c      	b.n	8007e28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e0e:	4a12      	ldr	r2, [pc, #72]	@ (8007e58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e16:	4a0e      	ldr	r2, [pc, #56]	@ (8007e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e18:	68d2      	ldr	r2, [r2, #12]
 8007e1a:	0a12      	lsrs	r2, r2, #8
 8007e1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e20:	fb02 f303 	mul.w	r3, r2, r3
 8007e24:	617b      	str	r3, [r7, #20]
    break;
 8007e26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e28:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	0e5b      	lsrs	r3, r3, #25
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	3301      	adds	r3, #1
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007e42:	687b      	ldr	r3, [r7, #4]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	40021000 	.word	0x40021000
 8007e54:	016e3600 	.word	0x016e3600
 8007e58:	00f42400 	.word	0x00f42400

08007e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e64:	2300      	movs	r3, #0
 8007e66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e68:	2300      	movs	r3, #0
 8007e6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8098 	beq.w	8007faa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e7e:	4b43      	ldr	r3, [pc, #268]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10d      	bne.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e8a:	4b40      	ldr	r3, [pc, #256]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e96:	4b3d      	ldr	r3, [pc, #244]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e9e:	60bb      	str	r3, [r7, #8]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a39      	ldr	r2, [pc, #228]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007eb2:	f7fa fe83 	bl	8002bbc <HAL_GetTick>
 8007eb6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eb8:	e009      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eba:	f7fa fe7f 	bl	8002bbc <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d902      	bls.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	74fb      	strb	r3, [r7, #19]
        break;
 8007ecc:	e005      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ece:	4b30      	ldr	r3, [pc, #192]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0ef      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007eda:	7cfb      	ldrb	r3, [r7, #19]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d159      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d01e      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d019      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007efc:	4b23      	ldr	r3, [pc, #140]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f08:	4b20      	ldr	r3, [pc, #128]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f18:	4b1c      	ldr	r3, [pc, #112]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f28:	4a18      	ldr	r2, [pc, #96]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d016      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3a:	f7fa fe3f 	bl	8002bbc <HAL_GetTick>
 8007f3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f40:	e00b      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f42:	f7fa fe3b 	bl	8002bbc <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d902      	bls.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	74fb      	strb	r3, [r7, #19]
            break;
 8007f58:	e006      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0ec      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007f68:	7cfb      	ldrb	r3, [r7, #19]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10b      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f6e:	4b07      	ldr	r3, [pc, #28]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f7c:	4903      	ldr	r1, [pc, #12]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007f84:	e008      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f86:	7cfb      	ldrb	r3, [r7, #19]
 8007f88:	74bb      	strb	r3, [r7, #18]
 8007f8a:	e005      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007f8c:	40021000 	.word	0x40021000
 8007f90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f94:	7cfb      	ldrb	r3, [r7, #19]
 8007f96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f98:	7c7b      	ldrb	r3, [r7, #17]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d105      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f9e:	4ba7      	ldr	r3, [pc, #668]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa2:	4aa6      	ldr	r2, [pc, #664]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fa8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fb6:	4ba1      	ldr	r3, [pc, #644]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fbc:	f023 0203 	bic.w	r2, r3, #3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	499d      	ldr	r1, [pc, #628]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007fd8:	4b98      	ldr	r3, [pc, #608]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fde:	f023 020c 	bic.w	r2, r3, #12
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	4995      	ldr	r1, [pc, #596]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ffa:	4b90      	ldr	r3, [pc, #576]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008000:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	498c      	ldr	r1, [pc, #560]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800800a:	4313      	orrs	r3, r2
 800800c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800801c:	4b87      	ldr	r3, [pc, #540]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800801e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008022:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	4984      	ldr	r1, [pc, #528]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800802c:	4313      	orrs	r3, r2
 800802e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800803e:	4b7f      	ldr	r3, [pc, #508]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008044:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	497b      	ldr	r1, [pc, #492]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800804e:	4313      	orrs	r3, r2
 8008050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0320 	and.w	r3, r3, #32
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008060:	4b76      	ldr	r3, [pc, #472]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008066:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	4973      	ldr	r1, [pc, #460]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008070:	4313      	orrs	r3, r2
 8008072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008082:	4b6e      	ldr	r3, [pc, #440]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008088:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	496a      	ldr	r1, [pc, #424]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008092:	4313      	orrs	r3, r2
 8008094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080a4:	4b65      	ldr	r3, [pc, #404]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	4962      	ldr	r1, [pc, #392]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00a      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080c6:	4b5d      	ldr	r3, [pc, #372]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d4:	4959      	ldr	r1, [pc, #356]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00a      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080e8:	4b54      	ldr	r3, [pc, #336]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080ee:	f023 0203 	bic.w	r2, r3, #3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f6:	4951      	ldr	r1, [pc, #324]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800810a:	4b4c      	ldr	r3, [pc, #304]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008110:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008118:	4948      	ldr	r1, [pc, #288]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008128:	2b00      	cmp	r3, #0
 800812a:	d015      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800812c:	4b43      	ldr	r3, [pc, #268]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800812e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008132:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813a:	4940      	ldr	r1, [pc, #256]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800813c:	4313      	orrs	r3, r2
 800813e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800814a:	d105      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800814c:	4b3b      	ldr	r3, [pc, #236]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	4a3a      	ldr	r2, [pc, #232]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008156:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008160:	2b00      	cmp	r3, #0
 8008162:	d015      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008164:	4b35      	ldr	r3, [pc, #212]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800816a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008172:	4932      	ldr	r1, [pc, #200]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008174:	4313      	orrs	r3, r2
 8008176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800817e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008182:	d105      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008184:	4b2d      	ldr	r3, [pc, #180]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	4a2c      	ldr	r2, [pc, #176]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800818a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800818e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d015      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800819c:	4b27      	ldr	r3, [pc, #156]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800819e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081aa:	4924      	ldr	r1, [pc, #144]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081ba:	d105      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081bc:	4b1f      	ldr	r3, [pc, #124]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	4a1e      	ldr	r2, [pc, #120]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d015      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081d4:	4b19      	ldr	r3, [pc, #100]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e2:	4916      	ldr	r1, [pc, #88]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081f2:	d105      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081f4:	4b11      	ldr	r3, [pc, #68]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	4a10      	ldr	r2, [pc, #64]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d019      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800820c:	4b0b      	ldr	r3, [pc, #44]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800820e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008212:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821a:	4908      	ldr	r1, [pc, #32]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800821c:	4313      	orrs	r3, r2
 800821e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800822a:	d109      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800822c:	4b03      	ldr	r3, [pc, #12]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	4a02      	ldr	r2, [pc, #8]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008236:	60d3      	str	r3, [r2, #12]
 8008238:	e002      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800823a:	bf00      	nop
 800823c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d015      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800824c:	4b29      	ldr	r3, [pc, #164]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800824e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008252:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825a:	4926      	ldr	r1, [pc, #152]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800825c:	4313      	orrs	r3, r2
 800825e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800826a:	d105      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800826c:	4b21      	ldr	r3, [pc, #132]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	4a20      	ldr	r2, [pc, #128]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008276:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d015      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008284:	4b1b      	ldr	r3, [pc, #108]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800828a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008292:	4918      	ldr	r1, [pc, #96]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008294:	4313      	orrs	r3, r2
 8008296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800829e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a2:	d105      	bne.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80082a4:	4b13      	ldr	r3, [pc, #76]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	4a12      	ldr	r2, [pc, #72]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80082aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d015      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082bc:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80082be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80082c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ca:	490a      	ldr	r1, [pc, #40]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082da:	d105      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082dc:	4b05      	ldr	r3, [pc, #20]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	4a04      	ldr	r2, [pc, #16]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80082e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80082e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	40021000 	.word	0x40021000

080082f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e09d      	b.n	8008446 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830e:	2b00      	cmp	r3, #0
 8008310:	d108      	bne.n	8008324 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800831a:	d009      	beq.n	8008330 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	61da      	str	r2, [r3, #28]
 8008322:	e005      	b.n	8008330 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7f9 fab0 	bl	80018b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008366:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008370:	d902      	bls.n	8008378 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	e002      	b.n	800837e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800837c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008386:	d007      	beq.n	8008398 <HAL_SPI_Init+0xa0>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008390:	d002      	beq.n	8008398 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80083a8:	431a      	orrs	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	431a      	orrs	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083c6:	431a      	orrs	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083d0:	431a      	orrs	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083da:	ea42 0103 	orr.w	r1, r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	0c1b      	lsrs	r3, r3, #16
 80083f4:	f003 0204 	and.w	r2, r3, #4
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fc:	f003 0310 	and.w	r3, r3, #16
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008406:	f003 0308 	and.w	r3, r3, #8
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008414:	ea42 0103 	orr.w	r1, r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	430a      	orrs	r2, r1
 8008424:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69da      	ldr	r2, [r3, #28]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008434:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e049      	b.n	80084f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	d106      	bne.n	800847a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f841 	bl	80084fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2202      	movs	r2, #2
 800847e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3304      	adds	r3, #4
 800848a:	4619      	mov	r1, r3
 800848c:	4610      	mov	r0, r2
 800848e:	f000 fcad 	bl	8008dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b01      	cmp	r3, #1
 8008522:	d001      	beq.n	8008528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e054      	b.n	80085d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68da      	ldr	r2, [r3, #12]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a26      	ldr	r2, [pc, #152]	@ (80085e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d022      	beq.n	8008590 <HAL_TIM_Base_Start_IT+0x80>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008552:	d01d      	beq.n	8008590 <HAL_TIM_Base_Start_IT+0x80>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a22      	ldr	r2, [pc, #136]	@ (80085e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d018      	beq.n	8008590 <HAL_TIM_Base_Start_IT+0x80>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a21      	ldr	r2, [pc, #132]	@ (80085e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d013      	beq.n	8008590 <HAL_TIM_Base_Start_IT+0x80>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a1f      	ldr	r2, [pc, #124]	@ (80085ec <HAL_TIM_Base_Start_IT+0xdc>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00e      	beq.n	8008590 <HAL_TIM_Base_Start_IT+0x80>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a1e      	ldr	r2, [pc, #120]	@ (80085f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d009      	beq.n	8008590 <HAL_TIM_Base_Start_IT+0x80>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a1c      	ldr	r2, [pc, #112]	@ (80085f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d004      	beq.n	8008590 <HAL_TIM_Base_Start_IT+0x80>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a1b      	ldr	r2, [pc, #108]	@ (80085f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d115      	bne.n	80085bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689a      	ldr	r2, [r3, #8]
 8008596:	4b19      	ldr	r3, [pc, #100]	@ (80085fc <HAL_TIM_Base_Start_IT+0xec>)
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b06      	cmp	r3, #6
 80085a0:	d015      	beq.n	80085ce <HAL_TIM_Base_Start_IT+0xbe>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085a8:	d011      	beq.n	80085ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0201 	orr.w	r2, r2, #1
 80085b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ba:	e008      	b.n	80085ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f042 0201 	orr.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	e000      	b.n	80085d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40000400 	.word	0x40000400
 80085e8:	40000800 	.word	0x40000800
 80085ec:	40000c00 	.word	0x40000c00
 80085f0:	40013400 	.word	0x40013400
 80085f4:	40014000 	.word	0x40014000
 80085f8:	40015000 	.word	0x40015000
 80085fc:	00010007 	.word	0x00010007

08008600 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e049      	b.n	80086a6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7f9 fb20 	bl	8001c6c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f000 fbd4 	bl	8008dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
	...

080086b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <HAL_TIM_IC_Start_IT+0x1e>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	e023      	b.n	8008716 <HAL_TIM_IC_Start_IT+0x66>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d104      	bne.n	80086de <HAL_TIM_IC_Start_IT+0x2e>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	e01b      	b.n	8008716 <HAL_TIM_IC_Start_IT+0x66>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d104      	bne.n	80086ee <HAL_TIM_IC_Start_IT+0x3e>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	e013      	b.n	8008716 <HAL_TIM_IC_Start_IT+0x66>
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	d104      	bne.n	80086fe <HAL_TIM_IC_Start_IT+0x4e>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	e00b      	b.n	8008716 <HAL_TIM_IC_Start_IT+0x66>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b10      	cmp	r3, #16
 8008702:	d104      	bne.n	800870e <HAL_TIM_IC_Start_IT+0x5e>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800870a:	b2db      	uxtb	r3, r3
 800870c:	e003      	b.n	8008716 <HAL_TIM_IC_Start_IT+0x66>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008714:	b2db      	uxtb	r3, r3
 8008716:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d104      	bne.n	8008728 <HAL_TIM_IC_Start_IT+0x78>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008724:	b2db      	uxtb	r3, r3
 8008726:	e013      	b.n	8008750 <HAL_TIM_IC_Start_IT+0xa0>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2b04      	cmp	r3, #4
 800872c:	d104      	bne.n	8008738 <HAL_TIM_IC_Start_IT+0x88>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008734:	b2db      	uxtb	r3, r3
 8008736:	e00b      	b.n	8008750 <HAL_TIM_IC_Start_IT+0xa0>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b08      	cmp	r3, #8
 800873c:	d104      	bne.n	8008748 <HAL_TIM_IC_Start_IT+0x98>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008744:	b2db      	uxtb	r3, r3
 8008746:	e003      	b.n	8008750 <HAL_TIM_IC_Start_IT+0xa0>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800874e:	b2db      	uxtb	r3, r3
 8008750:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d102      	bne.n	800875e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008758:	7b7b      	ldrb	r3, [r7, #13]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d001      	beq.n	8008762 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e0e2      	b.n	8008928 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d104      	bne.n	8008772 <HAL_TIM_IC_Start_IT+0xc2>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008770:	e023      	b.n	80087ba <HAL_TIM_IC_Start_IT+0x10a>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b04      	cmp	r3, #4
 8008776:	d104      	bne.n	8008782 <HAL_TIM_IC_Start_IT+0xd2>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008780:	e01b      	b.n	80087ba <HAL_TIM_IC_Start_IT+0x10a>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b08      	cmp	r3, #8
 8008786:	d104      	bne.n	8008792 <HAL_TIM_IC_Start_IT+0xe2>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008790:	e013      	b.n	80087ba <HAL_TIM_IC_Start_IT+0x10a>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b0c      	cmp	r3, #12
 8008796:	d104      	bne.n	80087a2 <HAL_TIM_IC_Start_IT+0xf2>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087a0:	e00b      	b.n	80087ba <HAL_TIM_IC_Start_IT+0x10a>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b10      	cmp	r3, #16
 80087a6:	d104      	bne.n	80087b2 <HAL_TIM_IC_Start_IT+0x102>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2202      	movs	r2, #2
 80087ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087b0:	e003      	b.n	80087ba <HAL_TIM_IC_Start_IT+0x10a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2202      	movs	r2, #2
 80087b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d104      	bne.n	80087ca <HAL_TIM_IC_Start_IT+0x11a>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087c8:	e013      	b.n	80087f2 <HAL_TIM_IC_Start_IT+0x142>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d104      	bne.n	80087da <HAL_TIM_IC_Start_IT+0x12a>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087d8:	e00b      	b.n	80087f2 <HAL_TIM_IC_Start_IT+0x142>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b08      	cmp	r3, #8
 80087de:	d104      	bne.n	80087ea <HAL_TIM_IC_Start_IT+0x13a>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087e8:	e003      	b.n	80087f2 <HAL_TIM_IC_Start_IT+0x142>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2202      	movs	r2, #2
 80087ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b0c      	cmp	r3, #12
 80087f6:	d841      	bhi.n	800887c <HAL_TIM_IC_Start_IT+0x1cc>
 80087f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008800 <HAL_TIM_IC_Start_IT+0x150>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	08008835 	.word	0x08008835
 8008804:	0800887d 	.word	0x0800887d
 8008808:	0800887d 	.word	0x0800887d
 800880c:	0800887d 	.word	0x0800887d
 8008810:	08008847 	.word	0x08008847
 8008814:	0800887d 	.word	0x0800887d
 8008818:	0800887d 	.word	0x0800887d
 800881c:	0800887d 	.word	0x0800887d
 8008820:	08008859 	.word	0x08008859
 8008824:	0800887d 	.word	0x0800887d
 8008828:	0800887d 	.word	0x0800887d
 800882c:	0800887d 	.word	0x0800887d
 8008830:	0800886b 	.word	0x0800886b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0202 	orr.w	r2, r2, #2
 8008842:	60da      	str	r2, [r3, #12]
      break;
 8008844:	e01d      	b.n	8008882 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0204 	orr.w	r2, r2, #4
 8008854:	60da      	str	r2, [r3, #12]
      break;
 8008856:	e014      	b.n	8008882 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0208 	orr.w	r2, r2, #8
 8008866:	60da      	str	r2, [r3, #12]
      break;
 8008868:	e00b      	b.n	8008882 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0210 	orr.w	r2, r2, #16
 8008878:	60da      	str	r2, [r3, #12]
      break;
 800887a:	e002      	b.n	8008882 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	73fb      	strb	r3, [r7, #15]
      break;
 8008880:	bf00      	nop
  }

  if (status == HAL_OK)
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d14e      	bne.n	8008926 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2201      	movs	r2, #1
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 fc89 	bl	80091a8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a25      	ldr	r2, [pc, #148]	@ (8008930 <HAL_TIM_IC_Start_IT+0x280>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d022      	beq.n	80088e6 <HAL_TIM_IC_Start_IT+0x236>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088a8:	d01d      	beq.n	80088e6 <HAL_TIM_IC_Start_IT+0x236>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a21      	ldr	r2, [pc, #132]	@ (8008934 <HAL_TIM_IC_Start_IT+0x284>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d018      	beq.n	80088e6 <HAL_TIM_IC_Start_IT+0x236>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008938 <HAL_TIM_IC_Start_IT+0x288>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d013      	beq.n	80088e6 <HAL_TIM_IC_Start_IT+0x236>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1e      	ldr	r2, [pc, #120]	@ (800893c <HAL_TIM_IC_Start_IT+0x28c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00e      	beq.n	80088e6 <HAL_TIM_IC_Start_IT+0x236>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008940 <HAL_TIM_IC_Start_IT+0x290>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d009      	beq.n	80088e6 <HAL_TIM_IC_Start_IT+0x236>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008944 <HAL_TIM_IC_Start_IT+0x294>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d004      	beq.n	80088e6 <HAL_TIM_IC_Start_IT+0x236>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a19      	ldr	r2, [pc, #100]	@ (8008948 <HAL_TIM_IC_Start_IT+0x298>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d115      	bne.n	8008912 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	4b17      	ldr	r3, [pc, #92]	@ (800894c <HAL_TIM_IC_Start_IT+0x29c>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b06      	cmp	r3, #6
 80088f6:	d015      	beq.n	8008924 <HAL_TIM_IC_Start_IT+0x274>
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088fe:	d011      	beq.n	8008924 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f042 0201 	orr.w	r2, r2, #1
 800890e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008910:	e008      	b.n	8008924 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0201 	orr.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	e000      	b.n	8008926 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008924:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008926:	7bfb      	ldrb	r3, [r7, #15]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	40012c00 	.word	0x40012c00
 8008934:	40000400 	.word	0x40000400
 8008938:	40000800 	.word	0x40000800
 800893c:	40000c00 	.word	0x40000c00
 8008940:	40013400 	.word	0x40013400
 8008944:	40014000 	.word	0x40014000
 8008948:	40015000 	.word	0x40015000
 800894c:	00010007 	.word	0x00010007

08008950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d020      	beq.n	80089b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01b      	beq.n	80089b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f06f 0202 	mvn.w	r2, #2
 8008984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7f9 fd4c 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 80089a0:	e005      	b.n	80089ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa04 	bl	8008db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fa0b 	bl	8008dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	f003 0304 	and.w	r3, r3, #4
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d020      	beq.n	8008a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01b      	beq.n	8008a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f06f 0204 	mvn.w	r2, #4
 80089d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2202      	movs	r2, #2
 80089d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7f9 fd26 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 80089ec:	e005      	b.n	80089fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f9de 	bl	8008db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f9e5 	bl	8008dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d020      	beq.n	8008a4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f003 0308 	and.w	r3, r3, #8
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d01b      	beq.n	8008a4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f06f 0208 	mvn.w	r2, #8
 8008a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2204      	movs	r2, #4
 8008a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	f003 0303 	and.w	r3, r3, #3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7f9 fd00 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 8008a38:	e005      	b.n	8008a46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f9b8 	bl	8008db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f9bf 	bl	8008dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d020      	beq.n	8008a98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f003 0310 	and.w	r3, r3, #16
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01b      	beq.n	8008a98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f06f 0210 	mvn.w	r2, #16
 8008a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7f9 fcda 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 8008a84:	e005      	b.n	8008a92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f992 	bl	8008db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f999 	bl	8008dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00c      	beq.n	8008abc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d007      	beq.n	8008abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f06f 0201 	mvn.w	r2, #1
 8008ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7f8 fea4 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00c      	beq.n	8008aea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fc25 	bl	8009334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00c      	beq.n	8008b0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fc1d 	bl	8009348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00c      	beq.n	8008b32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d007      	beq.n	8008b32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f953 	bl	8008dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	f003 0320 	and.w	r3, r3, #32
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00c      	beq.n	8008b56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f003 0320 	and.w	r3, r3, #32
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f06f 0220 	mvn.w	r2, #32
 8008b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fbe5 	bl	8009320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00c      	beq.n	8008b7a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d007      	beq.n	8008b7a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fbf1 	bl	800935c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00c      	beq.n	8008b9e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d007      	beq.n	8008b9e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fbe9 	bl	8009370 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00c      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fbe1 	bl	8009384 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00c      	beq.n	8008be6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d007      	beq.n	8008be6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fbd9 	bl	8009398 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008be6:	bf00      	nop
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b086      	sub	sp, #24
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <HAL_TIM_IC_ConfigChannel+0x1e>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e088      	b.n	8008d1e <HAL_TIM_IC_ConfigChannel+0x130>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d11b      	bne.n	8008c52 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008c2a:	f000 f993 	bl	8008f54 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	699a      	ldr	r2, [r3, #24]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 020c 	bic.w	r2, r2, #12
 8008c3c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6999      	ldr	r1, [r3, #24]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	619a      	str	r2, [r3, #24]
 8008c50:	e060      	b.n	8008d14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d11c      	bne.n	8008c92 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008c68:	f000 f9e8 	bl	800903c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008c7a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6999      	ldr	r1, [r3, #24]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	021a      	lsls	r2, r3, #8
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	619a      	str	r2, [r3, #24]
 8008c90:	e040      	b.n	8008d14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d11b      	bne.n	8008cd0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008ca8:	f000 fa05 	bl	80090b6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69da      	ldr	r2, [r3, #28]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f022 020c 	bic.w	r2, r2, #12
 8008cba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69d9      	ldr	r1, [r3, #28]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	61da      	str	r2, [r3, #28]
 8008cce:	e021      	b.n	8008d14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b0c      	cmp	r3, #12
 8008cd4:	d11c      	bne.n	8008d10 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008ce6:	f000 fa22 	bl	800912e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008cf8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69d9      	ldr	r1, [r3, #28]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	021a      	lsls	r2, r3, #8
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	61da      	str	r2, [r3, #28]
 8008d0e:	e001      	b.n	8008d14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b0c      	cmp	r3, #12
 8008d3a:	d831      	bhi.n	8008da0 <HAL_TIM_ReadCapturedValue+0x78>
 8008d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d44 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d42:	bf00      	nop
 8008d44:	08008d79 	.word	0x08008d79
 8008d48:	08008da1 	.word	0x08008da1
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008da1 	.word	0x08008da1
 8008d54:	08008d83 	.word	0x08008d83
 8008d58:	08008da1 	.word	0x08008da1
 8008d5c:	08008da1 	.word	0x08008da1
 8008d60:	08008da1 	.word	0x08008da1
 8008d64:	08008d8d 	.word	0x08008d8d
 8008d68:	08008da1 	.word	0x08008da1
 8008d6c:	08008da1 	.word	0x08008da1
 8008d70:	08008da1 	.word	0x08008da1
 8008d74:	08008d97 	.word	0x08008d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d7e:	60fb      	str	r3, [r7, #12]

      break;
 8008d80:	e00f      	b.n	8008da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d88:	60fb      	str	r3, [r7, #12]

      break;
 8008d8a:	e00a      	b.n	8008da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d92:	60fb      	str	r3, [r7, #12]

      break;
 8008d94:	e005      	b.n	8008da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9c:	60fb      	str	r3, [r7, #12]

      break;
 8008d9e:	e000      	b.n	8008da2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008da0:	bf00      	nop
  }

  return tmpreg;
 8008da2:	68fb      	ldr	r3, [r7, #12]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8008f30 <TIM_Base_SetConfig+0x144>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d017      	beq.n	8008e34 <TIM_Base_SetConfig+0x48>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e0a:	d013      	beq.n	8008e34 <TIM_Base_SetConfig+0x48>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a49      	ldr	r2, [pc, #292]	@ (8008f34 <TIM_Base_SetConfig+0x148>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00f      	beq.n	8008e34 <TIM_Base_SetConfig+0x48>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a48      	ldr	r2, [pc, #288]	@ (8008f38 <TIM_Base_SetConfig+0x14c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00b      	beq.n	8008e34 <TIM_Base_SetConfig+0x48>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a47      	ldr	r2, [pc, #284]	@ (8008f3c <TIM_Base_SetConfig+0x150>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d007      	beq.n	8008e34 <TIM_Base_SetConfig+0x48>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a46      	ldr	r2, [pc, #280]	@ (8008f40 <TIM_Base_SetConfig+0x154>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_Base_SetConfig+0x48>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a45      	ldr	r2, [pc, #276]	@ (8008f44 <TIM_Base_SetConfig+0x158>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d108      	bne.n	8008e46 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a39      	ldr	r2, [pc, #228]	@ (8008f30 <TIM_Base_SetConfig+0x144>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d023      	beq.n	8008e96 <TIM_Base_SetConfig+0xaa>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e54:	d01f      	beq.n	8008e96 <TIM_Base_SetConfig+0xaa>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a36      	ldr	r2, [pc, #216]	@ (8008f34 <TIM_Base_SetConfig+0x148>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d01b      	beq.n	8008e96 <TIM_Base_SetConfig+0xaa>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a35      	ldr	r2, [pc, #212]	@ (8008f38 <TIM_Base_SetConfig+0x14c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d017      	beq.n	8008e96 <TIM_Base_SetConfig+0xaa>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a34      	ldr	r2, [pc, #208]	@ (8008f3c <TIM_Base_SetConfig+0x150>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d013      	beq.n	8008e96 <TIM_Base_SetConfig+0xaa>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a33      	ldr	r2, [pc, #204]	@ (8008f40 <TIM_Base_SetConfig+0x154>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00f      	beq.n	8008e96 <TIM_Base_SetConfig+0xaa>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a33      	ldr	r2, [pc, #204]	@ (8008f48 <TIM_Base_SetConfig+0x15c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00b      	beq.n	8008e96 <TIM_Base_SetConfig+0xaa>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a32      	ldr	r2, [pc, #200]	@ (8008f4c <TIM_Base_SetConfig+0x160>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d007      	beq.n	8008e96 <TIM_Base_SetConfig+0xaa>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a31      	ldr	r2, [pc, #196]	@ (8008f50 <TIM_Base_SetConfig+0x164>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d003      	beq.n	8008e96 <TIM_Base_SetConfig+0xaa>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a2c      	ldr	r2, [pc, #176]	@ (8008f44 <TIM_Base_SetConfig+0x158>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d108      	bne.n	8008ea8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	689a      	ldr	r2, [r3, #8]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a18      	ldr	r2, [pc, #96]	@ (8008f30 <TIM_Base_SetConfig+0x144>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d013      	beq.n	8008efc <TIM_Base_SetConfig+0x110>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f40 <TIM_Base_SetConfig+0x154>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00f      	beq.n	8008efc <TIM_Base_SetConfig+0x110>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a1a      	ldr	r2, [pc, #104]	@ (8008f48 <TIM_Base_SetConfig+0x15c>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d00b      	beq.n	8008efc <TIM_Base_SetConfig+0x110>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a19      	ldr	r2, [pc, #100]	@ (8008f4c <TIM_Base_SetConfig+0x160>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d007      	beq.n	8008efc <TIM_Base_SetConfig+0x110>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a18      	ldr	r2, [pc, #96]	@ (8008f50 <TIM_Base_SetConfig+0x164>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d003      	beq.n	8008efc <TIM_Base_SetConfig+0x110>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a13      	ldr	r2, [pc, #76]	@ (8008f44 <TIM_Base_SetConfig+0x158>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d103      	bne.n	8008f04 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	691a      	ldr	r2, [r3, #16]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d105      	bne.n	8008f22 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f023 0201 	bic.w	r2, r3, #1
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	611a      	str	r2, [r3, #16]
  }
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	40012c00 	.word	0x40012c00
 8008f34:	40000400 	.word	0x40000400
 8008f38:	40000800 	.word	0x40000800
 8008f3c:	40000c00 	.word	0x40000c00
 8008f40:	40013400 	.word	0x40013400
 8008f44:	40015000 	.word	0x40015000
 8008f48:	40014000 	.word	0x40014000
 8008f4c:	40014400 	.word	0x40014400
 8008f50:	40014800 	.word	0x40014800

08008f54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	f023 0201 	bic.w	r2, r3, #1
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4a28      	ldr	r2, [pc, #160]	@ (8009020 <TIM_TI1_SetConfig+0xcc>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d01b      	beq.n	8008fba <TIM_TI1_SetConfig+0x66>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f88:	d017      	beq.n	8008fba <TIM_TI1_SetConfig+0x66>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	4a25      	ldr	r2, [pc, #148]	@ (8009024 <TIM_TI1_SetConfig+0xd0>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d013      	beq.n	8008fba <TIM_TI1_SetConfig+0x66>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4a24      	ldr	r2, [pc, #144]	@ (8009028 <TIM_TI1_SetConfig+0xd4>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00f      	beq.n	8008fba <TIM_TI1_SetConfig+0x66>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4a23      	ldr	r2, [pc, #140]	@ (800902c <TIM_TI1_SetConfig+0xd8>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00b      	beq.n	8008fba <TIM_TI1_SetConfig+0x66>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4a22      	ldr	r2, [pc, #136]	@ (8009030 <TIM_TI1_SetConfig+0xdc>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d007      	beq.n	8008fba <TIM_TI1_SetConfig+0x66>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4a21      	ldr	r2, [pc, #132]	@ (8009034 <TIM_TI1_SetConfig+0xe0>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d003      	beq.n	8008fba <TIM_TI1_SetConfig+0x66>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4a20      	ldr	r2, [pc, #128]	@ (8009038 <TIM_TI1_SetConfig+0xe4>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d101      	bne.n	8008fbe <TIM_TI1_SetConfig+0x6a>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e000      	b.n	8008fc0 <TIM_TI1_SetConfig+0x6c>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d008      	beq.n	8008fd6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f023 0303 	bic.w	r3, r3, #3
 8008fca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	e003      	b.n	8008fde <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f043 0301 	orr.w	r3, r3, #1
 8008fdc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fe4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	011b      	lsls	r3, r3, #4
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f023 030a 	bic.w	r3, r3, #10
 8008ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f003 030a 	and.w	r3, r3, #10
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	4313      	orrs	r3, r2
 8009004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	621a      	str	r2, [r3, #32]
}
 8009012:	bf00      	nop
 8009014:	371c      	adds	r7, #28
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40012c00 	.word	0x40012c00
 8009024:	40000400 	.word	0x40000400
 8009028:	40000800 	.word	0x40000800
 800902c:	40000c00 	.word	0x40000c00
 8009030:	40013400 	.word	0x40013400
 8009034:	40014000 	.word	0x40014000
 8009038:	40015000 	.word	0x40015000

0800903c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	f023 0210 	bic.w	r2, r3, #16
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	4313      	orrs	r3, r2
 8009072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800907a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	031b      	lsls	r3, r3, #12
 8009080:	b29b      	uxth	r3, r3
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	4313      	orrs	r3, r2
 8009086:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800908e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b087      	sub	sp, #28
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f023 0303 	bic.w	r3, r3, #3
 80090e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009106:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	021b      	lsls	r3, r3, #8
 800910c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	621a      	str	r2, [r3, #32]
}
 8009122:	bf00      	nop
 8009124:	371c      	adds	r7, #28
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800912e:	b480      	push	{r7}
 8009130:	b087      	sub	sp, #28
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	607a      	str	r2, [r7, #4]
 800913a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	69db      	ldr	r3, [r3, #28]
 8009152:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800915a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	4313      	orrs	r3, r2
 8009164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800916c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	031b      	lsls	r3, r3, #12
 8009172:	b29b      	uxth	r3, r3
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009180:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	031b      	lsls	r3, r3, #12
 8009186:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4313      	orrs	r3, r2
 800918e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	621a      	str	r2, [r3, #32]
}
 800919c:	bf00      	nop
 800919e:	371c      	adds	r7, #28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f003 031f 	and.w	r3, r3, #31
 80091ba:	2201      	movs	r2, #1
 80091bc:	fa02 f303 	lsl.w	r3, r2, r3
 80091c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a1a      	ldr	r2, [r3, #32]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	43db      	mvns	r3, r3
 80091ca:	401a      	ands	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a1a      	ldr	r2, [r3, #32]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f003 031f 	and.w	r3, r3, #31
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	fa01 f303 	lsl.w	r3, r1, r3
 80091e0:	431a      	orrs	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	621a      	str	r2, [r3, #32]
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
	...

080091f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009208:	2302      	movs	r3, #2
 800920a:	e074      	b.n	80092f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a34      	ldr	r2, [pc, #208]	@ (8009304 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d009      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a33      	ldr	r2, [pc, #204]	@ (8009308 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d004      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a31      	ldr	r2, [pc, #196]	@ (800930c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d108      	bne.n	800925c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009250:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	4313      	orrs	r3, r2
 800925a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a21      	ldr	r2, [pc, #132]	@ (8009304 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d022      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800928c:	d01d      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a1f      	ldr	r2, [pc, #124]	@ (8009310 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d018      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a1d      	ldr	r2, [pc, #116]	@ (8009314 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d013      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009318 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d00e      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a15      	ldr	r2, [pc, #84]	@ (8009308 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d009      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a18      	ldr	r2, [pc, #96]	@ (800931c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d004      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a11      	ldr	r2, [pc, #68]	@ (800930c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d10c      	bne.n	80092e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	40012c00 	.word	0x40012c00
 8009308:	40013400 	.word	0x40013400
 800930c:	40015000 	.word	0x40015000
 8009310:	40000400 	.word	0x40000400
 8009314:	40000800 	.word	0x40000800
 8009318:	40000c00 	.word	0x40000c00
 800931c:	40014000 	.word	0x40014000

08009320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

0800935c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009370 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009384 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009398 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

080093ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e042      	b.n	8009444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d106      	bne.n	80093d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7f8 fcdf 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2224      	movs	r2, #36	@ 0x24
 80093da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0201 	bic.w	r2, r2, #1
 80093ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fb24 	bl	8009a44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f825 	bl	800944c <UART_SetConfig>
 8009402:	4603      	mov	r3, r0
 8009404:	2b01      	cmp	r3, #1
 8009406:	d101      	bne.n	800940c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e01b      	b.n	8009444 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800941a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800942a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0201 	orr.w	r2, r2, #1
 800943a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fba3 	bl	8009b88 <UART_CheckIdleState>
 8009442:	4603      	mov	r3, r0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800944c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009450:	b08c      	sub	sp, #48	@ 0x30
 8009452:	af00      	add	r7, sp, #0
 8009454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	689a      	ldr	r2, [r3, #8]
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	431a      	orrs	r2, r3
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	431a      	orrs	r2, r3
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	4313      	orrs	r3, r2
 8009472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	4baa      	ldr	r3, [pc, #680]	@ (8009724 <UART_SetConfig+0x2d8>)
 800947c:	4013      	ands	r3, r2
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	6812      	ldr	r2, [r2, #0]
 8009482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009484:	430b      	orrs	r3, r1
 8009486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a9f      	ldr	r2, [pc, #636]	@ (8009728 <UART_SetConfig+0x2dc>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d004      	beq.n	80094b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094b4:	4313      	orrs	r3, r2
 80094b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80094c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	6812      	ldr	r2, [r2, #0]
 80094ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094cc:	430b      	orrs	r3, r1
 80094ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d6:	f023 010f 	bic.w	r1, r3, #15
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a90      	ldr	r2, [pc, #576]	@ (800972c <UART_SetConfig+0x2e0>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d125      	bne.n	800953c <UART_SetConfig+0xf0>
 80094f0:	4b8f      	ldr	r3, [pc, #572]	@ (8009730 <UART_SetConfig+0x2e4>)
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f6:	f003 0303 	and.w	r3, r3, #3
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d81a      	bhi.n	8009534 <UART_SetConfig+0xe8>
 80094fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009504 <UART_SetConfig+0xb8>)
 8009500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009504:	08009515 	.word	0x08009515
 8009508:	08009525 	.word	0x08009525
 800950c:	0800951d 	.word	0x0800951d
 8009510:	0800952d 	.word	0x0800952d
 8009514:	2301      	movs	r3, #1
 8009516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800951a:	e116      	b.n	800974a <UART_SetConfig+0x2fe>
 800951c:	2302      	movs	r3, #2
 800951e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009522:	e112      	b.n	800974a <UART_SetConfig+0x2fe>
 8009524:	2304      	movs	r3, #4
 8009526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800952a:	e10e      	b.n	800974a <UART_SetConfig+0x2fe>
 800952c:	2308      	movs	r3, #8
 800952e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009532:	e10a      	b.n	800974a <UART_SetConfig+0x2fe>
 8009534:	2310      	movs	r3, #16
 8009536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800953a:	e106      	b.n	800974a <UART_SetConfig+0x2fe>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a7c      	ldr	r2, [pc, #496]	@ (8009734 <UART_SetConfig+0x2e8>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d138      	bne.n	80095b8 <UART_SetConfig+0x16c>
 8009546:	4b7a      	ldr	r3, [pc, #488]	@ (8009730 <UART_SetConfig+0x2e4>)
 8009548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800954c:	f003 030c 	and.w	r3, r3, #12
 8009550:	2b0c      	cmp	r3, #12
 8009552:	d82d      	bhi.n	80095b0 <UART_SetConfig+0x164>
 8009554:	a201      	add	r2, pc, #4	@ (adr r2, 800955c <UART_SetConfig+0x110>)
 8009556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955a:	bf00      	nop
 800955c:	08009591 	.word	0x08009591
 8009560:	080095b1 	.word	0x080095b1
 8009564:	080095b1 	.word	0x080095b1
 8009568:	080095b1 	.word	0x080095b1
 800956c:	080095a1 	.word	0x080095a1
 8009570:	080095b1 	.word	0x080095b1
 8009574:	080095b1 	.word	0x080095b1
 8009578:	080095b1 	.word	0x080095b1
 800957c:	08009599 	.word	0x08009599
 8009580:	080095b1 	.word	0x080095b1
 8009584:	080095b1 	.word	0x080095b1
 8009588:	080095b1 	.word	0x080095b1
 800958c:	080095a9 	.word	0x080095a9
 8009590:	2300      	movs	r3, #0
 8009592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009596:	e0d8      	b.n	800974a <UART_SetConfig+0x2fe>
 8009598:	2302      	movs	r3, #2
 800959a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800959e:	e0d4      	b.n	800974a <UART_SetConfig+0x2fe>
 80095a0:	2304      	movs	r3, #4
 80095a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095a6:	e0d0      	b.n	800974a <UART_SetConfig+0x2fe>
 80095a8:	2308      	movs	r3, #8
 80095aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ae:	e0cc      	b.n	800974a <UART_SetConfig+0x2fe>
 80095b0:	2310      	movs	r3, #16
 80095b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095b6:	e0c8      	b.n	800974a <UART_SetConfig+0x2fe>
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a5e      	ldr	r2, [pc, #376]	@ (8009738 <UART_SetConfig+0x2ec>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d125      	bne.n	800960e <UART_SetConfig+0x1c2>
 80095c2:	4b5b      	ldr	r3, [pc, #364]	@ (8009730 <UART_SetConfig+0x2e4>)
 80095c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80095cc:	2b30      	cmp	r3, #48	@ 0x30
 80095ce:	d016      	beq.n	80095fe <UART_SetConfig+0x1b2>
 80095d0:	2b30      	cmp	r3, #48	@ 0x30
 80095d2:	d818      	bhi.n	8009606 <UART_SetConfig+0x1ba>
 80095d4:	2b20      	cmp	r3, #32
 80095d6:	d00a      	beq.n	80095ee <UART_SetConfig+0x1a2>
 80095d8:	2b20      	cmp	r3, #32
 80095da:	d814      	bhi.n	8009606 <UART_SetConfig+0x1ba>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <UART_SetConfig+0x19a>
 80095e0:	2b10      	cmp	r3, #16
 80095e2:	d008      	beq.n	80095f6 <UART_SetConfig+0x1aa>
 80095e4:	e00f      	b.n	8009606 <UART_SetConfig+0x1ba>
 80095e6:	2300      	movs	r3, #0
 80095e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ec:	e0ad      	b.n	800974a <UART_SetConfig+0x2fe>
 80095ee:	2302      	movs	r3, #2
 80095f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095f4:	e0a9      	b.n	800974a <UART_SetConfig+0x2fe>
 80095f6:	2304      	movs	r3, #4
 80095f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095fc:	e0a5      	b.n	800974a <UART_SetConfig+0x2fe>
 80095fe:	2308      	movs	r3, #8
 8009600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009604:	e0a1      	b.n	800974a <UART_SetConfig+0x2fe>
 8009606:	2310      	movs	r3, #16
 8009608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800960c:	e09d      	b.n	800974a <UART_SetConfig+0x2fe>
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a4a      	ldr	r2, [pc, #296]	@ (800973c <UART_SetConfig+0x2f0>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d125      	bne.n	8009664 <UART_SetConfig+0x218>
 8009618:	4b45      	ldr	r3, [pc, #276]	@ (8009730 <UART_SetConfig+0x2e4>)
 800961a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009622:	2bc0      	cmp	r3, #192	@ 0xc0
 8009624:	d016      	beq.n	8009654 <UART_SetConfig+0x208>
 8009626:	2bc0      	cmp	r3, #192	@ 0xc0
 8009628:	d818      	bhi.n	800965c <UART_SetConfig+0x210>
 800962a:	2b80      	cmp	r3, #128	@ 0x80
 800962c:	d00a      	beq.n	8009644 <UART_SetConfig+0x1f8>
 800962e:	2b80      	cmp	r3, #128	@ 0x80
 8009630:	d814      	bhi.n	800965c <UART_SetConfig+0x210>
 8009632:	2b00      	cmp	r3, #0
 8009634:	d002      	beq.n	800963c <UART_SetConfig+0x1f0>
 8009636:	2b40      	cmp	r3, #64	@ 0x40
 8009638:	d008      	beq.n	800964c <UART_SetConfig+0x200>
 800963a:	e00f      	b.n	800965c <UART_SetConfig+0x210>
 800963c:	2300      	movs	r3, #0
 800963e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009642:	e082      	b.n	800974a <UART_SetConfig+0x2fe>
 8009644:	2302      	movs	r3, #2
 8009646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800964a:	e07e      	b.n	800974a <UART_SetConfig+0x2fe>
 800964c:	2304      	movs	r3, #4
 800964e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009652:	e07a      	b.n	800974a <UART_SetConfig+0x2fe>
 8009654:	2308      	movs	r3, #8
 8009656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800965a:	e076      	b.n	800974a <UART_SetConfig+0x2fe>
 800965c:	2310      	movs	r3, #16
 800965e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009662:	e072      	b.n	800974a <UART_SetConfig+0x2fe>
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a35      	ldr	r2, [pc, #212]	@ (8009740 <UART_SetConfig+0x2f4>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d12a      	bne.n	80096c4 <UART_SetConfig+0x278>
 800966e:	4b30      	ldr	r3, [pc, #192]	@ (8009730 <UART_SetConfig+0x2e4>)
 8009670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800967c:	d01a      	beq.n	80096b4 <UART_SetConfig+0x268>
 800967e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009682:	d81b      	bhi.n	80096bc <UART_SetConfig+0x270>
 8009684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009688:	d00c      	beq.n	80096a4 <UART_SetConfig+0x258>
 800968a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800968e:	d815      	bhi.n	80096bc <UART_SetConfig+0x270>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d003      	beq.n	800969c <UART_SetConfig+0x250>
 8009694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009698:	d008      	beq.n	80096ac <UART_SetConfig+0x260>
 800969a:	e00f      	b.n	80096bc <UART_SetConfig+0x270>
 800969c:	2300      	movs	r3, #0
 800969e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096a2:	e052      	b.n	800974a <UART_SetConfig+0x2fe>
 80096a4:	2302      	movs	r3, #2
 80096a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096aa:	e04e      	b.n	800974a <UART_SetConfig+0x2fe>
 80096ac:	2304      	movs	r3, #4
 80096ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096b2:	e04a      	b.n	800974a <UART_SetConfig+0x2fe>
 80096b4:	2308      	movs	r3, #8
 80096b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ba:	e046      	b.n	800974a <UART_SetConfig+0x2fe>
 80096bc:	2310      	movs	r3, #16
 80096be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096c2:	e042      	b.n	800974a <UART_SetConfig+0x2fe>
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a17      	ldr	r2, [pc, #92]	@ (8009728 <UART_SetConfig+0x2dc>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d13a      	bne.n	8009744 <UART_SetConfig+0x2f8>
 80096ce:	4b18      	ldr	r3, [pc, #96]	@ (8009730 <UART_SetConfig+0x2e4>)
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80096d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096dc:	d01a      	beq.n	8009714 <UART_SetConfig+0x2c8>
 80096de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096e2:	d81b      	bhi.n	800971c <UART_SetConfig+0x2d0>
 80096e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096e8:	d00c      	beq.n	8009704 <UART_SetConfig+0x2b8>
 80096ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096ee:	d815      	bhi.n	800971c <UART_SetConfig+0x2d0>
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <UART_SetConfig+0x2b0>
 80096f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096f8:	d008      	beq.n	800970c <UART_SetConfig+0x2c0>
 80096fa:	e00f      	b.n	800971c <UART_SetConfig+0x2d0>
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009702:	e022      	b.n	800974a <UART_SetConfig+0x2fe>
 8009704:	2302      	movs	r3, #2
 8009706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800970a:	e01e      	b.n	800974a <UART_SetConfig+0x2fe>
 800970c:	2304      	movs	r3, #4
 800970e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009712:	e01a      	b.n	800974a <UART_SetConfig+0x2fe>
 8009714:	2308      	movs	r3, #8
 8009716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800971a:	e016      	b.n	800974a <UART_SetConfig+0x2fe>
 800971c:	2310      	movs	r3, #16
 800971e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009722:	e012      	b.n	800974a <UART_SetConfig+0x2fe>
 8009724:	cfff69f3 	.word	0xcfff69f3
 8009728:	40008000 	.word	0x40008000
 800972c:	40013800 	.word	0x40013800
 8009730:	40021000 	.word	0x40021000
 8009734:	40004400 	.word	0x40004400
 8009738:	40004800 	.word	0x40004800
 800973c:	40004c00 	.word	0x40004c00
 8009740:	40005000 	.word	0x40005000
 8009744:	2310      	movs	r3, #16
 8009746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4aae      	ldr	r2, [pc, #696]	@ (8009a08 <UART_SetConfig+0x5bc>)
 8009750:	4293      	cmp	r3, r2
 8009752:	f040 8097 	bne.w	8009884 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009756:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800975a:	2b08      	cmp	r3, #8
 800975c:	d823      	bhi.n	80097a6 <UART_SetConfig+0x35a>
 800975e:	a201      	add	r2, pc, #4	@ (adr r2, 8009764 <UART_SetConfig+0x318>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	08009789 	.word	0x08009789
 8009768:	080097a7 	.word	0x080097a7
 800976c:	08009791 	.word	0x08009791
 8009770:	080097a7 	.word	0x080097a7
 8009774:	08009797 	.word	0x08009797
 8009778:	080097a7 	.word	0x080097a7
 800977c:	080097a7 	.word	0x080097a7
 8009780:	080097a7 	.word	0x080097a7
 8009784:	0800979f 	.word	0x0800979f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009788:	f7fe fac4 	bl	8007d14 <HAL_RCC_GetPCLK1Freq>
 800978c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800978e:	e010      	b.n	80097b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009790:	4b9e      	ldr	r3, [pc, #632]	@ (8009a0c <UART_SetConfig+0x5c0>)
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009794:	e00d      	b.n	80097b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009796:	f7fe fa4f 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 800979a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800979c:	e009      	b.n	80097b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800979e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80097a4:	e005      	b.n	80097b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 8130 	beq.w	8009a1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097be:	4a94      	ldr	r2, [pc, #592]	@ (8009a10 <UART_SetConfig+0x5c4>)
 80097c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	4613      	mov	r3, r2
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	4413      	add	r3, r2
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d305      	bcc.n	80097ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d903      	bls.n	80097f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80097f0:	e113      	b.n	8009a1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f4:	2200      	movs	r2, #0
 80097f6:	60bb      	str	r3, [r7, #8]
 80097f8:	60fa      	str	r2, [r7, #12]
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fe:	4a84      	ldr	r2, [pc, #528]	@ (8009a10 <UART_SetConfig+0x5c4>)
 8009800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009804:	b29b      	uxth	r3, r3
 8009806:	2200      	movs	r2, #0
 8009808:	603b      	str	r3, [r7, #0]
 800980a:	607a      	str	r2, [r7, #4]
 800980c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009810:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009814:	f7f6 fffc 	bl	8000810 <__aeabi_uldivmod>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4610      	mov	r0, r2
 800981e:	4619      	mov	r1, r3
 8009820:	f04f 0200 	mov.w	r2, #0
 8009824:	f04f 0300 	mov.w	r3, #0
 8009828:	020b      	lsls	r3, r1, #8
 800982a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800982e:	0202      	lsls	r2, r0, #8
 8009830:	6979      	ldr	r1, [r7, #20]
 8009832:	6849      	ldr	r1, [r1, #4]
 8009834:	0849      	lsrs	r1, r1, #1
 8009836:	2000      	movs	r0, #0
 8009838:	460c      	mov	r4, r1
 800983a:	4605      	mov	r5, r0
 800983c:	eb12 0804 	adds.w	r8, r2, r4
 8009840:	eb43 0905 	adc.w	r9, r3, r5
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	469a      	mov	sl, r3
 800984c:	4693      	mov	fp, r2
 800984e:	4652      	mov	r2, sl
 8009850:	465b      	mov	r3, fp
 8009852:	4640      	mov	r0, r8
 8009854:	4649      	mov	r1, r9
 8009856:	f7f6 ffdb 	bl	8000810 <__aeabi_uldivmod>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	4613      	mov	r3, r2
 8009860:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009868:	d308      	bcc.n	800987c <UART_SetConfig+0x430>
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009870:	d204      	bcs.n	800987c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6a3a      	ldr	r2, [r7, #32]
 8009878:	60da      	str	r2, [r3, #12]
 800987a:	e0ce      	b.n	8009a1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009882:	e0ca      	b.n	8009a1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800988c:	d166      	bne.n	800995c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800988e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009892:	2b08      	cmp	r3, #8
 8009894:	d827      	bhi.n	80098e6 <UART_SetConfig+0x49a>
 8009896:	a201      	add	r2, pc, #4	@ (adr r2, 800989c <UART_SetConfig+0x450>)
 8009898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989c:	080098c1 	.word	0x080098c1
 80098a0:	080098c9 	.word	0x080098c9
 80098a4:	080098d1 	.word	0x080098d1
 80098a8:	080098e7 	.word	0x080098e7
 80098ac:	080098d7 	.word	0x080098d7
 80098b0:	080098e7 	.word	0x080098e7
 80098b4:	080098e7 	.word	0x080098e7
 80098b8:	080098e7 	.word	0x080098e7
 80098bc:	080098df 	.word	0x080098df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098c0:	f7fe fa28 	bl	8007d14 <HAL_RCC_GetPCLK1Freq>
 80098c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098c6:	e014      	b.n	80098f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c8:	f7fe fa3a 	bl	8007d40 <HAL_RCC_GetPCLK2Freq>
 80098cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098ce:	e010      	b.n	80098f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098d0:	4b4e      	ldr	r3, [pc, #312]	@ (8009a0c <UART_SetConfig+0x5c0>)
 80098d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098d4:	e00d      	b.n	80098f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098d6:	f7fe f9af 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 80098da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098dc:	e009      	b.n	80098f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098e4:	e005      	b.n	80098f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80098f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 8090 	beq.w	8009a1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fe:	4a44      	ldr	r2, [pc, #272]	@ (8009a10 <UART_SetConfig+0x5c4>)
 8009900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009904:	461a      	mov	r2, r3
 8009906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009908:	fbb3 f3f2 	udiv	r3, r3, r2
 800990c:	005a      	lsls	r2, r3, #1
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	085b      	lsrs	r3, r3, #1
 8009914:	441a      	add	r2, r3
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	fbb2 f3f3 	udiv	r3, r2, r3
 800991e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	2b0f      	cmp	r3, #15
 8009924:	d916      	bls.n	8009954 <UART_SetConfig+0x508>
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800992c:	d212      	bcs.n	8009954 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	b29b      	uxth	r3, r3
 8009932:	f023 030f 	bic.w	r3, r3, #15
 8009936:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	085b      	lsrs	r3, r3, #1
 800993c:	b29b      	uxth	r3, r3
 800993e:	f003 0307 	and.w	r3, r3, #7
 8009942:	b29a      	uxth	r2, r3
 8009944:	8bfb      	ldrh	r3, [r7, #30]
 8009946:	4313      	orrs	r3, r2
 8009948:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	8bfa      	ldrh	r2, [r7, #30]
 8009950:	60da      	str	r2, [r3, #12]
 8009952:	e062      	b.n	8009a1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800995a:	e05e      	b.n	8009a1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800995c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009960:	2b08      	cmp	r3, #8
 8009962:	d828      	bhi.n	80099b6 <UART_SetConfig+0x56a>
 8009964:	a201      	add	r2, pc, #4	@ (adr r2, 800996c <UART_SetConfig+0x520>)
 8009966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996a:	bf00      	nop
 800996c:	08009991 	.word	0x08009991
 8009970:	08009999 	.word	0x08009999
 8009974:	080099a1 	.word	0x080099a1
 8009978:	080099b7 	.word	0x080099b7
 800997c:	080099a7 	.word	0x080099a7
 8009980:	080099b7 	.word	0x080099b7
 8009984:	080099b7 	.word	0x080099b7
 8009988:	080099b7 	.word	0x080099b7
 800998c:	080099af 	.word	0x080099af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009990:	f7fe f9c0 	bl	8007d14 <HAL_RCC_GetPCLK1Freq>
 8009994:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009996:	e014      	b.n	80099c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009998:	f7fe f9d2 	bl	8007d40 <HAL_RCC_GetPCLK2Freq>
 800999c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800999e:	e010      	b.n	80099c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099a0:	4b1a      	ldr	r3, [pc, #104]	@ (8009a0c <UART_SetConfig+0x5c0>)
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099a4:	e00d      	b.n	80099c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099a6:	f7fe f947 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 80099aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099ac:	e009      	b.n	80099c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099b4:	e005      	b.n	80099c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80099b6:	2300      	movs	r3, #0
 80099b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80099c0:	bf00      	nop
    }

    if (pclk != 0U)
 80099c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d028      	beq.n	8009a1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099cc:	4a10      	ldr	r2, [pc, #64]	@ (8009a10 <UART_SetConfig+0x5c4>)
 80099ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099d2:	461a      	mov	r2, r3
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	085b      	lsrs	r3, r3, #1
 80099e0:	441a      	add	r2, r3
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	2b0f      	cmp	r3, #15
 80099f0:	d910      	bls.n	8009a14 <UART_SetConfig+0x5c8>
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099f8:	d20c      	bcs.n	8009a14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60da      	str	r2, [r3, #12]
 8009a04:	e009      	b.n	8009a1a <UART_SetConfig+0x5ce>
 8009a06:	bf00      	nop
 8009a08:	40008000 	.word	0x40008000
 8009a0c:	00f42400 	.word	0x00f42400
 8009a10:	0800c554 	.word	0x0800c554
      }
      else
      {
        ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2200      	movs	r2, #0
 8009a34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3730      	adds	r7, #48	@ 0x30
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a50:	f003 0308 	and.w	r3, r3, #8
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00a      	beq.n	8009a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a94:	f003 0302 	and.w	r3, r3, #2
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00a      	beq.n	8009ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab6:	f003 0304 	and.w	r3, r3, #4
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad8:	f003 0310 	and.w	r3, r3, #16
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00a      	beq.n	8009af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	430a      	orrs	r2, r1
 8009af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afa:	f003 0320 	and.w	r3, r3, #32
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00a      	beq.n	8009b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	430a      	orrs	r2, r1
 8009b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d01a      	beq.n	8009b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b42:	d10a      	bne.n	8009b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	605a      	str	r2, [r3, #4]
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b098      	sub	sp, #96	@ 0x60
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b98:	f7f9 f810 	bl	8002bbc <HAL_GetTick>
 8009b9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0308 	and.w	r3, r3, #8
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d12f      	bne.n	8009c0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f88e 	bl	8009cdc <UART_WaitOnFlagUntilTimeout>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d022      	beq.n	8009c0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	461a      	mov	r2, r3
 8009be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009be6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bec:	e841 2300 	strex	r3, r2, [r1]
 8009bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1e6      	bne.n	8009bc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e063      	b.n	8009cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0304 	and.w	r3, r3, #4
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	d149      	bne.n	8009cae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c22:	2200      	movs	r2, #0
 8009c24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f857 	bl	8009cdc <UART_WaitOnFlagUntilTimeout>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d03c      	beq.n	8009cae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	623b      	str	r3, [r7, #32]
   return(result);
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c52:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e6      	bne.n	8009c34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	e853 3f00 	ldrex	r3, [r3]
 8009c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f023 0301 	bic.w	r3, r3, #1
 8009c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3308      	adds	r3, #8
 8009c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c86:	61fa      	str	r2, [r7, #28]
 8009c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	69b9      	ldr	r1, [r7, #24]
 8009c8c:	69fa      	ldr	r2, [r7, #28]
 8009c8e:	e841 2300 	strex	r3, r2, [r1]
 8009c92:	617b      	str	r3, [r7, #20]
   return(result);
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e5      	bne.n	8009c66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e012      	b.n	8009cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3758      	adds	r7, #88	@ 0x58
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cec:	e04f      	b.n	8009d8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf4:	d04b      	beq.n	8009d8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cf6:	f7f8 ff61 	bl	8002bbc <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	69ba      	ldr	r2, [r7, #24]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d302      	bcc.n	8009d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e04e      	b.n	8009dae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d037      	beq.n	8009d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b80      	cmp	r3, #128	@ 0x80
 8009d22:	d034      	beq.n	8009d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2b40      	cmp	r3, #64	@ 0x40
 8009d28:	d031      	beq.n	8009d8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f003 0308 	and.w	r3, r3, #8
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d110      	bne.n	8009d5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 f838 	bl	8009db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2208      	movs	r2, #8
 8009d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e029      	b.n	8009dae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d68:	d111      	bne.n	8009d8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 f81e 	bl	8009db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e00f      	b.n	8009dae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	69da      	ldr	r2, [r3, #28]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	4013      	ands	r3, r2
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	bf0c      	ite	eq
 8009d9e:	2301      	moveq	r3, #1
 8009da0:	2300      	movne	r3, #0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	461a      	mov	r2, r3
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d0a0      	beq.n	8009cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b095      	sub	sp, #84	@ 0x54
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc6:	e853 3f00 	ldrex	r3, [r3]
 8009dca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009de2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009de4:	e841 2300 	strex	r3, r2, [r1]
 8009de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e6      	bne.n	8009dbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3308      	adds	r3, #8
 8009df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	e853 3f00 	ldrex	r3, [r3]
 8009dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e06:	f023 0301 	bic.w	r3, r3, #1
 8009e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3308      	adds	r3, #8
 8009e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e1c:	e841 2300 	strex	r3, r2, [r1]
 8009e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1e3      	bne.n	8009df0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d118      	bne.n	8009e62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	e853 3f00 	ldrex	r3, [r3]
 8009e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f023 0310 	bic.w	r3, r3, #16
 8009e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e4e:	61bb      	str	r3, [r7, #24]
 8009e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e52:	6979      	ldr	r1, [r7, #20]
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	e841 2300 	strex	r3, r2, [r1]
 8009e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1e6      	bne.n	8009e30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e76:	bf00      	nop
 8009e78:	3754      	adds	r7, #84	@ 0x54
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d101      	bne.n	8009e98 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e94:	2302      	movs	r3, #2
 8009e96:	e027      	b.n	8009ee8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2224      	movs	r2, #36	@ 0x24
 8009ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0201 	bic.w	r2, r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009ec6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e02d      	b.n	8009f68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2224      	movs	r2, #36	@ 0x24
 8009f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0201 	bic.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	430a      	orrs	r2, r1
 8009f46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f84f 	bl	8009fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2220      	movs	r2, #32
 8009f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d101      	bne.n	8009f88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f84:	2302      	movs	r3, #2
 8009f86:	e02d      	b.n	8009fe4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2224      	movs	r2, #36	@ 0x24
 8009f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 0201 	bic.w	r2, r2, #1
 8009fae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f811 	bl	8009fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d108      	bne.n	800a00e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a00c:	e031      	b.n	800a072 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a00e:	2308      	movs	r3, #8
 800a010:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a012:	2308      	movs	r3, #8
 800a014:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	0e5b      	lsrs	r3, r3, #25
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f003 0307 	and.w	r3, r3, #7
 800a024:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	0f5b      	lsrs	r3, r3, #29
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 0307 	and.w	r3, r3, #7
 800a034:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	7b3a      	ldrb	r2, [r7, #12]
 800a03a:	4911      	ldr	r1, [pc, #68]	@ (800a080 <UARTEx_SetNbDataToProcess+0x94>)
 800a03c:	5c8a      	ldrb	r2, [r1, r2]
 800a03e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a042:	7b3a      	ldrb	r2, [r7, #12]
 800a044:	490f      	ldr	r1, [pc, #60]	@ (800a084 <UARTEx_SetNbDataToProcess+0x98>)
 800a046:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a048:	fb93 f3f2 	sdiv	r3, r3, r2
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	7b7a      	ldrb	r2, [r7, #13]
 800a058:	4909      	ldr	r1, [pc, #36]	@ (800a080 <UARTEx_SetNbDataToProcess+0x94>)
 800a05a:	5c8a      	ldrb	r2, [r1, r2]
 800a05c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a060:	7b7a      	ldrb	r2, [r7, #13]
 800a062:	4908      	ldr	r1, [pc, #32]	@ (800a084 <UARTEx_SetNbDataToProcess+0x98>)
 800a064:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a066:	fb93 f3f2 	sdiv	r3, r3, r2
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a072:	bf00      	nop
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	0800c56c 	.word	0x0800c56c
 800a084:	0800c574 	.word	0x0800c574

0800a088 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b096      	sub	sp, #88	@ 0x58
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3303      	adds	r3, #3
 800a09a:	f023 0303 	bic.w	r3, r3, #3
 800a09e:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0a4:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800a0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800a0a8:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0aa:	b672      	cpsid	i
#endif
    return(int_posture);
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800a0ae:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a0b0:	4b55      	ldr	r3, [pc, #340]	@ (800a208 <_tx_byte_allocate+0x180>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0be:	621a      	str	r2, [r3, #32]
 800a0c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c6:	f383 8810 	msr	PRIMASK, r3
}
 800a0ca:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 f9b2 	bl	800a438 <_tx_byte_pool_search>
 800a0d4:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0d6:	f3ef 8310 	mrs	r3, PRIMASK
 800a0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a0de:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0e0:	b672      	cpsid	i
    return(int_posture);
 800a0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800a0e4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800a0e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0f0:	e006      	b.n	800a100 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d101      	bne.n	800a100 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800a100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0d9      	beq.n	800a0ba <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a10a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800a10c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d008      	beq.n	800a124 <_tx_byte_allocate+0x9c>
 800a112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a114:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	f383 8810 	msr	PRIMASK, r3
}
 800a11c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800a11e:	2300      	movs	r3, #0
 800a120:	653b      	str	r3, [r7, #80]	@ 0x50
 800a122:	e06c      	b.n	800a1fe <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d061      	beq.n	800a1ee <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800a12a:	4b38      	ldr	r3, [pc, #224]	@ (800a20c <_tx_byte_allocate+0x184>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d007      	beq.n	800a142 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800a132:	2310      	movs	r3, #16
 800a134:	653b      	str	r3, [r7, #80]	@ 0x50
 800a136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a138:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	f383 8810 	msr	PRIMASK, r3
}
 800a140:	e05d      	b.n	800a1fe <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800a142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a144:	4a32      	ldr	r2, [pc, #200]	@ (800a210 <_tx_byte_allocate+0x188>)
 800a146:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800a148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800a14e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800a154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800a15a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a15c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a164:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800a178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a182:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800a184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a188:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800a18a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a18c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a18e:	675a      	str	r2, [r3, #116]	@ 0x74
 800a190:	e011      	b.n	800a1b6 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a19a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a19c:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a1a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1a8:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1ae:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1b4:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800a1b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1b8:	2209      	movs	r2, #9
 800a1ba:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a1bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1be:	2201      	movs	r2, #1
 800a1c0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a1c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800a1c8:	4b10      	ldr	r3, [pc, #64]	@ (800a20c <_tx_byte_allocate+0x184>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	4a0f      	ldr	r2, [pc, #60]	@ (800a20c <_tx_byte_allocate+0x184>)
 800a1d0:	6013      	str	r3, [r2, #0]
 800a1d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	f383 8810 	msr	PRIMASK, r3
}
 800a1dc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a1de:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a1e0:	f000 ff96 	bl	800b110 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800a1e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1ec:	e007      	b.n	800a1fe <_tx_byte_allocate+0x176>
 800a1ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f383 8810 	msr	PRIMASK, r3
}
 800a1f8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800a1fa:	2310      	movs	r3, #16
 800a1fc:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800a1fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800a200:	4618      	mov	r0, r3
 800a202:	3758      	adds	r7, #88	@ 0x58
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20000cd8 	.word	0x20000cd8
 800a20c:	20000d70 	.word	0x20000d70
 800a210:	0800a215 	.word	0x0800a215

0800a214 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b08e      	sub	sp, #56	@ 0x38
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a21e:	f3ef 8310 	mrs	r3, PRIMASK
 800a222:	623b      	str	r3, [r7, #32]
    return(posture);
 800a224:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a226:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a228:	b672      	cpsid	i
    return(int_posture);
 800a22a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800a22c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a232:	4a33      	ldr	r2, [pc, #204]	@ (800a300 <_tx_byte_pool_cleanup+0xec>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d158      	bne.n	800a2ea <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	d152      	bne.n	800a2ea <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a248:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800a24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d04c      	beq.n	800a2ea <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800a250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a2b      	ldr	r2, [pc, #172]	@ (800a304 <_tx_byte_pool_cleanup+0xf0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d147      	bne.n	800a2ea <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800a25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d043      	beq.n	800a2ea <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800a268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26c:	1e5a      	subs	r2, r3, #1
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a276:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a280:	2200      	movs	r2, #0
 800a282:	625a      	str	r2, [r3, #36]	@ 0x24
 800a284:	e013      	b.n	800a2ae <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a28a:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a290:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a296:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a29c:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d102      	bne.n	800a2ae <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2ac:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2b2:	2b09      	cmp	r3, #9
 800a2b4:	d119      	bne.n	800a2ea <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2210      	movs	r2, #16
 800a2ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a2be:	4b12      	ldr	r3, [pc, #72]	@ (800a308 <_tx_byte_pool_cleanup+0xf4>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	4a10      	ldr	r2, [pc, #64]	@ (800a308 <_tx_byte_pool_cleanup+0xf4>)
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f383 8810 	msr	PRIMASK, r3
}
 800a2d2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fe1b 	bl	800af10 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2da:	f3ef 8310 	mrs	r3, PRIMASK
 800a2de:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a2e0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a2e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2e4:	b672      	cpsid	i
    return(int_posture);
 800a2e6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a2e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f383 8810 	msr	PRIMASK, r3
}
 800a2f4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a2f6:	bf00      	nop
 800a2f8:	3738      	adds	r7, #56	@ 0x38
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	0800a215 	.word	0x0800a215
 800a304:	42595445 	.word	0x42595445
 800a308:	20000d70 	.word	0x20000d70

0800a30c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08e      	sub	sp, #56	@ 0x38
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800a31a:	2234      	movs	r2, #52	@ 0x34
 800a31c:	2100      	movs	r1, #0
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f002 f84c 	bl	800c3bc <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	f023 0303 	bic.w	r3, r3, #3
 800a32a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	f1a3 0208 	sub.w	r2, r3, #8
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2202      	movs	r2, #2
 800a358:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800a35e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	4413      	add	r3, r2
 800a364:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800a366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a368:	3b04      	subs	r3, #4
 800a36a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800a374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a378:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800a37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37c:	3b04      	subs	r3, #4
 800a37e:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800a38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a396:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800a39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39e:	3304      	adds	r3, #4
 800a3a0:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	4a1f      	ldr	r2, [pc, #124]	@ (800a428 <_tx_byte_pool_create+0x11c>)
 800a3aa:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a3b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a3b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a3ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a3bc:	b672      	cpsid	i
    return(int_posture);
 800a3be:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800a3c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	4a19      	ldr	r2, [pc, #100]	@ (800a42c <_tx_byte_pool_create+0x120>)
 800a3c6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800a3c8:	4b19      	ldr	r3, [pc, #100]	@ (800a430 <_tx_byte_pool_create+0x124>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d109      	bne.n	800a3e4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800a3d0:	4a18      	ldr	r2, [pc, #96]	@ (800a434 <_tx_byte_pool_create+0x128>)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	631a      	str	r2, [r3, #48]	@ 0x30
 800a3e2:	e011      	b.n	800a408 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800a3e4:	4b13      	ldr	r3, [pc, #76]	@ (800a434 <_tx_byte_pool_create+0x128>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ee:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	69fa      	ldr	r2, [r7, #28]
 800a400:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6a3a      	ldr	r2, [r7, #32]
 800a406:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800a408:	4b09      	ldr	r3, [pc, #36]	@ (800a430 <_tx_byte_pool_create+0x124>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3301      	adds	r3, #1
 800a40e:	4a08      	ldr	r2, [pc, #32]	@ (800a430 <_tx_byte_pool_create+0x124>)
 800a410:	6013      	str	r3, [r2, #0]
 800a412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a414:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f383 8810 	msr	PRIMASK, r3
}
 800a41c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3738      	adds	r7, #56	@ 0x38
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	ffffeeee 	.word	0xffffeeee
 800a42c:	42595445 	.word	0x42595445
 800a430:	20000ccc 	.word	0x20000ccc
 800a434:	20000cc8 	.word	0x20000cc8

0800a438 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800a438:	b480      	push	{r7}
 800a43a:	b097      	sub	sp, #92	@ 0x5c
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800a442:	2300      	movs	r3, #0
 800a444:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a446:	f3ef 8310 	mrs	r3, PRIMASK
 800a44a:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800a44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800a44e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a450:	b672      	cpsid	i
    return(int_posture);
 800a452:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800a454:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	689a      	ldr	r2, [r3, #8]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	3b02      	subs	r3, #2
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	4413      	add	r3, r2
 800a464:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d308      	bcc.n	800a480 <_tx_byte_pool_search+0x48>
 800a46e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a470:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	f383 8810 	msr	PRIMASK, r3
}
 800a478:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800a47a:	2300      	movs	r3, #0
 800a47c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a47e:	e0dd      	b.n	800a63c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a480:	4b72      	ldr	r3, [pc, #456]	@ (800a64c <_tx_byte_pool_search+0x214>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a48a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	3301      	adds	r3, #1
 800a498:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800a49a:	2300      	movs	r3, #0
 800a49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800a49e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a68      	ldr	r2, [pc, #416]	@ (800a650 <_tx_byte_pool_search+0x218>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d143      	bne.n	800a53a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800a4b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d104      	bne.n	800a4c2 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a4bc:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800a4c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4c4:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800a4cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800a4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4d6:	3b08      	subs	r3, #8
 800a4d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800a4da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d257      	bcs.n	800a592 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800a4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ee:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a56      	ldr	r2, [pc, #344]	@ (800a650 <_tx_byte_pool_search+0x218>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d113      	bne.n	800a522 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800a4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	1e5a      	subs	r2, r3, #1
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a516:	429a      	cmp	r2, r3
 800a518:	d114      	bne.n	800a544 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a51e:	615a      	str	r2, [r3, #20]
 800a520:	e010      	b.n	800a544 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800a522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a524:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800a526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800a52c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d008      	beq.n	800a544 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800a532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a534:	3b01      	subs	r3, #1
 800a536:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a538:	e004      	b.n	800a544 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800a53a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a53c:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800a53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800a544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800a54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a54c:	3b01      	subs	r3, #1
 800a54e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a552:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f383 8810 	msr	PRIMASK, r3
}
 800a55a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a55c:	f3ef 8310 	mrs	r3, PRIMASK
 800a560:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a562:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a564:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a566:	b672      	cpsid	i
    return(int_posture);
 800a568:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800a56a:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a572:	429a      	cmp	r2, r3
 800a574:	d009      	beq.n	800a58a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	3301      	adds	r3, #1
 800a582:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a588:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800a58a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d186      	bne.n	800a49e <_tx_byte_pool_search+0x66>
 800a590:	e000      	b.n	800a594 <_tx_byte_pool_search+0x15c>
                    break;
 800a592:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800a594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a596:	2b00      	cmp	r3, #0
 800a598:	d048      	beq.n	800a62c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800a59a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	2b13      	cmp	r3, #19
 800a5a2:	d91e      	bls.n	800a5e2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5aa:	4413      	add	r3, r2
 800a5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800a5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b0:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800a5b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5b4:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5bc:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800a5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c6:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ca:	4a21      	ldr	r2, [pc, #132]	@ (800a650 <_tx_byte_pool_search+0x218>)
 800a5cc:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5dc:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800a5e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ea:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	f1a3 0208 	sub.w	r2, r3, #8
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a608:	429a      	cmp	r2, r3
 800a60a:	d105      	bne.n	800a618 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800a60c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a60e:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	615a      	str	r2, [r3, #20]
 800a618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a61a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f383 8810 	msr	PRIMASK, r3
}
 800a622:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800a624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a626:	3308      	adds	r3, #8
 800a628:	653b      	str	r3, [r7, #80]	@ 0x50
 800a62a:	e007      	b.n	800a63c <_tx_byte_pool_search+0x204>
 800a62c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a62e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	f383 8810 	msr	PRIMASK, r3
}
 800a636:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800a638:	2300      	movs	r3, #0
 800a63a:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800a63c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800a63e:	4618      	mov	r0, r3
 800a640:	375c      	adds	r7, #92	@ 0x5c
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	20000cd8 	.word	0x20000cd8
 800a650:	ffffeeee 	.word	0xffffeeee

0800a654 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800a658:	f000 fb18 	bl	800ac8c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800a65c:	f001 f880 	bl	800b760 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800a660:	4b12      	ldr	r3, [pc, #72]	@ (800a6ac <_tx_initialize_high_level+0x58>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	4b12      	ldr	r3, [pc, #72]	@ (800a6b0 <_tx_initialize_high_level+0x5c>)
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800a66c:	4b11      	ldr	r3, [pc, #68]	@ (800a6b4 <_tx_initialize_high_level+0x60>)
 800a66e:	2200      	movs	r2, #0
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	4b11      	ldr	r3, [pc, #68]	@ (800a6b8 <_tx_initialize_high_level+0x64>)
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800a678:	4b10      	ldr	r3, [pc, #64]	@ (800a6bc <_tx_initialize_high_level+0x68>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	4b10      	ldr	r3, [pc, #64]	@ (800a6c0 <_tx_initialize_high_level+0x6c>)
 800a680:	2200      	movs	r2, #0
 800a682:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800a684:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c4 <_tx_initialize_high_level+0x70>)
 800a686:	2200      	movs	r2, #0
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c8 <_tx_initialize_high_level+0x74>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800a690:	4b0e      	ldr	r3, [pc, #56]	@ (800a6cc <_tx_initialize_high_level+0x78>)
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]
 800a696:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d0 <_tx_initialize_high_level+0x7c>)
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800a69c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d4 <_tx_initialize_high_level+0x80>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d8 <_tx_initialize_high_level+0x84>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]
#endif
}
 800a6a8:	bf00      	nop
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	20000ca0 	.word	0x20000ca0
 800a6b0:	20000ca4 	.word	0x20000ca4
 800a6b4:	20000ca8 	.word	0x20000ca8
 800a6b8:	20000cac 	.word	0x20000cac
 800a6bc:	20000cb0 	.word	0x20000cb0
 800a6c0:	20000cb4 	.word	0x20000cb4
 800a6c4:	20000cc0 	.word	0x20000cc0
 800a6c8:	20000cc4 	.word	0x20000cc4
 800a6cc:	20000cc8 	.word	0x20000cc8
 800a6d0:	20000ccc 	.word	0x20000ccc
 800a6d4:	20000cb8 	.word	0x20000cb8
 800a6d8:	20000cbc 	.word	0x20000cbc

0800a6dc <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800a6e0:	4b10      	ldr	r3, [pc, #64]	@ (800a724 <_tx_initialize_kernel_enter+0x48>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800a6e8:	d00c      	beq.n	800a704 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800a6ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a724 <_tx_initialize_kernel_enter+0x48>)
 800a6ec:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800a6f0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800a6f2:	f7f5 fd95 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800a6f6:	f7ff ffad 	bl	800a654 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800a6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a728 <_tx_initialize_kernel_enter+0x4c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	4a09      	ldr	r2, [pc, #36]	@ (800a728 <_tx_initialize_kernel_enter+0x4c>)
 800a702:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800a704:	4b07      	ldr	r3, [pc, #28]	@ (800a724 <_tx_initialize_kernel_enter+0x48>)
 800a706:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800a70a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800a70c:	4b07      	ldr	r3, [pc, #28]	@ (800a72c <_tx_initialize_kernel_enter+0x50>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4618      	mov	r0, r3
 800a712:	f7f6 f9f5 	bl	8000b00 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800a716:	4b03      	ldr	r3, [pc, #12]	@ (800a724 <_tx_initialize_kernel_enter+0x48>)
 800a718:	2200      	movs	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800a71c:	f7f5 fdc0 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800a720:	bf00      	nop
 800a722:	bd80      	pop	{r7, pc}
 800a724:	2000018c 	.word	0x2000018c
 800a728:	20000d70 	.word	0x20000d70
 800a72c:	20000cd0 	.word	0x20000cd0

0800a730 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08e      	sub	sp, #56	@ 0x38
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a73a:	f3ef 8310 	mrs	r3, PRIMASK
 800a73e:	623b      	str	r3, [r7, #32]
    return(posture);
 800a740:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a742:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a744:	b672      	cpsid	i
    return(int_posture);
 800a746:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800a748:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a74e:	4a33      	ldr	r2, [pc, #204]	@ (800a81c <_tx_semaphore_cleanup+0xec>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d158      	bne.n	800a806 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d152      	bne.n	800a806 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a764:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d04c      	beq.n	800a806 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a2b      	ldr	r2, [pc, #172]	@ (800a820 <_tx_semaphore_cleanup+0xf0>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d147      	bne.n	800a806 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d043      	beq.n	800a806 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800a784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	1e5a      	subs	r2, r3, #1
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a796:	2b00      	cmp	r3, #0
 800a798:	d103      	bne.n	800a7a2 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	2200      	movs	r2, #0
 800a79e:	60da      	str	r2, [r3, #12]
 800a7a0:	e013      	b.n	800a7ca <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7a6:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7ac:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7b2:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7b8:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d102      	bne.n	800a7ca <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7c8:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ce:	2b06      	cmp	r3, #6
 800a7d0:	d119      	bne.n	800a806 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	220d      	movs	r2, #13
 800a7d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a7da:	4b12      	ldr	r3, [pc, #72]	@ (800a824 <_tx_semaphore_cleanup+0xf4>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	4a10      	ldr	r2, [pc, #64]	@ (800a824 <_tx_semaphore_cleanup+0xf4>)
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f383 8810 	msr	PRIMASK, r3
}
 800a7ee:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fb8d 	bl	800af10 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a7f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a7fa:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a7fc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a7fe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a800:	b672      	cpsid	i
    return(int_posture);
 800a802:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a804:	637b      	str	r3, [r7, #52]	@ 0x34
 800a806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a808:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f383 8810 	msr	PRIMASK, r3
}
 800a810:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a812:	bf00      	nop
 800a814:	3738      	adds	r7, #56	@ 0x38
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	0800a731 	.word	0x0800a731
 800a820:	53454d41 	.word	0x53454d41
 800a824:	20000d70 	.word	0x20000d70

0800a828 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08a      	sub	sp, #40	@ 0x28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800a834:	221c      	movs	r2, #28
 800a836:	2100      	movs	r1, #0
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f001 fdbf 	bl	800c3bc <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a84a:	f3ef 8310 	mrs	r3, PRIMASK
 800a84e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a850:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a852:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a854:	b672      	cpsid	i
    return(int_posture);
 800a856:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	4a18      	ldr	r2, [pc, #96]	@ (800a8c0 <_tx_semaphore_create+0x98>)
 800a85e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800a860:	4b18      	ldr	r3, [pc, #96]	@ (800a8c4 <_tx_semaphore_create+0x9c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d109      	bne.n	800a87c <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800a868:	4a17      	ldr	r2, [pc, #92]	@ (800a8c8 <_tx_semaphore_create+0xa0>)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	619a      	str	r2, [r3, #24]
 800a87a:	e011      	b.n	800a8a0 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800a87c:	4b12      	ldr	r3, [pc, #72]	@ (800a8c8 <_tx_semaphore_create+0xa0>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a3a      	ldr	r2, [r7, #32]
 800a89e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800a8a0:	4b08      	ldr	r3, [pc, #32]	@ (800a8c4 <_tx_semaphore_create+0x9c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	4a07      	ldr	r2, [pc, #28]	@ (800a8c4 <_tx_semaphore_create+0x9c>)
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	f383 8810 	msr	PRIMASK, r3
}
 800a8b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3728      	adds	r7, #40	@ 0x28
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	53454d41 	.word	0x53454d41
 800a8c4:	20000ca4 	.word	0x20000ca4
 800a8c8:	20000ca0 	.word	0x20000ca0

0800a8cc <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08e      	sub	sp, #56	@ 0x38
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8da:	f3ef 8310 	mrs	r3, PRIMASK
 800a8de:	623b      	str	r3, [r7, #32]
    return(posture);
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a8e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8e4:	b672      	cpsid	i
    return(int_posture);
 800a8e6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800a8e8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00a      	beq.n	800a908 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	1e5a      	subs	r2, r3, #1
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	609a      	str	r2, [r3, #8]
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	f383 8810 	msr	PRIMASK, r3
}
 800a906:	e068      	b.n	800a9da <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d05d      	beq.n	800a9ca <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800a90e:	4b35      	ldr	r3, [pc, #212]	@ (800a9e4 <_tx_semaphore_get+0x118>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d008      	beq.n	800a928 <_tx_semaphore_get+0x5c>
 800a916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a918:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f383 8810 	msr	PRIMASK, r3
}
 800a920:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800a922:	230d      	movs	r3, #13
 800a924:	637b      	str	r3, [r7, #52]	@ 0x34
 800a926:	e058      	b.n	800a9da <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a928:	4b2f      	ldr	r3, [pc, #188]	@ (800a9e8 <_tx_semaphore_get+0x11c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800a92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a930:	4a2e      	ldr	r2, [pc, #184]	@ (800a9ec <_tx_semaphore_get+0x120>)
 800a932:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800a934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800a93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a944:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d109      	bne.n	800a964 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a954:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800a956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a95a:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800a95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a960:	675a      	str	r2, [r3, #116]	@ 0x74
 800a962:	e011      	b.n	800a988 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a96e:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a974:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a97a:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a980:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a986:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	1c5a      	adds	r2, r3, #1
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800a992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a994:	2206      	movs	r2, #6
 800a996:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99a:	2201      	movs	r2, #1
 800a99c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a9a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a9e4 <_tx_semaphore_get+0x118>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	4a0e      	ldr	r2, [pc, #56]	@ (800a9e4 <_tx_semaphore_get+0x118>)
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f383 8810 	msr	PRIMASK, r3
}
 800a9b8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a9ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9bc:	f000 fba8 	bl	800b110 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800a9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9c8:	e007      	b.n	800a9da <_tx_semaphore_get+0x10e>
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f383 8810 	msr	PRIMASK, r3
}
 800a9d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800a9d6:	230d      	movs	r3, #13
 800a9d8:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800a9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3738      	adds	r7, #56	@ 0x38
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20000d70 	.word	0x20000d70
 800a9e8:	20000cd8 	.word	0x20000cd8
 800a9ec:	0800a731 	.word	0x0800a731

0800a9f0 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08c      	sub	sp, #48	@ 0x30
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9fc:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a9fe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aa00:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa02:	b672      	cpsid	i
    return(int_posture);
 800aa04:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800aa06:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800aa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10a      	bne.n	800aa2a <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	609a      	str	r2, [r3, #8]
 800aa1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa20:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f383 8810 	msr	PRIMASK, r3
}
 800aa28:	e033      	b.n	800aa92 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800aa30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa32:	3b01      	subs	r3, #1
 800aa34:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800aa36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d103      	bne.n	800aa44 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	60da      	str	r2, [r3, #12]
 800aa42:	e00e      	b.n	800aa62 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa48:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a3a      	ldr	r2, [r7, #32]
 800aa4e:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800aa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa54:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	6a3a      	ldr	r2, [r7, #32]
 800aa60:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa66:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa70:	2200      	movs	r2, #0
 800aa72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800aa76:	4b09      	ldr	r3, [pc, #36]	@ (800aa9c <_tx_semaphore_put+0xac>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	4a07      	ldr	r2, [pc, #28]	@ (800aa9c <_tx_semaphore_put+0xac>)
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa82:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f383 8810 	msr	PRIMASK, r3
}
 800aa8a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800aa8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa8e:	f000 fa3f 	bl	800af10 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3730      	adds	r7, #48	@ 0x30
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20000d70 	.word	0x20000d70

0800aaa0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b092      	sub	sp, #72	@ 0x48
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800aaae:	2300      	movs	r3, #0
 800aab0:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800aab2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aab4:	21ef      	movs	r1, #239	@ 0xef
 800aab6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800aab8:	f001 fc80 	bl	800c3bc <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800aabc:	22b0      	movs	r2, #176	@ 0xb0
 800aabe:	2100      	movs	r1, #0
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f001 fc7b 	bl	800c3bc <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aadc:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aae2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aae8:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aaee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aaf6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aafc:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2220      	movs	r2, #32
 800ab02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800ab06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800ab0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab10:	4413      	add	r3, r2
 800ab12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab18:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800ab1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d007      	beq.n	800ab32 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800ab30:	e006      	b.n	800ab40 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab36:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab3c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2203      	movs	r2, #3
 800ab44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	4a48      	ldr	r2, [pc, #288]	@ (800ac6c <_tx_thread_create+0x1cc>)
 800ab4a:	655a      	str	r2, [r3, #84]	@ 0x54
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800ab52:	4947      	ldr	r1, [pc, #284]	@ (800ac70 <_tx_thread_create+0x1d0>)
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7f5 fc03 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800ab60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800ab62:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab64:	b672      	cpsid	i
    return(int_posture);
 800ab66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ab68:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4a41      	ldr	r2, [pc, #260]	@ (800ac74 <_tx_thread_create+0x1d4>)
 800ab6e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800ab70:	4b41      	ldr	r3, [pc, #260]	@ (800ac78 <_tx_thread_create+0x1d8>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10b      	bne.n	800ab90 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800ab78:	4a40      	ldr	r2, [pc, #256]	@ (800ac7c <_tx_thread_create+0x1dc>)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800ab8e:	e016      	b.n	800abbe <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800ab90:	4b3a      	ldr	r3, [pc, #232]	@ (800ac7c <_tx_thread_create+0x1dc>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800ab96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab9c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800aba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800abbe:	4b2e      	ldr	r3, [pc, #184]	@ (800ac78 <_tx_thread_create+0x1d8>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3301      	adds	r3, #1
 800abc4:	4a2c      	ldr	r2, [pc, #176]	@ (800ac78 <_tx_thread_create+0x1d8>)
 800abc6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800abc8:	4b2d      	ldr	r3, [pc, #180]	@ (800ac80 <_tx_thread_create+0x1e0>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3301      	adds	r3, #1
 800abce:	4a2c      	ldr	r2, [pc, #176]	@ (800ac80 <_tx_thread_create+0x1e0>)
 800abd0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800abd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d129      	bne.n	800ac2c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800abd8:	f3ef 8305 	mrs	r3, IPSR
 800abdc:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800abde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800abe0:	4b28      	ldr	r3, [pc, #160]	@ (800ac84 <_tx_thread_create+0x1e4>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800abea:	d30d      	bcc.n	800ac08 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800abec:	4b26      	ldr	r3, [pc, #152]	@ (800ac88 <_tx_thread_create+0x1e8>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800abf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d009      	beq.n	800ac0c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800abf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abfc:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800abfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac04:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ac06:	e001      	b.n	800ac0c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	f383 8810 	msr	PRIMASK, r3
}
 800ac16:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f979 	bl	800af10 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800ac1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01e      	beq.n	800ac62 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800ac24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac28:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ac2a:	e01a      	b.n	800ac62 <_tx_thread_create+0x1c2>
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	f383 8810 	msr	PRIMASK, r3
}
 800ac36:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac38:	f3ef 8310 	mrs	r3, PRIMASK
 800ac3c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ac3e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ac40:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac42:	b672      	cpsid	i
    return(int_posture);
 800ac44:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800ac46:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800ac48:	4b0d      	ldr	r3, [pc, #52]	@ (800ac80 <_tx_thread_create+0x1e0>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ac80 <_tx_thread_create+0x1e0>)
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac54:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	f383 8810 	msr	PRIMASK, r3
}
 800ac5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ac5e:	f000 f91d 	bl	800ae9c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3748      	adds	r7, #72	@ 0x48
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	0800b3e5 	.word	0x0800b3e5
 800ac70:	0800ad05 	.word	0x0800ad05
 800ac74:	54485244 	.word	0x54485244
 800ac78:	20000ce4 	.word	0x20000ce4
 800ac7c:	20000ce0 	.word	0x20000ce0
 800ac80:	20000d70 	.word	0x20000d70
 800ac84:	2000018c 	.word	0x2000018c
 800ac88:	20000cdc 	.word	0x20000cdc

0800ac8c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800ac90:	4b12      	ldr	r3, [pc, #72]	@ (800acdc <_tx_thread_initialize+0x50>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800ac96:	4b12      	ldr	r3, [pc, #72]	@ (800ace0 <_tx_thread_initialize+0x54>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800ac9c:	4b11      	ldr	r3, [pc, #68]	@ (800ace4 <_tx_thread_initialize+0x58>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800aca2:	4b11      	ldr	r3, [pc, #68]	@ (800ace8 <_tx_thread_initialize+0x5c>)
 800aca4:	2220      	movs	r2, #32
 800aca6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800aca8:	2280      	movs	r2, #128	@ 0x80
 800acaa:	2100      	movs	r1, #0
 800acac:	480f      	ldr	r0, [pc, #60]	@ (800acec <_tx_thread_initialize+0x60>)
 800acae:	f001 fb85 	bl	800c3bc <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800acb2:	4b0f      	ldr	r3, [pc, #60]	@ (800acf0 <_tx_thread_initialize+0x64>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800acb8:	4b0e      	ldr	r3, [pc, #56]	@ (800acf4 <_tx_thread_initialize+0x68>)
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800acbe:	4b0e      	ldr	r3, [pc, #56]	@ (800acf8 <_tx_thread_initialize+0x6c>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800acc4:	4b0d      	ldr	r3, [pc, #52]	@ (800acfc <_tx_thread_initialize+0x70>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800acca:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <_tx_thread_initialize+0x74>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800acd2:	4a0b      	ldr	r2, [pc, #44]	@ (800ad00 <_tx_thread_initialize+0x74>)
 800acd4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800acd6:	bf00      	nop
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20000cd8 	.word	0x20000cd8
 800ace0:	20000cdc 	.word	0x20000cdc
 800ace4:	20000ce8 	.word	0x20000ce8
 800ace8:	20000cec 	.word	0x20000cec
 800acec:	20000cf0 	.word	0x20000cf0
 800acf0:	20000ce0 	.word	0x20000ce0
 800acf4:	20000ce4 	.word	0x20000ce4
 800acf8:	20000d70 	.word	0x20000d70
 800acfc:	20000d74 	.word	0x20000d74
 800ad00:	20000d78 	.word	0x20000d78

0800ad04 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ad0a:	4b21      	ldr	r3, [pc, #132]	@ (800ad90 <_tx_thread_shell_entry+0x8c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad14:	69fa      	ldr	r2, [r7, #28]
 800ad16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800ad1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ad94 <_tx_thread_shell_entry+0x90>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800ad24:	4b1b      	ldr	r3, [pc, #108]	@ (800ad94 <_tx_thread_shell_entry+0x90>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	69f8      	ldr	r0, [r7, #28]
 800ad2a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ad30:	607b      	str	r3, [r7, #4]
    return(posture);
 800ad32:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ad34:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad36:	b672      	cpsid	i
    return(int_posture);
 800ad38:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800ad3a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	2201      	movs	r2, #1
 800ad46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ad4e:	4b12      	ldr	r3, [pc, #72]	@ (800ad98 <_tx_thread_shell_entry+0x94>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3301      	adds	r3, #1
 800ad54:	4a10      	ldr	r2, [pc, #64]	@ (800ad98 <_tx_thread_shell_entry+0x94>)
 800ad56:	6013      	str	r3, [r2, #0]
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	f383 8810 	msr	PRIMASK, r3
}
 800ad62:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800ad64:	f3ef 8314 	mrs	r3, CONTROL
 800ad68:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ad6a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800ad6c:	617b      	str	r3, [r7, #20]
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f023 0304 	bic.w	r3, r3, #4
 800ad74:	617b      	str	r3, [r7, #20]
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	f383 8814 	msr	CONTROL, r3
}
 800ad80:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800ad82:	69f8      	ldr	r0, [r7, #28]
 800ad84:	f000 f9c4 	bl	800b110 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ad88:	bf00      	nop
 800ad8a:	3720      	adds	r7, #32
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	20000cd8 	.word	0x20000cd8
 800ad94:	20000d74 	.word	0x20000d74
 800ad98:	20000d70 	.word	0x20000d70

0800ad9c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08e      	sub	sp, #56	@ 0x38
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ada4:	f3ef 8310 	mrs	r3, PRIMASK
 800ada8:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800adac:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800adae:	b672      	cpsid	i
    return(int_posture);
 800adb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800adb2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800adb4:	4b35      	ldr	r3, [pc, #212]	@ (800ae8c <_tx_thread_sleep+0xf0>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800adba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d108      	bne.n	800add2 <_tx_thread_sleep+0x36>
 800adc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800adc4:	6a3b      	ldr	r3, [r7, #32]
 800adc6:	f383 8810 	msr	PRIMASK, r3
}
 800adca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800adcc:	2313      	movs	r3, #19
 800adce:	637b      	str	r3, [r7, #52]	@ 0x34
 800add0:	e056      	b.n	800ae80 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800add2:	f3ef 8305 	mrs	r3, IPSR
 800add6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800add8:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800adda:	4b2d      	ldr	r3, [pc, #180]	@ (800ae90 <_tx_thread_sleep+0xf4>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4313      	orrs	r3, r2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d008      	beq.n	800adf6 <_tx_thread_sleep+0x5a>
 800ade4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	f383 8810 	msr	PRIMASK, r3
}
 800adee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800adf0:	2313      	movs	r3, #19
 800adf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800adf4:	e044      	b.n	800ae80 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800adf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf8:	4a26      	ldr	r2, [pc, #152]	@ (800ae94 <_tx_thread_sleep+0xf8>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d108      	bne.n	800ae10 <_tx_thread_sleep+0x74>
 800adfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae00:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f383 8810 	msr	PRIMASK, r3
}
 800ae08:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800ae0a:	2313      	movs	r3, #19
 800ae0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae0e:	e037      	b.n	800ae80 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d108      	bne.n	800ae28 <_tx_thread_sleep+0x8c>
 800ae16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	f383 8810 	msr	PRIMASK, r3
}
 800ae20:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800ae22:	2300      	movs	r3, #0
 800ae24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae26:	e02b      	b.n	800ae80 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800ae28:	4b1b      	ldr	r3, [pc, #108]	@ (800ae98 <_tx_thread_sleep+0xfc>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d008      	beq.n	800ae42 <_tx_thread_sleep+0xa6>
 800ae30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f383 8810 	msr	PRIMASK, r3
}
 800ae3a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800ae3c:	2313      	movs	r3, #19
 800ae3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae40:	e01e      	b.n	800ae80 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800ae42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae44:	2204      	movs	r2, #4
 800ae46:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ae4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae50:	2200      	movs	r2, #0
 800ae52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800ae56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ae5c:	4b0e      	ldr	r3, [pc, #56]	@ (800ae98 <_tx_thread_sleep+0xfc>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	4a0d      	ldr	r2, [pc, #52]	@ (800ae98 <_tx_thread_sleep+0xfc>)
 800ae64:	6013      	str	r3, [r2, #0]
 800ae66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae68:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	f383 8810 	msr	PRIMASK, r3
}
 800ae70:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ae72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae74:	f000 f94c 	bl	800b110 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ae78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800ae80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3738      	adds	r7, #56	@ 0x38
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000cd8 	.word	0x20000cd8
 800ae90:	2000018c 	.word	0x2000018c
 800ae94:	20000e20 	.word	0x20000e20
 800ae98:	20000d70 	.word	0x20000d70

0800ae9c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b089      	sub	sp, #36	@ 0x24
 800aea0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800aea2:	4b17      	ldr	r3, [pc, #92]	@ (800af00 <_tx_thread_system_preempt_check+0x64>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d121      	bne.n	800aef2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800aeae:	4b15      	ldr	r3, [pc, #84]	@ (800af04 <_tx_thread_system_preempt_check+0x68>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800aeb4:	4b14      	ldr	r3, [pc, #80]	@ (800af08 <_tx_thread_system_preempt_check+0x6c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d017      	beq.n	800aef2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800aec2:	4b12      	ldr	r3, [pc, #72]	@ (800af0c <_tx_thread_system_preempt_check+0x70>)
 800aec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aec8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aeca:	f3ef 8305 	mrs	r3, IPSR
 800aece:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800aed0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10c      	bne.n	800aef0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aed6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeda:	60fb      	str	r3, [r7, #12]
    return(posture);
 800aedc:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800aede:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800aee0:	b662      	cpsie	i
}
 800aee2:	bf00      	nop
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f383 8810 	msr	PRIMASK, r3
}
 800aeee:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800aef0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800aef2:	bf00      	nop
 800aef4:	3724      	adds	r7, #36	@ 0x24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	20000d70 	.word	0x20000d70
 800af04:	20000cd8 	.word	0x20000cd8
 800af08:	20000cdc 	.word	0x20000cdc
 800af0c:	e000ed04 	.word	0xe000ed04

0800af10 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b096      	sub	sp, #88	@ 0x58
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af18:	f3ef 8310 	mrs	r3, PRIMASK
 800af1c:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800af1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800af20:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800af22:	b672      	cpsid	i
    return(int_posture);
 800af24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800af26:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d005      	beq.n	800af3c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	334c      	adds	r3, #76	@ 0x4c
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fcf1 	bl	800b91c <_tx_timer_system_deactivate>
 800af3a:	e002      	b.n	800af42 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800af42:	4b6c      	ldr	r3, [pc, #432]	@ (800b0f4 <_tx_thread_system_resume+0x1e4>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3b01      	subs	r3, #1
 800af48:	4a6a      	ldr	r2, [pc, #424]	@ (800b0f4 <_tx_thread_system_resume+0x1e4>)
 800af4a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af50:	2b00      	cmp	r3, #0
 800af52:	f040 8083 	bne.w	800b05c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f000 8097 	beq.w	800b08e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af64:	2b00      	cmp	r3, #0
 800af66:	d172      	bne.n	800b04e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af72:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800af74:	4a60      	ldr	r2, [pc, #384]	@ (800b0f8 <_tx_thread_system_resume+0x1e8>)
 800af76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800af7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d154      	bne.n	800b02e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800af84:	495c      	ldr	r1, [pc, #368]	@ (800b0f8 <_tx_thread_system_resume+0x1e8>)
 800af86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800af9a:	2201      	movs	r2, #1
 800af9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af9e:	fa02 f303 	lsl.w	r3, r2, r3
 800afa2:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800afa4:	4b55      	ldr	r3, [pc, #340]	@ (800b0fc <_tx_thread_system_resume+0x1ec>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afaa:	4313      	orrs	r3, r2
 800afac:	4a53      	ldr	r2, [pc, #332]	@ (800b0fc <_tx_thread_system_resume+0x1ec>)
 800afae:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800afb0:	4b53      	ldr	r3, [pc, #332]	@ (800b100 <_tx_thread_system_resume+0x1f0>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d269      	bcs.n	800b08e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800afba:	4a51      	ldr	r2, [pc, #324]	@ (800b100 <_tx_thread_system_resume+0x1f0>)
 800afbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afbe:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800afc0:	4b50      	ldr	r3, [pc, #320]	@ (800b104 <_tx_thread_system_resume+0x1f4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800afc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d103      	bne.n	800afd4 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800afcc:	4a4d      	ldr	r2, [pc, #308]	@ (800b104 <_tx_thread_system_resume+0x1f4>)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6013      	str	r3, [r2, #0]
 800afd2:	e05c      	b.n	800b08e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800afd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800afda:	429a      	cmp	r2, r3
 800afdc:	d257      	bcs.n	800b08e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800afde:	4a49      	ldr	r2, [pc, #292]	@ (800b104 <_tx_thread_system_resume+0x1f4>)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6013      	str	r3, [r2, #0]
 800afe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afea:	f383 8810 	msr	PRIMASK, r3
}
 800afee:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800aff0:	4b40      	ldr	r3, [pc, #256]	@ (800b0f4 <_tx_thread_system_resume+0x1e4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800aff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d174      	bne.n	800b0e6 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800affc:	4b42      	ldr	r3, [pc, #264]	@ (800b108 <_tx_thread_system_resume+0x1f8>)
 800affe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b002:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b004:	f3ef 8305 	mrs	r3, IPSR
 800b008:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800b00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10c      	bne.n	800b02a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b010:	f3ef 8310 	mrs	r3, PRIMASK
 800b014:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800b018:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b01a:	b662      	cpsie	i
}
 800b01c:	bf00      	nop
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	f383 8810 	msr	PRIMASK, r3
}
 800b028:	bf00      	nop
}
 800b02a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800b02c:	e05b      	b.n	800b0e6 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800b02e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b032:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800b034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800b03a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b044:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b04a:	621a      	str	r2, [r3, #32]
 800b04c:	e01f      	b.n	800b08e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2203      	movs	r2, #3
 800b058:	631a      	str	r2, [r3, #48]	@ 0x30
 800b05a:	e018      	b.n	800b08e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b060:	2b01      	cmp	r3, #1
 800b062:	d014      	beq.n	800b08e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d010      	beq.n	800b08e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b070:	2b00      	cmp	r3, #0
 800b072:	d106      	bne.n	800b082 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b080:	e005      	b.n	800b08e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2203      	movs	r2, #3
 800b08c:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b08e:	4b1f      	ldr	r3, [pc, #124]	@ (800b10c <_tx_thread_system_resume+0x1fc>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b096:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	f383 8810 	msr	PRIMASK, r3
}
 800b09e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b0a0:	4b18      	ldr	r3, [pc, #96]	@ (800b104 <_tx_thread_system_resume+0x1f4>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d020      	beq.n	800b0ec <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b0aa:	4b12      	ldr	r3, [pc, #72]	@ (800b0f4 <_tx_thread_system_resume+0x1e4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800b0b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d11a      	bne.n	800b0ec <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b0b6:	4b14      	ldr	r3, [pc, #80]	@ (800b108 <_tx_thread_system_resume+0x1f8>)
 800b0b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0bc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b0be:	f3ef 8305 	mrs	r3, IPSR
 800b0c2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b0c4:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10f      	bne.n	800b0ea <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b0ce:	613b      	str	r3, [r7, #16]
    return(posture);
 800b0d0:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800b0d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b0d4:	b662      	cpsie	i
}
 800b0d6:	bf00      	nop
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f383 8810 	msr	PRIMASK, r3
}
 800b0e2:	bf00      	nop
}
 800b0e4:	e001      	b.n	800b0ea <_tx_thread_system_resume+0x1da>
                                return;
 800b0e6:	bf00      	nop
 800b0e8:	e000      	b.n	800b0ec <_tx_thread_system_resume+0x1dc>
 800b0ea:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800b0ec:	3758      	adds	r7, #88	@ 0x58
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20000d70 	.word	0x20000d70
 800b0f8:	20000cf0 	.word	0x20000cf0
 800b0fc:	20000ce8 	.word	0x20000ce8
 800b100:	20000cec 	.word	0x20000cec
 800b104:	20000cdc 	.word	0x20000cdc
 800b108:	e000ed04 	.word	0xe000ed04
 800b10c:	20000cd8 	.word	0x20000cd8

0800b110 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b09e      	sub	sp, #120	@ 0x78
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b118:	4b81      	ldr	r3, [pc, #516]	@ (800b320 <_tx_thread_system_suspend+0x210>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b11e:	f3ef 8310 	mrs	r3, PRIMASK
 800b122:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800b124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800b126:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b128:	b672      	cpsid	i
    return(int_posture);
 800b12a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b12c:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b132:	429a      	cmp	r2, r3
 800b134:	d112      	bne.n	800b15c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b13a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800b13c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d008      	beq.n	800b154 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800b142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b148:	d004      	beq.n	800b154 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	334c      	adds	r3, #76	@ 0x4c
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 fb82 	bl	800b858 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	69db      	ldr	r3, [r3, #28]
 800b158:	4a72      	ldr	r2, [pc, #456]	@ (800b324 <_tx_thread_system_suspend+0x214>)
 800b15a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b15c:	4b72      	ldr	r3, [pc, #456]	@ (800b328 <_tx_thread_system_suspend+0x218>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3b01      	subs	r3, #1
 800b162:	4a71      	ldr	r2, [pc, #452]	@ (800b328 <_tx_thread_system_suspend+0x218>)
 800b164:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	f040 80a6 	bne.w	800b2bc <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17a:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a1b      	ldr	r3, [r3, #32]
 800b180:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800b182:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	429a      	cmp	r2, r3
 800b188:	d015      	beq.n	800b1b6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b18e:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800b190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b192:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b194:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800b196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b198:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b19a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800b19c:	4a63      	ldr	r2, [pc, #396]	@ (800b32c <_tx_thread_system_suspend+0x21c>)
 800b19e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d157      	bne.n	800b25a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800b1aa:	4960      	ldr	r1, [pc, #384]	@ (800b32c <_tx_thread_system_suspend+0x21c>)
 800b1ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b1b4:	e051      	b.n	800b25a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800b1b6:	4a5d      	ldr	r2, [pc, #372]	@ (800b32c <_tx_thread_system_suspend+0x21c>)
 800b1b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c8:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800b1ca:	4b59      	ldr	r3, [pc, #356]	@ (800b330 <_tx_thread_system_suspend+0x220>)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1d0:	43db      	mvns	r3, r3
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	4a56      	ldr	r2, [pc, #344]	@ (800b330 <_tx_thread_system_suspend+0x220>)
 800b1d6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800b1d8:	2300      	movs	r3, #0
 800b1da:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800b1dc:	4b54      	ldr	r3, [pc, #336]	@ (800b330 <_tx_thread_system_suspend+0x220>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800b1e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d12b      	bne.n	800b240 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b1e8:	4b52      	ldr	r3, [pc, #328]	@ (800b334 <_tx_thread_system_suspend+0x224>)
 800b1ea:	2220      	movs	r2, #32
 800b1ec:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800b1ee:	4b52      	ldr	r3, [pc, #328]	@ (800b338 <_tx_thread_system_suspend+0x228>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1f6:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1fa:	f383 8810 	msr	PRIMASK, r3
}
 800b1fe:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b200:	4b49      	ldr	r3, [pc, #292]	@ (800b328 <_tx_thread_system_suspend+0x218>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800b206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f040 8081 	bne.w	800b310 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b20e:	4b4b      	ldr	r3, [pc, #300]	@ (800b33c <_tx_thread_system_suspend+0x22c>)
 800b210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b214:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b216:	f3ef 8305 	mrs	r3, IPSR
 800b21a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800b21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10c      	bne.n	800b23c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b222:	f3ef 8310 	mrs	r3, PRIMASK
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800b228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800b22a:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b22c:	b662      	cpsie	i
}
 800b22e:	bf00      	nop
 800b230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b232:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b236:	f383 8810 	msr	PRIMASK, r3
}
 800b23a:	bf00      	nop
}
 800b23c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800b23e:	e067      	b.n	800b310 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800b240:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b242:	fa93 f3a3 	rbit	r3, r3
 800b246:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b24a:	fab3 f383 	clz	r3, r3
 800b24e:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800b250:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b252:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b254:	4413      	add	r3, r2
 800b256:	4a37      	ldr	r2, [pc, #220]	@ (800b334 <_tx_thread_system_suspend+0x224>)
 800b258:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800b25a:	4b37      	ldr	r3, [pc, #220]	@ (800b338 <_tx_thread_system_suspend+0x228>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	d12b      	bne.n	800b2bc <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b264:	4b33      	ldr	r3, [pc, #204]	@ (800b334 <_tx_thread_system_suspend+0x224>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a30      	ldr	r2, [pc, #192]	@ (800b32c <_tx_thread_system_suspend+0x21c>)
 800b26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b26e:	4a32      	ldr	r2, [pc, #200]	@ (800b338 <_tx_thread_system_suspend+0x228>)
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b274:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	f383 8810 	msr	PRIMASK, r3
}
 800b27c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b27e:	4b2a      	ldr	r3, [pc, #168]	@ (800b328 <_tx_thread_system_suspend+0x218>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800b284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b286:	2b00      	cmp	r3, #0
 800b288:	d144      	bne.n	800b314 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b28a:	4b2c      	ldr	r3, [pc, #176]	@ (800b33c <_tx_thread_system_suspend+0x22c>)
 800b28c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b290:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b292:	f3ef 8305 	mrs	r3, IPSR
 800b296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800b298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10c      	bne.n	800b2b8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b29e:	f3ef 8310 	mrs	r3, PRIMASK
 800b2a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800b2a6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b2a8:	b662      	cpsie	i
}
 800b2aa:	bf00      	nop
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	f383 8810 	msr	PRIMASK, r3
}
 800b2b6:	bf00      	nop
}
 800b2b8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800b2ba:	e02b      	b.n	800b314 <_tx_thread_system_suspend+0x204>
 800b2bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	f383 8810 	msr	PRIMASK, r3
}
 800b2c6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b2c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b338 <_tx_thread_system_suspend+0x228>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d022      	beq.n	800b318 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b2d2:	4b15      	ldr	r3, [pc, #84]	@ (800b328 <_tx_thread_system_suspend+0x218>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800b2d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d11c      	bne.n	800b318 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b2de:	4b17      	ldr	r3, [pc, #92]	@ (800b33c <_tx_thread_system_suspend+0x22c>)
 800b2e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2e4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b2e6:	f3ef 8305 	mrs	r3, IPSR
 800b2ea:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b2ec:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10c      	bne.n	800b30c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b2f6:	617b      	str	r3, [r7, #20]
    return(posture);
 800b2f8:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800b2fa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b2fc:	b662      	cpsie	i
}
 800b2fe:	bf00      	nop
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f383 8810 	msr	PRIMASK, r3
}
 800b30a:	bf00      	nop
}
 800b30c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800b30e:	e003      	b.n	800b318 <_tx_thread_system_suspend+0x208>
                return;
 800b310:	bf00      	nop
 800b312:	e002      	b.n	800b31a <_tx_thread_system_suspend+0x20a>
            return;
 800b314:	bf00      	nop
 800b316:	e000      	b.n	800b31a <_tx_thread_system_suspend+0x20a>
    return;
 800b318:	bf00      	nop
}
 800b31a:	3778      	adds	r7, #120	@ 0x78
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20000cd8 	.word	0x20000cd8
 800b324:	200012dc 	.word	0x200012dc
 800b328:	20000d70 	.word	0x20000d70
 800b32c:	20000cf0 	.word	0x20000cf0
 800b330:	20000ce8 	.word	0x20000ce8
 800b334:	20000cec 	.word	0x20000cec
 800b338:	20000cdc 	.word	0x20000cdc
 800b33c:	e000ed04 	.word	0xe000ed04

0800b340 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b346:	4b21      	ldr	r3, [pc, #132]	@ (800b3cc <_tx_thread_time_slice+0x8c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b34c:	f3ef 8310 	mrs	r3, PRIMASK
 800b350:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b352:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b354:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b356:	b672      	cpsid	i
    return(int_posture);
 800b358:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800b35a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b35c:	4b1c      	ldr	r3, [pc, #112]	@ (800b3d0 <_tx_thread_time_slice+0x90>)
 800b35e:	2200      	movs	r2, #0
 800b360:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d024      	beq.n	800b3b2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d120      	bne.n	800b3b2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	69da      	ldr	r2, [r3, #28]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	4a15      	ldr	r2, [pc, #84]	@ (800b3d4 <_tx_thread_time_slice+0x94>)
 800b37e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	6a1b      	ldr	r3, [r3, #32]
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	429a      	cmp	r2, r3
 800b388:	d013      	beq.n	800b3b2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b392:	429a      	cmp	r2, r3
 800b394:	d10d      	bne.n	800b3b2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	6a12      	ldr	r2, [r2, #32]
 800b39e:	490e      	ldr	r1, [pc, #56]	@ (800b3d8 <_tx_thread_time_slice+0x98>)
 800b3a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b3a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b3dc <_tx_thread_time_slice+0x9c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a0b      	ldr	r2, [pc, #44]	@ (800b3d8 <_tx_thread_time_slice+0x98>)
 800b3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3ae:	4a0c      	ldr	r2, [pc, #48]	@ (800b3e0 <_tx_thread_time_slice+0xa0>)
 800b3b0:	6013      	str	r3, [r2, #0]
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f383 8810 	msr	PRIMASK, r3
}
 800b3bc:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800b3be:	bf00      	nop
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	20000cd8 	.word	0x20000cd8
 800b3d0:	20000d80 	.word	0x20000d80
 800b3d4:	200012dc 	.word	0x200012dc
 800b3d8:	20000cf0 	.word	0x20000cf0
 800b3dc:	20000cec 	.word	0x20000cec
 800b3e0:	20000cdc 	.word	0x20000cdc

0800b3e4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b08a      	sub	sp, #40	@ 0x28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3f0:	f3ef 8310 	mrs	r3, PRIMASK
 800b3f4:	617b      	str	r3, [r7, #20]
    return(posture);
 800b3f6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b3f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3fa:	b672      	cpsid	i
    return(int_posture);
 800b3fc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b3fe:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b404:	2b04      	cmp	r3, #4
 800b406:	d10e      	bne.n	800b426 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800b408:	4b13      	ldr	r3, [pc, #76]	@ (800b458 <_tx_thread_timeout+0x74>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	4a12      	ldr	r2, [pc, #72]	@ (800b458 <_tx_thread_timeout+0x74>)
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f383 8810 	msr	PRIMASK, r3
}
 800b41c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b41e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b420:	f7ff fd76 	bl	800af10 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b424:	e013      	b.n	800b44e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b42a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b432:	61bb      	str	r3, [r7, #24]
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f383 8810 	msr	PRIMASK, r3
}
 800b43e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	69b9      	ldr	r1, [r7, #24]
 800b44a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b44c:	4798      	blx	r3
}
 800b44e:	bf00      	nop
 800b450:	3728      	adds	r7, #40	@ 0x28
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20000d70 	.word	0x20000d70

0800b45c <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b088      	sub	sp, #32
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b464:	f3ef 8310 	mrs	r3, PRIMASK
 800b468:	617b      	str	r3, [r7, #20]
    return(posture);
 800b46a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b46c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b46e:	b672      	cpsid	i
    return(int_posture);
 800b470:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800b472:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6a1b      	ldr	r3, [r3, #32]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800b47c:	2317      	movs	r3, #23
 800b47e:	61fb      	str	r3, [r7, #28]
 800b480:	e00d      	b.n	800b49e <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d102      	bne.n	800b490 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800b48a:	2317      	movs	r3, #23
 800b48c:	61fb      	str	r3, [r7, #28]
 800b48e:	e006      	b.n	800b49e <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3308      	adds	r3, #8
 800b494:	4618      	mov	r0, r3
 800b496:	f000 f9df 	bl	800b858 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800b49a:	2300      	movs	r3, #0
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f383 8810 	msr	PRIMASK, r3
}
 800b4a8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800b4aa:	69fb      	ldr	r3, [r7, #28]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3720      	adds	r7, #32
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b089      	sub	sp, #36	@ 0x24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4c0:	f3ef 8310 	mrs	r3, PRIMASK
 800b4c4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b4c6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b4c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4ca:	b672      	cpsid	i
    return(int_posture);
 800b4cc:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800b4ce:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6a1b      	ldr	r3, [r3, #32]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d105      	bne.n	800b4e4 <_tx_timer_change+0x30>
    {

        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	60da      	str	r2, [r3, #12]
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	f383 8810 	msr	PRIMASK, r3
}
 800b4ee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3724      	adds	r7, #36	@ 0x24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
	...

0800b500 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08a      	sub	sp, #40	@ 0x28
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800b50e:	222c      	movs	r2, #44	@ 0x2c
 800b510:	2100      	movs	r1, #0
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 ff52 	bl	800c3bc <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b522:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b528:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b536:	f3ef 8310 	mrs	r3, PRIMASK
 800b53a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b53c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b53e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b540:	b672      	cpsid	i
    return(int_posture);
 800b542:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800b544:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	4a1c      	ldr	r2, [pc, #112]	@ (800b5bc <_tx_timer_create+0xbc>)
 800b54a:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800b54c:	4b1c      	ldr	r3, [pc, #112]	@ (800b5c0 <_tx_timer_create+0xc0>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d109      	bne.n	800b568 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800b554:	4a1b      	ldr	r2, [pc, #108]	@ (800b5c4 <_tx_timer_create+0xc4>)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	625a      	str	r2, [r3, #36]	@ 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	629a      	str	r2, [r3, #40]	@ 0x28
 800b566:	e011      	b.n	800b58c <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800b568:	4b16      	ldr	r3, [pc, #88]	@ (800b5c4 <_tx_timer_create+0xc4>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b572:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800b574:	6a3b      	ldr	r3, [r7, #32]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	69fa      	ldr	r2, [r7, #28]
 800b584:	629a      	str	r2, [r3, #40]	@ 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6a3a      	ldr	r2, [r7, #32]
 800b58a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800b58c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <_tx_timer_create+0xc0>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3301      	adds	r3, #1
 800b592:	4a0b      	ldr	r2, [pc, #44]	@ (800b5c0 <_tx_timer_create+0xc0>)
 800b594:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800b596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d104      	bne.n	800b5a6 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f000 f959 	bl	800b858 <_tx_timer_system_activate>
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f383 8810 	msr	PRIMASK, r3
}
 800b5b0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3728      	adds	r7, #40	@ 0x28
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	4154494d 	.word	0x4154494d
 800b5c0:	20000e18 	.word	0x20000e18
 800b5c4:	20000e14 	.word	0x20000e14

0800b5c8 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b08d      	sub	sp, #52	@ 0x34
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5da:	613b      	str	r3, [r7, #16]
    return(posture);
 800b5dc:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b5de:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5e0:	b672      	cpsid	i
    return(int_posture);
 800b5e2:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 800b5e4:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d07f      	beq.n	800b6f2 <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 800b5f6:	4b45      	ldr	r3, [pc, #276]	@ (800b70c <_tx_timer_deactivate+0x144>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	69fa      	ldr	r2, [r7, #28]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d306      	bcc.n	800b60e <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b600:	4b43      	ldr	r3, [pc, #268]	@ (800b710 <_tx_timer_deactivate+0x148>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	69fa      	ldr	r2, [r7, #28]
 800b606:	429a      	cmp	r2, r3
 800b608:	d201      	bcs.n	800b60e <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 800b60a:	2301      	movs	r3, #1
 800b60c:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800b60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b610:	2b01      	cmp	r3, #1
 800b612:	d12e      	bne.n	800b672 <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 800b614:	4b3f      	ldr	r3, [pc, #252]	@ (800b714 <_tx_timer_deactivate+0x14c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	69fa      	ldr	r2, [r7, #28]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d307      	bcc.n	800b62e <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800b61e:	4b3d      	ldr	r3, [pc, #244]	@ (800b714 <_tx_timer_deactivate+0x14c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	69fa      	ldr	r2, [r7, #28]
 800b624:	1ad3      	subs	r3, r2, r3
 800b626:	109b      	asrs	r3, r3, #2
 800b628:	3301      	adds	r3, #1
 800b62a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b62c:	e010      	b.n	800b650 <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800b62e:	4b37      	ldr	r3, [pc, #220]	@ (800b70c <_tx_timer_deactivate+0x144>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	69fa      	ldr	r2, [r7, #28]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	109b      	asrs	r3, r3, #2
 800b638:	62fb      	str	r3, [r7, #44]	@ 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800b63a:	4b35      	ldr	r3, [pc, #212]	@ (800b710 <_tx_timer_deactivate+0x148>)
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	4b35      	ldr	r3, [pc, #212]	@ (800b714 <_tx_timer_deactivate+0x14c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	109b      	asrs	r3, r3, #2
 800b646:	461a      	mov	r2, r3
 800b648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64a:	4413      	add	r3, r2
 800b64c:	3301      	adds	r3, #1
 800b64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b20      	cmp	r3, #32
 800b656:	d908      	bls.n	800b66a <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800b658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65e:	4413      	add	r3, r2
 800b660:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 800b664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	e01c      	b.n	800b6a4 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	e018      	b.n	800b6a4 <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800b672:	4b29      	ldr	r3, [pc, #164]	@ (800b718 <_tx_timer_deactivate+0x150>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b678:	429a      	cmp	r2, r3
 800b67a:	d00f      	beq.n	800b69c <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b20      	cmp	r3, #32
 800b682:	d906      	bls.n	800b692 <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800b684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 800b68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68e:	601a      	str	r2, [r3, #0]
 800b690:	e008      	b.n	800b6a4 <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	e003      	b.n	800b6a4 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800b69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 800b6aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d108      	bne.n	800b6c4 <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d117      	bne.n	800b6ec <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]
 800b6c2:	e013      	b.n	800b6ec <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	69ba      	ldr	r2, [r7, #24]
 800b6d4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d105      	bne.n	800b6ec <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	69fa      	ldr	r2, [r7, #28]
 800b6e4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	69ba      	ldr	r2, [r7, #24]
 800b6ea:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	619a      	str	r2, [r3, #24]
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	f383 8810 	msr	PRIMASK, r3
}
 800b6fc:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3734      	adds	r7, #52	@ 0x34
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	20000e04 	.word	0x20000e04
 800b710:	20000e08 	.word	0x20000e08
 800b714:	20000e0c 	.word	0x20000e0c
 800b718:	20000e1c 	.word	0x20000e1c

0800b71c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b722:	f3ef 8310 	mrs	r3, PRIMASK
 800b726:	607b      	str	r3, [r7, #4]
    return(posture);
 800b728:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b72a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b72c:	b672      	cpsid	i
    return(int_posture);
 800b72e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b730:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b732:	4b09      	ldr	r3, [pc, #36]	@ (800b758 <_tx_timer_expiration_process+0x3c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3301      	adds	r3, #1
 800b738:	4a07      	ldr	r2, [pc, #28]	@ (800b758 <_tx_timer_expiration_process+0x3c>)
 800b73a:	6013      	str	r3, [r2, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	f383 8810 	msr	PRIMASK, r3
}
 800b746:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b748:	4804      	ldr	r0, [pc, #16]	@ (800b75c <_tx_timer_expiration_process+0x40>)
 800b74a:	f7ff fbe1 	bl	800af10 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20000d70 	.word	0x20000d70
 800b75c:	20000e20 	.word	0x20000e20

0800b760 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b089      	sub	sp, #36	@ 0x24
 800b764:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800b766:	4b28      	ldr	r3, [pc, #160]	@ (800b808 <_tx_timer_initialize+0xa8>)
 800b768:	2200      	movs	r2, #0
 800b76a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800b76c:	4b27      	ldr	r3, [pc, #156]	@ (800b80c <_tx_timer_initialize+0xac>)
 800b76e:	2200      	movs	r2, #0
 800b770:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b772:	4b27      	ldr	r3, [pc, #156]	@ (800b810 <_tx_timer_initialize+0xb0>)
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800b778:	4b26      	ldr	r3, [pc, #152]	@ (800b814 <_tx_timer_initialize+0xb4>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800b77e:	4b26      	ldr	r3, [pc, #152]	@ (800b818 <_tx_timer_initialize+0xb8>)
 800b780:	2200      	movs	r2, #0
 800b782:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800b784:	2280      	movs	r2, #128	@ 0x80
 800b786:	2100      	movs	r1, #0
 800b788:	4824      	ldr	r0, [pc, #144]	@ (800b81c <_tx_timer_initialize+0xbc>)
 800b78a:	f000 fe17 	bl	800c3bc <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800b78e:	4b24      	ldr	r3, [pc, #144]	@ (800b820 <_tx_timer_initialize+0xc0>)
 800b790:	4a22      	ldr	r2, [pc, #136]	@ (800b81c <_tx_timer_initialize+0xbc>)
 800b792:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800b794:	4b23      	ldr	r3, [pc, #140]	@ (800b824 <_tx_timer_initialize+0xc4>)
 800b796:	4a21      	ldr	r2, [pc, #132]	@ (800b81c <_tx_timer_initialize+0xbc>)
 800b798:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800b79a:	4b23      	ldr	r3, [pc, #140]	@ (800b828 <_tx_timer_initialize+0xc8>)
 800b79c:	4a23      	ldr	r2, [pc, #140]	@ (800b82c <_tx_timer_initialize+0xcc>)
 800b79e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800b7a0:	4b21      	ldr	r3, [pc, #132]	@ (800b828 <_tx_timer_initialize+0xc8>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	4a20      	ldr	r2, [pc, #128]	@ (800b828 <_tx_timer_initialize+0xc8>)
 800b7a8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800b7aa:	4b21      	ldr	r3, [pc, #132]	@ (800b830 <_tx_timer_initialize+0xd0>)
 800b7ac:	4a21      	ldr	r2, [pc, #132]	@ (800b834 <_tx_timer_initialize+0xd4>)
 800b7ae:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800b7b0:	4b21      	ldr	r3, [pc, #132]	@ (800b838 <_tx_timer_initialize+0xd8>)
 800b7b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b7b6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800b7b8:	4b20      	ldr	r3, [pc, #128]	@ (800b83c <_tx_timer_initialize+0xdc>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800b7be:	4b1c      	ldr	r3, [pc, #112]	@ (800b830 <_tx_timer_initialize+0xd0>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a1d      	ldr	r2, [pc, #116]	@ (800b838 <_tx_timer_initialize+0xd8>)
 800b7c4:	6812      	ldr	r2, [r2, #0]
 800b7c6:	491d      	ldr	r1, [pc, #116]	@ (800b83c <_tx_timer_initialize+0xdc>)
 800b7c8:	6809      	ldr	r1, [r1, #0]
 800b7ca:	481c      	ldr	r0, [pc, #112]	@ (800b83c <_tx_timer_initialize+0xdc>)
 800b7cc:	6800      	ldr	r0, [r0, #0]
 800b7ce:	2400      	movs	r4, #0
 800b7d0:	9405      	str	r4, [sp, #20]
 800b7d2:	2400      	movs	r4, #0
 800b7d4:	9404      	str	r4, [sp, #16]
 800b7d6:	9003      	str	r0, [sp, #12]
 800b7d8:	9102      	str	r1, [sp, #8]
 800b7da:	9201      	str	r2, [sp, #4]
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	4b18      	ldr	r3, [pc, #96]	@ (800b840 <_tx_timer_initialize+0xe0>)
 800b7e0:	4a18      	ldr	r2, [pc, #96]	@ (800b844 <_tx_timer_initialize+0xe4>)
 800b7e2:	4919      	ldr	r1, [pc, #100]	@ (800b848 <_tx_timer_initialize+0xe8>)
 800b7e4:	4819      	ldr	r0, [pc, #100]	@ (800b84c <_tx_timer_initialize+0xec>)
 800b7e6:	f7ff f95b 	bl	800aaa0 <_tx_thread_create>
 800b7ea:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d1e5      	bne.n	800b7be <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800b7f2:	4b17      	ldr	r3, [pc, #92]	@ (800b850 <_tx_timer_initialize+0xf0>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800b7f8:	4b16      	ldr	r3, [pc, #88]	@ (800b854 <_tx_timer_initialize+0xf4>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	bd90      	pop	{r4, r7, pc}
 800b806:	bf00      	nop
 800b808:	20000d7c 	.word	0x20000d7c
 800b80c:	200012dc 	.word	0x200012dc
 800b810:	20000d80 	.word	0x20000d80
 800b814:	20000e10 	.word	0x20000e10
 800b818:	20000e1c 	.word	0x20000e1c
 800b81c:	20000d84 	.word	0x20000d84
 800b820:	20000e04 	.word	0x20000e04
 800b824:	20000e0c 	.word	0x20000e0c
 800b828:	20000e08 	.word	0x20000e08
 800b82c:	20000e00 	.word	0x20000e00
 800b830:	20000ed0 	.word	0x20000ed0
 800b834:	20000edc 	.word	0x20000edc
 800b838:	20000ed4 	.word	0x20000ed4
 800b83c:	20000ed8 	.word	0x20000ed8
 800b840:	4154494d 	.word	0x4154494d
 800b844:	0800b98d 	.word	0x0800b98d
 800b848:	0800c510 	.word	0x0800c510
 800b84c:	20000e20 	.word	0x20000e20
 800b850:	20000e14 	.word	0x20000e14
 800b854:	20000e18 	.word	0x20000e18

0800b858 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b858:	b480      	push	{r7}
 800b85a:	b089      	sub	sp, #36	@ 0x24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d04a      	beq.n	800b902 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b872:	d046      	beq.n	800b902 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d142      	bne.n	800b902 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	2b20      	cmp	r3, #32
 800b880:	d902      	bls.n	800b888 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800b882:	231f      	movs	r3, #31
 800b884:	61bb      	str	r3, [r7, #24]
 800b886:	e002      	b.n	800b88e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	3b01      	subs	r3, #1
 800b88c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800b88e:	4b20      	ldr	r3, [pc, #128]	@ (800b910 <_tx_timer_system_activate+0xb8>)
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b89a:	4b1e      	ldr	r3, [pc, #120]	@ (800b914 <_tx_timer_system_activate+0xbc>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	69fa      	ldr	r2, [r7, #28]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d30b      	bcc.n	800b8bc <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800b8a4:	4b1b      	ldr	r3, [pc, #108]	@ (800b914 <_tx_timer_system_activate+0xbc>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	69fa      	ldr	r2, [r7, #28]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	109b      	asrs	r3, r3, #2
 800b8ae:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800b8b0:	4b19      	ldr	r3, [pc, #100]	@ (800b918 <_tx_timer_system_activate+0xc0>)
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d109      	bne.n	800b8d8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	601a      	str	r2, [r3, #0]
 800b8d6:	e011      	b.n	800b8fc <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	69fa      	ldr	r2, [r7, #28]
 800b900:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800b902:	bf00      	nop
 800b904:	3724      	adds	r7, #36	@ 0x24
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	20000e0c 	.word	0x20000e0c
 800b914:	20000e08 	.word	0x20000e08
 800b918:	20000e04 	.word	0x20000e04

0800b91c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b087      	sub	sp, #28
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d026      	beq.n	800b97e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d108      	bne.n	800b950 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	429a      	cmp	r2, r3
 800b946:	d117      	bne.n	800b978 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	2200      	movs	r2, #0
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	e013      	b.n	800b978 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	695b      	ldr	r3, [r3, #20]
 800b954:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d105      	bne.n	800b978 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	693a      	ldr	r2, [r7, #16]
 800b976:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	619a      	str	r2, [r3, #24]
    }
}
 800b97e:	bf00      	nop
 800b980:	371c      	adds	r7, #28
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
	...

0800b98c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b098      	sub	sp, #96	@ 0x60
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800b994:	2300      	movs	r3, #0
 800b996:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a73      	ldr	r2, [pc, #460]	@ (800bb68 <_tx_timer_thread_entry+0x1dc>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	f040 80de 	bne.w	800bb5e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b9a6:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800b9a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800b9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9ac:	b672      	cpsid	i
    return(int_posture);
 800b9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800b9b0:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800b9b2:	4b6e      	ldr	r3, [pc, #440]	@ (800bb6c <_tx_timer_thread_entry+0x1e0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d003      	beq.n	800b9c8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f107 020c 	add.w	r2, r7, #12
 800b9c6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800b9c8:	4b68      	ldr	r3, [pc, #416]	@ (800bb6c <_tx_timer_thread_entry+0x1e0>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800b9d0:	4b66      	ldr	r3, [pc, #408]	@ (800bb6c <_tx_timer_thread_entry+0x1e0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	4a65      	ldr	r2, [pc, #404]	@ (800bb6c <_tx_timer_thread_entry+0x1e0>)
 800b9d8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800b9da:	4b64      	ldr	r3, [pc, #400]	@ (800bb6c <_tx_timer_thread_entry+0x1e0>)
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	4b64      	ldr	r3, [pc, #400]	@ (800bb70 <_tx_timer_thread_entry+0x1e4>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d103      	bne.n	800b9ee <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800b9e6:	4b63      	ldr	r3, [pc, #396]	@ (800bb74 <_tx_timer_thread_entry+0x1e8>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a60      	ldr	r2, [pc, #384]	@ (800bb6c <_tx_timer_thread_entry+0x1e0>)
 800b9ec:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800b9ee:	4b62      	ldr	r3, [pc, #392]	@ (800bb78 <_tx_timer_thread_entry+0x1ec>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9f6:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fa:	f383 8810 	msr	PRIMASK, r3
}
 800b9fe:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba00:	f3ef 8310 	mrs	r3, PRIMASK
 800ba04:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800ba06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800ba08:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba0a:	b672      	cpsid	i
    return(int_posture);
 800ba0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800ba0e:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800ba10:	e07f      	b.n	800bb12 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800ba20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d102      	bne.n	800ba2e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	60fb      	str	r3, [r7, #12]
 800ba2c:	e00e      	b.n	800ba4c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800ba2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ba34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba38:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ba3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba3e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800ba40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba42:	f107 020c 	add.w	r2, r7, #12
 800ba46:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800ba48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba4a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ba4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b20      	cmp	r3, #32
 800ba52:	d911      	bls.n	800ba78 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800ba54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800ba5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba5e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800ba60:	2300      	movs	r3, #0
 800ba62:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ba64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba66:	f107 0208 	add.w	r2, r7, #8
 800ba6a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800ba6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba70:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800ba72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba74:	60bb      	str	r3, [r7, #8]
 800ba76:	e01a      	b.n	800baae <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800ba78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800ba7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ba84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba8a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800ba8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d009      	beq.n	800baa8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ba94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba96:	f107 0208 	add.w	r2, r7, #8
 800ba9a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ba9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800baa0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800baa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baa4:	60bb      	str	r3, [r7, #8]
 800baa6:	e002      	b.n	800baae <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800baa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baaa:	2200      	movs	r2, #0
 800baac:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800baae:	4a33      	ldr	r2, [pc, #204]	@ (800bb7c <_tx_timer_thread_entry+0x1f0>)
 800bab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bab2:	6013      	str	r3, [r2, #0]
 800bab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baba:	f383 8810 	msr	PRIMASK, r3
}
 800babe:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800bac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d002      	beq.n	800bacc <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800bac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bac8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800baca:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bacc:	f3ef 8310 	mrs	r3, PRIMASK
 800bad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800bad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800bad4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bad6:	b672      	cpsid	i
    return(int_posture);
 800bad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bada:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800badc:	4b27      	ldr	r3, [pc, #156]	@ (800bb7c <_tx_timer_thread_entry+0x1f0>)
 800bade:	2200      	movs	r2, #0
 800bae0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d105      	bne.n	800baf6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800baea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baec:	2200      	movs	r2, #0
 800baee:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800baf0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800baf2:	f7ff feb1 	bl	800b858 <_tx_timer_system_activate>
 800baf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baf8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	f383 8810 	msr	PRIMASK, r3
}
 800bb00:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb02:	f3ef 8310 	mrs	r3, PRIMASK
 800bb06:	623b      	str	r3, [r7, #32]
    return(posture);
 800bb08:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bb0a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb0c:	b672      	cpsid	i
    return(int_posture);
 800bb0e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bb10:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f47f af7c 	bne.w	800ba12 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800bb1a:	4b17      	ldr	r3, [pc, #92]	@ (800bb78 <_tx_timer_thread_entry+0x1ec>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d116      	bne.n	800bb50 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800bb22:	4b17      	ldr	r3, [pc, #92]	@ (800bb80 <_tx_timer_thread_entry+0x1f4>)
 800bb24:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bb26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb28:	2203      	movs	r2, #3
 800bb2a:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bb2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb2e:	2201      	movs	r2, #1
 800bb30:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800bb32:	4b14      	ldr	r3, [pc, #80]	@ (800bb84 <_tx_timer_thread_entry+0x1f8>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3301      	adds	r3, #1
 800bb38:	4a12      	ldr	r2, [pc, #72]	@ (800bb84 <_tx_timer_thread_entry+0x1f8>)
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb3e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f383 8810 	msr	PRIMASK, r3
}
 800bb46:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bb48:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bb4a:	f7ff fae1 	bl	800b110 <_tx_thread_system_suspend>
 800bb4e:	e728      	b.n	800b9a2 <_tx_timer_thread_entry+0x16>
 800bb50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	f383 8810 	msr	PRIMASK, r3
}
 800bb5a:	bf00      	nop
            TX_DISABLE
 800bb5c:	e721      	b.n	800b9a2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800bb5e:	bf00      	nop
 800bb60:	3760      	adds	r7, #96	@ 0x60
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	4154494d 	.word	0x4154494d
 800bb6c:	20000e0c 	.word	0x20000e0c
 800bb70:	20000e08 	.word	0x20000e08
 800bb74:	20000e04 	.word	0x20000e04
 800bb78:	20000e10 	.word	0x20000e10
 800bb7c:	20000e1c 	.word	0x20000e1c
 800bb80:	20000e20 	.word	0x20000e20
 800bb84:	20000d70 	.word	0x20000d70

0800bb88 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08a      	sub	sp, #40	@ 0x28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bb96:	2300      	movs	r3, #0
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d102      	bne.n	800bba6 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bba0:	2302      	movs	r3, #2
 800bba2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bba4:	e029      	b.n	800bbfa <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a2d      	ldr	r2, [pc, #180]	@ (800bc60 <_txe_byte_allocate+0xd8>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d002      	beq.n	800bbb6 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbb4:	e021      	b.n	800bbfa <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d102      	bne.n	800bbc2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc0:	e01b      	b.n	800bbfa <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d102      	bne.n	800bbce <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bbc8:	2305      	movs	r3, #5
 800bbca:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbcc:	e015      	b.n	800bbfa <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d902      	bls.n	800bbde <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bbd8:	2305      	movs	r3, #5
 800bbda:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbdc:	e00d      	b.n	800bbfa <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00a      	beq.n	800bbfa <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bbe4:	f3ef 8305 	mrs	r3, IPSR
 800bbe8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800bbea:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bbec:	4b1d      	ldr	r3, [pc, #116]	@ (800bc64 <_txe_byte_allocate+0xdc>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bbf6:	2304      	movs	r3, #4
 800bbf8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d108      	bne.n	800bc12 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bc00:	4b19      	ldr	r3, [pc, #100]	@ (800bc68 <_txe_byte_allocate+0xe0>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800bc06:	6a3b      	ldr	r3, [r7, #32]
 800bc08:	4a18      	ldr	r2, [pc, #96]	@ (800bc6c <_txe_byte_allocate+0xe4>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d101      	bne.n	800bc12 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bc0e:	2313      	movs	r3, #19
 800bc10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d114      	bne.n	800bc42 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc18:	f3ef 8305 	mrs	r3, IPSR
 800bc1c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bc1e:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bc20:	4b10      	ldr	r3, [pc, #64]	@ (800bc64 <_txe_byte_allocate+0xdc>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00b      	beq.n	800bc42 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc2a:	f3ef 8305 	mrs	r3, IPSR
 800bc2e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bc30:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bc32:	4b0c      	ldr	r3, [pc, #48]	@ (800bc64 <_txe_byte_allocate+0xdc>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bc3c:	d201      	bcs.n	800bc42 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bc3e:	2313      	movs	r3, #19
 800bc40:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d106      	bne.n	800bc56 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	68b9      	ldr	r1, [r7, #8]
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f7fe fa1a 	bl	800a088 <_tx_byte_allocate>
 800bc54:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800bc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3728      	adds	r7, #40	@ 0x28
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	42595445 	.word	0x42595445
 800bc64:	2000018c 	.word	0x2000018c
 800bc68:	20000cd8 	.word	0x20000cd8
 800bc6c:	20000e20 	.word	0x20000e20

0800bc70 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b092      	sub	sp, #72	@ 0x48
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
 800bc7c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d102      	bne.n	800bc8e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bc88:	2302      	movs	r3, #2
 800bc8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc8c:	e075      	b.n	800bd7a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800bc8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc90:	2b34      	cmp	r3, #52	@ 0x34
 800bc92:	d002      	beq.n	800bc9a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bc94:	2302      	movs	r3, #2
 800bc96:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc98:	e06f      	b.n	800bd7a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc9a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bca4:	b672      	cpsid	i
    return(int_posture);
 800bca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bca8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bcaa:	4b3b      	ldr	r3, [pc, #236]	@ (800bd98 <_txe_byte_pool_create+0x128>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	4a39      	ldr	r2, [pc, #228]	@ (800bd98 <_txe_byte_pool_create+0x128>)
 800bcb2:	6013      	str	r3, [r2, #0]
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb6:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcba:	f383 8810 	msr	PRIMASK, r3
}
 800bcbe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800bcc0:	4b36      	ldr	r3, [pc, #216]	@ (800bd9c <_txe_byte_pool_create+0x12c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcca:	e009      	b.n	800bce0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d00b      	beq.n	800bcec <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800bcd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bcda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcdc:	3301      	adds	r3, #1
 800bcde:	643b      	str	r3, [r7, #64]	@ 0x40
 800bce0:	4b2f      	ldr	r3, [pc, #188]	@ (800bda0 <_txe_byte_pool_create+0x130>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d3f0      	bcc.n	800bccc <_txe_byte_pool_create+0x5c>
 800bcea:	e000      	b.n	800bcee <_txe_byte_pool_create+0x7e>
                break;
 800bcec:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcee:	f3ef 8310 	mrs	r3, PRIMASK
 800bcf2:	623b      	str	r3, [r7, #32]
    return(posture);
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bcf6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcf8:	b672      	cpsid	i
    return(int_posture);
 800bcfa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bcfc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bcfe:	4b26      	ldr	r3, [pc, #152]	@ (800bd98 <_txe_byte_pool_create+0x128>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	4a24      	ldr	r2, [pc, #144]	@ (800bd98 <_txe_byte_pool_create+0x128>)
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0e:	f383 8810 	msr	PRIMASK, r3
}
 800bd12:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bd14:	f7ff f8c2 	bl	800ae9c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d102      	bne.n	800bd26 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800bd20:	2302      	movs	r3, #2
 800bd22:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd24:	e029      	b.n	800bd7a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d102      	bne.n	800bd32 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd30:	e023      	b.n	800bd7a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2b63      	cmp	r3, #99	@ 0x63
 800bd36:	d802      	bhi.n	800bd3e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800bd38:	2305      	movs	r3, #5
 800bd3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd3c:	e01d      	b.n	800bd7a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bd3e:	4b19      	ldr	r3, [pc, #100]	@ (800bda4 <_txe_byte_pool_create+0x134>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bd44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd46:	4a18      	ldr	r2, [pc, #96]	@ (800bda8 <_txe_byte_pool_create+0x138>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d101      	bne.n	800bd50 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bd4c:	2313      	movs	r3, #19
 800bd4e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd50:	f3ef 8305 	mrs	r3, IPSR
 800bd54:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bd56:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bd58:	4b14      	ldr	r3, [pc, #80]	@ (800bdac <_txe_byte_pool_create+0x13c>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00b      	beq.n	800bd7a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd62:	f3ef 8305 	mrs	r3, IPSR
 800bd66:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bd68:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bd6a:	4b10      	ldr	r3, [pc, #64]	@ (800bdac <_txe_byte_pool_create+0x13c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bd74:	d201      	bcs.n	800bd7a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800bd76:	2313      	movs	r3, #19
 800bd78:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bd7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d106      	bne.n	800bd8e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	68b9      	ldr	r1, [r7, #8]
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f7fe fac0 	bl	800a30c <_tx_byte_pool_create>
 800bd8c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800bd8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3748      	adds	r7, #72	@ 0x48
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	20000d70 	.word	0x20000d70
 800bd9c:	20000cc8 	.word	0x20000cc8
 800bda0:	20000ccc 	.word	0x20000ccc
 800bda4:	20000cd8 	.word	0x20000cd8
 800bda8:	20000e20 	.word	0x20000e20
 800bdac:	2000018c 	.word	0x2000018c

0800bdb0 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b092      	sub	sp, #72	@ 0x48
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
 800bdbc:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d102      	bne.n	800bdce <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bdc8:	230c      	movs	r3, #12
 800bdca:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdcc:	e054      	b.n	800be78 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b1c      	cmp	r3, #28
 800bdd2:	d002      	beq.n	800bdda <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bdd4:	230c      	movs	r3, #12
 800bdd6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdd8:	e04e      	b.n	800be78 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdda:	f3ef 8310 	mrs	r3, PRIMASK
 800bdde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bde2:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bde4:	b672      	cpsid	i
    return(int_posture);
 800bde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bde8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bdea:	4b36      	ldr	r3, [pc, #216]	@ (800bec4 <_txe_semaphore_create+0x114>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	4a34      	ldr	r2, [pc, #208]	@ (800bec4 <_txe_semaphore_create+0x114>)
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdf6:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfa:	f383 8810 	msr	PRIMASK, r3
}
 800bdfe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800be00:	4b31      	ldr	r3, [pc, #196]	@ (800bec8 <_txe_semaphore_create+0x118>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800be06:	2300      	movs	r3, #0
 800be08:	643b      	str	r3, [r7, #64]	@ 0x40
 800be0a:	e009      	b.n	800be20 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be10:	429a      	cmp	r2, r3
 800be12:	d00b      	beq.n	800be2c <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800be14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800be1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be1c:	3301      	adds	r3, #1
 800be1e:	643b      	str	r3, [r7, #64]	@ 0x40
 800be20:	4b2a      	ldr	r3, [pc, #168]	@ (800becc <_txe_semaphore_create+0x11c>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be26:	429a      	cmp	r2, r3
 800be28:	d3f0      	bcc.n	800be0c <_txe_semaphore_create+0x5c>
 800be2a:	e000      	b.n	800be2e <_txe_semaphore_create+0x7e>
                break;
 800be2c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be2e:	f3ef 8310 	mrs	r3, PRIMASK
 800be32:	623b      	str	r3, [r7, #32]
    return(posture);
 800be34:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800be36:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be38:	b672      	cpsid	i
    return(int_posture);
 800be3a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800be3c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800be3e:	4b21      	ldr	r3, [pc, #132]	@ (800bec4 <_txe_semaphore_create+0x114>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3b01      	subs	r3, #1
 800be44:	4a1f      	ldr	r2, [pc, #124]	@ (800bec4 <_txe_semaphore_create+0x114>)
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4e:	f383 8810 	msr	PRIMASK, r3
}
 800be52:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800be54:	f7ff f822 	bl	800ae9c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d102      	bne.n	800be66 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800be60:	230c      	movs	r3, #12
 800be62:	647b      	str	r3, [r7, #68]	@ 0x44
 800be64:	e008      	b.n	800be78 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800be66:	4b1a      	ldr	r3, [pc, #104]	@ (800bed0 <_txe_semaphore_create+0x120>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800be6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be6e:	4a19      	ldr	r2, [pc, #100]	@ (800bed4 <_txe_semaphore_create+0x124>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d101      	bne.n	800be78 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800be74:	2313      	movs	r3, #19
 800be76:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800be78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d114      	bne.n	800bea8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be7e:	f3ef 8305 	mrs	r3, IPSR
 800be82:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800be84:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800be86:	4b14      	ldr	r3, [pc, #80]	@ (800bed8 <_txe_semaphore_create+0x128>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00b      	beq.n	800bea8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be90:	f3ef 8305 	mrs	r3, IPSR
 800be94:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800be96:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800be98:	4b0f      	ldr	r3, [pc, #60]	@ (800bed8 <_txe_semaphore_create+0x128>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bea2:	d201      	bcs.n	800bea8 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bea4:	2313      	movs	r3, #19
 800bea6:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	68b9      	ldr	r1, [r7, #8]
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7fe fcb8 	bl	800a828 <_tx_semaphore_create>
 800beb8:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800beba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3748      	adds	r7, #72	@ 0x48
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	20000d70 	.word	0x20000d70
 800bec8:	20000ca0 	.word	0x20000ca0
 800becc:	20000ca4 	.word	0x20000ca4
 800bed0:	20000cd8 	.word	0x20000cd8
 800bed4:	20000e20 	.word	0x20000e20
 800bed8:	2000018c 	.word	0x2000018c

0800bedc <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b086      	sub	sp, #24
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bee6:	2300      	movs	r3, #0
 800bee8:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d102      	bne.n	800bef6 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bef0:	230c      	movs	r3, #12
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	e01f      	b.n	800bf36 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a15      	ldr	r2, [pc, #84]	@ (800bf50 <_txe_semaphore_get+0x74>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d002      	beq.n	800bf06 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bf00:	230c      	movs	r3, #12
 800bf02:	617b      	str	r3, [r7, #20]
 800bf04:	e017      	b.n	800bf36 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d014      	beq.n	800bf36 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf0c:	f3ef 8305 	mrs	r3, IPSR
 800bf10:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800bf12:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bf14:	4b0f      	ldr	r3, [pc, #60]	@ (800bf54 <_txe_semaphore_get+0x78>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bf1e:	2304      	movs	r3, #4
 800bf20:	617b      	str	r3, [r7, #20]
 800bf22:	e008      	b.n	800bf36 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800bf24:	4b0c      	ldr	r3, [pc, #48]	@ (800bf58 <_txe_semaphore_get+0x7c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	4a0b      	ldr	r2, [pc, #44]	@ (800bf5c <_txe_semaphore_get+0x80>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d101      	bne.n	800bf36 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800bf32:	2304      	movs	r3, #4
 800bf34:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d104      	bne.n	800bf46 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7fe fcc4 	bl	800a8cc <_tx_semaphore_get>
 800bf44:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800bf46:	697b      	ldr	r3, [r7, #20]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3718      	adds	r7, #24
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	53454d41 	.word	0x53454d41
 800bf54:	2000018c 	.word	0x2000018c
 800bf58:	20000cd8 	.word	0x20000cd8
 800bf5c:	20000e20 	.word	0x20000e20

0800bf60 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d102      	bne.n	800bf74 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bf6e:	230c      	movs	r3, #12
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	e00b      	b.n	800bf8c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a07      	ldr	r2, [pc, #28]	@ (800bf98 <_txe_semaphore_put+0x38>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d002      	beq.n	800bf84 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bf7e:	230c      	movs	r3, #12
 800bf80:	60fb      	str	r3, [r7, #12]
 800bf82:	e003      	b.n	800bf8c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7fe fd33 	bl	800a9f0 <_tx_semaphore_put>
 800bf8a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	53454d41 	.word	0x53454d41

0800bf9c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b09a      	sub	sp, #104	@ 0x68
 800bfa0:	af06      	add	r7, sp, #24
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
 800bfa8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d102      	bne.n	800bfba <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800bfb4:	230e      	movs	r3, #14
 800bfb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfb8:	e0bb      	b.n	800c132 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800bfba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfbc:	2bb0      	cmp	r3, #176	@ 0xb0
 800bfbe:	d002      	beq.n	800bfc6 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800bfc0:	230e      	movs	r3, #14
 800bfc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfc4:	e0b5      	b.n	800c132 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfc6:	f3ef 8310 	mrs	r3, PRIMASK
 800bfca:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800bfcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800bfce:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bfd0:	b672      	cpsid	i
    return(int_posture);
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bfd4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bfd6:	4b64      	ldr	r3, [pc, #400]	@ (800c168 <_txe_thread_create+0x1cc>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	4a62      	ldr	r2, [pc, #392]	@ (800c168 <_txe_thread_create+0x1cc>)
 800bfde:	6013      	str	r3, [r2, #0]
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe6:	f383 8810 	msr	PRIMASK, r3
}
 800bfea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800bfec:	2300      	movs	r3, #0
 800bfee:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800bff0:	4b5e      	ldr	r3, [pc, #376]	@ (800c16c <_txe_thread_create+0x1d0>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800bff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bff8:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800bffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bffc:	3b01      	subs	r3, #1
 800bffe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c000:	4413      	add	r3, r2
 800c002:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800c004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c006:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c008:	2300      	movs	r3, #0
 800c00a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c00c:	e02b      	b.n	800c066 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c012:	429a      	cmp	r2, r3
 800c014:	d101      	bne.n	800c01a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800c016:	2301      	movs	r3, #1
 800c018:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800c01a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d028      	beq.n	800c072 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800c020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c026:	429a      	cmp	r2, r3
 800c028:	d308      	bcc.n	800c03c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800c02a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c030:	429a      	cmp	r2, r3
 800c032:	d203      	bcs.n	800c03c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c034:	2300      	movs	r3, #0
 800c036:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c038:	2301      	movs	r3, #1
 800c03a:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800c03c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c042:	429a      	cmp	r2, r3
 800c044:	d308      	bcc.n	800c058 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800c046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d203      	bcs.n	800c058 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c050:	2300      	movs	r3, #0
 800c052:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c054:	2301      	movs	r3, #1
 800c056:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800c058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c05e:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c062:	3301      	adds	r3, #1
 800c064:	647b      	str	r3, [r7, #68]	@ 0x44
 800c066:	4b42      	ldr	r3, [pc, #264]	@ (800c170 <_txe_thread_create+0x1d4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d3ce      	bcc.n	800c00e <_txe_thread_create+0x72>
 800c070:	e000      	b.n	800c074 <_txe_thread_create+0xd8>
                break;
 800c072:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c074:	f3ef 8310 	mrs	r3, PRIMASK
 800c078:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c07a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c07c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c07e:	b672      	cpsid	i
    return(int_posture);
 800c080:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c082:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c084:	4b38      	ldr	r3, [pc, #224]	@ (800c168 <_txe_thread_create+0x1cc>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3b01      	subs	r3, #1
 800c08a:	4a37      	ldr	r2, [pc, #220]	@ (800c168 <_txe_thread_create+0x1cc>)
 800c08c:	6013      	str	r3, [r2, #0]
 800c08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c090:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c092:	6a3b      	ldr	r3, [r7, #32]
 800c094:	f383 8810 	msr	PRIMASK, r3
}
 800c098:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c09a:	f7fe feff 	bl	800ae9c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d102      	bne.n	800c0ac <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800c0a6:	230e      	movs	r3, #14
 800c0a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0aa:	e042      	b.n	800c132 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800c0ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d102      	bne.n	800c0b8 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0b6:	e03c      	b.n	800c132 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d102      	bne.n	800c0c4 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0c2:	e036      	b.n	800c132 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800c0c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0c6:	2bc7      	cmp	r3, #199	@ 0xc7
 800c0c8:	d802      	bhi.n	800c0d0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800c0ca:	2305      	movs	r3, #5
 800c0cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0ce:	e030      	b.n	800c132 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800c0d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0d2:	2b1f      	cmp	r3, #31
 800c0d4:	d902      	bls.n	800c0dc <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800c0d6:	230f      	movs	r3, #15
 800c0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0da:	e02a      	b.n	800c132 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800c0dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c0de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d902      	bls.n	800c0ea <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800c0e4:	2318      	movs	r3, #24
 800c0e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0e8:	e023      	b.n	800c132 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800c0ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d902      	bls.n	800c0f6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800c0f0:	2310      	movs	r3, #16
 800c0f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0f4:	e01d      	b.n	800c132 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800c0f6:	4b1f      	ldr	r3, [pc, #124]	@ (800c174 <_txe_thread_create+0x1d8>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c178 <_txe_thread_create+0x1dc>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d101      	bne.n	800c108 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c104:	2313      	movs	r3, #19
 800c106:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c108:	f3ef 8305 	mrs	r3, IPSR
 800c10c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c10e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c110:	4b1a      	ldr	r3, [pc, #104]	@ (800c17c <_txe_thread_create+0x1e0>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4313      	orrs	r3, r2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00b      	beq.n	800c132 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c11a:	f3ef 8305 	mrs	r3, IPSR
 800c11e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c120:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c122:	4b16      	ldr	r3, [pc, #88]	@ (800c17c <_txe_thread_create+0x1e0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4313      	orrs	r3, r2
 800c128:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c12c:	d201      	bcs.n	800c132 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c12e:	2313      	movs	r3, #19
 800c130:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c134:	2b00      	cmp	r3, #0
 800c136:	d112      	bne.n	800c15e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800c138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c13a:	9305      	str	r3, [sp, #20]
 800c13c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c13e:	9304      	str	r3, [sp, #16]
 800c140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c142:	9303      	str	r3, [sp, #12]
 800c144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c146:	9302      	str	r3, [sp, #8]
 800c148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c14a:	9301      	str	r3, [sp, #4]
 800c14c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	68b9      	ldr	r1, [r7, #8]
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f7fe fca2 	bl	800aaa0 <_tx_thread_create>
 800c15c:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800c15e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c160:	4618      	mov	r0, r3
 800c162:	3750      	adds	r7, #80	@ 0x50
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	20000d70 	.word	0x20000d70
 800c16c:	20000ce0 	.word	0x20000ce0
 800c170:	20000ce4 	.word	0x20000ce4
 800c174:	20000cd8 	.word	0x20000cd8
 800c178:	20000e20 	.word	0x20000e20
 800c17c:	2000018c 	.word	0x2000018c

0800c180 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d102      	bne.n	800c194 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c18e:	2315      	movs	r3, #21
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	e00b      	b.n	800c1ac <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a07      	ldr	r2, [pc, #28]	@ (800c1b8 <_txe_timer_activate+0x38>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d002      	beq.n	800c1a4 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c19e:	2315      	movs	r3, #21
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	e003      	b.n	800c1ac <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7ff f959 	bl	800b45c <_tx_timer_activate>
 800c1aa:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	4154494d 	.word	0x4154494d

0800c1bc <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d102      	bne.n	800c1d4 <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c1ce:	2315      	movs	r3, #21
 800c1d0:	617b      	str	r3, [r7, #20]
 800c1d2:	e020      	b.n	800c216 <_txe_timer_change+0x5a>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a11      	ldr	r2, [pc, #68]	@ (800c220 <_txe_timer_change+0x64>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d002      	beq.n	800c1e4 <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c1de:	2315      	movs	r3, #21
 800c1e0:	617b      	str	r3, [r7, #20]
 800c1e2:	e018      	b.n	800c216 <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d102      	bne.n	800c1f0 <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 800c1ea:	2316      	movs	r3, #22
 800c1ec:	617b      	str	r3, [r7, #20]
 800c1ee:	e012      	b.n	800c216 <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1f0:	f3ef 8305 	mrs	r3, IPSR
 800c1f4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c1f6:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800c1f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c224 <_txe_timer_change+0x68>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c202:	d302      	bcc.n	800c20a <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c204:	2313      	movs	r3, #19
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	e005      	b.n	800c216 <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	68b9      	ldr	r1, [r7, #8]
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f7ff f950 	bl	800b4b4 <_tx_timer_change>
 800c214:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c216:	697b      	ldr	r3, [r7, #20]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3718      	adds	r7, #24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	4154494d 	.word	0x4154494d
 800c224:	2000018c 	.word	0x2000018c

0800c228 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b096      	sub	sp, #88	@ 0x58
 800c22c:	af04      	add	r7, sp, #16
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c236:	2300      	movs	r3, #0
 800c238:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d102      	bne.n	800c246 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c240:	2315      	movs	r3, #21
 800c242:	647b      	str	r3, [r7, #68]	@ 0x44
 800c244:	e059      	b.n	800c2fa <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800c246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c248:	2b2c      	cmp	r3, #44	@ 0x2c
 800c24a:	d002      	beq.n	800c252 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c24c:	2315      	movs	r3, #21
 800c24e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c250:	e053      	b.n	800c2fa <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c252:	f3ef 8310 	mrs	r3, PRIMASK
 800c256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c25a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c25c:	b672      	cpsid	i
    return(int_posture);
 800c25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c260:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c262:	4b41      	ldr	r3, [pc, #260]	@ (800c368 <_txe_timer_create+0x140>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3301      	adds	r3, #1
 800c268:	4a3f      	ldr	r2, [pc, #252]	@ (800c368 <_txe_timer_create+0x140>)
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c272:	f383 8810 	msr	PRIMASK, r3
}
 800c276:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800c278:	4b3c      	ldr	r3, [pc, #240]	@ (800c36c <_txe_timer_create+0x144>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800c27e:	2300      	movs	r3, #0
 800c280:	643b      	str	r3, [r7, #64]	@ 0x40
 800c282:	e009      	b.n	800c298 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c288:	429a      	cmp	r2, r3
 800c28a:	d00b      	beq.n	800c2a4 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800c28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800c292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c294:	3301      	adds	r3, #1
 800c296:	643b      	str	r3, [r7, #64]	@ 0x40
 800c298:	4b35      	ldr	r3, [pc, #212]	@ (800c370 <_txe_timer_create+0x148>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d3f0      	bcc.n	800c284 <_txe_timer_create+0x5c>
 800c2a2:	e000      	b.n	800c2a6 <_txe_timer_create+0x7e>
                break;
 800c2a4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2a6:	f3ef 8310 	mrs	r3, PRIMASK
 800c2aa:	623b      	str	r3, [r7, #32]
    return(posture);
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c2ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2b0:	b672      	cpsid	i
    return(int_posture);
 800c2b2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c2b4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c2b6:	4b2c      	ldr	r3, [pc, #176]	@ (800c368 <_txe_timer_create+0x140>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	4a2a      	ldr	r2, [pc, #168]	@ (800c368 <_txe_timer_create+0x140>)
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c6:	f383 8810 	msr	PRIMASK, r3
}
 800c2ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c2cc:	f7fe fde6 	bl	800ae9c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d102      	bne.n	800c2de <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800c2d8:	2315      	movs	r3, #21
 800c2da:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2dc:	e00d      	b.n	800c2fa <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800c2de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d102      	bne.n	800c2ea <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800c2e4:	2316      	movs	r3, #22
 800c2e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2e8:	e007      	b.n	800c2fa <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800c2ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d004      	beq.n	800c2fa <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800c2f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800c2f6:	2317      	movs	r3, #23
 800c2f8:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c2fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d11d      	bne.n	800c33c <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c300:	4b1c      	ldr	r3, [pc, #112]	@ (800c374 <_txe_timer_create+0x14c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c308:	4a1b      	ldr	r2, [pc, #108]	@ (800c378 <_txe_timer_create+0x150>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d101      	bne.n	800c312 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c30e:	2313      	movs	r3, #19
 800c310:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c312:	f3ef 8305 	mrs	r3, IPSR
 800c316:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c318:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c31a:	4b18      	ldr	r3, [pc, #96]	@ (800c37c <_txe_timer_create+0x154>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4313      	orrs	r3, r2
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00b      	beq.n	800c33c <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c324:	f3ef 8305 	mrs	r3, IPSR
 800c328:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c32a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c32c:	4b13      	ldr	r3, [pc, #76]	@ (800c37c <_txe_timer_create+0x154>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4313      	orrs	r3, r2
 800c332:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c336:	d201      	bcs.n	800c33c <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c338:	2313      	movs	r3, #19
 800c33a:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c33c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10c      	bne.n	800c35c <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800c342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c344:	9302      	str	r3, [sp, #8]
 800c346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	68b9      	ldr	r1, [r7, #8]
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	f7ff f8d3 	bl	800b500 <_tx_timer_create>
 800c35a:	6478      	str	r0, [r7, #68]	@ 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800c35c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3748      	adds	r7, #72	@ 0x48
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20000d70 	.word	0x20000d70
 800c36c:	20000e14 	.word	0x20000e14
 800c370:	20000e18 	.word	0x20000e18
 800c374:	20000cd8 	.word	0x20000cd8
 800c378:	20000e20 	.word	0x20000e20
 800c37c:	2000018c 	.word	0x2000018c

0800c380 <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d102      	bne.n	800c394 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c38e:	2315      	movs	r3, #21
 800c390:	60fb      	str	r3, [r7, #12]
 800c392:	e00b      	b.n	800c3ac <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a07      	ldr	r2, [pc, #28]	@ (800c3b8 <_txe_timer_deactivate+0x38>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d002      	beq.n	800c3a4 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c39e:	2315      	movs	r3, #21
 800c3a0:	60fb      	str	r3, [r7, #12]
 800c3a2:	e003      	b.n	800c3ac <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7ff f90f 	bl	800b5c8 <_tx_timer_deactivate>
 800c3aa:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	4154494d 	.word	0x4154494d

0800c3bc <memset>:
 800c3bc:	4402      	add	r2, r0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d100      	bne.n	800c3c6 <memset+0xa>
 800c3c4:	4770      	bx	lr
 800c3c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ca:	e7f9      	b.n	800c3c0 <memset+0x4>

0800c3cc <__libc_init_array>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	4d0d      	ldr	r5, [pc, #52]	@ (800c404 <__libc_init_array+0x38>)
 800c3d0:	4c0d      	ldr	r4, [pc, #52]	@ (800c408 <__libc_init_array+0x3c>)
 800c3d2:	1b64      	subs	r4, r4, r5
 800c3d4:	10a4      	asrs	r4, r4, #2
 800c3d6:	2600      	movs	r6, #0
 800c3d8:	42a6      	cmp	r6, r4
 800c3da:	d109      	bne.n	800c3f0 <__libc_init_array+0x24>
 800c3dc:	4d0b      	ldr	r5, [pc, #44]	@ (800c40c <__libc_init_array+0x40>)
 800c3de:	4c0c      	ldr	r4, [pc, #48]	@ (800c410 <__libc_init_array+0x44>)
 800c3e0:	f000 f818 	bl	800c414 <_init>
 800c3e4:	1b64      	subs	r4, r4, r5
 800c3e6:	10a4      	asrs	r4, r4, #2
 800c3e8:	2600      	movs	r6, #0
 800c3ea:	42a6      	cmp	r6, r4
 800c3ec:	d105      	bne.n	800c3fa <__libc_init_array+0x2e>
 800c3ee:	bd70      	pop	{r4, r5, r6, pc}
 800c3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3f4:	4798      	blx	r3
 800c3f6:	3601      	adds	r6, #1
 800c3f8:	e7ee      	b.n	800c3d8 <__libc_init_array+0xc>
 800c3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3fe:	4798      	blx	r3
 800c400:	3601      	adds	r6, #1
 800c402:	e7f2      	b.n	800c3ea <__libc_init_array+0x1e>
 800c404:	0800c584 	.word	0x0800c584
 800c408:	0800c584 	.word	0x0800c584
 800c40c:	0800c584 	.word	0x0800c584
 800c410:	0800c588 	.word	0x0800c588

0800c414 <_init>:
 800c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c416:	bf00      	nop
 800c418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c41a:	bc08      	pop	{r3}
 800c41c:	469e      	mov	lr, r3
 800c41e:	4770      	bx	lr

0800c420 <_fini>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	bf00      	nop
 800c424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c426:	bc08      	pop	{r3}
 800c428:	469e      	mov	lr, r3
 800c42a:	4770      	bx	lr
