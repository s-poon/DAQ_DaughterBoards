
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800ca98  0800ca98  0000da98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf8  0800cbf8  0000e190  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbf8  0800cbf8  0000dbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc00  0800cc00  0000e190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc00  0800cc00  0000dc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc04  0800cc04  0000dc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  0800cc08  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000190  0800cd98  0000e190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014a4  0800cd98  0000e4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000363f3  00000000  00000000  0000e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008c2a  00000000  00000000  000445b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002850  00000000  00000000  0004d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001df6  00000000  00000000  0004fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033203  00000000  00000000  00051826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fc52  00000000  00000000  00084a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126fca  00000000  00000000  000c467b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001eb645  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d90  00000000  00000000  001eb688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fd  00000000  00000000  001f5418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000190 	.word	0x20000190
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ca80 	.word	0x0800ca80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000194 	.word	0x20000194
 800021c:	0800ca80 	.word	0x0800ca80

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20000e98 	.word	0x20000e98
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	0019f09f 	.word	0x0019f09f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20000f34 	.word	0x20000f34
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20000e9c 	.word	0x20000e9c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20000ea0 	.word	0x20000ea0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	200014a0 	.word	0x200014a0

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f00b fcc5 	bl	800bd88 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f00b fad2 	bl	800b9ac <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20000f40 	.word	0x20000f40
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	200014a0 	.word	0x200014a0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20000f44 	.word	0x20000f44
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20000fd0 	.word	0x20000fd0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20000fd4 	.word	0x20000fd4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20000fcc 	.word	0x20000fcc
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20000fc8 	.word	0x20000fc8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20000f34 	.word	0x20000f34
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20000e9c 	.word	0x20000e9c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20000ea0 	.word	0x20000ea0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	@ 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_d2uiz>:
 80007d0:	004a      	lsls	r2, r1, #1
 80007d2:	d211      	bcs.n	80007f8 <__aeabi_d2uiz+0x28>
 80007d4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007d8:	d211      	bcs.n	80007fe <__aeabi_d2uiz+0x2e>
 80007da:	d50d      	bpl.n	80007f8 <__aeabi_d2uiz+0x28>
 80007dc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e4:	d40e      	bmi.n	8000804 <__aeabi_d2uiz+0x34>
 80007e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f2:	fa23 f002 	lsr.w	r0, r3, r2
 80007f6:	4770      	bx	lr
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	4770      	bx	lr
 80007fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000802:	d102      	bne.n	800080a <__aeabi_d2uiz+0x3a>
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	4770      	bx	lr
 800080a:	f04f 0000 	mov.w	r0, #0
 800080e:	4770      	bx	lr

08000810 <__aeabi_uldivmod>:
 8000810:	b953      	cbnz	r3, 8000828 <__aeabi_uldivmod+0x18>
 8000812:	b94a      	cbnz	r2, 8000828 <__aeabi_uldivmod+0x18>
 8000814:	2900      	cmp	r1, #0
 8000816:	bf08      	it	eq
 8000818:	2800      	cmpeq	r0, #0
 800081a:	bf1c      	itt	ne
 800081c:	f04f 31ff 	movne.w	r1, #4294967295
 8000820:	f04f 30ff 	movne.w	r0, #4294967295
 8000824:	f000 b96a 	b.w	8000afc <__aeabi_idiv0>
 8000828:	f1ad 0c08 	sub.w	ip, sp, #8
 800082c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000830:	f000 f806 	bl	8000840 <__udivmoddi4>
 8000834:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr

08000840 <__udivmoddi4>:
 8000840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000844:	9d08      	ldr	r5, [sp, #32]
 8000846:	460c      	mov	r4, r1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d14e      	bne.n	80008ea <__udivmoddi4+0xaa>
 800084c:	4694      	mov	ip, r2
 800084e:	458c      	cmp	ip, r1
 8000850:	4686      	mov	lr, r0
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	d962      	bls.n	800091e <__udivmoddi4+0xde>
 8000858:	b14a      	cbz	r2, 800086e <__udivmoddi4+0x2e>
 800085a:	f1c2 0320 	rsb	r3, r2, #32
 800085e:	4091      	lsls	r1, r2
 8000860:	fa20 f303 	lsr.w	r3, r0, r3
 8000864:	fa0c fc02 	lsl.w	ip, ip, r2
 8000868:	4319      	orrs	r1, r3
 800086a:	fa00 fe02 	lsl.w	lr, r0, r2
 800086e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000872:	fa1f f68c 	uxth.w	r6, ip
 8000876:	fbb1 f4f7 	udiv	r4, r1, r7
 800087a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800087e:	fb07 1114 	mls	r1, r7, r4, r1
 8000882:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000886:	fb04 f106 	mul.w	r1, r4, r6
 800088a:	4299      	cmp	r1, r3
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x64>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f104 30ff 	add.w	r0, r4, #4294967295
 8000896:	f080 8112 	bcs.w	8000abe <__udivmoddi4+0x27e>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 810f 	bls.w	8000abe <__udivmoddi4+0x27e>
 80008a0:	3c02      	subs	r4, #2
 80008a2:	4463      	add	r3, ip
 80008a4:	1a59      	subs	r1, r3, r1
 80008a6:	fa1f f38e 	uxth.w	r3, lr
 80008aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ae:	fb07 1110 	mls	r1, r7, r0, r1
 80008b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b6:	fb00 f606 	mul.w	r6, r0, r6
 80008ba:	429e      	cmp	r6, r3
 80008bc:	d90a      	bls.n	80008d4 <__udivmoddi4+0x94>
 80008be:	eb1c 0303 	adds.w	r3, ip, r3
 80008c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c6:	f080 80fc 	bcs.w	8000ac2 <__udivmoddi4+0x282>
 80008ca:	429e      	cmp	r6, r3
 80008cc:	f240 80f9 	bls.w	8000ac2 <__udivmoddi4+0x282>
 80008d0:	4463      	add	r3, ip
 80008d2:	3802      	subs	r0, #2
 80008d4:	1b9b      	subs	r3, r3, r6
 80008d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008da:	2100      	movs	r1, #0
 80008dc:	b11d      	cbz	r5, 80008e6 <__udivmoddi4+0xa6>
 80008de:	40d3      	lsrs	r3, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	e9c5 3200 	strd	r3, r2, [r5]
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d905      	bls.n	80008fa <__udivmoddi4+0xba>
 80008ee:	b10d      	cbz	r5, 80008f4 <__udivmoddi4+0xb4>
 80008f0:	e9c5 0100 	strd	r0, r1, [r5]
 80008f4:	2100      	movs	r1, #0
 80008f6:	4608      	mov	r0, r1
 80008f8:	e7f5      	b.n	80008e6 <__udivmoddi4+0xa6>
 80008fa:	fab3 f183 	clz	r1, r3
 80008fe:	2900      	cmp	r1, #0
 8000900:	d146      	bne.n	8000990 <__udivmoddi4+0x150>
 8000902:	42a3      	cmp	r3, r4
 8000904:	d302      	bcc.n	800090c <__udivmoddi4+0xcc>
 8000906:	4290      	cmp	r0, r2
 8000908:	f0c0 80f0 	bcc.w	8000aec <__udivmoddi4+0x2ac>
 800090c:	1a86      	subs	r6, r0, r2
 800090e:	eb64 0303 	sbc.w	r3, r4, r3
 8000912:	2001      	movs	r0, #1
 8000914:	2d00      	cmp	r5, #0
 8000916:	d0e6      	beq.n	80008e6 <__udivmoddi4+0xa6>
 8000918:	e9c5 6300 	strd	r6, r3, [r5]
 800091c:	e7e3      	b.n	80008e6 <__udivmoddi4+0xa6>
 800091e:	2a00      	cmp	r2, #0
 8000920:	f040 8090 	bne.w	8000a44 <__udivmoddi4+0x204>
 8000924:	eba1 040c 	sub.w	r4, r1, ip
 8000928:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800092c:	fa1f f78c 	uxth.w	r7, ip
 8000930:	2101      	movs	r1, #1
 8000932:	fbb4 f6f8 	udiv	r6, r4, r8
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb08 4416 	mls	r4, r8, r6, r4
 800093e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000942:	fb07 f006 	mul.w	r0, r7, r6
 8000946:	4298      	cmp	r0, r3
 8000948:	d908      	bls.n	800095c <__udivmoddi4+0x11c>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x11a>
 8000954:	4298      	cmp	r0, r3
 8000956:	f200 80cd 	bhi.w	8000af4 <__udivmoddi4+0x2b4>
 800095a:	4626      	mov	r6, r4
 800095c:	1a1c      	subs	r4, r3, r0
 800095e:	fa1f f38e 	uxth.w	r3, lr
 8000962:	fbb4 f0f8 	udiv	r0, r4, r8
 8000966:	fb08 4410 	mls	r4, r8, r0, r4
 800096a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096e:	fb00 f707 	mul.w	r7, r0, r7
 8000972:	429f      	cmp	r7, r3
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x148>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 34ff 	add.w	r4, r0, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x146>
 8000980:	429f      	cmp	r7, r3
 8000982:	f200 80b0 	bhi.w	8000ae6 <__udivmoddi4+0x2a6>
 8000986:	4620      	mov	r0, r4
 8000988:	1bdb      	subs	r3, r3, r7
 800098a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098e:	e7a5      	b.n	80008dc <__udivmoddi4+0x9c>
 8000990:	f1c1 0620 	rsb	r6, r1, #32
 8000994:	408b      	lsls	r3, r1
 8000996:	fa22 f706 	lsr.w	r7, r2, r6
 800099a:	431f      	orrs	r7, r3
 800099c:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a0:	fa04 f301 	lsl.w	r3, r4, r1
 80009a4:	ea43 030c 	orr.w	r3, r3, ip
 80009a8:	40f4      	lsrs	r4, r6
 80009aa:	fa00 f801 	lsl.w	r8, r0, r1
 80009ae:	0c38      	lsrs	r0, r7, #16
 80009b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b4:	fbb4 fef0 	udiv	lr, r4, r0
 80009b8:	fa1f fc87 	uxth.w	ip, r7
 80009bc:	fb00 441e 	mls	r4, r0, lr, r4
 80009c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c4:	fb0e f90c 	mul.w	r9, lr, ip
 80009c8:	45a1      	cmp	r9, r4
 80009ca:	fa02 f201 	lsl.w	r2, r2, r1
 80009ce:	d90a      	bls.n	80009e6 <__udivmoddi4+0x1a6>
 80009d0:	193c      	adds	r4, r7, r4
 80009d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009d6:	f080 8084 	bcs.w	8000ae2 <__udivmoddi4+0x2a2>
 80009da:	45a1      	cmp	r9, r4
 80009dc:	f240 8081 	bls.w	8000ae2 <__udivmoddi4+0x2a2>
 80009e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e4:	443c      	add	r4, r7
 80009e6:	eba4 0409 	sub.w	r4, r4, r9
 80009ea:	fa1f f983 	uxth.w	r9, r3
 80009ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f2:	fb00 4413 	mls	r4, r0, r3, r4
 80009f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80009fe:	45a4      	cmp	ip, r4
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x1d2>
 8000a02:	193c      	adds	r4, r7, r4
 8000a04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a08:	d267      	bcs.n	8000ada <__udivmoddi4+0x29a>
 8000a0a:	45a4      	cmp	ip, r4
 8000a0c:	d965      	bls.n	8000ada <__udivmoddi4+0x29a>
 8000a0e:	3b02      	subs	r3, #2
 8000a10:	443c      	add	r4, r7
 8000a12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a16:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1a:	eba4 040c 	sub.w	r4, r4, ip
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	46ce      	mov	lr, r9
 8000a22:	469c      	mov	ip, r3
 8000a24:	d351      	bcc.n	8000aca <__udivmoddi4+0x28a>
 8000a26:	d04e      	beq.n	8000ac6 <__udivmoddi4+0x286>
 8000a28:	b155      	cbz	r5, 8000a40 <__udivmoddi4+0x200>
 8000a2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000a2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000a32:	fa04 f606 	lsl.w	r6, r4, r6
 8000a36:	40cb      	lsrs	r3, r1
 8000a38:	431e      	orrs	r6, r3
 8000a3a:	40cc      	lsrs	r4, r1
 8000a3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	e750      	b.n	80008e6 <__udivmoddi4+0xa6>
 8000a44:	f1c2 0320 	rsb	r3, r2, #32
 8000a48:	fa20 f103 	lsr.w	r1, r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa24 f303 	lsr.w	r3, r4, r3
 8000a54:	4094      	lsls	r4, r2
 8000a56:	430c      	orrs	r4, r1
 8000a58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3110 	mls	r1, r8, r0, r3
 8000a6c:	0c23      	lsrs	r3, r4, #16
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb00 f107 	mul.w	r1, r0, r7
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x24c>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a82:	d22c      	bcs.n	8000ade <__udivmoddi4+0x29e>
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d92a      	bls.n	8000ade <__udivmoddi4+0x29e>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1a5b      	subs	r3, r3, r1
 8000a8e:	b2a4      	uxth	r4, r4
 8000a90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a94:	fb08 3311 	mls	r3, r8, r1, r3
 8000a98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a9c:	fb01 f307 	mul.w	r3, r1, r7
 8000aa0:	42a3      	cmp	r3, r4
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x276>
 8000aa4:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000aac:	d213      	bcs.n	8000ad6 <__udivmoddi4+0x296>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d911      	bls.n	8000ad6 <__udivmoddi4+0x296>
 8000ab2:	3902      	subs	r1, #2
 8000ab4:	4464      	add	r4, ip
 8000ab6:	1ae4      	subs	r4, r4, r3
 8000ab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000abc:	e739      	b.n	8000932 <__udivmoddi4+0xf2>
 8000abe:	4604      	mov	r4, r0
 8000ac0:	e6f0      	b.n	80008a4 <__udivmoddi4+0x64>
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e706      	b.n	80008d4 <__udivmoddi4+0x94>
 8000ac6:	45c8      	cmp	r8, r9
 8000ac8:	d2ae      	bcs.n	8000a28 <__udivmoddi4+0x1e8>
 8000aca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ace:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	e7a8      	b.n	8000a28 <__udivmoddi4+0x1e8>
 8000ad6:	4631      	mov	r1, r6
 8000ad8:	e7ed      	b.n	8000ab6 <__udivmoddi4+0x276>
 8000ada:	4603      	mov	r3, r0
 8000adc:	e799      	b.n	8000a12 <__udivmoddi4+0x1d2>
 8000ade:	4630      	mov	r0, r6
 8000ae0:	e7d4      	b.n	8000a8c <__udivmoddi4+0x24c>
 8000ae2:	46d6      	mov	lr, sl
 8000ae4:	e77f      	b.n	80009e6 <__udivmoddi4+0x1a6>
 8000ae6:	4463      	add	r3, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e74d      	b.n	8000988 <__udivmoddi4+0x148>
 8000aec:	4606      	mov	r6, r0
 8000aee:	4623      	mov	r3, r4
 8000af0:	4608      	mov	r0, r1
 8000af2:	e70f      	b.n	8000914 <__udivmoddi4+0xd4>
 8000af4:	3e02      	subs	r6, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	e730      	b.n	800095c <__udivmoddi4+0x11c>
 8000afa:	bf00      	nop

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000b0c:	2334      	movs	r3, #52	@ 0x34
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <tx_application_define+0x4c>)
 8000b16:	490e      	ldr	r1, [pc, #56]	@ (8000b50 <tx_application_define+0x50>)
 8000b18:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <tx_application_define+0x54>)
 8000b1a:	f00b fbdf 	bl	800c2dc <_txe_byte_pool_create>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10e      	bne.n	8000b42 <tx_application_define+0x42>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <tx_application_define+0x54>)
 8000b26:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f000 fa4d 	bl	8000fc8 <App_ThreadX_Init>
 8000b2e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000b3a:	68b8      	ldr	r0, [r7, #8]
 8000b3c:	f001 fbb6 	bl	80022ac <ThreadX_Init>
 8000b40:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001ac 	.word	0x200001ac
 8000b50:	0800ca98 	.word	0x0800ca98
 8000b54:	200005ac 	.word	0x200005ac

08000b58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00b ff59 	bl	800ca28 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b76:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b7e:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b92:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b98:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9e:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000baa:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb6:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bbe:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be0:	4817      	ldr	r0, [pc, #92]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000be2:	f002 fbe9 	bl	80033b8 <HAL_ADC_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000bec:	f000 fe24 	bl	8001838 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bfc:	f003 feac 	bl	8004958 <HAL_ADCEx_MultiModeConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c06:	f000 fe17 	bl	8001838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_ADC1_Init+0xec>)
 8000c0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c0e:	2306      	movs	r3, #6
 8000c10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c16:	237f      	movs	r3, #127	@ 0x7f
 8000c18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000c28:	f003 f8d4 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c32:	f000 fe01 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	@ 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200005e0 	.word	0x200005e0
 8000c44:	10c00010 	.word	0x10c00010

08000c48 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2220      	movs	r2, #32
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f00b fee7 	bl	800ca28 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000c5a:	4b5e      	ldr	r3, [pc, #376]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8000dd8 <MX_ADC4_Init+0x190>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c60:	4b5c      	ldr	r3, [pc, #368]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c62:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c66:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000c68:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6e:	4b59      	ldr	r3, [pc, #356]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000c74:	4b57      	ldr	r3, [pc, #348]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7a:	4b56      	ldr	r3, [pc, #344]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c80:	4b54      	ldr	r3, [pc, #336]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b53      	ldr	r3, [pc, #332]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000c8c:	4b51      	ldr	r3, [pc, #324]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 8000c92:	4b50      	ldr	r3, [pc, #320]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c94:	2208      	movs	r2, #8
 8000c96:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b49      	ldr	r3, [pc, #292]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cb4:	4b47      	ldr	r3, [pc, #284]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000cbc:	4b45      	ldr	r3, [pc, #276]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000cc4:	4843      	ldr	r0, [pc, #268]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cc6:	f002 fb77 	bl	80033b8 <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000cd0:	f000 fdb2 	bl	8001838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cd4:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <MX_ADC4_Init+0x194>)
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce0:	237f      	movs	r3, #127	@ 0x7f
 8000ce2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4838      	ldr	r0, [pc, #224]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cf2:	f003 f86f 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000cfc:	f000 fd9c 	bl	8001838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <MX_ADC4_Init+0x198>)
 8000d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d04:	230c      	movs	r3, #12
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4831      	ldr	r0, [pc, #196]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d0e:	f003 f861 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000d18:	f000 fd8e 	bl	8001838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d1c:	4b31      	ldr	r3, [pc, #196]	@ (8000de4 <MX_ADC4_Init+0x19c>)
 8000d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d20:	2312      	movs	r3, #18
 8000d22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	482a      	ldr	r0, [pc, #168]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d2a:	f003 f853 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 8000d34:	f000 fd80 	bl	8001838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <MX_ADC4_Init+0x1a0>)
 8000d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d3c:	2318      	movs	r3, #24
 8000d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	4619      	mov	r1, r3
 8000d44:	4823      	ldr	r0, [pc, #140]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d46:	f003 f845 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000d50:	f000 fd72 	bl	8001838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d54:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <MX_ADC4_Init+0x1a4>)
 8000d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	481c      	ldr	r0, [pc, #112]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d64:	f003 f836 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 8000d6e:	f000 fd63 	bl	8001838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_ADC4_Init+0x1a8>)
 8000d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d76:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4814      	ldr	r0, [pc, #80]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d82:	f003 f827 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 8000d8c:	f000 fd54 	bl	8001838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_ADC4_Init+0x1ac>)
 8000d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d94:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000d98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000da0:	f003 f818 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 8000daa:	f000 fd45 	bl	8001838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_ADC4_Init+0x1b0>)
 8000db0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000db2:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000db6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000dbe:	f003 f809 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000dc8:	f000 fd36 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000064c 	.word	0x2000064c
 8000dd8:	50000500 	.word	0x50000500
 8000ddc:	14f00020 	.word	0x14f00020
 8000de0:	32601000 	.word	0x32601000
 8000de4:	2a000400 	.word	0x2a000400
 8000de8:	2e300800 	.word	0x2e300800
 8000dec:	36902000 	.word	0x36902000
 8000df0:	1d500080 	.word	0x1d500080
 8000df4:	21800100 	.word	0x21800100
 8000df8:	25b00200 	.word	0x25b00200

08000dfc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0a2      	sub	sp, #136	@ 0x88
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	2254      	movs	r2, #84	@ 0x54
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f00b fe03 	bl	800ca28 <memset>
  if(adcHandle->Instance==ADC1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e2a:	d135      	bne.n	8000e98 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e30:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e32:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e36:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 f99b 	bl	8008178 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e48:	f000 fcf6 	bl	8001838 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e4c:	4b58      	ldr	r3, [pc, #352]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	4a57      	ldr	r2, [pc, #348]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e58:	4b55      	ldr	r3, [pc, #340]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b52      	ldr	r3, [pc, #328]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e68:	4a51      	ldr	r2, [pc, #324]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e70:	4b4f      	ldr	r3, [pc, #316]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e80:	2303      	movs	r3, #3
 8000e82:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f004 ff6b 	bl	8005d6c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000e96:	e086      	b.n	8000fa6 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a45      	ldr	r2, [pc, #276]	@ (8000fb4 <HAL_ADC_MspInit+0x1b8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	f040 8081 	bne.w	8000fa6 <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000eaa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000eae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f007 f95f 	bl	8008178 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000ec0:	f000 fcba 	bl	8001838 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	4a39      	ldr	r2, [pc, #228]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed0:	4b37      	ldr	r3, [pc, #220]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	4a33      	ldr	r2, [pc, #204]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee8:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f00:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f10:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4825      	ldr	r0, [pc, #148]	@ (8000fb8 <HAL_ADC_MspInit+0x1bc>)
 8000f22:	f004 ff23 	bl	8005d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000f26:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000f2a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4820      	ldr	r0, [pc, #128]	@ (8000fbc <HAL_ADC_MspInit+0x1c0>)
 8000f3c:	f004 ff16 	bl	8005d6c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f42:	4a20      	ldr	r2, [pc, #128]	@ (8000fc4 <HAL_ADC_MspInit+0x1c8>)
 8000f44:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f48:	2226      	movs	r2, #38	@ 0x26
 8000f4a:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f64:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f70:	2220      	movs	r2, #32
 8000f72:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000f7a:	4811      	ldr	r0, [pc, #68]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f7c:	f003 ffc6 	bl	8004f0c <HAL_DMA_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000f86:	f000 fc57 	bl	8001838 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f90:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	203d      	movs	r0, #61	@ 0x3d
 8000f9c:	f003 fe9c 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000fa0:	203d      	movs	r0, #61	@ 0x3d
 8000fa2:	f003 feb3 	bl	8004d0c <HAL_NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3788      	adds	r7, #136	@ 0x88
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	50000500 	.word	0x50000500
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000c00 	.word	0x48000c00
 8000fc0:	200006b8 	.word	0x200006b8
 8000fc4:	40020030 	.word	0x40020030

08000fc8 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000fe6:	f009 feaf 	bl	800ad48 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <MX_CRC_Init+0x3c>)
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <MX_CRC_Init+0x40>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_CRC_Init+0x3c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <MX_CRC_Init+0x3c>)
 8001002:	2200      	movs	r2, #0
 8001004:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_CRC_Init+0x3c>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <MX_CRC_Init+0x3c>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_CRC_Init+0x3c>)
 8001014:	2201      	movs	r2, #1
 8001016:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <MX_CRC_Init+0x3c>)
 800101a:	f003 fe85 	bl	8004d28 <HAL_CRC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001024:	f000 fc08 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000718 	.word	0x20000718
 8001030:	40023000 	.word	0x40023000

08001034 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <HAL_CRC_MspInit+0x38>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10b      	bne.n	800105e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_CRC_MspInit+0x3c>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <HAL_CRC_MspInit+0x3c>)
 800104c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001050:	6493      	str	r3, [r2, #72]	@ 0x48
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <HAL_CRC_MspInit+0x3c>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023000 	.word	0x40023000
 8001070:	40021000 	.word	0x40021000

08001074 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_DMA_Init+0x70>)
 800107c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107e:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <MX_DMA_Init+0x70>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6493      	str	r3, [r2, #72]	@ 0x48
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_DMA_Init+0x70>)
 8001088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_DMA_Init+0x70>)
 8001094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001096:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <MX_DMA_Init+0x70>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6493      	str	r3, [r2, #72]	@ 0x48
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_DMA_Init+0x70>)
 80010a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	200b      	movs	r0, #11
 80010b0:	f003 fe12 	bl	8004cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b4:	200b      	movs	r0, #11
 80010b6:	f003 fe29 	bl	8004d0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	200c      	movs	r0, #12
 80010c0:	f003 fe0a 	bl	8004cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010c4:	200c      	movs	r0, #12
 80010c6:	f003 fe21 	bl	8004d0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	200d      	movs	r0, #13
 80010d0:	f003 fe02 	bl	8004cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010d4:	200d      	movs	r0, #13
 80010d6:	f003 fe19 	bl	8004d0c <HAL_NVIC_EnableIRQ>

}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <MX_FDCAN1_Init+0x84>)
 80010ee:	4a20      	ldr	r2, [pc, #128]	@ (8001170 <MX_FDCAN1_Init+0x88>)
 80010f0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <MX_FDCAN1_Init+0x84>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <MX_FDCAN1_Init+0x84>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001104:	4b19      	ldr	r3, [pc, #100]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001106:	2200      	movs	r2, #0
 8001108:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800110c:	2200      	movs	r2, #0
 800110e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001112:	2200      	movs	r2, #0
 8001114:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001118:	2204      	movs	r2, #4
 800111a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800111e:	2201      	movs	r2, #1
 8001120:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001122:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001124:	2205      	movs	r2, #5
 8001126:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001128:	4b10      	ldr	r3, [pc, #64]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800112a:	2202      	movs	r2, #2
 800112c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800112e:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001130:	2201      	movs	r2, #1
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001136:	2201      	movs	r2, #1
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800113c:	2201      	movs	r2, #1
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001142:	2201      	movs	r2, #1
 8001144:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001148:	2200      	movs	r2, #0
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800114e:	2200      	movs	r2, #0
 8001150:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_FDCAN1_Init+0x84>)
 8001154:	2200      	movs	r2, #0
 8001156:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_FDCAN1_Init+0x84>)
 800115a:	f004 f9bf 	bl	80054dc <HAL_FDCAN_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001164:	f000 fb68 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000073c 	.word	0x2000073c
 8001170:	40006400 	.word	0x40006400

08001174 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09e      	sub	sp, #120	@ 0x78
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2254      	movs	r2, #84	@ 0x54
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00b fc47 	bl	800ca28 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <HAL_FDCAN_MspInit+0xcc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d149      	bne.n	8001238 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80011aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 ffdf 	bl	8008178 <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80011c0:	f000 fb3a 	bl	8001838 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	4a18      	ldr	r2, [pc, #96]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <HAL_FDCAN_MspInit+0xd0>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001206:	2309      	movs	r3, #9
 8001208:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001214:	f004 fdaa 	bl	8005d6c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	2015      	movs	r0, #21
 800121e:	f003 fd5b 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001222:	2015      	movs	r0, #21
 8001224:	f003 fd72 	bl	8004d0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2016      	movs	r0, #22
 800122e:	f003 fd53 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001232:	2016      	movs	r0, #22
 8001234:	f003 fd6a 	bl	8004d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001238:	bf00      	nop
 800123a:	3778      	adds	r7, #120	@ 0x78
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40006400 	.word	0x40006400
 8001244:	40021000 	.word	0x40021000

08001248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125e:	4b5b      	ldr	r3, [pc, #364]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a5a      	ldr	r2, [pc, #360]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001264:	f043 0320 	orr.w	r3, r3, #32
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b58      	ldr	r3, [pc, #352]	@ (80013cc <MX_GPIO_Init+0x184>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b55      	ldr	r3, [pc, #340]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a54      	ldr	r2, [pc, #336]	@ (80013cc <MX_GPIO_Init+0x184>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b52      	ldr	r3, [pc, #328]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b4f      	ldr	r3, [pc, #316]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	4a4e      	ldr	r2, [pc, #312]	@ (80013cc <MX_GPIO_Init+0x184>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129a:	4b4c      	ldr	r3, [pc, #304]	@ (80013cc <MX_GPIO_Init+0x184>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b49      	ldr	r3, [pc, #292]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	4a48      	ldr	r2, [pc, #288]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b2:	4b46      	ldr	r3, [pc, #280]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	4b43      	ldr	r3, [pc, #268]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	4a42      	ldr	r2, [pc, #264]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ca:	4b40      	ldr	r3, [pc, #256]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d6:	4b3d      	ldr	r3, [pc, #244]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	4a3c      	ldr	r2, [pc, #240]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e2:	4b3a      	ldr	r3, [pc, #232]	@ (80013cc <MX_GPIO_Init+0x184>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 80012ee:	2200      	movs	r2, #0
 80012f0:	f641 7130 	movw	r1, #7984	@ 0x1f30
 80012f4:	4836      	ldr	r0, [pc, #216]	@ (80013d0 <MX_GPIO_Init+0x188>)
 80012f6:	f004 febb 	bl	8006070 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f246 0103 	movw	r1, #24579	@ 0x6003
 8001300:	4834      	ldr	r0, [pc, #208]	@ (80013d4 <MX_GPIO_Init+0x18c>)
 8001302:	f004 feb5 	bl	8006070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800130c:	4832      	ldr	r0, [pc, #200]	@ (80013d8 <MX_GPIO_Init+0x190>)
 800130e:	f004 feaf 	bl	8006070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001318:	4830      	ldr	r0, [pc, #192]	@ (80013dc <MX_GPIO_Init+0x194>)
 800131a:	f004 fea9 	bl	8006070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001328:	f004 fea2 	bl	8006070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 800132c:	f641 7330 	movw	r3, #7984	@ 0x1f30
 8001330:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4822      	ldr	r0, [pc, #136]	@ (80013d0 <MX_GPIO_Init+0x188>)
 8001346:	f004 fd11 	bl	8005d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 800134a:	f246 0303 	movw	r3, #24579	@ 0x6003
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	481c      	ldr	r0, [pc, #112]	@ (80013d4 <MX_GPIO_Init+0x18c>)
 8001364:	f004 fd02 	bl	8005d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin;
 8001368:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4815      	ldr	r0, [pc, #84]	@ (80013d8 <MX_GPIO_Init+0x190>)
 8001382:	f004 fcf3 	bl	8005d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 8001386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	480f      	ldr	r0, [pc, #60]	@ (80013dc <MX_GPIO_Init+0x194>)
 80013a0:	f004 fce4 	bl	8005d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 80013a4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c0:	f004 fcd4 	bl	8005d6c <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3730      	adds	r7, #48	@ 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48000c00 	.word	0x48000c00

080013e0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <MX_I2C1_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013ec:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <MX_I2C1_Init+0x7c>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_I2C1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141a:	480e      	ldr	r0, [pc, #56]	@ (8001454 <MX_I2C1_Init+0x74>)
 800141c:	f004 fe5a 	bl	80060d4 <HAL_I2C_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001426:	f000 fa07 	bl	8001838 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	4809      	ldr	r0, [pc, #36]	@ (8001454 <MX_I2C1_Init+0x74>)
 800142e:	f005 fff7 	bl	8007420 <HAL_I2CEx_ConfigAnalogFilter>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001438:	f000 f9fe 	bl	8001838 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800143c:	2100      	movs	r1, #0
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001440:	f006 f839 	bl	80074b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800144a:	f000 f9f5 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200007a0 	.word	0x200007a0
 8001458:	40005400 	.word	0x40005400
 800145c:	30a0a7fb 	.word	0x30a0a7fb

08001460 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001466:	4a1c      	ldr	r2, [pc, #112]	@ (80014d8 <MX_I2C4_Init+0x78>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10802D9B;
 800146a:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <MX_I2C4_Init+0x74>)
 800146c:	4a1b      	ldr	r2, [pc, #108]	@ (80014dc <MX_I2C4_Init+0x7c>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001478:	2201      	movs	r2, #1
 800147a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <MX_I2C4_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001482:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <MX_I2C4_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <MX_I2C4_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800149a:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <MX_I2C4_Init+0x74>)
 800149c:	f004 fe1a 	bl	80060d4 <HAL_I2C_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80014a6:	f000 f9c7 	bl	8001838 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4809      	ldr	r0, [pc, #36]	@ (80014d4 <MX_I2C4_Init+0x74>)
 80014ae:	f005 ffb7 	bl	8007420 <HAL_I2CEx_ConfigAnalogFilter>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80014b8:	f000 f9be 	bl	8001838 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80014bc:	2100      	movs	r1, #0
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_I2C4_Init+0x74>)
 80014c0:	f005 fff9 	bl	80074b6 <HAL_I2CEx_ConfigDigitalFilter>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80014ca:	f000 f9b5 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200007f4 	.word	0x200007f4
 80014d8:	40008400 	.word	0x40008400
 80014dc:	10802d9b 	.word	0x10802d9b

080014e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0a2      	sub	sp, #136	@ 0x88
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	2254      	movs	r2, #84	@ 0x54
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f00b fa91 	bl	800ca28 <memset>
  if(i2cHandle->Instance==I2C1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a80      	ldr	r2, [pc, #512]	@ (800170c <HAL_I2C_MspInit+0x22c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d158      	bne.n	80015c2 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001510:	2340      	movs	r3, #64	@ 0x40
 8001512:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001514:	2300      	movs	r3, #0
 8001516:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f006 fe2b 	bl	8008178 <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001528:	f000 f986 	bl	8001838 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b78      	ldr	r3, [pc, #480]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	4a77      	ldr	r2, [pc, #476]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001538:	4b75      	ldr	r3, [pc, #468]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b72      	ldr	r3, [pc, #456]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001548:	4a71      	ldr	r2, [pc, #452]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001550:	4b6f      	ldr	r3, [pc, #444]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800155c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001560:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001562:	2312      	movs	r3, #18
 8001564:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001570:	2304      	movs	r3, #4
 8001572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001580:	f004 fbf4 	bl	8005d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001596:	2304      	movs	r3, #4
 8001598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015a0:	4619      	mov	r1, r3
 80015a2:	485c      	ldr	r0, [pc, #368]	@ (8001714 <HAL_I2C_MspInit+0x234>)
 80015a4:	f004 fbe2 	bl	8005d6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a8:	4b59      	ldr	r3, [pc, #356]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	4a58      	ldr	r2, [pc, #352]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b4:	4b56      	ldr	r3, [pc, #344]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80015c0:	e0a0      	b.n	8001704 <HAL_I2C_MspInit+0x224>
  else if(i2cHandle->Instance==I2C4)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a54      	ldr	r2, [pc, #336]	@ (8001718 <HAL_I2C_MspInit+0x238>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	f040 809b 	bne.w	8001704 <HAL_I2C_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	4618      	mov	r0, r3
 80015de:	f006 fdcb 	bl	8008178 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_I2C_MspInit+0x10c>
      Error_Handler();
 80015e8:	f000 f926 	bl	8001838 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ec:	4b48      	ldr	r3, [pc, #288]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	4a47      	ldr	r2, [pc, #284]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f8:	4b45      	ldr	r3, [pc, #276]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001604:	23c0      	movs	r3, #192	@ 0xc0
 8001606:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001608:	2312      	movs	r3, #18
 800160a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001616:	2308      	movs	r3, #8
 8001618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001620:	4619      	mov	r1, r3
 8001622:	483e      	ldr	r0, [pc, #248]	@ (800171c <HAL_I2C_MspInit+0x23c>)
 8001624:	f004 fba2 	bl	8005d6c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001628:	4b39      	ldr	r3, [pc, #228]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800162a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162c:	4a38      	ldr	r2, [pc, #224]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001634:	4b36      	ldr	r3, [pc, #216]	@ (8001710 <HAL_I2C_MspInit+0x230>)
 8001636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001640:	4b37      	ldr	r3, [pc, #220]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001642:	4a38      	ldr	r2, [pc, #224]	@ (8001724 <HAL_I2C_MspInit+0x244>)
 8001644:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001646:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001648:	2216      	movs	r2, #22
 800164a:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164c:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001652:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	4b31      	ldr	r3, [pc, #196]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165e:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001664:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001676:	482a      	ldr	r0, [pc, #168]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 8001678:	f003 fc48 	bl	8004f0c <HAL_DMA_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_MspInit+0x1a6>
      Error_Handler();
 8001682:	f000 f8d9 	bl	8001838 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a25      	ldr	r2, [pc, #148]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800168a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800168c:	4a24      	ldr	r2, [pc, #144]	@ (8001720 <HAL_I2C_MspInit+0x240>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001692:	4b25      	ldr	r3, [pc, #148]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 8001694:	4a25      	ldr	r2, [pc, #148]	@ (800172c <HAL_I2C_MspInit+0x24c>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001698:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 800169a:	2217      	movs	r2, #23
 800169c:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80016c8:	4817      	ldr	r0, [pc, #92]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016ca:	f003 fc1f 	bl	8004f0c <HAL_DMA_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_MspInit+0x1f8>
      Error_Handler();
 80016d4:	f000 f8b0 	bl	8001838 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a13      	ldr	r2, [pc, #76]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <HAL_I2C_MspInit+0x248>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2052      	movs	r0, #82	@ 0x52
 80016ea:	f003 faf5 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80016ee:	2052      	movs	r0, #82	@ 0x52
 80016f0:	f003 fb0c 	bl	8004d0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	2053      	movs	r0, #83	@ 0x53
 80016fa:	f003 faed 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80016fe:	2053      	movs	r0, #83	@ 0x53
 8001700:	f003 fb04 	bl	8004d0c <HAL_NVIC_EnableIRQ>
}
 8001704:	bf00      	nop
 8001706:	3788      	adds	r7, #136	@ 0x88
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40005400 	.word	0x40005400
 8001710:	40021000 	.word	0x40021000
 8001714:	48000400 	.word	0x48000400
 8001718:	40008400 	.word	0x40008400
 800171c:	48000800 	.word	0x48000800
 8001720:	20000848 	.word	0x20000848
 8001724:	40020008 	.word	0x40020008
 8001728:	200008a8 	.word	0x200008a8
 800172c:	4002001c 	.word	0x4002001c

08001730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001734:	f001 fba6 	bl	8002e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001738:	f000 f822 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173c:	f7ff fd84 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 8001740:	f7ff fc98 	bl	8001074 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001744:	f7ff fcd0 	bl	80010e8 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001748:	f000 fa4c 	bl	8001be4 <MX_TIM2_Init>
  MX_CRC_Init();
 800174c:	f7ff fc50 	bl	8000ff0 <MX_CRC_Init>
  MX_ADC4_Init();
 8001750:	f7ff fa7a 	bl	8000c48 <MX_ADC4_Init>
  MX_SPI4_Init();
 8001754:	f000 f876 	bl	8001844 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001758:	f7ff f9fe 	bl	8000b58 <MX_ADC1_Init>
  MX_I2C1_Init();
 800175c:	f7ff fe40 	bl	80013e0 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001760:	f7ff fe7e 	bl	8001460 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001764:	f000 fc50 	bl	8002008 <MX_LPUART1_UART_Init>
  MX_TIM7_Init();
 8001768:	f000 fab0 	bl	8001ccc <MX_TIM7_Init>
  MX_TIM15_Init();
 800176c:	f000 fae6 	bl	8001d3c <MX_TIM15_Init>
  MX_TIM16_Init();
 8001770:	f000 fb36 	bl	8001de0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001774:	f000 fb5c 	bl	8001e30 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001778:	f7ff fc33 	bl	8000fe2 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <main+0x4c>

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b094      	sub	sp, #80	@ 0x50
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	2238      	movs	r2, #56	@ 0x38
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f00b f94a 	bl	800ca28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f005 fed4 	bl	8007550 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b2:	2302      	movs	r3, #2
 80017b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b6:	2303      	movs	r3, #3
 80017b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80017ba:	2306      	movs	r3, #6
 80017bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017be:	2355      	movs	r3, #85	@ 0x55
 80017c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c2:	2302      	movs	r3, #2
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017c6:	2302      	movs	r3, #2
 80017c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f005 ff70 	bl	80076b8 <HAL_RCC_OscConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80017de:	f000 f82b 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e2:	230f      	movs	r3, #15
 80017e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e6:	2303      	movs	r3, #3
 80017e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2104      	movs	r1, #4
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 fa6e 	bl	8007cdc <HAL_RCC_ClockConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001806:	f000 f817 	bl	8001838 <Error_Handler>
  }
}
 800180a:	bf00      	nop
 800180c:	3750      	adds	r7, #80	@ 0x50
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001826:	f001 fb45 	bl	8002eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40001000 	.word	0x40001000

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <Error_Handler+0x8>

08001844 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <MX_SPI4_Init+0x74>)
 800184a:	4a1c      	ldr	r2, [pc, #112]	@ (80018bc <MX_SPI4_Init+0x78>)
 800184c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800184e:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <MX_SPI4_Init+0x74>)
 8001850:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001854:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <MX_SPI4_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_SPI4_Init+0x74>)
 800185e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001862:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <MX_SPI4_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186a:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <MX_SPI4_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <MX_SPI4_Init+0x74>)
 8001872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001876:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <MX_SPI4_Init+0x74>)
 800187a:	2210      	movs	r2, #16
 800187c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_SPI4_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <MX_SPI4_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <MX_SPI4_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <MX_SPI4_Init+0x74>)
 8001892:	2207      	movs	r2, #7
 8001894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <MX_SPI4_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MX_SPI4_Init+0x74>)
 800189e:	2208      	movs	r2, #8
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_SPI4_Init+0x74>)
 80018a4:	f006 feb6 	bl	8008614 <HAL_SPI_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80018ae:	f7ff ffc3 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000908 	.word	0x20000908
 80018bc:	40013c00 	.word	0x40013c00

080018c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a17      	ldr	r2, [pc, #92]	@ (800193c <HAL_SPI_MspInit+0x7c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d128      	bne.n	8001934 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018e2:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <HAL_SPI_MspInit+0x80>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e6:	4a16      	ldr	r2, [pc, #88]	@ (8001940 <HAL_SPI_MspInit+0x80>)
 80018e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <HAL_SPI_MspInit+0x80>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <HAL_SPI_MspInit+0x80>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	4a10      	ldr	r2, [pc, #64]	@ (8001940 <HAL_SPI_MspInit+0x80>)
 8001900:	f043 0310 	orr.w	r3, r3, #16
 8001904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HAL_SPI_MspInit+0x80>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001912:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001924:	2305      	movs	r3, #5
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4805      	ldr	r0, [pc, #20]	@ (8001944 <HAL_SPI_MspInit+0x84>)
 8001930:	f004 fa1c 	bl	8005d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	@ 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40013c00 	.word	0x40013c00
 8001940:	40021000 	.word	0x40021000
 8001944:	48001000 	.word	0x48001000

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_MspInit+0x4c>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001952:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <HAL_MspInit+0x4c>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6613      	str	r3, [r2, #96]	@ 0x60
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_MspInit+0x4c>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_MspInit+0x4c>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <HAL_MspInit+0x4c>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001970:	6593      	str	r3, [r2, #88]	@ 0x58
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <HAL_MspInit+0x4c>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800197e:	f001 facb 	bl	8002f18 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001982:	2002      	movs	r0, #2
 8001984:	f001 fab4 	bl	8002ef0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001988:	f005 fe86 	bl	8007698 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	@ 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019a8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a5c <HAL_InitTick+0xc4>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ac:	4a2b      	ldr	r2, [pc, #172]	@ (8001a5c <HAL_InitTick+0xc4>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b4:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <HAL_InitTick+0xc4>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019c0:	f107 020c 	add.w	r2, r7, #12
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f006 fb5c 	bl	8008088 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019d0:	f006 fb2e 	bl	8008030 <HAL_RCC_GetPCLK1Freq>
 80019d4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d8:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <HAL_InitTick+0xc8>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0c9b      	lsrs	r3, r3, #18
 80019e0:	3b01      	subs	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HAL_InitTick+0xcc>)
 80019e6:	4a20      	ldr	r2, [pc, #128]	@ (8001a68 <HAL_InitTick+0xd0>)
 80019e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <HAL_InitTick+0xcc>)
 80019ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a64 <HAL_InitTick+0xcc>)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <HAL_InitTick+0xcc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_InitTick+0xcc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001a04:	4817      	ldr	r0, [pc, #92]	@ (8001a64 <HAL_InitTick+0xcc>)
 8001a06:	f006 feb0 	bl	800876a <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d11b      	bne.n	8001a50 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a18:	4812      	ldr	r0, [pc, #72]	@ (8001a64 <HAL_InitTick+0xcc>)
 8001a1a:	f006 fefd 	bl	8008818 <HAL_TIM_Base_Start_IT>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d111      	bne.n	8001a50 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a2c:	2036      	movs	r0, #54	@ 0x36
 8001a2e:	f003 f96d 	bl	8004d0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	d808      	bhi.n	8001a4a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	2036      	movs	r0, #54	@ 0x36
 8001a3e:	f003 f94b 	bl	8004cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_InitTick+0xd4>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e002      	b.n	8001a50 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	2000096c 	.word	0x2000096c
 8001a68:	40001000 	.word	0x40001000
 8001a6c:	20000184 	.word	0x20000184

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <NMI_Handler+0x4>

08001a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <MemManage_Handler+0x4>

08001a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <DMA1_Channel1_IRQHandler+0x10>)
 8001aae:	f003 fbb7 	bl	8005220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000848 	.word	0x20000848

08001abc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <DMA1_Channel2_IRQHandler+0x10>)
 8001ac2:	f003 fbad 	bl	8005220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200008a8 	.word	0x200008a8

08001ad0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <DMA1_Channel3_IRQHandler+0x10>)
 8001ad6:	f003 fba3 	bl	8005220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200006b8 	.word	0x200006b8

08001ae4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <FDCAN1_IT0_IRQHandler+0x10>)
 8001aea:	f003 febd 	bl	8005868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000073c 	.word	0x2000073c

08001af8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <FDCAN1_IT1_IRQHandler+0x10>)
 8001afe:	f003 feb3 	bl	8005868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000073c 	.word	0x2000073c

08001b0c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001b12:	f007 f8a1 	bl	8008c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000a50 	.word	0x20000a50

08001b20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b26:	f007 f897 	bl	8008c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000a9c 	.word	0x20000a9c

08001b34 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001b3a:	f007 f88d 	bl	8008c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000ae8 	.word	0x20000ae8

08001b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <TIM2_IRQHandler+0x10>)
 8001b4e:	f007 f883 	bl	8008c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200009b8 	.word	0x200009b8

08001b5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <TIM6_DAC_IRQHandler+0x10>)
 8001b62:	f007 f879 	bl	8008c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000096c 	.word	0x2000096c

08001b70 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <TIM7_DAC_IRQHandler+0x10>)
 8001b76:	f007 f86f 	bl	8008c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000a04 	.word	0x20000a04

08001b84 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <ADC4_IRQHandler+0x10>)
 8001b8a:	f001 fea5 	bl	80038d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000064c 	.word	0x2000064c

08001b98 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <I2C4_EV_IRQHandler+0x10>)
 8001b9e:	f004 fc4d 	bl	800643c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200007f4 	.word	0x200007f4

08001bac <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <I2C4_ER_IRQHandler+0x10>)
 8001bb2:	f004 fc5d 	bl	8006470 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200007f4 	.word	0x200007f4

08001bc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c02:	4b31      	ldr	r3, [pc, #196]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c16:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c2a:	4827      	ldr	r0, [pc, #156]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c2c:	f006 fe6c 	bl	8008908 <HAL_TIM_IC_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c36:	f7ff fdff 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	481f      	ldr	r0, [pc, #124]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c4a:	f007 fe09 	bl	8009860 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001c54:	f7ff fdf0 	bl	8001838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4816      	ldr	r0, [pc, #88]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c70:	f007 f941 	bl	8008ef6 <HAL_TIM_IC_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c7a:	f7ff fddd 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2204      	movs	r2, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4810      	ldr	r0, [pc, #64]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c86:	f007 f936 	bl	8008ef6 <HAL_TIM_IC_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001c90:	f7ff fdd2 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2208      	movs	r2, #8
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480b      	ldr	r0, [pc, #44]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001c9c:	f007 f92b 	bl	8008ef6 <HAL_TIM_IC_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001ca6:	f7ff fdc7 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	220c      	movs	r2, #12
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <MX_TIM2_Init+0xe4>)
 8001cb2:	f007 f920 	bl	8008ef6 <HAL_TIM_IC_ConfigChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001cbc:	f7ff fdbc 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200009b8 	.word	0x200009b8

08001ccc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <MX_TIM7_Init+0x68>)
 8001cde:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <MX_TIM7_Init+0x6c>)
 8001ce0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1700-1;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <MX_TIM7_Init+0x68>)
 8001ce4:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001ce8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <MX_TIM7_Init+0x68>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <MX_TIM7_Init+0x68>)
 8001cf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <MX_TIM7_Init+0x68>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cfe:	480d      	ldr	r0, [pc, #52]	@ (8001d34 <MX_TIM7_Init+0x68>)
 8001d00:	f006 fd33 	bl	800876a <HAL_TIM_Base_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001d0a:	f7ff fd95 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	@ (8001d34 <MX_TIM7_Init+0x68>)
 8001d1c:	f007 fda0 	bl	8009860 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001d26:	f7ff fd87 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000a04 	.word	0x20000a04
 8001d38:	40001400 	.word	0x40001400

08001d3c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ddc <MX_TIM15_Init+0xa0>)
 8001d5e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1700-1;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001d62:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001d66:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001d70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d74:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001d88:	4813      	ldr	r0, [pc, #76]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001d8a:	f006 fcee 	bl	800876a <HAL_TIM_Base_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001d94:	f7ff fd50 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	4619      	mov	r1, r3
 8001da4:	480c      	ldr	r0, [pc, #48]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001da6:	f007 f943 	bl	8009030 <HAL_TIM_ConfigClockSource>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001db0:	f7ff fd42 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <MX_TIM15_Init+0x9c>)
 8001dc2:	f007 fd4d 	bl	8009860 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001dcc:	f7ff fd34 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000a50 	.word	0x20000a50
 8001ddc:	40014000 	.word	0x40014000

08001de0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <MX_TIM16_Init+0x48>)
 8001de6:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <MX_TIM16_Init+0x4c>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1700-1;
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <MX_TIM16_Init+0x48>)
 8001dec:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001df0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <MX_TIM16_Init+0x48>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <MX_TIM16_Init+0x48>)
 8001dfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dfe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <MX_TIM16_Init+0x48>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e06:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <MX_TIM16_Init+0x48>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <MX_TIM16_Init+0x48>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <MX_TIM16_Init+0x48>)
 8001e14:	f006 fca9 	bl	800876a <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001e1e:	f7ff fd0b 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000a9c 	.word	0x20000a9c
 8001e2c:	40014400 	.word	0x40014400

08001e30 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001e34:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <MX_TIM17_Init+0x48>)
 8001e36:	4a11      	ldr	r2, [pc, #68]	@ (8001e7c <MX_TIM17_Init+0x4c>)
 8001e38:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1700-1;
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <MX_TIM17_Init+0x48>)
 8001e3c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001e40:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <MX_TIM17_Init+0x48>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <MX_TIM17_Init+0x48>)
 8001e4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e4e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <MX_TIM17_Init+0x48>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e56:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <MX_TIM17_Init+0x48>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <MX_TIM17_Init+0x48>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	@ (8001e78 <MX_TIM17_Init+0x48>)
 8001e64:	f006 fc81 	bl	800876a <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001e6e:	f7ff fce3 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000ae8 	.word	0x20000ae8
 8001e7c:	40014800 	.word	0x40014800

08001e80 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea0:	d12f      	bne.n	8001f02 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <HAL_TIM_IC_MspInit+0x8c>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	4a19      	ldr	r2, [pc, #100]	@ (8001f0c <HAL_TIM_IC_MspInit+0x8c>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eae:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <HAL_TIM_IC_MspInit+0x8c>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eba:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <HAL_TIM_IC_MspInit+0x8c>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebe:	4a13      	ldr	r2, [pc, #76]	@ (8001f0c <HAL_TIM_IC_MspInit+0x8c>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_TIM_IC_MspInit+0x8c>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 8001ed2:	23d8      	movs	r3, #216	@ 0xd8
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4808      	ldr	r0, [pc, #32]	@ (8001f10 <HAL_TIM_IC_MspInit+0x90>)
 8001eee:	f003 ff3d 	bl	8005d6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	201c      	movs	r0, #28
 8001ef8:	f002 feee 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001efc:	201c      	movs	r0, #28
 8001efe:	f002 ff05 	bl	8004d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	@ 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	48000c00 	.word	0x48000c00

08001f14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a34      	ldr	r2, [pc, #208]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xe0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d114      	bne.n	8001f50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f26:	4b34      	ldr	r3, [pc, #208]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	4a33      	ldr	r2, [pc, #204]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001f2c:	f043 0320 	orr.w	r3, r3, #32
 8001f30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f32:	4b31      	ldr	r3, [pc, #196]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2037      	movs	r0, #55	@ 0x37
 8001f44:	f002 fec8 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001f48:	2037      	movs	r0, #55	@ 0x37
 8001f4a:	f002 fedf 	bl	8004d0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001f4e:	e04c      	b.n	8001fea <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM15)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a29      	ldr	r2, [pc, #164]	@ (8001ffc <HAL_TIM_Base_MspInit+0xe8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d114      	bne.n	8001f84 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5e:	4a26      	ldr	r2, [pc, #152]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f66:	4b24      	ldr	r3, [pc, #144]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	2018      	movs	r0, #24
 8001f78:	f002 feae 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f7c:	2018      	movs	r0, #24
 8001f7e:	f002 fec5 	bl	8004d0c <HAL_NVIC_EnableIRQ>
}
 8001f82:	e032      	b.n	8001fea <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM16)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	@ (8002000 <HAL_TIM_Base_MspInit+0xec>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d114      	bne.n	8001fb8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2019      	movs	r0, #25
 8001fac:	f002 fe94 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fb0:	2019      	movs	r0, #25
 8001fb2:	f002 feab 	bl	8004d0c <HAL_NVIC_EnableIRQ>
}
 8001fb6:	e018      	b.n	8001fea <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM17)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <HAL_TIM_Base_MspInit+0xf0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d113      	bne.n	8001fea <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fce:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xe4>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	201a      	movs	r0, #26
 8001fe0:	f002 fe7a 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001fe4:	201a      	movs	r0, #26
 8001fe6:	f002 fe91 	bl	8004d0c <HAL_NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40001400 	.word	0x40001400
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40014000 	.word	0x40014000
 8002000:	40014400 	.word	0x40014400
 8002004:	40014800 	.word	0x40014800

08002008 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800200c:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 800200e:	4a21      	ldr	r2, [pc, #132]	@ (8002094 <MX_LPUART1_UART_Init+0x8c>)
 8002010:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002012:	4b1f      	ldr	r3, [pc, #124]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 8002014:	4a20      	ldr	r2, [pc, #128]	@ (8002098 <MX_LPUART1_UART_Init+0x90>)
 8002016:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002018:	4b1d      	ldr	r3, [pc, #116]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800201e:	4b1c      	ldr	r3, [pc, #112]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002024:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800202a:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 800202c:	220c      	movs	r2, #12
 800202e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 800203e:	2200      	movs	r2, #0
 8002040:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 8002044:	2200      	movs	r2, #0
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002048:	4811      	ldr	r0, [pc, #68]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 800204a:	f007 fce5 	bl	8009a18 <HAL_UART_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002054:	f7ff fbf0 	bl	8001838 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002058:	2100      	movs	r1, #0
 800205a:	480d      	ldr	r0, [pc, #52]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 800205c:	f008 fa80 	bl	800a560 <HAL_UARTEx_SetTxFifoThreshold>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002066:	f7ff fbe7 	bl	8001838 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	4808      	ldr	r0, [pc, #32]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 800206e:	f008 fab5 	bl	800a5dc <HAL_UARTEx_SetRxFifoThreshold>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002078:	f7ff fbde 	bl	8001838 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800207c:	4804      	ldr	r0, [pc, #16]	@ (8002090 <MX_LPUART1_UART_Init+0x88>)
 800207e:	f008 fa36 	bl	800a4ee <HAL_UARTEx_DisableFifoMode>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8002088:	f7ff fbd6 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000b34 	.word	0x20000b34
 8002094:	40008000 	.word	0x40008000
 8002098:	00033324 	.word	0x00033324

0800209c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b09e      	sub	sp, #120	@ 0x78
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	2254      	movs	r2, #84	@ 0x54
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f00a fcb3 	bl	800ca28 <memset>
  if(uartHandle->Instance==LPUART1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002140 <HAL_UART_MspInit+0xa4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d135      	bne.n	8002138 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020cc:	2320      	movs	r3, #32
 80020ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4618      	mov	r0, r3
 80020da:	f006 f84d 	bl	8008178 <HAL_RCCEx_PeriphCLKConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020e4:	f7ff fba8 	bl	8001838 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020e8:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <HAL_UART_MspInit+0xa8>)
 80020ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ec:	4a15      	ldr	r2, [pc, #84]	@ (8002144 <HAL_UART_MspInit+0xa8>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <HAL_UART_MspInit+0xa8>)
 80020f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002100:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <HAL_UART_MspInit+0xa8>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002104:	4a0f      	ldr	r2, [pc, #60]	@ (8002144 <HAL_UART_MspInit+0xa8>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <HAL_UART_MspInit+0xa8>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002118:	2303      	movs	r3, #3
 800211a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002128:	2308      	movs	r3, #8
 800212a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002130:	4619      	mov	r1, r3
 8002132:	4805      	ldr	r0, [pc, #20]	@ (8002148 <HAL_UART_MspInit+0xac>)
 8002134:	f003 fe1a 	bl	8005d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002138:	bf00      	nop
 800213a:	3778      	adds	r7, #120	@ 0x78
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40008000 	.word	0x40008000
 8002144:	40021000 	.word	0x40021000
 8002148:	48000800 	.word	0x48000800

0800214c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800214c:	480d      	ldr	r0, [pc, #52]	@ (8002184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800214e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002150:	f7ff fd36 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002154:	480c      	ldr	r0, [pc, #48]	@ (8002188 <LoopForever+0x6>)
  ldr r1, =_edata
 8002156:	490d      	ldr	r1, [pc, #52]	@ (800218c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <LoopForever+0xe>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800215c:	e002      	b.n	8002164 <LoopCopyDataInit>

0800215e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002162:	3304      	adds	r3, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002168:	d3f9      	bcc.n	800215e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800216c:	4c0a      	ldr	r4, [pc, #40]	@ (8002198 <LoopForever+0x16>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002170:	e001      	b.n	8002176 <LoopFillZerobss>

08002172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002174:	3204      	adds	r2, #4

08002176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002178:	d3fb      	bcc.n	8002172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800217a:	f00a fc5d 	bl	800ca38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800217e:	f7ff fad7 	bl	8001730 <main>

08002182 <LoopForever>:

LoopForever:
    b LoopForever
 8002182:	e7fe      	b.n	8002182 <LoopForever>
  ldr   r0, =_estack
 8002184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800218c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002190:	0800cc08 	.word	0x0800cc08
  ldr r2, =_sbss
 8002194:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002198:	200014a4 	.word	0x200014a4

0800219c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800219c:	e7fe      	b.n	800219c <ADC1_2_IRQHandler>
	...

080021a0 <HAL_ADC_ConvCpltCallback>:
	analogSwitch6,
	analogSwitch7,
	analogSwitch8
};

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    tx_semaphore_put(&semaphoreAnalog);
 80021a8:	4804      	ldr	r0, [pc, #16]	@ (80021bc <HAL_ADC_ConvCpltCallback+0x1c>)
 80021aa:	f00a fa0f 	bl	800c5cc <_txe_semaphore_put>
    TransmitToAll();
 80021ae:	f000 f867 	bl	8002280 <TransmitToAll>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000c78 	.word	0x20000c78

080021c0 <setAnalogSwitches>:

uint8_t setAnalogSwitches(
	const uint8_t switchSettings[NUM_ADC_CHANNELS]
){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e01d      	b.n	800220e <setAnalogSwitches+0x4e>
		if(switchSettings[i]){
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <setAnalogSwitches+0x34>
			set12VSensor(&analogSwitches[i]);
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <setAnalogSwitches+0x60>)
 80021ea:	4413      	add	r3, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f819 	bl	8002224 <set12VSensor>
 80021f2:	e009      	b.n	8002208 <setAnalogSwitches+0x48>
		}else{
			set5VSensor(&analogSwitches[i]);
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4a08      	ldr	r2, [pc, #32]	@ (8002220 <setAnalogSwitches+0x60>)
 8002200:	4413      	add	r3, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f825 	bl	8002252 <set5VSensor>
	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3301      	adds	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b07      	cmp	r3, #7
 8002212:	d9de      	bls.n	80021d2 <setAnalogSwitches+0x12>
		}
	}
	return retval;
 8002214:	7afb      	ldrb	r3, [r7, #11]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000004 	.word	0x20000004

08002224 <set12VSensor>:

uint8_t set12VSensor(
	gpio_control_t *self
){
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <set12VSensor+0x16>
		retval = UCR_NPTR;
 8002236:	2302      	movs	r3, #2
 8002238:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(&self->port, self->pin, SET_12V);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002240:	2201      	movs	r2, #1
 8002242:	4619      	mov	r1, r3
 8002244:	f003 ff14 	bl	8006070 <HAL_GPIO_WritePin>
	return retval;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <set5VSensor>:

uint8_t set5VSensor(
	gpio_control_t *self
){
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <set5VSensor+0x16>
		retval = UCR_NPTR;
 8002264:	2302      	movs	r3, #2
 8002266:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(&self->port, self->pin, SET_5V);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800226e:	2200      	movs	r2, #0
 8002270:	4619      	mov	r1, r3
 8002272:	f003 fefd 	bl	8006070 <HAL_GPIO_WritePin>
	return retval;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <TransmitToAll>:
void SetChannel(uint8_t sensor){
    uint8_t data = 1 << (sensor - 1);
    HAL_I2C_Master_Transmit(&hi2c4, SWITCH_ADDRESS, &data, 1, 1000);
}

uint8_t TransmitToAll(){
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af02      	add	r7, sp, #8
    uint8_t data = 0b00000111;
 8002286:	2307      	movs	r3, #7
 8002288:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c4, SWITCH_ADDRESS, &data, 1, 1000);
 800228a:	1dfa      	adds	r2, r7, #7
 800228c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	2170      	movs	r1, #112	@ 0x70
 8002296:	4804      	ldr	r0, [pc, #16]	@ (80022a8 <TransmitToAll+0x28>)
 8002298:	f003 ffb8 	bl	800620c <HAL_I2C_Master_Transmit>
    return UCR_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200007f4 	.word	0x200007f4

080022ac <ThreadX_Init>:


uint8_t frequencyData[16];


UINT ThreadX_Init(VOID *memory_ptr){
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b08e      	sub	sp, #56	@ 0x38
 80022b0:	af08      	add	r7, sp, #32
 80022b2:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 80022bc:	f107 010c 	add.w	r1, r7, #12
 80022c0:	2300      	movs	r3, #0
 80022c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c6:	6938      	ldr	r0, [r7, #16]
 80022c8:	f009 ff94 	bl	800c1f4 <_txe_byte_allocate>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <ThreadX_Init+0x2a>
	  return TX_POOL_ERROR;
 80022d2:	2302      	movs	r3, #2
 80022d4:	e103      	b.n	80024de <ThreadX_Init+0x232>
	}


	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	22b0      	movs	r2, #176	@ 0xb0
 80022da:	9206      	str	r2, [sp, #24]
 80022dc:	2201      	movs	r2, #1
 80022de:	9205      	str	r2, [sp, #20]
 80022e0:	2200      	movs	r2, #0
 80022e2:	9204      	str	r2, [sp, #16]
 80022e4:	220a      	movs	r2, #10
 80022e6:	9203      	str	r2, [sp, #12]
 80022e8:	220a      	movs	r2, #10
 80022ea:	9202      	str	r2, [sp, #8]
 80022ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f0:	9201      	str	r2, [sp, #4]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2300      	movs	r3, #0
 80022f6:	4a7c      	ldr	r2, [pc, #496]	@ (80024e8 <ThreadX_Init+0x23c>)
 80022f8:	497c      	ldr	r1, [pc, #496]	@ (80024ec <ThreadX_Init+0x240>)
 80022fa:	487d      	ldr	r0, [pc, #500]	@ (80024f0 <ThreadX_Init+0x244>)
 80022fc:	f00a f984 	bl	800c608 <_txe_thread_create>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <ThreadX_Init+0x5e>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
	  return TX_THREAD_ERROR;
 8002306:	230e      	movs	r3, #14
 8002308:	e0e9      	b.n	80024de <ThreadX_Init+0x232>
	}

	if(tx_thread_create(&txMainThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	22b0      	movs	r2, #176	@ 0xb0
 800230e:	9206      	str	r2, [sp, #24]
 8002310:	2201      	movs	r2, #1
 8002312:	9205      	str	r2, [sp, #20]
 8002314:	2200      	movs	r2, #0
 8002316:	9204      	str	r2, [sp, #16]
 8002318:	220a      	movs	r2, #10
 800231a:	9203      	str	r2, [sp, #12]
 800231c:	220a      	movs	r2, #10
 800231e:	9202      	str	r2, [sp, #8]
 8002320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002324:	9201      	str	r2, [sp, #4]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	4a72      	ldr	r2, [pc, #456]	@ (80024f4 <ThreadX_Init+0x248>)
 800232c:	4972      	ldr	r1, [pc, #456]	@ (80024f8 <ThreadX_Init+0x24c>)
 800232e:	4870      	ldr	r0, [pc, #448]	@ (80024f0 <ThreadX_Init+0x244>)
 8002330:	f00a f96a 	bl	800c608 <_txe_thread_create>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <ThreadX_Init+0x92>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
	  return TX_THREAD_ERROR;
 800233a:	230e      	movs	r3, #14
 800233c:	e0cf      	b.n	80024de <ThreadX_Init+0x232>
	}

	if(tx_thread_create(&txMainThread, "txAeroThread", txAeroThreadEntry, 0, pointer,
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	22b0      	movs	r2, #176	@ 0xb0
 8002342:	9206      	str	r2, [sp, #24]
 8002344:	2201      	movs	r2, #1
 8002346:	9205      	str	r2, [sp, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	9204      	str	r2, [sp, #16]
 800234c:	220a      	movs	r2, #10
 800234e:	9203      	str	r2, [sp, #12]
 8002350:	220a      	movs	r2, #10
 8002352:	9202      	str	r2, [sp, #8]
 8002354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002358:	9201      	str	r2, [sp, #4]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2300      	movs	r3, #0
 800235e:	4a67      	ldr	r2, [pc, #412]	@ (80024fc <ThreadX_Init+0x250>)
 8002360:	4967      	ldr	r1, [pc, #412]	@ (8002500 <ThreadX_Init+0x254>)
 8002362:	4863      	ldr	r0, [pc, #396]	@ (80024f0 <ThreadX_Init+0x244>)
 8002364:	f00a f950 	bl	800c608 <_txe_thread_create>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <ThreadX_Init+0xc6>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 800236e:	230e      	movs	r3, #14
 8002370:	e0b5      	b.n	80024de <ThreadX_Init+0x232>
	}
	if(tx_thread_create(&txMainThread, "txCAN500Hz", txCAN500HzThreadEntry, 0, pointer,
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	22b0      	movs	r2, #176	@ 0xb0
 8002376:	9206      	str	r2, [sp, #24]
 8002378:	2201      	movs	r2, #1
 800237a:	9205      	str	r2, [sp, #20]
 800237c:	2200      	movs	r2, #0
 800237e:	9204      	str	r2, [sp, #16]
 8002380:	220a      	movs	r2, #10
 8002382:	9203      	str	r2, [sp, #12]
 8002384:	220a      	movs	r2, #10
 8002386:	9202      	str	r2, [sp, #8]
 8002388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800238c:	9201      	str	r2, [sp, #4]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2300      	movs	r3, #0
 8002392:	4a5c      	ldr	r2, [pc, #368]	@ (8002504 <ThreadX_Init+0x258>)
 8002394:	495c      	ldr	r1, [pc, #368]	@ (8002508 <ThreadX_Init+0x25c>)
 8002396:	4856      	ldr	r0, [pc, #344]	@ (80024f0 <ThreadX_Init+0x244>)
 8002398:	f00a f936 	bl	800c608 <_txe_thread_create>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <ThreadX_Init+0xfa>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 80023a2:	230e      	movs	r3, #14
 80023a4:	e09b      	b.n	80024de <ThreadX_Init+0x232>
	}

	if(tx_thread_create(&txMainThread, "txCAN100Hz", txCAN100HzThreadEntry, 0, pointer,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	22b0      	movs	r2, #176	@ 0xb0
 80023aa:	9206      	str	r2, [sp, #24]
 80023ac:	2201      	movs	r2, #1
 80023ae:	9205      	str	r2, [sp, #20]
 80023b0:	2200      	movs	r2, #0
 80023b2:	9204      	str	r2, [sp, #16]
 80023b4:	220a      	movs	r2, #10
 80023b6:	9203      	str	r2, [sp, #12]
 80023b8:	220a      	movs	r2, #10
 80023ba:	9202      	str	r2, [sp, #8]
 80023bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023c0:	9201      	str	r2, [sp, #4]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	4a51      	ldr	r2, [pc, #324]	@ (800250c <ThreadX_Init+0x260>)
 80023c8:	4951      	ldr	r1, [pc, #324]	@ (8002510 <ThreadX_Init+0x264>)
 80023ca:	4849      	ldr	r0, [pc, #292]	@ (80024f0 <ThreadX_Init+0x244>)
 80023cc:	f00a f91c 	bl	800c608 <_txe_thread_create>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <ThreadX_Init+0x12e>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 80023d6:	230e      	movs	r3, #14
 80023d8:	e081      	b.n	80024de <ThreadX_Init+0x232>
	}

	tx_semaphore_create(&semaphoreAnalog, "semaphoreAnalog", 0);
 80023da:	231c      	movs	r3, #28
 80023dc:	2200      	movs	r2, #0
 80023de:	494d      	ldr	r1, [pc, #308]	@ (8002514 <ThreadX_Init+0x268>)
 80023e0:	484d      	ldr	r0, [pc, #308]	@ (8002518 <ThreadX_Init+0x26c>)
 80023e2:	f00a f81b 	bl	800c41c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreAero, "semaphoreAero", 0);
 80023e6:	231c      	movs	r3, #28
 80023e8:	2200      	movs	r2, #0
 80023ea:	494c      	ldr	r1, [pc, #304]	@ (800251c <ThreadX_Init+0x270>)
 80023ec:	484c      	ldr	r0, [pc, #304]	@ (8002520 <ThreadX_Init+0x274>)
 80023ee:	f00a f815 	bl	800c41c <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreFrequency, "semaphoreFrequency", 1);
 80023f2:	231c      	movs	r3, #28
 80023f4:	2201      	movs	r2, #1
 80023f6:	494b      	ldr	r1, [pc, #300]	@ (8002524 <ThreadX_Init+0x278>)
 80023f8:	484b      	ldr	r0, [pc, #300]	@ (8002528 <ThreadX_Init+0x27c>)
 80023fa:	f00a f80f 	bl	800c41c <_txe_semaphore_create>

	tx_timer_create(&timerChannel1, "timerChannel1", timerExpiration, 0,
 80023fe:	232c      	movs	r3, #44	@ 0x2c
 8002400:	9303      	str	r3, [sp, #12]
 8002402:	2300      	movs	r3, #0
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	2300      	movs	r3, #0
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	4a46      	ldr	r2, [pc, #280]	@ (800252c <ThreadX_Init+0x280>)
 8002414:	4946      	ldr	r1, [pc, #280]	@ (8002530 <ThreadX_Init+0x284>)
 8002416:	4847      	ldr	r0, [pc, #284]	@ (8002534 <ThreadX_Init+0x288>)
 8002418:	f00a fa3c 	bl	800c894 <_txe_timer_create>
	        FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);

    tx_timer_create(&timerChannel2, "timerChannel2", timerExpiration, 0,
 800241c:	232c      	movs	r3, #44	@ 0x2c
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	2300      	movs	r3, #0
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	2301      	movs	r3, #1
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2300      	movs	r3, #0
 8002430:	4a3e      	ldr	r2, [pc, #248]	@ (800252c <ThreadX_Init+0x280>)
 8002432:	4941      	ldr	r1, [pc, #260]	@ (8002538 <ThreadX_Init+0x28c>)
 8002434:	4841      	ldr	r0, [pc, #260]	@ (800253c <ThreadX_Init+0x290>)
 8002436:	f00a fa2d 	bl	800c894 <_txe_timer_create>
            FREQUENCY_RESET_TIME, 1, TX_NO_ACTIVATE);

    tx_timer_create(&timerChannel3, "timerChannel3", timerExpiration, 0,
 800243a:	232c      	movs	r3, #44	@ 0x2c
 800243c:	9303      	str	r3, [sp, #12]
 800243e:	2300      	movs	r3, #0
 8002440:	9302      	str	r3, [sp, #8]
 8002442:	2302      	movs	r3, #2
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2300      	movs	r3, #0
 800244e:	4a37      	ldr	r2, [pc, #220]	@ (800252c <ThreadX_Init+0x280>)
 8002450:	493b      	ldr	r1, [pc, #236]	@ (8002540 <ThreadX_Init+0x294>)
 8002452:	483c      	ldr	r0, [pc, #240]	@ (8002544 <ThreadX_Init+0x298>)
 8002454:	f00a fa1e 	bl	800c894 <_txe_timer_create>
            FREQUENCY_RESET_TIME, 2, TX_NO_ACTIVATE);

    tx_timer_create(&timerChannel4, "timerChannel4", timerExpiration, 0,
 8002458:	232c      	movs	r3, #44	@ 0x2c
 800245a:	9303      	str	r3, [sp, #12]
 800245c:	2300      	movs	r3, #0
 800245e:	9302      	str	r3, [sp, #8]
 8002460:	2303      	movs	r3, #3
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2300      	movs	r3, #0
 800246c:	4a2f      	ldr	r2, [pc, #188]	@ (800252c <ThreadX_Init+0x280>)
 800246e:	4936      	ldr	r1, [pc, #216]	@ (8002548 <ThreadX_Init+0x29c>)
 8002470:	4836      	ldr	r0, [pc, #216]	@ (800254c <ThreadX_Init+0x2a0>)
 8002472:	f00a fa0f 	bl	800c894 <_txe_timer_create>
            FREQUENCY_RESET_TIME, 3, TX_NO_ACTIVATE);

    timers[0] = timerChannel1;
 8002476:	4a36      	ldr	r2, [pc, #216]	@ (8002550 <ThreadX_Init+0x2a4>)
 8002478:	4b2e      	ldr	r3, [pc, #184]	@ (8002534 <ThreadX_Init+0x288>)
 800247a:	4614      	mov	r4, r2
 800247c:	461d      	mov	r5, r3
 800247e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002486:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800248a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    timers[1] = timerChannel2;
 800248e:	4b30      	ldr	r3, [pc, #192]	@ (8002550 <ThreadX_Init+0x2a4>)
 8002490:	4a2a      	ldr	r2, [pc, #168]	@ (800253c <ThreadX_Init+0x290>)
 8002492:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8002496:	4615      	mov	r5, r2
 8002498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800249a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800249c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800249e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    timers[2] = timerChannel3;
 80024a8:	4b29      	ldr	r3, [pc, #164]	@ (8002550 <ThreadX_Init+0x2a4>)
 80024aa:	4a26      	ldr	r2, [pc, #152]	@ (8002544 <ThreadX_Init+0x298>)
 80024ac:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 80024b0:	4615      	mov	r5, r2
 80024b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    timers[3] = timerChannel4;
 80024c2:	4b23      	ldr	r3, [pc, #140]	@ (8002550 <ThreadX_Init+0x2a4>)
 80024c4:	4a21      	ldr	r2, [pc, #132]	@ (800254c <ThreadX_Init+0x2a0>)
 80024c6:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 80024ca:	4615      	mov	r5, r2
 80024cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return ret;
 80024dc:	697b      	ldr	r3, [r7, #20]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	08002555 	.word	0x08002555
 80024ec:	0800caac 	.word	0x0800caac
 80024f0:	20000bc8 	.word	0x20000bc8
 80024f4:	080025a5 	.word	0x080025a5
 80024f8:	0800cabc 	.word	0x0800cabc
 80024fc:	08002621 	.word	0x08002621
 8002500:	0800cacc 	.word	0x0800cacc
 8002504:	08002637 	.word	0x08002637
 8002508:	0800cadc 	.word	0x0800cadc
 800250c:	08002645 	.word	0x08002645
 8002510:	0800cae8 	.word	0x0800cae8
 8002514:	0800caf4 	.word	0x0800caf4
 8002518:	20000c78 	.word	0x20000c78
 800251c:	0800cb04 	.word	0x0800cb04
 8002520:	20000c94 	.word	0x20000c94
 8002524:	0800cb14 	.word	0x0800cb14
 8002528:	20000cb0 	.word	0x20000cb0
 800252c:	08002e11 	.word	0x08002e11
 8002530:	0800cb28 	.word	0x0800cb28
 8002534:	20000ccc 	.word	0x20000ccc
 8002538:	0800cb38 	.word	0x0800cb38
 800253c:	20000cf8 	.word	0x20000cf8
 8002540:	0800cb48 	.word	0x0800cb48
 8002544:	20000d24 	.word	0x20000d24
 8002548:	0800cb58 	.word	0x0800cb58
 800254c:	20000d50 	.word	0x20000d50
 8002550:	20000d7c 	.word	0x20000d7c

08002554 <txMainThreadEntry>:


void txMainThreadEntry(ULONG threadInput){
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

    HAL_FDCAN_Start(&hfdcan1);
 800255c:	480e      	ldr	r0, [pc, #56]	@ (8002598 <txMainThreadEntry+0x44>)
 800255e:	f003 f917 	bl	8005790 <HAL_FDCAN_Start>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002562:	2100      	movs	r1, #0
 8002564:	480d      	ldr	r0, [pc, #52]	@ (800259c <txMainThreadEntry+0x48>)
 8002566:	f006 fa27 	bl	80089b8 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800256a:	2104      	movs	r1, #4
 800256c:	480b      	ldr	r0, [pc, #44]	@ (800259c <txMainThreadEntry+0x48>)
 800256e:	f006 fa23 	bl	80089b8 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8002572:	2108      	movs	r1, #8
 8002574:	4809      	ldr	r0, [pc, #36]	@ (800259c <txMainThreadEntry+0x48>)
 8002576:	f006 fa1f 	bl	80089b8 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800257a:	210c      	movs	r1, #12
 800257c:	4807      	ldr	r0, [pc, #28]	@ (800259c <txMainThreadEntry+0x48>)
 800257e:	f006 fa1b 	bl	80089b8 <HAL_TIM_IC_Start_IT>

	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002586:	4806      	ldr	r0, [pc, #24]	@ (80025a0 <txMainThreadEntry+0x4c>)
 8002588:	f003 fd8a 	bl	80060a0 <HAL_GPIO_TogglePin>
	    tx_thread_sleep(1000);
 800258c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002590:	f008 ff3a 	bl	800b408 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002594:	bf00      	nop
 8002596:	e7f4      	b.n	8002582 <txMainThreadEntry+0x2e>
 8002598:	2000073c 	.word	0x2000073c
 800259c:	200009b8 	.word	0x200009b8
 80025a0:	48000800 	.word	0x48000800

080025a4 <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b092      	sub	sp, #72	@ 0x48
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    uint8_t analogRxData[16];
    uint32_t adcValues[8];
    setAnalogSwitches(analogSwitchStates);
 80025ac:	4819      	ldr	r0, [pc, #100]	@ (8002614 <txAnalogThreadEntry+0x70>)
 80025ae:	f7ff fe07 	bl	80021c0 <setAnalogSwitches>


//    struct
    while(1){
        HAL_ADC_Start_DMA(&hadc1, adcValues, NUM_ADC_CHANNELS);
 80025b2:	f107 0318 	add.w	r3, r7, #24
 80025b6:	2208      	movs	r2, #8
 80025b8:	4619      	mov	r1, r3
 80025ba:	4817      	ldr	r0, [pc, #92]	@ (8002618 <txAnalogThreadEntry+0x74>)
 80025bc:	f001 f8b8 	bl	8003730 <HAL_ADC_Start_DMA>
        tx_semaphore_get(&semaphoreAnalog, TX_WAIT_FOREVER);
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	4815      	ldr	r0, [pc, #84]	@ (800261c <txAnalogThreadEntry+0x78>)
 80025c6:	f009 ffbf 	bl	800c548 <_txe_semaphore_get>
        struct ucr_01_front_analog_t analogStruct = {
                .analog1 = adcValues[0],
 80025ca:	69bb      	ldr	r3, [r7, #24]
        struct ucr_01_front_analog_t analogStruct = {
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	813b      	strh	r3, [r7, #8]
				.analog2 = adcValues[1],
 80025d0:	69fb      	ldr	r3, [r7, #28]
        struct ucr_01_front_analog_t analogStruct = {
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	817b      	strh	r3, [r7, #10]
				.analog3 = adcValues[2],
 80025d6:	6a3b      	ldr	r3, [r7, #32]
        struct ucr_01_front_analog_t analogStruct = {
 80025d8:	b29b      	uxth	r3, r3
 80025da:	81bb      	strh	r3, [r7, #12]
				.analog4 = adcValues[3],
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        struct ucr_01_front_analog_t analogStruct = {
 80025de:	b29b      	uxth	r3, r3
 80025e0:	81fb      	strh	r3, [r7, #14]
				.analog5 = adcValues[4],
 80025e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        struct ucr_01_front_analog_t analogStruct = {
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	823b      	strh	r3, [r7, #16]
				.analog6 = adcValues[5],
 80025e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        struct ucr_01_front_analog_t analogStruct = {
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	827b      	strh	r3, [r7, #18]
				.analog7 = adcValues[6],
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        struct ucr_01_front_analog_t analogStruct = {
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	82bb      	strh	r3, [r7, #20]
				.analog8 = adcValues[7]
 80025f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
        struct ucr_01_front_analog_t analogStruct = {
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	82fb      	strh	r3, [r7, #22]
        };
        ucr_01_front_analog_pack(analogRxData, &analogStruct, UCR_01_FRONT_ANALOG_LENGTH);
 80025fa:	f107 0108 	add.w	r1, r7, #8
 80025fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002602:	2210      	movs	r2, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f000 f8ed 	bl	80027e4 <ucr_01_front_analog_pack>
        tx_thread_sleep(2);
 800260a:	2002      	movs	r0, #2
 800260c:	f008 fefc 	bl	800b408 <_tx_thread_sleep>
    while(1){
 8002610:	bf00      	nop
 8002612:	e7ce      	b.n	80025b2 <txAnalogThreadEntry+0xe>
 8002614:	0800cbb8 	.word	0x0800cbb8
 8002618:	200005e0 	.word	0x200005e0
 800261c:	20000c78 	.word	0x20000c78

08002620 <txAeroThreadEntry>:
    }
}

void txAeroThreadEntry(ULONG threadInput){
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

    while(1){
    	TransmitToAll();
 8002628:	f7ff fe2a 	bl	8002280 <TransmitToAll>
//    	SetChannel(2);
//		ReadData();
//		SetChannel(3);
//		ReadData();

		tx_thread_sleep(10);
 800262c:	200a      	movs	r0, #10
 800262e:	f008 feeb 	bl	800b408 <_tx_thread_sleep>
    	TransmitToAll();
 8002632:	bf00      	nop
 8002634:	e7f8      	b.n	8002628 <txAeroThreadEntry+0x8>

08002636 <txCAN500HzThreadEntry>:
    }
}

void txCAN500HzThreadEntry(ULONG threadInput){
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]

    while(1){
 800263e:	bf00      	nop
 8002640:	e7fd      	b.n	800263e <txCAN500HzThreadEntry+0x8>
	...

08002644 <txCAN100HzThreadEntry>:

    }
}

void txCAN100HzThreadEntry(ULONG threadInput){
 8002644:	b5b0      	push	{r4, r5, r7, lr}
 8002646:	b09c      	sub	sp, #112	@ 0x70
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	uint8_t preScalar = htim2.Init.Prescaler + 1;
 800264c:	4b32      	ldr	r3, [pc, #200]	@ (8002718 <txCAN100HzThreadEntry+0xd4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    float refClock = TIMCLOCK/(preScalar);
 8002658:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800265c:	4a2f      	ldr	r2, [pc, #188]	@ (800271c <txCAN100HzThreadEntry+0xd8>)
 800265e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	uint32_t frequency[4];
	uint8_t frequencyData[16];
	FDCAN_TxHeaderTypeDef frequencyHeader = {
 800266e:	4b2c      	ldr	r3, [pc, #176]	@ (8002720 <txCAN100HzThreadEntry+0xdc>)
 8002670:	f107 041c 	add.w	r4, r7, #28
 8002674:	461d      	mov	r5, r3
 8002676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	6023      	str	r3, [r4, #0]
	        .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
	        .MessageMarker = 0
	};

    while(1){
    	tx_semaphore_get(&semaphoreFrequency, TX_WAIT_FOREVER);
 8002682:	f04f 31ff 	mov.w	r1, #4294967295
 8002686:	4827      	ldr	r0, [pc, #156]	@ (8002724 <txCAN100HzThreadEntry+0xe0>)
 8002688:	f009 ff5e 	bl	800c548 <_txe_semaphore_get>
    	for(int i = 0; i < 4; i ++){
 800268c:	2300      	movs	r3, #0
 800268e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002690:	e020      	b.n	80026d4 <txCAN100HzThreadEntry+0x90>
			float value = refClock / difference[i];
 8002692:	4a25      	ldr	r2, [pc, #148]	@ (8002728 <txCAN100HzThreadEntry+0xe4>)
 8002694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026a2:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 80026a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026aa:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			frequency[i] = ucr_01_front_frequency_frequency1_encode(value);
 80026ae:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80026b0:	f7fe f836 	bl	8000720 <__aeabi_f2d>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	ec43 2b10 	vmov	d0, r2, r3
 80026bc:	f000 fada 	bl	8002c74 <ucr_01_front_frequency_frequency1_encode>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	3370      	adds	r3, #112	@ 0x70
 80026c8:	443b      	add	r3, r7
 80026ca:	f843 2c20 	str.w	r2, [r3, #-32]
    	for(int i = 0; i < 4; i ++){
 80026ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026d0:	3301      	adds	r3, #1
 80026d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	dddb      	ble.n	8002692 <txCAN100HzThreadEntry+0x4e>
    	}
    	struct ucr_01_front_frequency_t frequencyStruct = {
    	        .frequency1 = frequency[0],
 80026da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    	struct ucr_01_front_frequency_t frequencyStruct = {
 80026dc:	60fb      	str	r3, [r7, #12]
    	        .frequency2 = frequency[1],
 80026de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    	struct ucr_01_front_frequency_t frequencyStruct = {
 80026e0:	613b      	str	r3, [r7, #16]
    	        .frequency3 = frequency[2],
 80026e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
    	struct ucr_01_front_frequency_t frequencyStruct = {
 80026e4:	617b      	str	r3, [r7, #20]
    	        .frequency4 = frequency[3]
 80026e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    	struct ucr_01_front_frequency_t frequencyStruct = {
 80026e8:	61bb      	str	r3, [r7, #24]
    	};
    	ucr_01_front_frequency_pack(frequencyData, &frequencyStruct, UCR_01_FRONT_FREQUENCY_LENGTH);
 80026ea:	f107 010c 	add.w	r1, r7, #12
 80026ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026f2:	2210      	movs	r2, #16
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f999 	bl	8002a2c <ucr_01_front_frequency_pack>
    	tx_semaphore_put(&semaphoreFrequency);
 80026fa:	480a      	ldr	r0, [pc, #40]	@ (8002724 <txCAN100HzThreadEntry+0xe0>)
 80026fc:	f009 ff66 	bl	800c5cc <_txe_semaphore_put>
    	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frequencyHeader, frequencyData);
 8002700:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002704:	f107 031c 	add.w	r3, r7, #28
 8002708:	4619      	mov	r1, r3
 800270a:	4808      	ldr	r0, [pc, #32]	@ (800272c <txCAN100HzThreadEntry+0xe8>)
 800270c:	f003 f868 	bl	80057e0 <HAL_FDCAN_AddMessageToTxFifoQ>
    	tx_thread_sleep(10);
 8002710:	200a      	movs	r0, #10
 8002712:	f008 fe79 	bl	800b408 <_tx_thread_sleep>
    while(1){
 8002716:	e7b4      	b.n	8002682 <txCAN100HzThreadEntry+0x3e>
 8002718:	200009b8 	.word	0x200009b8
 800271c:	0a21fe80 	.word	0x0a21fe80
 8002720:	0800cb68 	.word	0x0800cb68
 8002724:	20000cb0 	.word	0x20000cb0
 8002728:	20000e4c 	.word	0x20000e4c
 800272c:	2000073c 	.word	0x2000073c

08002730 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	80fb      	strh	r3, [r7, #6]
 800273a:	460b      	mov	r3, r1
 800273c:	717b      	strb	r3, [r7, #5]
 800273e:	4613      	mov	r3, r2
 8002740:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8002742:	88fa      	ldrh	r2, [r7, #6]
 8002744:	797b      	ldrb	r3, [r7, #5]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	b2da      	uxtb	r2, r3
 800274c:	793b      	ldrb	r3, [r7, #4]
 800274e:	4013      	ands	r3, r2
 8002750:	b2db      	uxtb	r3, r3
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <pack_left_shift_u32>:

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
 800276a:	4613      	mov	r3, r2
 800276c:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	b2da      	uxtb	r2, r3
 8002778:	78bb      	ldrb	r3, [r7, #2]
 800277a:	4013      	ands	r3, r2
 800277c:	b2db      	uxtb	r3, r3
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	80fb      	strh	r3, [r7, #6]
 8002794:	460b      	mov	r3, r1
 8002796:	717b      	strb	r3, [r7, #5]
 8002798:	4613      	mov	r3, r2
 800279a:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	797b      	ldrb	r3, [r7, #5]
 80027a0:	fa42 f303 	asr.w	r3, r2, r3
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	793b      	ldrb	r3, [r7, #4]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <pack_right_shift_u32>:

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
 80027c4:	4613      	mov	r3, r2
 80027c6:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	78bb      	ldrb	r3, [r7, #2]
 80027d4:	4013      	ands	r3, r2
 80027d6:	b2db      	uxtb	r3, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <ucr_01_front_analog_pack>:

int ucr_01_front_analog_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_analog_t *src_p,
    size_t size)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
    if (size < 16u) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	d802      	bhi.n	80027fc <ucr_01_front_analog_pack+0x18>
        return (-EINVAL);
 80027f6:	f06f 0315 	mvn.w	r3, #21
 80027fa:	e113      	b.n	8002a24 <ucr_01_front_analog_pack+0x240>
    }

    memset(&dst_p[0], 0, 16);
 80027fc:	2210      	movs	r2, #16
 80027fe:	2100      	movs	r1, #0
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f00a f911 	bl	800ca28 <memset>

    dst_p[0] |= pack_left_shift_u16(src_p->analog1, 0u, 0xffu);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	22ff      	movs	r2, #255	@ 0xff
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff8e 	bl	8002730 <pack_left_shift_u16>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4313      	orrs	r3, r2
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(src_p->analog1, 8u, 0xffu);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	22ff      	movs	r2, #255	@ 0xff
 800282a:	2108      	movs	r1, #8
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ffac 	bl	800278a <pack_right_shift_u16>
 8002832:	4603      	mov	r3, r0
 8002834:	4619      	mov	r1, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3301      	adds	r3, #1
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3301      	adds	r3, #1
 8002840:	430a      	orrs	r2, r1
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u16(src_p->analog2, 0u, 0xffu);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	885b      	ldrh	r3, [r3, #2]
 800284a:	22ff      	movs	r2, #255	@ 0xff
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff6e 	bl	8002730 <pack_left_shift_u16>
 8002854:	4603      	mov	r3, r0
 8002856:	4619      	mov	r1, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3302      	adds	r3, #2
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3302      	adds	r3, #2
 8002862:	430a      	orrs	r2, r1
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->analog2, 8u, 0xffu);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	885b      	ldrh	r3, [r3, #2]
 800286c:	22ff      	movs	r2, #255	@ 0xff
 800286e:	2108      	movs	r1, #8
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff8a 	bl	800278a <pack_right_shift_u16>
 8002876:	4603      	mov	r3, r0
 8002878:	4619      	mov	r1, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3303      	adds	r3, #3
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3303      	adds	r3, #3
 8002884:	430a      	orrs	r2, r1
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u16(src_p->analog3, 0u, 0xffu);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	889b      	ldrh	r3, [r3, #4]
 800288e:	22ff      	movs	r2, #255	@ 0xff
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff4c 	bl	8002730 <pack_left_shift_u16>
 8002898:	4603      	mov	r3, r0
 800289a:	4619      	mov	r1, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3304      	adds	r3, #4
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3304      	adds	r3, #4
 80028a6:	430a      	orrs	r2, r1
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(src_p->analog3, 8u, 0xffu);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	889b      	ldrh	r3, [r3, #4]
 80028b0:	22ff      	movs	r2, #255	@ 0xff
 80028b2:	2108      	movs	r1, #8
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff68 	bl	800278a <pack_right_shift_u16>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4619      	mov	r1, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3305      	adds	r3, #5
 80028c2:	781a      	ldrb	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3305      	adds	r3, #5
 80028c8:	430a      	orrs	r2, r1
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u16(src_p->analog4, 0u, 0xffu);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	88db      	ldrh	r3, [r3, #6]
 80028d2:	22ff      	movs	r2, #255	@ 0xff
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff2a 	bl	8002730 <pack_left_shift_u16>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3306      	adds	r3, #6
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3306      	adds	r3, #6
 80028ea:	430a      	orrs	r2, r1
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(src_p->analog4, 8u, 0xffu);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	88db      	ldrh	r3, [r3, #6]
 80028f4:	22ff      	movs	r2, #255	@ 0xff
 80028f6:	2108      	movs	r1, #8
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff46 	bl	800278a <pack_right_shift_u16>
 80028fe:	4603      	mov	r3, r0
 8002900:	4619      	mov	r1, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3307      	adds	r3, #7
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3307      	adds	r3, #7
 800290c:	430a      	orrs	r2, r1
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_left_shift_u16(src_p->analog5, 0u, 0xffu);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	891b      	ldrh	r3, [r3, #8]
 8002916:	22ff      	movs	r2, #255	@ 0xff
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ff08 	bl	8002730 <pack_left_shift_u16>
 8002920:	4603      	mov	r3, r0
 8002922:	4619      	mov	r1, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3308      	adds	r3, #8
 8002928:	781a      	ldrb	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3308      	adds	r3, #8
 800292e:	430a      	orrs	r2, r1
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u16(src_p->analog5, 8u, 0xffu);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	891b      	ldrh	r3, [r3, #8]
 8002938:	22ff      	movs	r2, #255	@ 0xff
 800293a:	2108      	movs	r1, #8
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff24 	bl	800278a <pack_right_shift_u16>
 8002942:	4603      	mov	r3, r0
 8002944:	4619      	mov	r1, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3309      	adds	r3, #9
 800294a:	781a      	ldrb	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3309      	adds	r3, #9
 8002950:	430a      	orrs	r2, r1
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_left_shift_u16(src_p->analog6, 0u, 0xffu);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	895b      	ldrh	r3, [r3, #10]
 800295a:	22ff      	movs	r2, #255	@ 0xff
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fee6 	bl	8002730 <pack_left_shift_u16>
 8002964:	4603      	mov	r3, r0
 8002966:	4619      	mov	r1, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	330a      	adds	r3, #10
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	330a      	adds	r3, #10
 8002972:	430a      	orrs	r2, r1
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u16(src_p->analog6, 8u, 0xffu);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	895b      	ldrh	r3, [r3, #10]
 800297c:	22ff      	movs	r2, #255	@ 0xff
 800297e:	2108      	movs	r1, #8
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff02 	bl	800278a <pack_right_shift_u16>
 8002986:	4603      	mov	r3, r0
 8002988:	4619      	mov	r1, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	330b      	adds	r3, #11
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	330b      	adds	r3, #11
 8002994:	430a      	orrs	r2, r1
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u16(src_p->analog7, 0u, 0xffu);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	899b      	ldrh	r3, [r3, #12]
 800299e:	22ff      	movs	r2, #255	@ 0xff
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fec4 	bl	8002730 <pack_left_shift_u16>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4619      	mov	r1, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	330c      	adds	r3, #12
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	330c      	adds	r3, #12
 80029b6:	430a      	orrs	r2, r1
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u16(src_p->analog7, 8u, 0xffu);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	899b      	ldrh	r3, [r3, #12]
 80029c0:	22ff      	movs	r2, #255	@ 0xff
 80029c2:	2108      	movs	r1, #8
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fee0 	bl	800278a <pack_right_shift_u16>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4619      	mov	r1, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	330d      	adds	r3, #13
 80029d2:	781a      	ldrb	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	330d      	adds	r3, #13
 80029d8:	430a      	orrs	r2, r1
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_left_shift_u16(src_p->analog8, 0u, 0xffu);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	89db      	ldrh	r3, [r3, #14]
 80029e2:	22ff      	movs	r2, #255	@ 0xff
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fea2 	bl	8002730 <pack_left_shift_u16>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4619      	mov	r1, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	330e      	adds	r3, #14
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	330e      	adds	r3, #14
 80029fa:	430a      	orrs	r2, r1
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u16(src_p->analog8, 8u, 0xffu);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	89db      	ldrh	r3, [r3, #14]
 8002a04:	22ff      	movs	r2, #255	@ 0xff
 8002a06:	2108      	movs	r1, #8
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff febe 	bl	800278a <pack_right_shift_u16>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4619      	mov	r1, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	330f      	adds	r3, #15
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	330f      	adds	r3, #15
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

    return (16);
 8002a22:	2310      	movs	r3, #16
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <ucr_01_front_frequency_pack>:

int ucr_01_front_frequency_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_frequency_t *src_p,
    size_t size)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
    if (size < 16u) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	d802      	bhi.n	8002a44 <ucr_01_front_frequency_pack+0x18>
        return (-EINVAL);
 8002a3e:	f06f 0315 	mvn.w	r3, #21
 8002a42:	e113      	b.n	8002c6c <ucr_01_front_frequency_pack+0x240>
    }

    memset(&dst_p[0], 0, 16);
 8002a44:	2210      	movs	r2, #16
 8002a46:	2100      	movs	r1, #0
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f009 ffed 	bl	800ca28 <memset>

    dst_p[0] |= pack_left_shift_u32(src_p->frequency1, 0u, 0xffu);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	22ff      	movs	r2, #255	@ 0xff
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fe81 	bl	800275e <pack_left_shift_u32>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(src_p->frequency1, 8u, 0xffu);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	22ff      	movs	r2, #255	@ 0xff
 8002a72:	2108      	movs	r1, #8
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fe9f 	bl	80027b8 <pack_right_shift_u32>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3301      	adds	r3, #1
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3301      	adds	r3, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(src_p->frequency1, 16u, 0xffu);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	22ff      	movs	r2, #255	@ 0xff
 8002a94:	2110      	movs	r1, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fe8e 	bl	80027b8 <pack_right_shift_u32>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u32(src_p->frequency1, 24u, 0xffu);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	22ff      	movs	r2, #255	@ 0xff
 8002ab6:	2118      	movs	r1, #24
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fe7d 	bl	80027b8 <pack_right_shift_u32>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3303      	adds	r3, #3
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3303      	adds	r3, #3
 8002acc:	430a      	orrs	r2, r1
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u32(src_p->frequency2, 0u, 0xffu);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	22ff      	movs	r2, #255	@ 0xff
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fe3f 	bl	800275e <pack_left_shift_u32>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3304      	adds	r3, #4
 8002aee:	430a      	orrs	r2, r1
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(src_p->frequency2, 8u, 0xffu);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	22ff      	movs	r2, #255	@ 0xff
 8002afa:	2108      	movs	r1, #8
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fe5b 	bl	80027b8 <pack_right_shift_u32>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4619      	mov	r1, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3305      	adds	r3, #5
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3305      	adds	r3, #5
 8002b10:	430a      	orrs	r2, r1
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u32(src_p->frequency2, 16u, 0xffu);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	22ff      	movs	r2, #255	@ 0xff
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fe4a 	bl	80027b8 <pack_right_shift_u32>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4619      	mov	r1, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3306      	adds	r3, #6
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3306      	adds	r3, #6
 8002b32:	430a      	orrs	r2, r1
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(src_p->frequency2, 24u, 0xffu);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	22ff      	movs	r2, #255	@ 0xff
 8002b3e:	2118      	movs	r1, #24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fe39 	bl	80027b8 <pack_right_shift_u32>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4619      	mov	r1, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3307      	adds	r3, #7
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3307      	adds	r3, #7
 8002b54:	430a      	orrs	r2, r1
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_left_shift_u32(src_p->frequency3, 0u, 0xffu);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	22ff      	movs	r2, #255	@ 0xff
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fdfb 	bl	800275e <pack_left_shift_u32>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3308      	adds	r3, #8
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3308      	adds	r3, #8
 8002b76:	430a      	orrs	r2, r1
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u32(src_p->frequency3, 8u, 0xffu);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	22ff      	movs	r2, #255	@ 0xff
 8002b82:	2108      	movs	r1, #8
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fe17 	bl	80027b8 <pack_right_shift_u32>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3309      	adds	r3, #9
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3309      	adds	r3, #9
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(src_p->frequency3, 16u, 0xffu);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	22ff      	movs	r2, #255	@ 0xff
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fe06 	bl	80027b8 <pack_right_shift_u32>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	330a      	adds	r3, #10
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	330a      	adds	r3, #10
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(src_p->frequency3, 24u, 0xffu);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	22ff      	movs	r2, #255	@ 0xff
 8002bc6:	2118      	movs	r1, #24
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fdf5 	bl	80027b8 <pack_right_shift_u32>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	330b      	adds	r3, #11
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	330b      	adds	r3, #11
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u32(src_p->frequency4, 0u, 0xffu);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	22ff      	movs	r2, #255	@ 0xff
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fdb7 	bl	800275e <pack_left_shift_u32>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	330c      	adds	r3, #12
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(src_p->frequency4, 8u, 0xffu);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	22ff      	movs	r2, #255	@ 0xff
 8002c0a:	2108      	movs	r1, #8
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fdd3 	bl	80027b8 <pack_right_shift_u32>
 8002c12:	4603      	mov	r3, r0
 8002c14:	4619      	mov	r1, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	330d      	adds	r3, #13
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	330d      	adds	r3, #13
 8002c20:	430a      	orrs	r2, r1
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(src_p->frequency4, 16u, 0xffu);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	22ff      	movs	r2, #255	@ 0xff
 8002c2c:	2110      	movs	r1, #16
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fdc2 	bl	80027b8 <pack_right_shift_u32>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4619      	mov	r1, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	330e      	adds	r3, #14
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	330e      	adds	r3, #14
 8002c42:	430a      	orrs	r2, r1
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u32(src_p->frequency4, 24u, 0xffu);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	22ff      	movs	r2, #255	@ 0xff
 8002c4e:	2118      	movs	r1, #24
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fdb1 	bl	80027b8 <pack_right_shift_u32>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	330f      	adds	r3, #15
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	330f      	adds	r3, #15
 8002c64:	430a      	orrs	r2, r1
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]

    return (16);
 8002c6a:	2310      	movs	r3, #16
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <ucr_01_front_frequency_frequency1_encode>:

    return 0;
}

uint32_t ucr_01_front_frequency_frequency1_encode(double value)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	ed87 0b00 	vstr	d0, [r7]
    return (uint32_t)(value);
 8002c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c82:	f7fd fda5 	bl	80007d0 <__aeabi_d2uiz>
 8002c86:	4603      	mov	r3, r0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2[NUM_FREQUENCY_CHANNELS];
uint32_t difference[NUM_FREQUENCY_CHANNELS];
uint8_t is_first_captured[NUM_FREQUENCY_CHANNELS];


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4857      	ldr	r0, [pc, #348]	@ (8002df8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002c9c:	f009 fc54 	bl	800c548 <_txe_semaphore_get>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f040 80a3 	bne.w	8002dee <HAL_TIM_IC_CaptureCallback+0x15e>
		return;
	}
    uint8_t channel = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
    uint8_t hal_channel = 0u;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73bb      	strb	r3, [r7, #14]

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7f1b      	ldrb	r3, [r3, #28]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_IC_CaptureCallback+0x32>
        channel = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73bb      	strb	r3, [r7, #14]
 8002cc0:	e019      	b.n	8002cf6 <HAL_TIM_IC_CaptureCallback+0x66>
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7f1b      	ldrb	r3, [r3, #28]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d104      	bne.n	8002cd4 <HAL_TIM_IC_CaptureCallback+0x44>
        channel = 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_2;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	73bb      	strb	r3, [r7, #14]
 8002cd2:	e010      	b.n	8002cf6 <HAL_TIM_IC_CaptureCallback+0x66>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7f1b      	ldrb	r3, [r3, #28]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_IC_CaptureCallback+0x56>
        channel = 2;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_3;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	73bb      	strb	r3, [r7, #14]
 8002ce4:	e007      	b.n	8002cf6 <HAL_TIM_IC_CaptureCallback+0x66>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7f1b      	ldrb	r3, [r3, #28]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d103      	bne.n	8002cf6 <HAL_TIM_IC_CaptureCallback+0x66>
        channel = 3;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_4;
 8002cf2:	230c      	movs	r3, #12
 8002cf4:	73bb      	strb	r3, [r7, #14]
    }

    if (is_first_captured[channel] == false) {  // check if first rising edge to begin capture
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	4a40      	ldr	r2, [pc, #256]	@ (8002dfc <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d117      	bne.n	8002d30 <HAL_TIM_IC_CaptureCallback+0xa0>
        tx_timer_activate(&timers[channel]);
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	222c      	movs	r2, #44	@ 0x2c
 8002d04:	fb02 f303 	mul.w	r3, r2, r3
 8002d08:	4a3d      	ldr	r2, [pc, #244]	@ (8002e00 <HAL_TIM_IC_CaptureCallback+0x170>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f009 fd6d 	bl	800c7ec <_txe_timer_activate>
        IC_Val1[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 8002d12:	7bbb      	ldrb	r3, [r7, #14]
 8002d14:	7bfc      	ldrb	r4, [r7, #15]
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f006 fa9f 	bl	800925c <HAL_TIM_ReadCapturedValue>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4a38      	ldr	r2, [pc, #224]	@ (8002e04 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002d22:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        is_first_captured[channel] = true; // set flag to indicate next value will be second rising edge
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	4a34      	ldr	r2, [pc, #208]	@ (8002dfc <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	54d1      	strb	r1, [r2, r3]
 8002d2e:	e04e      	b.n	8002dce <HAL_TIM_IC_CaptureCallback+0x13e>
    } else if (is_first_captured[channel] == true) {   // second rising edge
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	4a32      	ldr	r2, [pc, #200]	@ (8002dfc <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002d34:	5cd3      	ldrb	r3, [r2, r3]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d149      	bne.n	8002dce <HAL_TIM_IC_CaptureCallback+0x13e>
        tx_timer_deactivate(&timers[channel]);
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	222c      	movs	r2, #44	@ 0x2c
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	4a2f      	ldr	r2, [pc, #188]	@ (8002e00 <HAL_TIM_IC_CaptureCallback+0x170>)
 8002d44:	4413      	add	r3, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f009 fe50 	bl	800c9ec <_txe_timer_deactivate>
        IC_Val2[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 8002d4c:	7bbb      	ldrb	r3, [r7, #14]
 8002d4e:	7bfc      	ldrb	r4, [r7, #15]
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f006 fa82 	bl	800925c <HAL_TIM_ReadCapturedValue>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002e08 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002d5c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        if (IC_Val2[channel] > IC_Val1[channel]) {  // first capture before second
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	4a29      	ldr	r2, [pc, #164]	@ (8002e08 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002d64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	4926      	ldr	r1, [pc, #152]	@ (8002e04 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002d6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d90d      	bls.n	8002d90 <HAL_TIM_IC_CaptureCallback+0x100>
            difference[channel] = IC_Val2[channel] - IC_Val1[channel];
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002d78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	4a21      	ldr	r2, [pc, #132]	@ (8002e04 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	1a8a      	subs	r2, r1, r2
 8002d88:	4920      	ldr	r1, [pc, #128]	@ (8002e0c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002d8e:	e01a      	b.n	8002dc6 <HAL_TIM_IC_CaptureCallback+0x136>
        } else if (IC_Val2[channel] < IC_Val1[channel]) {   // first capture after second robust check
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	4a1d      	ldr	r2, [pc, #116]	@ (8002e08 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002d94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	491a      	ldr	r1, [pc, #104]	@ (8002e04 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002d9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d210      	bcs.n	8002dc6 <HAL_TIM_IC_CaptureCallback+0x136>
            difference[channel] = ((htim->Init.Period - IC_Val1[channel]) + IC_Val2[channel]) + 1;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	4916      	ldr	r1, [pc, #88]	@ (8002e04 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002dac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002db0:	1ad2      	subs	r2, r2, r3
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	4914      	ldr	r1, [pc, #80]	@ (8002e08 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002db6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dba:	441a      	add	r2, r3
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	3201      	adds	r2, #1
 8002dc0:	4912      	ldr	r1, [pc, #72]	@ (8002e0c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
        is_first_captured[channel] = false;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dfc <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	54d1      	strb	r1, [r2, r3]
    }
    tx_semaphore_put(&semaphoreFrequency);
 8002dce:	480a      	ldr	r0, [pc, #40]	@ (8002df8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002dd0:	f009 fbfc 	bl	800c5cc <_txe_semaphore_put>
    tx_timer_change(&timers[channel], FREQUENCY_RESET_TIME, 0);
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	222c      	movs	r2, #44	@ 0x2c
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	4a08      	ldr	r2, [pc, #32]	@ (8002e00 <HAL_TIM_IC_CaptureCallback+0x170>)
 8002dde:	4413      	add	r3, r2
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002de6:	4618      	mov	r0, r3
 8002de8:	f009 fd1e 	bl	800c828 <_txe_timer_change>
 8002dec:	e000      	b.n	8002df0 <HAL_TIM_IC_CaptureCallback+0x160>
		return;
 8002dee:	bf00      	nop
}
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000cb0 	.word	0x20000cb0
 8002dfc:	20000e5c 	.word	0x20000e5c
 8002e00:	20000d7c 	.word	0x20000d7c
 8002e04:	20000e2c 	.word	0x20000e2c
 8002e08:	20000e3c 	.word	0x20000e3c
 8002e0c:	20000e4c 	.word	0x20000e4c

08002e10 <timerExpiration>:

void timerExpiration(UINT channel){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4816      	ldr	r0, [pc, #88]	@ (8002e74 <timerExpiration+0x64>)
 8002e1c:	f009 fb94 	bl	800c548 <_txe_semaphore_get>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d122      	bne.n	8002e6c <timerExpiration+0x5c>
        return;
    }
    is_first_captured[channel] = false;
 8002e26:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <timerExpiration+0x68>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
    difference[channel] = 0;
 8002e30:	4a12      	ldr	r2, [pc, #72]	@ (8002e7c <timerExpiration+0x6c>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2100      	movs	r1, #0
 8002e36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    tx_timer_deactivate(&timers[channel]);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	222c      	movs	r2, #44	@ 0x2c
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	4a0f      	ldr	r2, [pc, #60]	@ (8002e80 <timerExpiration+0x70>)
 8002e44:	4413      	add	r3, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f009 fdd0 	bl	800c9ec <_txe_timer_deactivate>
    tx_timer_change(&timers[channel], FREQUENCY_RESET_TIME, 0);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	222c      	movs	r2, #44	@ 0x2c
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <timerExpiration+0x70>)
 8002e56:	4413      	add	r3, r2
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f009 fce2 	bl	800c828 <_txe_timer_change>
    tx_semaphore_put(&semaphoreFrequency);
 8002e64:	4803      	ldr	r0, [pc, #12]	@ (8002e74 <timerExpiration+0x64>)
 8002e66:	f009 fbb1 	bl	800c5cc <_txe_semaphore_put>
    return;
 8002e6a:	e000      	b.n	8002e6e <timerExpiration+0x5e>
        return;
 8002e6c:	bf00      	nop
}
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000cb0 	.word	0x20000cb0
 8002e78:	20000e5c 	.word	0x20000e5c
 8002e7c:	20000e4c 	.word	0x20000e4c
 8002e80:	20000d7c 	.word	0x20000d7c

08002e84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e8e:	2003      	movs	r0, #3
 8002e90:	f001 ff17 	bl	8004cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e94:	200f      	movs	r0, #15
 8002e96:	f7fe fd7f 	bl	8001998 <HAL_InitTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	71fb      	strb	r3, [r7, #7]
 8002ea4:	e001      	b.n	8002eaa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ea6:	f7fe fd4f 	bl	8001948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eaa:	79fb      	ldrb	r3, [r7, #7]

}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <HAL_IncTick+0x1c>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <HAL_IncTick+0x20>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4a03      	ldr	r2, [pc, #12]	@ (8002ed0 <HAL_IncTick+0x1c>)
 8002ec4:	6013      	str	r3, [r2, #0]
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	20000e60 	.word	0x20000e60
 8002ed4:	20000188 	.word	0x20000188

08002ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return uwTick;
 8002edc:	4b03      	ldr	r3, [pc, #12]	@ (8002eec <HAL_GetTick+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000e60 	.word	0x20000e60

08002ef0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 0202 	bic.w	r2, r3, #2
 8002f00:	4904      	ldr	r1, [pc, #16]	@ (8002f14 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40010030 	.word	0x40010030

08002f18 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002f1c:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40010030 	.word	0x40010030

08002f38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3360      	adds	r3, #96	@ 0x60
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <LL_ADC_SetOffset+0x44>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	03fff000 	.word	0x03fff000

08002fe8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3360      	adds	r3, #96	@ 0x60
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3360      	adds	r3, #96	@ 0x60
 8003024:	461a      	mov	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	431a      	orrs	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800304a:	b480      	push	{r7}
 800304c:	b087      	sub	sp, #28
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3360      	adds	r3, #96	@ 0x60
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	431a      	orrs	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003074:	bf00      	nop
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3360      	adds	r3, #96	@ 0x60
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	615a      	str	r2, [r3, #20]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003102:	b480      	push	{r7}
 8003104:	b087      	sub	sp, #28
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3330      	adds	r3, #48	@ 0x30
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	4413      	add	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	211f      	movs	r1, #31
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	401a      	ands	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0e9b      	lsrs	r3, r3, #26
 800313a:	f003 011f 	and.w	r1, r3, #31
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003166:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3314      	adds	r3, #20
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0e5b      	lsrs	r3, r3, #25
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	4413      	add	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0d1b      	lsrs	r3, r3, #20
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2107      	movs	r1, #7
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	401a      	ands	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	0d1b      	lsrs	r3, r3, #20
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	431a      	orrs	r2, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	43db      	mvns	r3, r3
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0318 	and.w	r3, r3, #24
 80031fa:	4908      	ldr	r1, [pc, #32]	@ (800321c <LL_ADC_SetChannelSingleDiff+0x44>)
 80031fc:	40d9      	lsrs	r1, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	400b      	ands	r3, r1
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	431a      	orrs	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	0007ffff 	.word	0x0007ffff

08003220 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 031f 	and.w	r3, r3, #31
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003268:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6093      	str	r3, [r2, #8]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800328c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003290:	d101      	bne.n	8003296 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032e0:	d101      	bne.n	80032e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003304:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <LL_ADC_IsEnabled+0x18>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <LL_ADC_IsEnabled+0x1a>
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003352:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b04      	cmp	r3, #4
 800337c:	d101      	bne.n	8003382 <LL_ADC_REG_IsConversionOngoing+0x18>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d101      	bne.n	80033a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b089      	sub	sp, #36	@ 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1a9      	b.n	8003726 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fd fd0b 	bl	8000dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff3f 	bl	800327c <LL_ADC_IsDeepPowerDownEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff25 	bl	8003258 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff5a 	bl	80032cc <LL_ADC_IsInternalRegulatorEnabled>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d115      	bne.n	800344a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ff3e 	bl	80032a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003428:	4b9c      	ldr	r3, [pc, #624]	@ (800369c <HAL_ADC_Init+0x2e4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	4a9c      	ldr	r2, [pc, #624]	@ (80036a0 <HAL_ADC_Init+0x2e8>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	3301      	adds	r3, #1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800343c:	e002      	b.n	8003444 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3b01      	subs	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f9      	bne.n	800343e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff3c 	bl	80032cc <LL_ADC_IsInternalRegulatorEnabled>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ff75 	bl	800336a <LL_ADC_REG_IsConversionOngoing>
 8003480:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	f040 8142 	bne.w	8003714 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 813e 	bne.w	8003714 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034a0:	f043 0202 	orr.w	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff35 	bl	800331c <LL_ADC_IsEnabled>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d141      	bne.n	800353c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c0:	d004      	beq.n	80034cc <HAL_ADC_Init+0x114>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a77      	ldr	r2, [pc, #476]	@ (80036a4 <HAL_ADC_Init+0x2ec>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10f      	bne.n	80034ec <HAL_ADC_Init+0x134>
 80034cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034d0:	f7ff ff24 	bl	800331c <LL_ADC_IsEnabled>
 80034d4:	4604      	mov	r4, r0
 80034d6:	4873      	ldr	r0, [pc, #460]	@ (80036a4 <HAL_ADC_Init+0x2ec>)
 80034d8:	f7ff ff20 	bl	800331c <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	4323      	orrs	r3, r4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e012      	b.n	8003512 <HAL_ADC_Init+0x15a>
 80034ec:	486e      	ldr	r0, [pc, #440]	@ (80036a8 <HAL_ADC_Init+0x2f0>)
 80034ee:	f7ff ff15 	bl	800331c <LL_ADC_IsEnabled>
 80034f2:	4604      	mov	r4, r0
 80034f4:	486d      	ldr	r0, [pc, #436]	@ (80036ac <HAL_ADC_Init+0x2f4>)
 80034f6:	f7ff ff11 	bl	800331c <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	431c      	orrs	r4, r3
 80034fe:	486c      	ldr	r0, [pc, #432]	@ (80036b0 <HAL_ADC_Init+0x2f8>)
 8003500:	f7ff ff0c 	bl	800331c <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	4323      	orrs	r3, r4
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800351e:	d004      	beq.n	800352a <HAL_ADC_Init+0x172>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a5f      	ldr	r2, [pc, #380]	@ (80036a4 <HAL_ADC_Init+0x2ec>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_ADC_Init+0x176>
 800352a:	4a62      	ldr	r2, [pc, #392]	@ (80036b4 <HAL_ADC_Init+0x2fc>)
 800352c:	e000      	b.n	8003530 <HAL_ADC_Init+0x178>
 800352e:	4a62      	ldr	r2, [pc, #392]	@ (80036b8 <HAL_ADC_Init+0x300>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7ff fcfe 	bl	8002f38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7f5b      	ldrb	r3, [r3, #29]
 8003540:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003546:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800354c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003552:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800355a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003566:	2b01      	cmp	r3, #1
 8003568:	d106      	bne.n	8003578 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	045b      	lsls	r3, r3, #17
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	4b48      	ldr	r3, [pc, #288]	@ (80036bc <HAL_ADC_Init+0x304>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	69b9      	ldr	r1, [r7, #24]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fee4 	bl	8003390 <LL_ADC_INJ_IsConversionOngoing>
 80035c8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d17f      	bne.n	80036d0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d17c      	bne.n	80036d0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035da:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035e2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035f2:	f023 0302 	bic.w	r3, r3, #2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	69b9      	ldr	r1, [r7, #24]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d017      	beq.n	8003638 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003616:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003620:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6911      	ldr	r1, [r2, #16]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	430b      	orrs	r3, r1
 8003632:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003636:	e013      	b.n	8003660 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003646:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800365c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003666:	2b01      	cmp	r3, #1
 8003668:	d12a      	bne.n	80036c0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003686:	4311      	orrs	r1, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800368c:	430a      	orrs	r2, r1
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	e019      	b.n	80036d0 <HAL_ADC_Init+0x318>
 800369c:	20000000 	.word	0x20000000
 80036a0:	053e2d63 	.word	0x053e2d63
 80036a4:	50000100 	.word	0x50000100
 80036a8:	50000400 	.word	0x50000400
 80036ac:	50000500 	.word	0x50000500
 80036b0:	50000600 	.word	0x50000600
 80036b4:	50000300 	.word	0x50000300
 80036b8:	50000700 	.word	0x50000700
 80036bc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10c      	bne.n	80036f2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	f023 010f 	bic.w	r1, r3, #15
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	1e5a      	subs	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80036f0:	e007      	b.n	8003702 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 020f 	bic.w	r2, r2, #15
 8003700:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003712:	e007      	b.n	8003724 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003718:	f043 0210 	orr.w	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003724:	7ffb      	ldrb	r3, [r7, #31]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	@ 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop

08003730 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003744:	d004      	beq.n	8003750 <HAL_ADC_Start_DMA+0x20>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a5a      	ldr	r2, [pc, #360]	@ (80038b4 <HAL_ADC_Start_DMA+0x184>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_ADC_Start_DMA+0x24>
 8003750:	4b59      	ldr	r3, [pc, #356]	@ (80038b8 <HAL_ADC_Start_DMA+0x188>)
 8003752:	e000      	b.n	8003756 <HAL_ADC_Start_DMA+0x26>
 8003754:	4b59      	ldr	r3, [pc, #356]	@ (80038bc <HAL_ADC_Start_DMA+0x18c>)
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fd62 	bl	8003220 <LL_ADC_GetMultimode>
 800375c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fe01 	bl	800336a <LL_ADC_REG_IsConversionOngoing>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 809b 	bne.w	80038a6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_ADC_Start_DMA+0x4e>
 800377a:	2302      	movs	r3, #2
 800377c:	e096      	b.n	80038ac <HAL_ADC_Start_DMA+0x17c>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a4d      	ldr	r2, [pc, #308]	@ (80038c0 <HAL_ADC_Start_DMA+0x190>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d008      	beq.n	80037a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b05      	cmp	r3, #5
 800379a:	d002      	beq.n	80037a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b09      	cmp	r3, #9
 80037a0:	d17a      	bne.n	8003898 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 ff56 	bl	8004654 <ADC_Enable>
 80037a8:	4603      	mov	r3, r0
 80037aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d16d      	bne.n	800388e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a3a      	ldr	r2, [pc, #232]	@ (80038b4 <HAL_ADC_Start_DMA+0x184>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_ADC_Start_DMA+0xb4>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a3b      	ldr	r2, [pc, #236]	@ (80038c4 <HAL_ADC_Start_DMA+0x194>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d002      	beq.n	80037e0 <HAL_ADC_Start_DMA+0xb0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e003      	b.n	80037e8 <HAL_ADC_Start_DMA+0xb8>
 80037e0:	4b39      	ldr	r3, [pc, #228]	@ (80038c8 <HAL_ADC_Start_DMA+0x198>)
 80037e2:	e001      	b.n	80037e8 <HAL_ADC_Start_DMA+0xb8>
 80037e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d002      	beq.n	80037f6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d105      	bne.n	8003802 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	f023 0206 	bic.w	r2, r3, #6
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	661a      	str	r2, [r3, #96]	@ 0x60
 800381a:	e002      	b.n	8003822 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	4a29      	ldr	r2, [pc, #164]	@ (80038cc <HAL_ADC_Start_DMA+0x19c>)
 8003828:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	4a28      	ldr	r2, [pc, #160]	@ (80038d0 <HAL_ADC_Start_DMA+0x1a0>)
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003836:	4a27      	ldr	r2, [pc, #156]	@ (80038d4 <HAL_ADC_Start_DMA+0x1a4>)
 8003838:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	221c      	movs	r2, #28
 8003840:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0210 	orr.w	r2, r2, #16
 8003858:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3340      	adds	r3, #64	@ 0x40
 8003874:	4619      	mov	r1, r3
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f001 fbef 	bl	800505c <HAL_DMA_Start_IT>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fd5b 	bl	8003342 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800388c:	e00d      	b.n	80038aa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003896:	e008      	b.n	80038aa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80038a4:	e001      	b.n	80038aa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
 80038a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	50000100 	.word	0x50000100
 80038b8:	50000300 	.word	0x50000300
 80038bc:	50000700 	.word	0x50000700
 80038c0:	50000600 	.word	0x50000600
 80038c4:	50000500 	.word	0x50000500
 80038c8:	50000400 	.word	0x50000400
 80038cc:	08004781 	.word	0x08004781
 80038d0:	08004859 	.word	0x08004859
 80038d4:	08004875 	.word	0x08004875

080038d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	@ 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038fc:	d004      	beq.n	8003908 <HAL_ADC_IRQHandler+0x30>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a8e      	ldr	r2, [pc, #568]	@ (8003b3c <HAL_ADC_IRQHandler+0x264>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_ADC_IRQHandler+0x34>
 8003908:	4b8d      	ldr	r3, [pc, #564]	@ (8003b40 <HAL_ADC_IRQHandler+0x268>)
 800390a:	e000      	b.n	800390e <HAL_ADC_IRQHandler+0x36>
 800390c:	4b8d      	ldr	r3, [pc, #564]	@ (8003b44 <HAL_ADC_IRQHandler+0x26c>)
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fc86 	bl	8003220 <LL_ADC_GetMultimode>
 8003914:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <HAL_ADC_IRQHandler+0x78>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d012      	beq.n	8003950 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d105      	bne.n	8003942 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fffe 	bl	8004944 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2202      	movs	r2, #2
 800394e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_ADC_IRQHandler+0x8c>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8094 	beq.w	8003a98 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 808e 	beq.w	8003a98 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fb9f 	bl	80030dc <LL_ADC_REG_IsTriggerSourceSWStart>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d072      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a64      	ldr	r2, [pc, #400]	@ (8003b3c <HAL_ADC_IRQHandler+0x264>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_ADC_IRQHandler+0xea>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a65      	ldr	r2, [pc, #404]	@ (8003b48 <HAL_ADC_IRQHandler+0x270>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d002      	beq.n	80039be <HAL_ADC_IRQHandler+0xe6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	e003      	b.n	80039c6 <HAL_ADC_IRQHandler+0xee>
 80039be:	4b63      	ldr	r3, [pc, #396]	@ (8003b4c <HAL_ADC_IRQHandler+0x274>)
 80039c0:	e001      	b.n	80039c6 <HAL_ADC_IRQHandler+0xee>
 80039c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d008      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d002      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d104      	bne.n	80039ea <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	e014      	b.n	8003a14 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a53      	ldr	r2, [pc, #332]	@ (8003b3c <HAL_ADC_IRQHandler+0x264>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x130>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a53      	ldr	r2, [pc, #332]	@ (8003b48 <HAL_ADC_IRQHandler+0x270>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d002      	beq.n	8003a04 <HAL_ADC_IRQHandler+0x12c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	e003      	b.n	8003a0c <HAL_ADC_IRQHandler+0x134>
 8003a04:	4b51      	ldr	r3, [pc, #324]	@ (8003b4c <HAL_ADC_IRQHandler+0x274>)
 8003a06:	e001      	b.n	8003a0c <HAL_ADC_IRQHandler+0x134>
 8003a08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d135      	bne.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d12e      	bne.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fc9a 	bl	800336a <LL_ADC_REG_IsConversionOngoing>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d11a      	bne.n	8003a72 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 020c 	bic.w	r2, r2, #12
 8003a4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d112      	bne.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a68:	f043 0201 	orr.w	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a70:	e00b      	b.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	f043 0210 	orr.w	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fe fb88 	bl	80021a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	220c      	movs	r2, #12
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_ADC_IRQHandler+0x1d4>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80b3 	beq.w	8003c1e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80ad 	beq.w	8003c1e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fb3a 	bl	800315a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ae6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff faf5 	bl	80030dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003af2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a10      	ldr	r2, [pc, #64]	@ (8003b3c <HAL_ADC_IRQHandler+0x264>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_ADC_IRQHandler+0x23a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a11      	ldr	r2, [pc, #68]	@ (8003b48 <HAL_ADC_IRQHandler+0x270>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d002      	beq.n	8003b0e <HAL_ADC_IRQHandler+0x236>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	e003      	b.n	8003b16 <HAL_ADC_IRQHandler+0x23e>
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b4c <HAL_ADC_IRQHandler+0x274>)
 8003b10:	e001      	b.n	8003b16 <HAL_ADC_IRQHandler+0x23e>
 8003b12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d008      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	d002      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b07      	cmp	r3, #7
 8003b2e:	d10f      	bne.n	8003b50 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	e01f      	b.n	8003b7a <HAL_ADC_IRQHandler+0x2a2>
 8003b3a:	bf00      	nop
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	50000300 	.word	0x50000300
 8003b44:	50000700 	.word	0x50000700
 8003b48:	50000500 	.word	0x50000500
 8003b4c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a8b      	ldr	r2, [pc, #556]	@ (8003d84 <HAL_ADC_IRQHandler+0x4ac>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_ADC_IRQHandler+0x296>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a8a      	ldr	r2, [pc, #552]	@ (8003d88 <HAL_ADC_IRQHandler+0x4b0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d002      	beq.n	8003b6a <HAL_ADC_IRQHandler+0x292>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	e003      	b.n	8003b72 <HAL_ADC_IRQHandler+0x29a>
 8003b6a:	4b88      	ldr	r3, [pc, #544]	@ (8003d8c <HAL_ADC_IRQHandler+0x4b4>)
 8003b6c:	e001      	b.n	8003b72 <HAL_ADC_IRQHandler+0x29a>
 8003b6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b72:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d047      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_ADC_IRQHandler+0x2c2>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03f      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d13a      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba4:	2b40      	cmp	r3, #64	@ 0x40
 8003ba6:	d133      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d12e      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fbea 	bl	8003390 <LL_ADC_INJ_IsConversionOngoing>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d11a      	bne.n	8003bf8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d112      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bf6:	e00b      	b.n	8003c10 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	f043 0210 	orr.w	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fe6f 	bl	80048f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2260      	movs	r2, #96	@ 0x60
 8003c1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d011      	beq.n	8003c4c <HAL_ADC_IRQHandler+0x374>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00c      	beq.n	8003c4c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8b4 	bl	8003dac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2280      	movs	r2, #128	@ 0x80
 8003c4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x3a4>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00d      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fe55 	bl	800491c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d012      	beq.n	8003cac <HAL_ADC_IRQHandler+0x3d4>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fe47 	bl	8004930 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003caa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d043      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x466>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03e      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ccc:	e021      	b.n	8003d12 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cdc:	d004      	beq.n	8003ce8 <HAL_ADC_IRQHandler+0x410>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a28      	ldr	r2, [pc, #160]	@ (8003d84 <HAL_ADC_IRQHandler+0x4ac>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_ADC_IRQHandler+0x414>
 8003ce8:	4b29      	ldr	r3, [pc, #164]	@ (8003d90 <HAL_ADC_IRQHandler+0x4b8>)
 8003cea:	e000      	b.n	8003cee <HAL_ADC_IRQHandler+0x416>
 8003cec:	4b29      	ldr	r3, [pc, #164]	@ (8003d94 <HAL_ADC_IRQHandler+0x4bc>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff faa4 	bl	800323c <LL_ADC_GetMultiDMATransfer>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cfe:	e008      	b.n	8003d12 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10e      	bne.n	8003d36 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d28:	f043 0202 	orr.w	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f845 	bl	8003dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d018      	beq.n	8003d7a <HAL_ADC_IRQHandler+0x4a2>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d013      	beq.n	8003d7a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d56:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d62:	f043 0208 	orr.w	r2, r3, #8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d72:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fdc7 	bl	8004908 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d7a:	bf00      	nop
 8003d7c:	3728      	adds	r7, #40	@ 0x28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	50000100 	.word	0x50000100
 8003d88:	50000500 	.word	0x50000500
 8003d8c:	50000400 	.word	0x50000400
 8003d90:	50000300 	.word	0x50000300
 8003d94:	50000700 	.word	0x50000700

08003d98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b0b6      	sub	sp, #216	@ 0xd8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d102      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x24>
 8003df2:	2302      	movs	r3, #2
 8003df4:	f000 bc13 	b.w	800461e <HAL_ADC_ConfigChannel+0x84a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fab0 	bl	800336a <LL_ADC_REG_IsConversionOngoing>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 83f3 	bne.w	80045f8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6859      	ldr	r1, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f7ff f96f 	bl	8003102 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fa9e 	bl	800336a <LL_ADC_REG_IsConversionOngoing>
 8003e2e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff faaa 	bl	8003390 <LL_ADC_INJ_IsConversionOngoing>
 8003e3c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f040 81d9 	bne.w	80041fc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 81d4 	bne.w	80041fc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e5c:	d10f      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2200      	movs	r2, #0
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7ff f989 	bl	8003180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff f91d 	bl	80030b6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003e7c:	e00e      	b.n	8003e9c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7ff f978 	bl	8003180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff f90d 	bl	80030b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	08db      	lsrs	r3, r3, #3
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d022      	beq.n	8003f04 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6919      	ldr	r1, [r3, #16]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ece:	f7ff f867 	bl	8002fa0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6919      	ldr	r1, [r3, #16]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f7ff f8b3 	bl	800304a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d102      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x126>
 8003ef4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ef8:	e000      	b.n	8003efc <HAL_ADC_ConfigChannel+0x128>
 8003efa:	2300      	movs	r3, #0
 8003efc:	461a      	mov	r2, r3
 8003efe:	f7ff f8bf 	bl	8003080 <LL_ADC_SetOffsetSaturation>
 8003f02:	e17b      	b.n	80041fc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff f86c 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x15c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f861 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8003f26:	4603      	mov	r3, r0
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	f003 021f 	and.w	r2, r3, #31
 8003f2e:	e01e      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x19a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff f856 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	e004      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003f62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d105      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x1b2>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	0e9b      	lsrs	r3, r3, #26
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	e018      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x1e4>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003faa:	2320      	movs	r3, #32
 8003fac:	e004      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d106      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff f825 	bl	8003014 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff f809 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x222>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fffe 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8003fec:	4603      	mov	r3, r0
 8003fee:	0e9b      	lsrs	r3, r3, #26
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	e01e      	b.n	8004034 <HAL_ADC_ConfigChannel+0x260>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fff3 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8004002:	4603      	mov	r3, r0
 8004004:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004014:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800401c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004024:	2320      	movs	r3, #32
 8004026:	e004      	b.n	8004032 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <HAL_ADC_ConfigChannel+0x278>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0e9b      	lsrs	r3, r3, #26
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	e018      	b.n	800407e <HAL_ADC_ConfigChannel+0x2aa>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004060:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004068:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004070:	2320      	movs	r3, #32
 8004072:	e004      	b.n	800407e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004074:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800407e:	429a      	cmp	r2, r3
 8004080:	d106      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2200      	movs	r2, #0
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe ffc2 	bl	8003014 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe ffa6 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 800409c:	4603      	mov	r3, r0
 800409e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x2e8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe ff9b 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 80040b2:	4603      	mov	r3, r0
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	f003 021f 	and.w	r2, r3, #31
 80040ba:	e01e      	b.n	80040fa <HAL_ADC_ConfigChannel+0x326>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe ff90 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80040da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80040e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e004      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80040ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004102:	2b00      	cmp	r3, #0
 8004104:	d105      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x33e>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	0e9b      	lsrs	r3, r3, #26
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	e016      	b.n	8004140 <HAL_ADC_ConfigChannel+0x36c>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004124:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004126:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800412a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004132:	2320      	movs	r3, #32
 8004134:	e004      	b.n	8004140 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004136:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004140:	429a      	cmp	r2, r3
 8004142:	d106      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2200      	movs	r2, #0
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe ff61 	bl	8003014 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2103      	movs	r1, #3
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe ff45 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 800415e:	4603      	mov	r3, r0
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <HAL_ADC_ConfigChannel+0x3aa>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2103      	movs	r1, #3
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe ff3a 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 8004174:	4603      	mov	r3, r0
 8004176:	0e9b      	lsrs	r3, r3, #26
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	e017      	b.n	80041ae <HAL_ADC_ConfigChannel+0x3da>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2103      	movs	r1, #3
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe ff2f 	bl	8002fe8 <LL_ADC_GetOffsetChannel>
 800418a:	4603      	mov	r3, r0
 800418c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004198:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800419a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80041a0:	2320      	movs	r3, #32
 80041a2:	e003      	b.n	80041ac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80041a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x3f2>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	0e9b      	lsrs	r3, r3, #26
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	e011      	b.n	80041ea <HAL_ADC_ConfigChannel+0x416>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80041d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80041d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80041de:	2320      	movs	r3, #32
 80041e0:	e003      	b.n	80041ea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80041e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d106      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2103      	movs	r1, #3
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe ff0c 	bl	8003014 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff f88b 	bl	800331c <LL_ADC_IsEnabled>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 813d 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6819      	ldr	r1, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	461a      	mov	r2, r3
 800421c:	f7fe ffdc 	bl	80031d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4aa2      	ldr	r2, [pc, #648]	@ (80044b0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	f040 812e 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x480>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	3301      	adds	r3, #1
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	2b09      	cmp	r3, #9
 800424a:	bf94      	ite	ls
 800424c:	2301      	movls	r3, #1
 800424e:	2300      	movhi	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e019      	b.n	8004288 <HAL_ADC_ConfigChannel+0x4b4>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004264:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800426c:	2320      	movs	r3, #32
 800426e:	e003      	b.n	8004278 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2b09      	cmp	r3, #9
 8004280:	bf94      	ite	ls
 8004282:	2301      	movls	r3, #1
 8004284:	2300      	movhi	r3, #0
 8004286:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004288:	2b00      	cmp	r3, #0
 800428a:	d079      	beq.n	8004380 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x4d4>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	069b      	lsls	r3, r3, #26
 80042a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a6:	e015      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x500>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80042b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80042ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80042c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x520>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	0e9b      	lsrs	r3, r3, #26
 80042e6:	3301      	adds	r3, #1
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	e017      	b.n	8004324 <HAL_ADC_ConfigChannel+0x550>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004304:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	ea42 0103 	orr.w	r1, r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <HAL_ADC_ConfigChannel+0x576>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	f003 021f 	and.w	r2, r3, #31
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	051b      	lsls	r3, r3, #20
 8004348:	e018      	b.n	800437c <HAL_ADC_ConfigChannel+0x5a8>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800435c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004362:	2320      	movs	r3, #32
 8004364:	e003      	b.n	800436e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	3301      	adds	r3, #1
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800437c:	430b      	orrs	r3, r1
 800437e:	e07e      	b.n	800447e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_ADC_ConfigChannel+0x5c8>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	3301      	adds	r3, #1
 8004394:	069b      	lsls	r3, r3, #26
 8004396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800439a:	e015      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x5f4>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	069b      	lsls	r3, r3, #26
 80043c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x614>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	0e9b      	lsrs	r3, r3, #26
 80043da:	3301      	adds	r3, #1
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	e017      	b.n	8004418 <HAL_ADC_ConfigChannel+0x644>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	61fb      	str	r3, [r7, #28]
  return result;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004400:	2320      	movs	r3, #32
 8004402:	e003      	b.n	800440c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3301      	adds	r3, #1
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	ea42 0103 	orr.w	r1, r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10d      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x670>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0e9b      	lsrs	r3, r3, #26
 800442e:	3301      	adds	r3, #1
 8004430:	f003 021f 	and.w	r2, r3, #31
 8004434:	4613      	mov	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4413      	add	r3, r2
 800443a:	3b1e      	subs	r3, #30
 800443c:	051b      	lsls	r3, r3, #20
 800443e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004442:	e01b      	b.n	800447c <HAL_ADC_ConfigChannel+0x6a8>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	613b      	str	r3, [r7, #16]
  return result;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800445c:	2320      	movs	r3, #32
 800445e:	e003      	b.n	8004468 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f003 021f 	and.w	r2, r3, #31
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	3b1e      	subs	r3, #30
 8004476:	051b      	lsls	r3, r3, #20
 8004478:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800447c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004482:	4619      	mov	r1, r3
 8004484:	f7fe fe7c 	bl	8003180 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_ADC_ConfigChannel+0x6e0>)
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80be 	beq.w	8004612 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800449e:	d004      	beq.n	80044aa <HAL_ADC_ConfigChannel+0x6d6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <HAL_ADC_ConfigChannel+0x6e4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10a      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x6ec>
 80044aa:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <HAL_ADC_ConfigChannel+0x6e8>)
 80044ac:	e009      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x6ee>
 80044ae:	bf00      	nop
 80044b0:	407f0000 	.word	0x407f0000
 80044b4:	80080000 	.word	0x80080000
 80044b8:	50000100 	.word	0x50000100
 80044bc:	50000300 	.word	0x50000300
 80044c0:	4b59      	ldr	r3, [pc, #356]	@ (8004628 <HAL_ADC_ConfigChannel+0x854>)
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fd5e 	bl	8002f84 <LL_ADC_GetCommonPathInternalCh>
 80044c8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a56      	ldr	r2, [pc, #344]	@ (800462c <HAL_ADC_ConfigChannel+0x858>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_ADC_ConfigChannel+0x70c>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a55      	ldr	r2, [pc, #340]	@ (8004630 <HAL_ADC_ConfigChannel+0x85c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d13a      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d134      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044f4:	d005      	beq.n	8004502 <HAL_ADC_ConfigChannel+0x72e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004634 <HAL_ADC_ConfigChannel+0x860>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	f040 8085 	bne.w	800460c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800450a:	d004      	beq.n	8004516 <HAL_ADC_ConfigChannel+0x742>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a49      	ldr	r2, [pc, #292]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <HAL_ADC_ConfigChannel+0x746>
 8004516:	4a49      	ldr	r2, [pc, #292]	@ (800463c <HAL_ADC_ConfigChannel+0x868>)
 8004518:	e000      	b.n	800451c <HAL_ADC_ConfigChannel+0x748>
 800451a:	4a43      	ldr	r2, [pc, #268]	@ (8004628 <HAL_ADC_ConfigChannel+0x854>)
 800451c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004520:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7fe fd19 	bl	8002f5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800452c:	4b44      	ldr	r3, [pc, #272]	@ (8004640 <HAL_ADC_ConfigChannel+0x86c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	4a44      	ldr	r2, [pc, #272]	@ (8004644 <HAL_ADC_ConfigChannel+0x870>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	4613      	mov	r3, r2
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004546:	e002      	b.n	800454e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3b01      	subs	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f9      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004554:	e05a      	b.n	800460c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3b      	ldr	r2, [pc, #236]	@ (8004648 <HAL_ADC_ConfigChannel+0x874>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d125      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d11f      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a31      	ldr	r2, [pc, #196]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d104      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x7ac>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a34      	ldr	r2, [pc, #208]	@ (800464c <HAL_ADC_ConfigChannel+0x878>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d047      	beq.n	8004610 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004588:	d004      	beq.n	8004594 <HAL_ADC_ConfigChannel+0x7c0>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2a      	ldr	r2, [pc, #168]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x7c4>
 8004594:	4a29      	ldr	r2, [pc, #164]	@ (800463c <HAL_ADC_ConfigChannel+0x868>)
 8004596:	e000      	b.n	800459a <HAL_ADC_ConfigChannel+0x7c6>
 8004598:	4a23      	ldr	r2, [pc, #140]	@ (8004628 <HAL_ADC_ConfigChannel+0x854>)
 800459a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800459e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7fe fcda 	bl	8002f5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045aa:	e031      	b.n	8004610 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a27      	ldr	r2, [pc, #156]	@ (8004650 <HAL_ADC_ConfigChannel+0x87c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d12d      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d127      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d022      	beq.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045d4:	d004      	beq.n	80045e0 <HAL_ADC_ConfigChannel+0x80c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a17      	ldr	r2, [pc, #92]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x810>
 80045e0:	4a16      	ldr	r2, [pc, #88]	@ (800463c <HAL_ADC_ConfigChannel+0x868>)
 80045e2:	e000      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x812>
 80045e4:	4a10      	ldr	r2, [pc, #64]	@ (8004628 <HAL_ADC_ConfigChannel+0x854>)
 80045e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe fcb4 	bl	8002f5e <LL_ADC_SetCommonPathInternalCh>
 80045f6:	e00c      	b.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	f043 0220 	orr.w	r2, r3, #32
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800460a:	e002      	b.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800460c:	bf00      	nop
 800460e:	e000      	b.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004610:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800461a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800461e:	4618      	mov	r0, r3
 8004620:	37d8      	adds	r7, #216	@ 0xd8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	50000700 	.word	0x50000700
 800462c:	c3210000 	.word	0xc3210000
 8004630:	90c00010 	.word	0x90c00010
 8004634:	50000600 	.word	0x50000600
 8004638:	50000100 	.word	0x50000100
 800463c:	50000300 	.word	0x50000300
 8004640:	20000000 	.word	0x20000000
 8004644:	053e2d63 	.word	0x053e2d63
 8004648:	c7520000 	.word	0xc7520000
 800464c:	50000500 	.word	0x50000500
 8004650:	cb840000 	.word	0xcb840000

08004654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe fe59 	bl	800331c <LL_ADC_IsEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d176      	bne.n	800475e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	4b3c      	ldr	r3, [pc, #240]	@ (8004768 <ADC_Enable+0x114>)
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004682:	f043 0210 	orr.w	r2, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468e:	f043 0201 	orr.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e062      	b.n	8004760 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fe28 	bl	80032f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ac:	d004      	beq.n	80046b8 <ADC_Enable+0x64>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2e      	ldr	r2, [pc, #184]	@ (800476c <ADC_Enable+0x118>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <ADC_Enable+0x68>
 80046b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004770 <ADC_Enable+0x11c>)
 80046ba:	e000      	b.n	80046be <ADC_Enable+0x6a>
 80046bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004774 <ADC_Enable+0x120>)
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fc60 	bl	8002f84 <LL_ADC_GetCommonPathInternalCh>
 80046c4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80046c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d013      	beq.n	80046f6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004778 <ADC_Enable+0x124>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	4a29      	ldr	r2, [pc, #164]	@ (800477c <ADC_Enable+0x128>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	099b      	lsrs	r3, r3, #6
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046e8:	e002      	b.n	80046f0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f9      	bne.n	80046ea <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046f6:	f7fe fbef 	bl	8002ed8 <HAL_GetTick>
 80046fa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046fc:	e028      	b.n	8004750 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fe0a 	bl	800331c <LL_ADC_IsEnabled>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe fdee 	bl	80032f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004718:	f7fe fbde 	bl	8002ed8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d914      	bls.n	8004750 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d00d      	beq.n	8004750 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	f043 0210 	orr.w	r2, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004744:	f043 0201 	orr.w	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e007      	b.n	8004760 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d1cf      	bne.n	80046fe <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	8000003f 	.word	0x8000003f
 800476c:	50000100 	.word	0x50000100
 8004770:	50000300 	.word	0x50000300
 8004774:	50000700 	.word	0x50000700
 8004778:	20000000 	.word	0x20000000
 800477c:	053e2d63 	.word	0x053e2d63

08004780 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004792:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004796:	2b00      	cmp	r3, #0
 8004798:	d14b      	bne.n	8004832 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d021      	beq.n	80047f8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe fc8f 	bl	80030dc <LL_ADC_REG_IsTriggerSourceSWStart>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d032      	beq.n	800482a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d12b      	bne.n	800482a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d11f      	bne.n	800482a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047f6:	e018      	b.n	800482a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d111      	bne.n	800482a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d105      	bne.n	800482a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7fd fcb8 	bl	80021a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004830:	e00e      	b.n	8004850 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7ff fabe 	bl	8003dc0 <HAL_ADC_ErrorCallback>
}
 8004844:	e004      	b.n	8004850 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7ff fa96 	bl	8003d98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004886:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004892:	f043 0204 	orr.w	r2, r3, #4
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff fa90 	bl	8003dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <LL_ADC_IsEnabled>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <LL_ADC_IsEnabled+0x18>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <LL_ADC_IsEnabled+0x1a>
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <LL_ADC_REG_IsConversionOngoing>:
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d101      	bne.n	80048e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b0a1      	sub	sp, #132	@ 0x84
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004972:	2302      	movs	r3, #2
 8004974:	e0e7      	b.n	8004b46 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800497e:	2300      	movs	r3, #0
 8004980:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004982:	2300      	movs	r3, #0
 8004984:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800498e:	d102      	bne.n	8004996 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004990:	4b6f      	ldr	r3, [pc, #444]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	e009      	b.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d102      	bne.n	80049a6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80049a0:	4b6d      	ldr	r3, [pc, #436]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	e001      	b.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0be      	b.n	8004b46 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff ff7f 	bl	80048ce <LL_ADC_REG_IsConversionOngoing>
 80049d0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff ff79 	bl	80048ce <LL_ADC_REG_IsConversionOngoing>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f040 80a0 	bne.w	8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80049e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 809c 	bne.w	8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049f4:	d004      	beq.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a55      	ldr	r2, [pc, #340]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d101      	bne.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004a00:	4b56      	ldr	r3, [pc, #344]	@ (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004a02:	e000      	b.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004a04:	4b56      	ldr	r3, [pc, #344]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004a06:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d04b      	beq.n	8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a22:	035b      	lsls	r3, r3, #13
 8004a24:	430b      	orrs	r3, r1
 8004a26:	431a      	orrs	r2, r3
 8004a28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a34:	d004      	beq.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a45      	ldr	r2, [pc, #276]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10f      	bne.n	8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004a44:	f7ff ff30 	bl	80048a8 <LL_ADC_IsEnabled>
 8004a48:	4604      	mov	r4, r0
 8004a4a:	4841      	ldr	r0, [pc, #260]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a4c:	f7ff ff2c 	bl	80048a8 <LL_ADC_IsEnabled>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4323      	orrs	r3, r4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e012      	b.n	8004a86 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a60:	483c      	ldr	r0, [pc, #240]	@ (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a62:	f7ff ff21 	bl	80048a8 <LL_ADC_IsEnabled>
 8004a66:	4604      	mov	r4, r0
 8004a68:	483b      	ldr	r0, [pc, #236]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a6a:	f7ff ff1d 	bl	80048a8 <LL_ADC_IsEnabled>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	431c      	orrs	r4, r3
 8004a72:	483c      	ldr	r0, [pc, #240]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a74:	f7ff ff18 	bl	80048a8 <LL_ADC_IsEnabled>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4323      	orrs	r3, r4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d056      	beq.n	8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a92:	f023 030f 	bic.w	r3, r3, #15
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	6811      	ldr	r1, [r2, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	6892      	ldr	r2, [r2, #8]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aa4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004aa6:	e047      	b.n	8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ab0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ab2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004abc:	d004      	beq.n	8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a23      	ldr	r2, [pc, #140]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10f      	bne.n	8004ae8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004ac8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004acc:	f7ff feec 	bl	80048a8 <LL_ADC_IsEnabled>
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	481f      	ldr	r0, [pc, #124]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ad4:	f7ff fee8 	bl	80048a8 <LL_ADC_IsEnabled>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4323      	orrs	r3, r4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e012      	b.n	8004b0e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004ae8:	481a      	ldr	r0, [pc, #104]	@ (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004aea:	f7ff fedd 	bl	80048a8 <LL_ADC_IsEnabled>
 8004aee:	4604      	mov	r4, r0
 8004af0:	4819      	ldr	r0, [pc, #100]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004af2:	f7ff fed9 	bl	80048a8 <LL_ADC_IsEnabled>
 8004af6:	4603      	mov	r3, r0
 8004af8:	431c      	orrs	r4, r3
 8004afa:	481a      	ldr	r0, [pc, #104]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004afc:	f7ff fed4 	bl	80048a8 <LL_ADC_IsEnabled>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4323      	orrs	r3, r4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d012      	beq.n	8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b1a:	f023 030f 	bic.w	r3, r3, #15
 8004b1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b22:	e009      	b.n	8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b28:	f043 0220 	orr.w	r2, r3, #32
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004b36:	e000      	b.n	8004b3a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3784      	adds	r7, #132	@ 0x84
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd90      	pop	{r4, r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	50000100 	.word	0x50000100
 8004b54:	50000400 	.word	0x50000400
 8004b58:	50000500 	.word	0x50000500
 8004b5c:	50000300 	.word	0x50000300
 8004b60:	50000700 	.word	0x50000700
 8004b64:	50000600 	.word	0x50000600

08004b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b78:	4b0c      	ldr	r3, [pc, #48]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	60d3      	str	r3, [r2, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0307 	and.w	r3, r3, #7
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db0b      	blt.n	8004bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	4907      	ldr	r1, [pc, #28]	@ (8004c04 <__NVIC_EnableIRQ+0x38>)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2001      	movs	r0, #1
 8004bee:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000e100 	.word	0xe000e100

08004c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db0a      	blt.n	8004c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	490c      	ldr	r1, [pc, #48]	@ (8004c54 <__NVIC_SetPriority+0x4c>)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c30:	e00a      	b.n	8004c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4908      	ldr	r1, [pc, #32]	@ (8004c58 <__NVIC_SetPriority+0x50>)
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	440b      	add	r3, r1
 8004c46:	761a      	strb	r2, [r3, #24]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000e100 	.word	0xe000e100
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	@ 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f1c3 0307 	rsb	r3, r3, #7
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	bf28      	it	cs
 8004c7a:	2304      	movcs	r3, #4
 8004c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3304      	adds	r3, #4
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d902      	bls.n	8004c8c <NVIC_EncodePriority+0x30>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3b03      	subs	r3, #3
 8004c8a:	e000      	b.n	8004c8e <NVIC_EncodePriority+0x32>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	43d9      	mvns	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	4313      	orrs	r3, r2
         );
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3724      	adds	r7, #36	@ 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff ff4c 	bl	8004b68 <__NVIC_SetPriorityGrouping>
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce6:	f7ff ff63 	bl	8004bb0 <__NVIC_GetPriorityGrouping>
 8004cea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	6978      	ldr	r0, [r7, #20]
 8004cf2:	f7ff ffb3 	bl	8004c5c <NVIC_EncodePriority>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff ff82 	bl	8004c08 <__NVIC_SetPriority>
}
 8004d04:	bf00      	nop
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff ff56 	bl	8004bcc <__NVIC_EnableIRQ>
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e054      	b.n	8004de4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7f5b      	ldrb	r3, [r3, #29]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc f972 	bl	8001034 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	791b      	ldrb	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10c      	bne.n	8004d78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a22      	ldr	r2, [pc, #136]	@ (8004dec <HAL_CRC_Init+0xc4>)
 8004d64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0218 	bic.w	r2, r2, #24
 8004d74:	609a      	str	r2, [r3, #8]
 8004d76:	e00c      	b.n	8004d92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6899      	ldr	r1, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	461a      	mov	r2, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f834 	bl	8004df0 <HAL_CRCEx_Polynomial_Set>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e028      	b.n	8004de4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	795b      	ldrb	r3, [r3, #5]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004da2:	611a      	str	r2, [r3, #16]
 8004da4:	e004      	b.n	8004db0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6912      	ldr	r2, [r2, #16]
 8004dae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	04c11db7 	.word	0x04c11db7

08004df0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004e00:	231f      	movs	r3, #31
 8004e02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	75fb      	strb	r3, [r7, #23]
 8004e12:	e063      	b.n	8004edc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e14:	bf00      	nop
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1e5a      	subs	r2, r3, #1
 8004e1a:	613a      	str	r2, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d009      	beq.n	8004e34 <HAL_CRCEx_Polynomial_Set+0x44>
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b18      	cmp	r3, #24
 8004e38:	d846      	bhi.n	8004ec8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e40 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e40:	08004ecf 	.word	0x08004ecf
 8004e44:	08004ec9 	.word	0x08004ec9
 8004e48:	08004ec9 	.word	0x08004ec9
 8004e4c:	08004ec9 	.word	0x08004ec9
 8004e50:	08004ec9 	.word	0x08004ec9
 8004e54:	08004ec9 	.word	0x08004ec9
 8004e58:	08004ec9 	.word	0x08004ec9
 8004e5c:	08004ec9 	.word	0x08004ec9
 8004e60:	08004ebd 	.word	0x08004ebd
 8004e64:	08004ec9 	.word	0x08004ec9
 8004e68:	08004ec9 	.word	0x08004ec9
 8004e6c:	08004ec9 	.word	0x08004ec9
 8004e70:	08004ec9 	.word	0x08004ec9
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004ec9 	.word	0x08004ec9
 8004e7c:	08004ec9 	.word	0x08004ec9
 8004e80:	08004eb1 	.word	0x08004eb1
 8004e84:	08004ec9 	.word	0x08004ec9
 8004e88:	08004ec9 	.word	0x08004ec9
 8004e8c:	08004ec9 	.word	0x08004ec9
 8004e90:	08004ec9 	.word	0x08004ec9
 8004e94:	08004ec9 	.word	0x08004ec9
 8004e98:	08004ec9 	.word	0x08004ec9
 8004e9c:	08004ec9 	.word	0x08004ec9
 8004ea0:	08004ea5 	.word	0x08004ea5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d913      	bls.n	8004ed2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004eae:	e010      	b.n	8004ed2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b07      	cmp	r3, #7
 8004eb4:	d90f      	bls.n	8004ed6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004eba:	e00c      	b.n	8004ed6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b0f      	cmp	r3, #15
 8004ec0:	d90b      	bls.n	8004eda <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004ec6:	e008      	b.n	8004eda <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
        break;
 8004ecc:	e006      	b.n	8004edc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ece:	bf00      	nop
 8004ed0:	e004      	b.n	8004edc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ed2:	bf00      	nop
 8004ed4:	e002      	b.n	8004edc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e000      	b.n	8004edc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004eda:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10d      	bne.n	8004efe <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 0118 	bic.w	r1, r3, #24
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e08d      	b.n	800503a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b47      	ldr	r3, [pc, #284]	@ (8005044 <HAL_DMA_Init+0x138>)
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d80f      	bhi.n	8004f4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4b45      	ldr	r3, [pc, #276]	@ (8005048 <HAL_DMA_Init+0x13c>)
 8004f32:	4413      	add	r3, r2
 8004f34:	4a45      	ldr	r2, [pc, #276]	@ (800504c <HAL_DMA_Init+0x140>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	091b      	lsrs	r3, r3, #4
 8004f3c:	009a      	lsls	r2, r3, #2
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a42      	ldr	r2, [pc, #264]	@ (8005050 <HAL_DMA_Init+0x144>)
 8004f46:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f48:	e00e      	b.n	8004f68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4b40      	ldr	r3, [pc, #256]	@ (8005054 <HAL_DMA_Init+0x148>)
 8004f52:	4413      	add	r3, r2
 8004f54:	4a3d      	ldr	r2, [pc, #244]	@ (800504c <HAL_DMA_Init+0x140>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	009a      	lsls	r2, r3, #2
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a3c      	ldr	r2, [pc, #240]	@ (8005058 <HAL_DMA_Init+0x14c>)
 8004f66:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa2c 	bl	8005418 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fc8:	d102      	bne.n	8004fd0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fe4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d010      	beq.n	8005010 <HAL_DMA_Init+0x104>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d80c      	bhi.n	8005010 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa4c 	bl	8005494 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	e008      	b.n	8005022 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40020407 	.word	0x40020407
 8005048:	bffdfff8 	.word	0xbffdfff8
 800504c:	cccccccd 	.word	0xcccccccd
 8005050:	40020000 	.word	0x40020000
 8005054:	bffdfbf8 	.word	0xbffdfbf8
 8005058:	40020400 	.word	0x40020400

0800505c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_DMA_Start_IT+0x20>
 8005078:	2302      	movs	r3, #2
 800507a:	e066      	b.n	800514a <HAL_DMA_Start_IT+0xee>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d155      	bne.n	800513c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f970 	bl	800539a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d008      	beq.n	80050d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 020e 	orr.w	r2, r2, #14
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	e00f      	b.n	80050f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0204 	bic.w	r2, r2, #4
 80050e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 020a 	orr.w	r2, r2, #10
 80050f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800510c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005110:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005128:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e005      	b.n	8005148 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005144:	2302      	movs	r3, #2
 8005146:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005148:	7dfb      	ldrb	r3, [r7, #23]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d00d      	beq.n	8005186 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2204      	movs	r2, #4
 800516e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
 8005184:	e047      	b.n	8005216 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 020e 	bic.w	r2, r2, #14
 8005194:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	f003 021f 	and.w	r2, r3, #31
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	2101      	movs	r1, #1
 80051c4:	fa01 f202 	lsl.w	r2, r1, r2
 80051c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00c      	beq.n	80051f6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	4798      	blx	r3
    }
  }
  return status;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2204      	movs	r2, #4
 8005242:	409a      	lsls	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d026      	beq.n	800529a <HAL_DMA_IRQHandler+0x7a>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d021      	beq.n	800529a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d107      	bne.n	8005274 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0204 	bic.w	r2, r2, #4
 8005272:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005278:	f003 021f 	and.w	r2, r3, #31
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005280:	2104      	movs	r1, #4
 8005282:	fa01 f202 	lsl.w	r2, r1, r2
 8005286:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d071      	beq.n	8005374 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005298:	e06c      	b.n	8005374 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	2202      	movs	r2, #2
 80052a4:	409a      	lsls	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d02e      	beq.n	800530c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d029      	beq.n	800530c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 020a 	bic.w	r2, r2, #10
 80052d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e2:	f003 021f 	and.w	r2, r3, #31
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	2102      	movs	r1, #2
 80052ec:	fa01 f202 	lsl.w	r2, r1, r2
 80052f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d038      	beq.n	8005374 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800530a:	e033      	b.n	8005374 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2208      	movs	r2, #8
 8005316:	409a      	lsls	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4013      	ands	r3, r2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d02a      	beq.n	8005376 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d025      	beq.n	8005376 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 020e 	bic.w	r2, r2, #14
 8005338:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533e:	f003 021f 	and.w	r2, r3, #31
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	2101      	movs	r1, #1
 8005348:	fa01 f202 	lsl.w	r2, r1, r2
 800534c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005374:	bf00      	nop
 8005376:	bf00      	nop
}
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800538c:	b2db      	uxtb	r3, r3
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053b0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053c2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c8:	f003 021f 	and.w	r2, r3, #31
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	2101      	movs	r1, #1
 80053d2:	fa01 f202 	lsl.w	r2, r1, r2
 80053d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d108      	bne.n	80053fa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053f8:	e007      	b.n	800540a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	60da      	str	r2, [r3, #12]
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	4b16      	ldr	r3, [pc, #88]	@ (8005480 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d802      	bhi.n	8005432 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800542c:	4b15      	ldr	r3, [pc, #84]	@ (8005484 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e001      	b.n	8005436 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005432:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005434:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	3b08      	subs	r3, #8
 8005442:	4a12      	ldr	r2, [pc, #72]	@ (800548c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	009a      	lsls	r2, r3, #2
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a0b      	ldr	r2, [pc, #44]	@ (8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005462:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 031f 	and.w	r3, r3, #31
 800546a:	2201      	movs	r2, #1
 800546c:	409a      	lsls	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40020407 	.word	0x40020407
 8005484:	40020800 	.word	0x40020800
 8005488:	40020820 	.word	0x40020820
 800548c:	cccccccd 	.word	0xcccccccd
 8005490:	40020880 	.word	0x40020880

08005494 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	461a      	mov	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80054b6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2201      	movs	r2, #1
 80054c2:	409a      	lsls	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	1000823f 	.word	0x1000823f
 80054d8:	40020940 	.word	0x40020940

080054dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e147      	b.n	800577e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fb fe36 	bl	8001174 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0210 	bic.w	r2, r2, #16
 8005516:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005518:	f7fd fcde 	bl	8002ed8 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800551e:	e012      	b.n	8005546 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005520:	f7fd fcda 	bl	8002ed8 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b0a      	cmp	r3, #10
 800552c:	d90b      	bls.n	8005546 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2203      	movs	r2, #3
 800553e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e11b      	b.n	800577e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b08      	cmp	r3, #8
 8005552:	d0e5      	beq.n	8005520 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005564:	f7fd fcb8 	bl	8002ed8 <HAL_GetTick>
 8005568:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800556a:	e012      	b.n	8005592 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800556c:	f7fd fcb4 	bl	8002ed8 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b0a      	cmp	r3, #10
 8005578:	d90b      	bls.n	8005592 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800557e:	f043 0201 	orr.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2203      	movs	r2, #3
 800558a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0f5      	b.n	800577e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0e5      	beq.n	800556c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0202 	orr.w	r2, r2, #2
 80055ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a74      	ldr	r2, [pc, #464]	@ (8005788 <HAL_FDCAN_Init+0x2ac>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d103      	bne.n	80055c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80055ba:	4a74      	ldr	r2, [pc, #464]	@ (800578c <HAL_FDCAN_Init+0x2b0>)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	7c1b      	ldrb	r3, [r3, #16]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d108      	bne.n	80055dc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d8:	619a      	str	r2, [r3, #24]
 80055da:	e007      	b.n	80055ec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	7c5b      	ldrb	r3, [r3, #17]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d108      	bne.n	8005606 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005602:	619a      	str	r2, [r3, #24]
 8005604:	e007      	b.n	8005616 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699a      	ldr	r2, [r3, #24]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005614:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	7c9b      	ldrb	r3, [r3, #18]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d108      	bne.n	8005630 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699a      	ldr	r2, [r3, #24]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800562c:	619a      	str	r2, [r3, #24]
 800562e:	e007      	b.n	8005640 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800563e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005664:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0210 	bic.w	r2, r2, #16
 8005674:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d108      	bne.n	8005690 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0204 	orr.w	r2, r2, #4
 800568c:	619a      	str	r2, [r3, #24]
 800568e:	e02c      	b.n	80056ea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d028      	beq.n	80056ea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d01c      	beq.n	80056da <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056ae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0210 	orr.w	r2, r2, #16
 80056be:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d110      	bne.n	80056ea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0220 	orr.w	r2, r2, #32
 80056d6:	619a      	str	r2, [r3, #24]
 80056d8:	e007      	b.n	80056ea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0220 	orr.w	r2, r2, #32
 80056e8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056fa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005702:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	3b01      	subs	r3, #1
 800570c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005712:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005714:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800571e:	d115      	bne.n	800574c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005724:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	3b01      	subs	r3, #1
 800572c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800572e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	3b01      	subs	r3, #1
 8005736:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005738:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005740:	3b01      	subs	r3, #1
 8005742:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005748:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800574a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa1a 	bl	8005b9c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40006400 	.word	0x40006400
 800578c:	40006500 	.word	0x40006500

08005790 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d110      	bne.n	80057c6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0201 	bic.w	r2, r2, #1
 80057ba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e006      	b.n	80057d4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ca:	f043 0204 	orr.w	r2, r3, #4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
  }
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d12c      	bne.n	8005852 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d007      	beq.n	8005818 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800580c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e023      	b.n	8005860 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005820:	0c1b      	lsrs	r3, r3, #16
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fa20 	bl	8005c74 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2101      	movs	r1, #1
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	fa01 f202 	lsl.w	r2, r1, r2
 8005840:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005844:	2201      	movs	r2, #1
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	409a      	lsls	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e006      	b.n	8005860 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005856:	f043 0208 	orr.w	r2, r3, #8
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
  }
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08c      	sub	sp, #48	@ 0x30
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005876:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800587a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005884:	4013      	ands	r3, r2
 8005886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800589c:	4013      	ands	r3, r2
 800589e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b4:	4013      	ands	r3, r2
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058be:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80058c2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ca:	6a3a      	ldr	r2, [r7, #32]
 80058cc:	4013      	ands	r3, r2
 80058ce:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80058da:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ee:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2240      	movs	r2, #64	@ 0x40
 8005912:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f921 	bl	8005b5c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d019      	beq.n	8005958 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d014      	beq.n	8005958 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005936:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4013      	ands	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800594e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005950:	6939      	ldr	r1, [r7, #16]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f8e3 	bl	8005b1e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005964:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8a2 	bl	8005ab2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800597a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800597c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8a2 	bl	8005ac8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005990:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005992:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f8a2 	bl	8005ade <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f89b 	bl	8005af4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d018      	beq.n	80059fa <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d013      	beq.n	80059fa <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80059da:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4013      	ands	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2280      	movs	r2, #128	@ 0x80
 80059f0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f887 	bl	8005b08 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a16:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f88b 	bl	8005b34 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005a3a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f883 	bl	8005b48 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00f      	beq.n	8005a6c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005a7a:	69f9      	ldr	r1, [r7, #28]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f881 	bl	8005b84 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d009      	beq.n	8005a9c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f863 	bl	8005b70 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3730      	adds	r7, #48	@ 0x30
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005ba4:	4b30      	ldr	r3, [pc, #192]	@ (8005c68 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005ba6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a2f      	ldr	r2, [pc, #188]	@ (8005c6c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d103      	bne.n	8005bba <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005bb8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005c70 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d103      	bne.n	8005bcc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005bca:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bda:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be2:	041a      	lsls	r2, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c00:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c08:	061a      	lsls	r2, r3, #24
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e005      	b.n	8005c4e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d3f3      	bcc.n	8005c42 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	4000a400 	.word	0x4000a400
 8005c6c:	40006800 	.word	0x40006800
 8005c70:	40006c00 	.word	0x40006c00

08005c74 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b089      	sub	sp, #36	@ 0x24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005c92:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	e00a      	b.n	8005cb6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005ca8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005cae:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cb4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005cc0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005cc6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005ccc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	440b      	add	r3, r1
 8005ce8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	e020      	b.n	8005d4a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	3303      	adds	r3, #3
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	3302      	adds	r3, #2
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	440b      	add	r3, r1
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d20:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	3301      	adds	r3, #1
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	440b      	add	r3, r1
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005d2e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	440a      	add	r2, r1
 8005d36:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005d38:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	3304      	adds	r3, #4
 8005d42:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	3304      	adds	r3, #4
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	4a06      	ldr	r2, [pc, #24]	@ (8005d68 <FDCAN_CopyMessageToRAM+0xf4>)
 8005d50:	5cd3      	ldrb	r3, [r2, r3]
 8005d52:	461a      	mov	r2, r3
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d3d6      	bcc.n	8005d08 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	3724      	adds	r7, #36	@ 0x24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	0800cbc0 	.word	0x0800cbc0

08005d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d7a:	e15a      	b.n	8006032 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	2101      	movs	r1, #1
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	fa01 f303 	lsl.w	r3, r1, r3
 8005d88:	4013      	ands	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 814c 	beq.w	800602c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d005      	beq.n	8005dac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d130      	bne.n	8005e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	2203      	movs	r2, #3
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005de2:	2201      	movs	r2, #1
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43db      	mvns	r3, r3
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4013      	ands	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	f003 0201 	and.w	r2, r3, #1
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d017      	beq.n	8005e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	2203      	movs	r2, #3
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	43db      	mvns	r3, r3
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d123      	bne.n	8005e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	08da      	lsrs	r2, r3, #3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3208      	adds	r2, #8
 8005e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	220f      	movs	r2, #15
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	43db      	mvns	r3, r3
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4013      	ands	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	08da      	lsrs	r2, r3, #3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3208      	adds	r2, #8
 8005e98:	6939      	ldr	r1, [r7, #16]
 8005e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f003 0203 	and.w	r2, r3, #3
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80a6 	beq.w	800602c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8006050 <HAL_GPIO_Init+0x2e4>)
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee4:	4a5a      	ldr	r2, [pc, #360]	@ (8006050 <HAL_GPIO_Init+0x2e4>)
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	6613      	str	r3, [r2, #96]	@ 0x60
 8005eec:	4b58      	ldr	r3, [pc, #352]	@ (8006050 <HAL_GPIO_Init+0x2e4>)
 8005eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ef8:	4a56      	ldr	r2, [pc, #344]	@ (8006054 <HAL_GPIO_Init+0x2e8>)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	089b      	lsrs	r3, r3, #2
 8005efe:	3302      	adds	r3, #2
 8005f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	220f      	movs	r2, #15
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	43db      	mvns	r3, r3
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f22:	d01f      	beq.n	8005f64 <HAL_GPIO_Init+0x1f8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a4c      	ldr	r2, [pc, #304]	@ (8006058 <HAL_GPIO_Init+0x2ec>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d019      	beq.n	8005f60 <HAL_GPIO_Init+0x1f4>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a4b      	ldr	r2, [pc, #300]	@ (800605c <HAL_GPIO_Init+0x2f0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <HAL_GPIO_Init+0x1f0>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a4a      	ldr	r2, [pc, #296]	@ (8006060 <HAL_GPIO_Init+0x2f4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00d      	beq.n	8005f58 <HAL_GPIO_Init+0x1ec>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a49      	ldr	r2, [pc, #292]	@ (8006064 <HAL_GPIO_Init+0x2f8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d007      	beq.n	8005f54 <HAL_GPIO_Init+0x1e8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a48      	ldr	r2, [pc, #288]	@ (8006068 <HAL_GPIO_Init+0x2fc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d101      	bne.n	8005f50 <HAL_GPIO_Init+0x1e4>
 8005f4c:	2305      	movs	r3, #5
 8005f4e:	e00a      	b.n	8005f66 <HAL_GPIO_Init+0x1fa>
 8005f50:	2306      	movs	r3, #6
 8005f52:	e008      	b.n	8005f66 <HAL_GPIO_Init+0x1fa>
 8005f54:	2304      	movs	r3, #4
 8005f56:	e006      	b.n	8005f66 <HAL_GPIO_Init+0x1fa>
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e004      	b.n	8005f66 <HAL_GPIO_Init+0x1fa>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e002      	b.n	8005f66 <HAL_GPIO_Init+0x1fa>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <HAL_GPIO_Init+0x1fa>
 8005f64:	2300      	movs	r3, #0
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	f002 0203 	and.w	r2, r2, #3
 8005f6c:	0092      	lsls	r2, r2, #2
 8005f6e:	4093      	lsls	r3, r2
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f76:	4937      	ldr	r1, [pc, #220]	@ (8006054 <HAL_GPIO_Init+0x2e8>)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	089b      	lsrs	r3, r3, #2
 8005f7c:	3302      	adds	r3, #2
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f84:	4b39      	ldr	r3, [pc, #228]	@ (800606c <HAL_GPIO_Init+0x300>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4013      	ands	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fa8:	4a30      	ldr	r2, [pc, #192]	@ (800606c <HAL_GPIO_Init+0x300>)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fae:	4b2f      	ldr	r3, [pc, #188]	@ (800606c <HAL_GPIO_Init+0x300>)
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fd2:	4a26      	ldr	r2, [pc, #152]	@ (800606c <HAL_GPIO_Init+0x300>)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005fd8:	4b24      	ldr	r3, [pc, #144]	@ (800606c <HAL_GPIO_Init+0x300>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800606c <HAL_GPIO_Init+0x300>)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006002:	4b1a      	ldr	r3, [pc, #104]	@ (800606c <HAL_GPIO_Init+0x300>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	43db      	mvns	r3, r3
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006026:	4a11      	ldr	r2, [pc, #68]	@ (800606c <HAL_GPIO_Init+0x300>)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	f47f ae9d 	bne.w	8005d7c <HAL_GPIO_Init+0x10>
  }
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	40021000 	.word	0x40021000
 8006054:	40010000 	.word	0x40010000
 8006058:	48000400 	.word	0x48000400
 800605c:	48000800 	.word	0x48000800
 8006060:	48000c00 	.word	0x48000c00
 8006064:	48001000 	.word	0x48001000
 8006068:	48001400 	.word	0x48001400
 800606c:	40010400 	.word	0x40010400

08006070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	807b      	strh	r3, [r7, #2]
 800607c:	4613      	mov	r3, r2
 800607e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006080:	787b      	ldrb	r3, [r7, #1]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006086:	887a      	ldrh	r2, [r7, #2]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800608c:	e002      	b.n	8006094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800608e:	887a      	ldrh	r2, [r7, #2]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060b2:	887a      	ldrh	r2, [r7, #2]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4013      	ands	r3, r2
 80060b8:	041a      	lsls	r2, r3, #16
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	43d9      	mvns	r1, r3
 80060be:	887b      	ldrh	r3, [r7, #2]
 80060c0:	400b      	ands	r3, r1
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	619a      	str	r2, [r3, #24]
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e08d      	b.n	8006202 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb f9f0 	bl	80014e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2224      	movs	r2, #36	@ 0x24
 8006104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006124:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006134:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d107      	bne.n	800614e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800614a:	609a      	str	r2, [r3, #8]
 800614c:	e006      	b.n	800615c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800615a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d108      	bne.n	8006176 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006172:	605a      	str	r2, [r3, #4]
 8006174:	e007      	b.n	8006186 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006184:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006198:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69d9      	ldr	r1, [r3, #28]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1a      	ldr	r2, [r3, #32]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	461a      	mov	r2, r3
 8006218:	460b      	mov	r3, r1
 800621a:	817b      	strh	r3, [r7, #10]
 800621c:	4613      	mov	r3, r2
 800621e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b20      	cmp	r3, #32
 800622a:	f040 80fd 	bne.w	8006428 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_I2C_Master_Transmit+0x30>
 8006238:	2302      	movs	r3, #2
 800623a:	e0f6      	b.n	800642a <HAL_I2C_Master_Transmit+0x21e>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006244:	f7fc fe48 	bl	8002ed8 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	2319      	movs	r3, #25
 8006250:	2201      	movs	r2, #1
 8006252:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fe8f 	bl	8006f7a <I2C_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e0e1      	b.n	800642a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2221      	movs	r2, #33	@ 0x21
 800626a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2210      	movs	r2, #16
 8006272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	893a      	ldrh	r2, [r7, #8]
 8006286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006292:	b29b      	uxth	r3, r3
 8006294:	2bff      	cmp	r3, #255	@ 0xff
 8006296:	d906      	bls.n	80062a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	22ff      	movs	r2, #255	@ 0xff
 800629c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800629e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	e007      	b.n	80062b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80062b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d024      	beq.n	8006308 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	781a      	ldrb	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	3301      	adds	r3, #1
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	8979      	ldrh	r1, [r7, #10]
 80062fa:	4b4e      	ldr	r3, [pc, #312]	@ (8006434 <HAL_I2C_Master_Transmit+0x228>)
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fffd 	bl	8007300 <I2C_TransferConfig>
 8006306:	e066      	b.n	80063d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630c:	b2da      	uxtb	r2, r3
 800630e:	8979      	ldrh	r1, [r7, #10]
 8006310:	4b48      	ldr	r3, [pc, #288]	@ (8006434 <HAL_I2C_Master_Transmit+0x228>)
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fff2 	bl	8007300 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800631c:	e05b      	b.n	80063d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	6a39      	ldr	r1, [r7, #32]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fe82 	bl	800702c <I2C_WaitOnTXISFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e07b      	b.n	800642a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d034      	beq.n	80063d6 <HAL_I2C_Master_Transmit+0x1ca>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d130      	bne.n	80063d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	2200      	movs	r2, #0
 800637c:	2180      	movs	r1, #128	@ 0x80
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 fdfb 	bl	8006f7a <I2C_WaitOnFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e04d      	b.n	800642a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006392:	b29b      	uxth	r3, r3
 8006394:	2bff      	cmp	r3, #255	@ 0xff
 8006396:	d90e      	bls.n	80063b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	22ff      	movs	r2, #255	@ 0xff
 800639c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	8979      	ldrh	r1, [r7, #10]
 80063a6:	2300      	movs	r3, #0
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 ffa6 	bl	8007300 <I2C_TransferConfig>
 80063b4:	e00f      	b.n	80063d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	8979      	ldrh	r1, [r7, #10]
 80063c8:	2300      	movs	r3, #0
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 ff95 	bl	8007300 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d19e      	bne.n	800631e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	6a39      	ldr	r1, [r7, #32]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fe68 	bl	80070ba <I2C_WaitOnSTOPFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e01a      	b.n	800642a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2220      	movs	r2, #32
 80063fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <HAL_I2C_Master_Transmit+0x22c>)
 8006408:	400b      	ands	r3, r1
 800640a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	e000      	b.n	800642a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006428:	2302      	movs	r3, #2
  }
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	80002000 	.word	0x80002000
 8006438:	fe00e800 	.word	0xfe00e800

0800643c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	68f9      	ldr	r1, [r7, #12]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	4798      	blx	r3
  }
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00f      	beq.n	80064b2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a0:	f043 0201 	orr.w	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00f      	beq.n	80064dc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ca:	f043 0208 	orr.w	r2, r3, #8
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00f      	beq.n	8006506 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f4:	f043 0202 	orr.w	r2, r3, #2
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006504:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 030b 	and.w	r3, r3, #11
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fbd5 	bl	8006cc8 <I2C_ITError>
  }
}
 800651e:	bf00      	nop
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	70fb      	strb	r3, [r7, #3]
 800655a:	4613      	mov	r3, r2
 800655c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b086      	sub	sp, #24
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <I2C_Slave_ISR_IT+0x24>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e0e2      	b.n	8006790 <I2C_Slave_ISR_IT+0x1ea>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d009      	beq.n	80065f0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80065e6:	6939      	ldr	r1, [r7, #16]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f9b5 	bl	8006958 <I2C_ITSlaveCplt>
 80065ee:	e0ca      	b.n	8006786 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d04b      	beq.n	8006692 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006600:	2b00      	cmp	r3, #0
 8006602:	d046      	beq.n	8006692 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d128      	bne.n	8006660 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b28      	cmp	r3, #40	@ 0x28
 8006618:	d108      	bne.n	800662c <I2C_Slave_ISR_IT+0x86>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006620:	d104      	bne.n	800662c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006622:	6939      	ldr	r1, [r7, #16]
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fafb 	bl	8006c20 <I2C_ITListenCplt>
 800662a:	e031      	b.n	8006690 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b29      	cmp	r3, #41	@ 0x29
 8006636:	d10e      	bne.n	8006656 <I2C_Slave_ISR_IT+0xb0>
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800663e:	d00a      	beq.n	8006656 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2210      	movs	r2, #16
 8006646:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fc54 	bl	8006ef6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f926 	bl	80068a0 <I2C_ITSlaveSeqCplt>
 8006654:	e01c      	b.n	8006690 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2210      	movs	r2, #16
 800665c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800665e:	e08f      	b.n	8006780 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2210      	movs	r2, #16
 8006666:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800666c:	f043 0204 	orr.w	r2, r3, #4
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <I2C_Slave_ISR_IT+0xdc>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006680:	d17e      	bne.n	8006780 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006686:	4619      	mov	r1, r3
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fb1d 	bl	8006cc8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800668e:	e077      	b.n	8006780 <I2C_Slave_ISR_IT+0x1da>
 8006690:	e076      	b.n	8006780 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d02f      	beq.n	80066fc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d02a      	beq.n	80066fc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d018      	beq.n	80066e2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d14b      	bne.n	8006784 <I2C_Slave_ISR_IT+0x1de>
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066f2:	d047      	beq.n	8006784 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f8d3 	bl	80068a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80066fa:	e043      	b.n	8006784 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d009      	beq.n	800671a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006710:	6939      	ldr	r1, [r7, #16]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 f840 	bl	8006798 <I2C_ITAddrCplt>
 8006718:	e035      	b.n	8006786 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d030      	beq.n	8006786 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800672a:	2b00      	cmp	r3, #0
 800672c:	d02b      	beq.n	8006786 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d018      	beq.n	800676a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006768:	e00d      	b.n	8006786 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006770:	d002      	beq.n	8006778 <I2C_Slave_ISR_IT+0x1d2>
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f891 	bl	80068a0 <I2C_ITSlaveSeqCplt>
 800677e:	e002      	b.n	8006786 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006784:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067ae:	2b28      	cmp	r3, #40	@ 0x28
 80067b0:	d16a      	bne.n	8006888 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80067d0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067de:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80067ec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d138      	bne.n	8006868 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80067f6:	897b      	ldrh	r3, [r7, #10]
 80067f8:	09db      	lsrs	r3, r3, #7
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	89bb      	ldrh	r3, [r7, #12]
 80067fe:	4053      	eors	r3, r2
 8006800:	b29b      	uxth	r3, r3
 8006802:	f003 0306 	and.w	r3, r3, #6
 8006806:	2b00      	cmp	r3, #0
 8006808:	d11c      	bne.n	8006844 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800680a:	897b      	ldrh	r3, [r7, #10]
 800680c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800681c:	2b02      	cmp	r3, #2
 800681e:	d13b      	bne.n	8006898 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2208      	movs	r2, #8
 800682c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006836:	89ba      	ldrh	r2, [r7, #12]
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fe86 	bl	800654e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006842:	e029      	b.n	8006898 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006844:	893b      	ldrh	r3, [r7, #8]
 8006846:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006848:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fd89 	bl	8007364 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800685a:	89ba      	ldrh	r2, [r7, #12]
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff fe74 	bl	800654e <HAL_I2C_AddrCallback>
}
 8006866:	e017      	b.n	8006898 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006868:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fd79 	bl	8007364 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800687a:	89ba      	ldrh	r2, [r7, #12]
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff fe64 	bl	800654e <HAL_I2C_AddrCallback>
}
 8006886:	e007      	b.n	8006898 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2208      	movs	r2, #8
 800688e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e00c      	b.n	80068ee <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b29      	cmp	r3, #41	@ 0x29
 80068f8:	d112      	bne.n	8006920 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2228      	movs	r2, #40	@ 0x28
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2221      	movs	r2, #33	@ 0x21
 8006906:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006908:	2101      	movs	r1, #1
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fd2a 	bl	8007364 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff fe04 	bl	8006526 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800691e:	e017      	b.n	8006950 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b2a      	cmp	r3, #42	@ 0x2a
 800692a:	d111      	bne.n	8006950 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2228      	movs	r2, #40	@ 0x28
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2222      	movs	r2, #34	@ 0x22
 8006938:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800693a:	2102      	movs	r1, #2
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fd11 	bl	8007364 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fdf5 	bl	800653a <HAL_I2C_SlaveRxCpltCallback>
}
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800697a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2220      	movs	r2, #32
 8006982:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	2b21      	cmp	r3, #33	@ 0x21
 8006988:	d002      	beq.n	8006990 <I2C_ITSlaveCplt+0x38>
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	2b29      	cmp	r3, #41	@ 0x29
 800698e:	d108      	bne.n	80069a2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006990:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fce5 	bl	8007364 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2221      	movs	r2, #33	@ 0x21
 800699e:	631a      	str	r2, [r3, #48]	@ 0x30
 80069a0:	e019      	b.n	80069d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069a2:	7afb      	ldrb	r3, [r7, #11]
 80069a4:	2b22      	cmp	r3, #34	@ 0x22
 80069a6:	d002      	beq.n	80069ae <I2C_ITSlaveCplt+0x56>
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80069ac:	d108      	bne.n	80069c0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80069ae:	f248 0102 	movw	r1, #32770	@ 0x8002
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fcd6 	bl	8007364 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2222      	movs	r2, #34	@ 0x22
 80069bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80069be:	e00a      	b.n	80069d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80069c0:	7afb      	ldrb	r3, [r7, #11]
 80069c2:	2b28      	cmp	r3, #40	@ 0x28
 80069c4:	d107      	bne.n	80069d6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80069c6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fcca 	bl	8007364 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069e4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6859      	ldr	r1, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4b89      	ldr	r3, [pc, #548]	@ (8006c18 <I2C_ITSlaveCplt+0x2c0>)
 80069f2:	400b      	ands	r3, r1
 80069f4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa7d 	bl	8006ef6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d013      	beq.n	8006a2e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01f      	beq.n	8006a5e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a2c:	e017      	b.n	8006a5e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d012      	beq.n	8006a5e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a46:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d006      	beq.n	8006a5e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d020      	beq.n	8006aaa <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0304 	bic.w	r3, r3, #4
 8006a6e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00c      	beq.n	8006aaa <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab8:	f043 0204 	orr.w	r2, r3, #4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d049      	beq.n	8006b5e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d044      	beq.n	8006b5e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d128      	bne.n	8006b30 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b28      	cmp	r3, #40	@ 0x28
 8006ae8:	d108      	bne.n	8006afc <I2C_ITSlaveCplt+0x1a4>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006af0:	d104      	bne.n	8006afc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f893 	bl	8006c20 <I2C_ITListenCplt>
 8006afa:	e030      	b.n	8006b5e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b29      	cmp	r3, #41	@ 0x29
 8006b06:	d10e      	bne.n	8006b26 <I2C_ITSlaveCplt+0x1ce>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b0e:	d00a      	beq.n	8006b26 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2210      	movs	r2, #16
 8006b16:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f9ec 	bl	8006ef6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff febe 	bl	80068a0 <I2C_ITSlaveSeqCplt>
 8006b24:	e01b      	b.n	8006b5e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	61da      	str	r2, [r3, #28]
 8006b2e:	e016      	b.n	8006b5e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2210      	movs	r2, #16
 8006b36:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3c:	f043 0204 	orr.w	r2, r3, #4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <I2C_ITSlaveCplt+0x1fa>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b50:	d105      	bne.n	8006b5e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f8b5 	bl	8006cc8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d010      	beq.n	8006b96 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8a4 	bl	8006cc8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b28      	cmp	r3, #40	@ 0x28
 8006b8a:	d141      	bne.n	8006c10 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b8c:	6979      	ldr	r1, [r7, #20]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f846 	bl	8006c20 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b94:	e03c      	b.n	8006c10 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b9e:	d014      	beq.n	8006bca <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fe7d 	bl	80068a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c1c <I2C_ITSlaveCplt+0x2c4>)
 8006baa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fcd1 	bl	800656a <HAL_I2C_ListenCpltCallback>
}
 8006bc8:	e022      	b.n	8006c10 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b22      	cmp	r3, #34	@ 0x22
 8006bd4:	d10e      	bne.n	8006bf4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff fca4 	bl	800653a <HAL_I2C_SlaveRxCpltCallback>
}
 8006bf2:	e00d      	b.n	8006c10 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff fc8b 	bl	8006526 <HAL_I2C_SlaveTxCpltCallback>
}
 8006c10:	bf00      	nop
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	fe00e800 	.word	0xfe00e800
 8006c1c:	ffff0000 	.word	0xffff0000

08006c20 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a25      	ldr	r2, [pc, #148]	@ (8006cc4 <I2C_ITListenCplt+0xa4>)
 8006c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d022      	beq.n	8006c9c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d012      	beq.n	8006c9c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c94:	f043 0204 	orr.w	r2, r3, #4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c9c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fb5f 	bl	8007364 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2210      	movs	r2, #16
 8006cac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fc57 	bl	800656a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	ffff0000 	.word	0xffff0000

08006cc8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cd8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a6d      	ldr	r2, [pc, #436]	@ (8006e9c <I2C_ITError+0x1d4>)
 8006ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2b28      	cmp	r3, #40	@ 0x28
 8006cfe:	d005      	beq.n	8006d0c <I2C_ITError+0x44>
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	2b29      	cmp	r3, #41	@ 0x29
 8006d04:	d002      	beq.n	8006d0c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d0a:	d10b      	bne.n	8006d24 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006d0c:	2103      	movs	r1, #3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fb28 	bl	8007364 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2228      	movs	r2, #40	@ 0x28
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a60      	ldr	r2, [pc, #384]	@ (8006ea0 <I2C_ITError+0x1d8>)
 8006d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d22:	e030      	b.n	8006d86 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006d24:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fb1b 	bl	8007364 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f8e1 	bl	8006ef6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b60      	cmp	r3, #96	@ 0x60
 8006d3e:	d01f      	beq.n	8006d80 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d114      	bne.n	8006d80 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d109      	bne.n	8006d78 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2210      	movs	r2, #16
 8006d6a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d70:	f043 0204 	orr.w	r2, r3, #4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d039      	beq.n	8006e08 <I2C_ITError+0x140>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b11      	cmp	r3, #17
 8006d98:	d002      	beq.n	8006da0 <I2C_ITError+0xd8>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b21      	cmp	r3, #33	@ 0x21
 8006d9e:	d133      	bne.n	8006e08 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dae:	d107      	bne.n	8006dc0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006dbe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe fada 	bl	800537e <HAL_DMA_GetState>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d017      	beq.n	8006e00 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	4a33      	ldr	r2, [pc, #204]	@ (8006ea4 <I2C_ITError+0x1dc>)
 8006dd6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe f9b4 	bl	8005152 <HAL_DMA_Abort_IT>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d04d      	beq.n	8006e8c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006dfe:	e045      	b.n	8006e8c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f851 	bl	8006ea8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e06:	e041      	b.n	8006e8c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d039      	beq.n	8006e84 <I2C_ITError+0x1bc>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b12      	cmp	r3, #18
 8006e14:	d002      	beq.n	8006e1c <I2C_ITError+0x154>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b22      	cmp	r3, #34	@ 0x22
 8006e1a:	d133      	bne.n	8006e84 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e2a:	d107      	bne.n	8006e3c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe fa9c 	bl	800537e <HAL_DMA_GetState>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d017      	beq.n	8006e7c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e50:	4a14      	ldr	r2, [pc, #80]	@ (8006ea4 <I2C_ITError+0x1dc>)
 8006e52:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fe f976 	bl	8005152 <HAL_DMA_Abort_IT>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d011      	beq.n	8006e90 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e76:	4610      	mov	r0, r2
 8006e78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e7a:	e009      	b.n	8006e90 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f813 	bl	8006ea8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e82:	e005      	b.n	8006e90 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f80f 	bl	8006ea8 <I2C_TreatErrorCallback>
  }
}
 8006e8a:	e002      	b.n	8006e92 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e8c:	bf00      	nop
 8006e8e:	e000      	b.n	8006e92 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e90:	bf00      	nop
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	ffff0000 	.word	0xffff0000
 8006ea0:	080065a7 	.word	0x080065a7
 8006ea4:	08006f3f 	.word	0x08006f3f

08006ea8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b60      	cmp	r3, #96	@ 0x60
 8006eba:	d10e      	bne.n	8006eda <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff fb5d 	bl	8006592 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ed8:	e009      	b.n	8006eee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7ff fb48 	bl	800657e <HAL_I2C_ErrorCallback>
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d103      	bne.n	8006f14 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2200      	movs	r2, #0
 8006f12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d007      	beq.n	8006f32 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	699a      	ldr	r2, [r3, #24]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	619a      	str	r2, [r3, #24]
  }
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f58:	2200      	movs	r2, #0
 8006f5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f68:	2200      	movs	r2, #0
 8006f6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff ff9b 	bl	8006ea8 <I2C_TreatErrorCallback>
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	603b      	str	r3, [r7, #0]
 8006f86:	4613      	mov	r3, r2
 8006f88:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f8a:	e03b      	b.n	8007004 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f8d5 	bl	8007140 <I2C_IsErrorOccurred>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e041      	b.n	8007024 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d02d      	beq.n	8007004 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa8:	f7fb ff96 	bl	8002ed8 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d302      	bcc.n	8006fbe <I2C_WaitOnFlagUntilTimeout+0x44>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d122      	bne.n	8007004 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699a      	ldr	r2, [r3, #24]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	bf0c      	ite	eq
 8006fce:	2301      	moveq	r3, #1
 8006fd0:	2300      	movne	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d113      	bne.n	8007004 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe0:	f043 0220 	orr.w	r2, r3, #32
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e00f      	b.n	8007024 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4013      	ands	r3, r2
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	461a      	mov	r2, r3
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	429a      	cmp	r2, r3
 8007020:	d0b4      	beq.n	8006f8c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007038:	e033      	b.n	80070a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f87e 	bl	8007140 <I2C_IsErrorOccurred>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e031      	b.n	80070b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007054:	d025      	beq.n	80070a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007056:	f7fb ff3f 	bl	8002ed8 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	d302      	bcc.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d11a      	bne.n	80070a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d013      	beq.n	80070a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707e:	f043 0220 	orr.w	r2, r3, #32
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e007      	b.n	80070b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d1c4      	bne.n	800703a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070c6:	e02f      	b.n	8007128 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f837 	bl	8007140 <I2C_IsErrorOccurred>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e02d      	b.n	8007138 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070dc:	f7fb fefc 	bl	8002ed8 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d302      	bcc.n	80070f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d11a      	bne.n	8007128 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d013      	beq.n	8007128 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007104:	f043 0220 	orr.w	r2, r3, #32
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e007      	b.n	8007138 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b20      	cmp	r3, #32
 8007134:	d1c8      	bne.n	80070c8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	@ 0x28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	f003 0310 	and.w	r3, r3, #16
 8007168:	2b00      	cmp	r3, #0
 800716a:	d068      	beq.n	800723e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2210      	movs	r2, #16
 8007172:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007174:	e049      	b.n	800720a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717c:	d045      	beq.n	800720a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800717e:	f7fb feab 	bl	8002ed8 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	429a      	cmp	r2, r3
 800718c:	d302      	bcc.n	8007194 <I2C_IsErrorOccurred+0x54>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d13a      	bne.n	800720a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800719e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071b6:	d121      	bne.n	80071fc <I2C_IsErrorOccurred+0xbc>
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071be:	d01d      	beq.n	80071fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80071c0:	7cfb      	ldrb	r3, [r7, #19]
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d01a      	beq.n	80071fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80071d6:	f7fb fe7f 	bl	8002ed8 <HAL_GetTick>
 80071da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071dc:	e00e      	b.n	80071fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80071de:	f7fb fe7b 	bl	8002ed8 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	2b19      	cmp	r3, #25
 80071ea:	d907      	bls.n	80071fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	f043 0320 	orr.w	r3, r3, #32
 80071f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80071fa:	e006      	b.n	800720a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b20      	cmp	r3, #32
 8007208:	d1e9      	bne.n	80071de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b20      	cmp	r3, #32
 8007216:	d003      	beq.n	8007220 <I2C_IsErrorOccurred+0xe0>
 8007218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0aa      	beq.n	8007176 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007224:	2b00      	cmp	r3, #0
 8007226:	d103      	bne.n	8007230 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2220      	movs	r2, #32
 800722e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	f043 0304 	orr.w	r3, r3, #4
 8007236:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007260:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	f043 0308 	orr.w	r3, r3, #8
 8007278:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007282:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	f043 0302 	orr.w	r3, r3, #2
 800729a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80072ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01c      	beq.n	80072ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff fe1e 	bl	8006ef6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6859      	ldr	r1, [r3, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b0d      	ldr	r3, [pc, #52]	@ (80072fc <I2C_IsErrorOccurred+0x1bc>)
 80072c6:	400b      	ands	r3, r1
 80072c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2220      	movs	r2, #32
 80072da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80072ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3728      	adds	r7, #40	@ 0x28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	fe00e800 	.word	0xfe00e800

08007300 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	817b      	strh	r3, [r7, #10]
 800730e:	4613      	mov	r3, r2
 8007310:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007312:	897b      	ldrh	r3, [r7, #10]
 8007314:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007318:	7a7b      	ldrb	r3, [r7, #9]
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007320:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	4313      	orrs	r3, r2
 800732a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800732e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	0d5b      	lsrs	r3, r3, #21
 800733a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <I2C_TransferConfig+0x60>)
 8007340:	430b      	orrs	r3, r1
 8007342:	43db      	mvns	r3, r3
 8007344:	ea02 0103 	and.w	r1, r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	03ff63ff 	.word	0x03ff63ff

08007364 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007374:	887b      	ldrh	r3, [r7, #2]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00f      	beq.n	800739e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007384:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800738c:	b2db      	uxtb	r3, r3
 800738e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007392:	2b28      	cmp	r3, #40	@ 0x28
 8007394:	d003      	beq.n	800739e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800739c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800739e:	887b      	ldrh	r3, [r7, #2]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00f      	beq.n	80073c8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80073ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80073bc:	2b28      	cmp	r3, #40	@ 0x28
 80073be:	d003      	beq.n	80073c8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80073c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80073c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da03      	bge.n	80073d8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80073d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80073d8:	887b      	ldrh	r3, [r7, #2]
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d103      	bne.n	80073e6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80073e6:	887b      	ldrh	r3, [r7, #2]
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d103      	bne.n	80073f4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f043 0320 	orr.w	r3, r3, #32
 80073f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80073f4:	887b      	ldrh	r3, [r7, #2]
 80073f6:	2b40      	cmp	r3, #64	@ 0x40
 80073f8:	d103      	bne.n	8007402 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007400:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6819      	ldr	r1, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	43da      	mvns	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	400a      	ands	r2, r1
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b20      	cmp	r3, #32
 8007434:	d138      	bne.n	80074a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007440:	2302      	movs	r3, #2
 8007442:	e032      	b.n	80074aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2224      	movs	r2, #36	@ 0x24
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007472:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6819      	ldr	r1, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	e000      	b.n	80074aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
  }
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d139      	bne.n	8007540 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e033      	b.n	8007542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2224      	movs	r2, #36	@ 0x24
 80074e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0201 	bic.w	r2, r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007508:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0201 	orr.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e000      	b.n	8007542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d141      	bne.n	80075e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800755e:	4b4b      	ldr	r3, [pc, #300]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800756a:	d131      	bne.n	80075d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800756c:	4b47      	ldr	r3, [pc, #284]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800756e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007572:	4a46      	ldr	r2, [pc, #280]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007578:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800757c:	4b43      	ldr	r3, [pc, #268]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007584:	4a41      	ldr	r2, [pc, #260]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800758a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800758c:	4b40      	ldr	r3, [pc, #256]	@ (8007690 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2232      	movs	r2, #50	@ 0x32
 8007592:	fb02 f303 	mul.w	r3, r2, r3
 8007596:	4a3f      	ldr	r2, [pc, #252]	@ (8007694 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007598:	fba2 2303 	umull	r2, r3, r2, r3
 800759c:	0c9b      	lsrs	r3, r3, #18
 800759e:	3301      	adds	r3, #1
 80075a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075a2:	e002      	b.n	80075aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075aa:	4b38      	ldr	r3, [pc, #224]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b6:	d102      	bne.n	80075be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f2      	bne.n	80075a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075be:	4b33      	ldr	r3, [pc, #204]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ca:	d158      	bne.n	800767e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e057      	b.n	8007680 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075d0:	4b2e      	ldr	r3, [pc, #184]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d6:	4a2d      	ldr	r2, [pc, #180]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80075e0:	e04d      	b.n	800767e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075e8:	d141      	bne.n	800766e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80075ea:	4b28      	ldr	r3, [pc, #160]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f6:	d131      	bne.n	800765c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075f8:	4b24      	ldr	r3, [pc, #144]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075fe:	4a23      	ldr	r2, [pc, #140]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007604:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007608:	4b20      	ldr	r3, [pc, #128]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007610:	4a1e      	ldr	r2, [pc, #120]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007616:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007618:	4b1d      	ldr	r3, [pc, #116]	@ (8007690 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2232      	movs	r2, #50	@ 0x32
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	4a1c      	ldr	r2, [pc, #112]	@ (8007694 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	0c9b      	lsrs	r3, r3, #18
 800762a:	3301      	adds	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800762e:	e002      	b.n	8007636 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3b01      	subs	r3, #1
 8007634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007636:	4b15      	ldr	r3, [pc, #84]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800763e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007642:	d102      	bne.n	800764a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f2      	bne.n	8007630 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800764a:	4b10      	ldr	r3, [pc, #64]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007656:	d112      	bne.n	800767e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e011      	b.n	8007680 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800765c:	4b0b      	ldr	r3, [pc, #44]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800765e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007662:	4a0a      	ldr	r2, [pc, #40]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007668:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800766c:	e007      	b.n	800767e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800766e:	4b07      	ldr	r3, [pc, #28]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007676:	4a05      	ldr	r2, [pc, #20]	@ (800768c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007678:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800767c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	40007000 	.word	0x40007000
 8007690:	20000000 	.word	0x20000000
 8007694:	431bde83 	.word	0x431bde83

08007698 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800769c:	4b05      	ldr	r3, [pc, #20]	@ (80076b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	4a04      	ldr	r2, [pc, #16]	@ (80076b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80076a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80076a6:	6093      	str	r3, [r2, #8]
}
 80076a8:	bf00      	nop
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40007000 	.word	0x40007000

080076b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e2fe      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d075      	beq.n	80077c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076d6:	4b97      	ldr	r3, [pc, #604]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 030c 	and.w	r3, r3, #12
 80076de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076e0:	4b94      	ldr	r3, [pc, #592]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b0c      	cmp	r3, #12
 80076ee:	d102      	bne.n	80076f6 <HAL_RCC_OscConfig+0x3e>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d002      	beq.n	80076fc <HAL_RCC_OscConfig+0x44>
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d10b      	bne.n	8007714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076fc:	4b8d      	ldr	r3, [pc, #564]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d05b      	beq.n	80077c0 <HAL_RCC_OscConfig+0x108>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d157      	bne.n	80077c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e2d9      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800771c:	d106      	bne.n	800772c <HAL_RCC_OscConfig+0x74>
 800771e:	4b85      	ldr	r3, [pc, #532]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a84      	ldr	r2, [pc, #528]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	e01d      	b.n	8007768 <HAL_RCC_OscConfig+0xb0>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007734:	d10c      	bne.n	8007750 <HAL_RCC_OscConfig+0x98>
 8007736:	4b7f      	ldr	r3, [pc, #508]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a7e      	ldr	r2, [pc, #504]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 800773c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	4b7c      	ldr	r3, [pc, #496]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a7b      	ldr	r2, [pc, #492]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	e00b      	b.n	8007768 <HAL_RCC_OscConfig+0xb0>
 8007750:	4b78      	ldr	r3, [pc, #480]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a77      	ldr	r2, [pc, #476]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	4b75      	ldr	r3, [pc, #468]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a74      	ldr	r2, [pc, #464]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d013      	beq.n	8007798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007770:	f7fb fbb2 	bl	8002ed8 <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007778:	f7fb fbae 	bl	8002ed8 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b64      	cmp	r3, #100	@ 0x64
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e29e      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800778a:	4b6a      	ldr	r3, [pc, #424]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <HAL_RCC_OscConfig+0xc0>
 8007796:	e014      	b.n	80077c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007798:	f7fb fb9e 	bl	8002ed8 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077a0:	f7fb fb9a 	bl	8002ed8 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b64      	cmp	r3, #100	@ 0x64
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e28a      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077b2:	4b60      	ldr	r3, [pc, #384]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f0      	bne.n	80077a0 <HAL_RCC_OscConfig+0xe8>
 80077be:	e000      	b.n	80077c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d075      	beq.n	80078ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ce:	4b59      	ldr	r3, [pc, #356]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 030c 	and.w	r3, r3, #12
 80077d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077d8:	4b56      	ldr	r3, [pc, #344]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b0c      	cmp	r3, #12
 80077e6:	d102      	bne.n	80077ee <HAL_RCC_OscConfig+0x136>
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d002      	beq.n	80077f4 <HAL_RCC_OscConfig+0x13c>
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d11f      	bne.n	8007834 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <HAL_RCC_OscConfig+0x154>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e25d      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800780c:	4b49      	ldr	r3, [pc, #292]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	061b      	lsls	r3, r3, #24
 800781a:	4946      	ldr	r1, [pc, #280]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 800781c:	4313      	orrs	r3, r2
 800781e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007820:	4b45      	ldr	r3, [pc, #276]	@ (8007938 <HAL_RCC_OscConfig+0x280>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f7fa f8b7 	bl	8001998 <HAL_InitTick>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d043      	beq.n	80078b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e249      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d023      	beq.n	8007884 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800783c:	4b3d      	ldr	r3, [pc, #244]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a3c      	ldr	r2, [pc, #240]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007848:	f7fb fb46 	bl	8002ed8 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007850:	f7fb fb42 	bl	8002ed8 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e232      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007862:	4b34      	ldr	r3, [pc, #208]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0f0      	beq.n	8007850 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800786e:	4b31      	ldr	r3, [pc, #196]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	061b      	lsls	r3, r3, #24
 800787c:	492d      	ldr	r1, [pc, #180]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 800787e:	4313      	orrs	r3, r2
 8007880:	604b      	str	r3, [r1, #4]
 8007882:	e01a      	b.n	80078ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007884:	4b2b      	ldr	r3, [pc, #172]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a2a      	ldr	r2, [pc, #168]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 800788a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800788e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007890:	f7fb fb22 	bl	8002ed8 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007898:	f7fb fb1e 	bl	8002ed8 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e20e      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078aa:	4b22      	ldr	r3, [pc, #136]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f0      	bne.n	8007898 <HAL_RCC_OscConfig+0x1e0>
 80078b6:	e000      	b.n	80078ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d041      	beq.n	800794a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01c      	beq.n	8007908 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ce:	4b19      	ldr	r3, [pc, #100]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80078d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078d4:	4a17      	ldr	r2, [pc, #92]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078de:	f7fb fafb 	bl	8002ed8 <HAL_GetTick>
 80078e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078e4:	e008      	b.n	80078f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078e6:	f7fb faf7 	bl	8002ed8 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e1e7      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 80078fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0ef      	beq.n	80078e6 <HAL_RCC_OscConfig+0x22e>
 8007906:	e020      	b.n	800794a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007908:	4b0a      	ldr	r3, [pc, #40]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 800790a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800790e:	4a09      	ldr	r2, [pc, #36]	@ (8007934 <HAL_RCC_OscConfig+0x27c>)
 8007910:	f023 0301 	bic.w	r3, r3, #1
 8007914:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007918:	f7fb fade 	bl	8002ed8 <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800791e:	e00d      	b.n	800793c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007920:	f7fb fada 	bl	8002ed8 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d906      	bls.n	800793c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e1ca      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
 8007932:	bf00      	nop
 8007934:	40021000 	.word	0x40021000
 8007938:	20000184 	.word	0x20000184
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800793c:	4b8c      	ldr	r3, [pc, #560]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 800793e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1ea      	bne.n	8007920 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 80a6 	beq.w	8007aa4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007958:	2300      	movs	r3, #0
 800795a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800795c:	4b84      	ldr	r3, [pc, #528]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 800795e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_RCC_OscConfig+0x2b4>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <HAL_RCC_OscConfig+0x2b6>
 800796c:	2300      	movs	r3, #0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00d      	beq.n	800798e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007972:	4b7f      	ldr	r3, [pc, #508]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007976:	4a7e      	ldr	r2, [pc, #504]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800797c:	6593      	str	r3, [r2, #88]	@ 0x58
 800797e:	4b7c      	ldr	r3, [pc, #496]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800798a:	2301      	movs	r3, #1
 800798c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800798e:	4b79      	ldr	r3, [pc, #484]	@ (8007b74 <HAL_RCC_OscConfig+0x4bc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007996:	2b00      	cmp	r3, #0
 8007998:	d118      	bne.n	80079cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800799a:	4b76      	ldr	r3, [pc, #472]	@ (8007b74 <HAL_RCC_OscConfig+0x4bc>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a75      	ldr	r2, [pc, #468]	@ (8007b74 <HAL_RCC_OscConfig+0x4bc>)
 80079a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079a6:	f7fb fa97 	bl	8002ed8 <HAL_GetTick>
 80079aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079ac:	e008      	b.n	80079c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ae:	f7fb fa93 	bl	8002ed8 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e183      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079c0:	4b6c      	ldr	r3, [pc, #432]	@ (8007b74 <HAL_RCC_OscConfig+0x4bc>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0f0      	beq.n	80079ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d108      	bne.n	80079e6 <HAL_RCC_OscConfig+0x32e>
 80079d4:	4b66      	ldr	r3, [pc, #408]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079da:	4a65      	ldr	r2, [pc, #404]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 80079dc:	f043 0301 	orr.w	r3, r3, #1
 80079e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079e4:	e024      	b.n	8007a30 <HAL_RCC_OscConfig+0x378>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	2b05      	cmp	r3, #5
 80079ec:	d110      	bne.n	8007a10 <HAL_RCC_OscConfig+0x358>
 80079ee:	4b60      	ldr	r3, [pc, #384]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 80079f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f4:	4a5e      	ldr	r2, [pc, #376]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 80079f6:	f043 0304 	orr.w	r3, r3, #4
 80079fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079fe:	4b5c      	ldr	r3, [pc, #368]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a04:	4a5a      	ldr	r2, [pc, #360]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a06:	f043 0301 	orr.w	r3, r3, #1
 8007a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a0e:	e00f      	b.n	8007a30 <HAL_RCC_OscConfig+0x378>
 8007a10:	4b57      	ldr	r3, [pc, #348]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a16:	4a56      	ldr	r2, [pc, #344]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a18:	f023 0301 	bic.w	r3, r3, #1
 8007a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a20:	4b53      	ldr	r3, [pc, #332]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a26:	4a52      	ldr	r2, [pc, #328]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a28:	f023 0304 	bic.w	r3, r3, #4
 8007a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d016      	beq.n	8007a66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a38:	f7fb fa4e 	bl	8002ed8 <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a3e:	e00a      	b.n	8007a56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a40:	f7fb fa4a 	bl	8002ed8 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e138      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a56:	4b46      	ldr	r3, [pc, #280]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0ed      	beq.n	8007a40 <HAL_RCC_OscConfig+0x388>
 8007a64:	e015      	b.n	8007a92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a66:	f7fb fa37 	bl	8002ed8 <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a6c:	e00a      	b.n	8007a84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a6e:	f7fb fa33 	bl	8002ed8 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e121      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a84:	4b3a      	ldr	r3, [pc, #232]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1ed      	bne.n	8007a6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a92:	7ffb      	ldrb	r3, [r7, #31]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d105      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a98:	4b35      	ldr	r3, [pc, #212]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a9c:	4a34      	ldr	r2, [pc, #208]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007aa2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d03c      	beq.n	8007b2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01c      	beq.n	8007af2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007abe:	4a2c      	ldr	r2, [pc, #176]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007ac0:	f043 0301 	orr.w	r3, r3, #1
 8007ac4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac8:	f7fb fa06 	bl	8002ed8 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ad0:	f7fb fa02 	bl	8002ed8 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e0f2      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ae2:	4b23      	ldr	r3, [pc, #140]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0ef      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x418>
 8007af0:	e01b      	b.n	8007b2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007af2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007af8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007afa:	f023 0301 	bic.w	r3, r3, #1
 8007afe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b02:	f7fb f9e9 	bl	8002ed8 <HAL_GetTick>
 8007b06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b08:	e008      	b.n	8007b1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b0a:	f7fb f9e5 	bl	8002ed8 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e0d5      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b1c:	4b14      	ldr	r3, [pc, #80]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1ef      	bne.n	8007b0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80c9 	beq.w	8007cc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b34:	4b0e      	ldr	r3, [pc, #56]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 030c 	and.w	r3, r3, #12
 8007b3c:	2b0c      	cmp	r3, #12
 8007b3e:	f000 8083 	beq.w	8007c48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d15e      	bne.n	8007c08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b4a:	4b09      	ldr	r3, [pc, #36]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a08      	ldr	r2, [pc, #32]	@ (8007b70 <HAL_RCC_OscConfig+0x4b8>)
 8007b50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b56:	f7fb f9bf 	bl	8002ed8 <HAL_GetTick>
 8007b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b5c:	e00c      	b.n	8007b78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b5e:	f7fb f9bb 	bl	8002ed8 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d905      	bls.n	8007b78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e0ab      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
 8007b70:	40021000 	.word	0x40021000
 8007b74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b78:	4b55      	ldr	r3, [pc, #340]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1ec      	bne.n	8007b5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b84:	4b52      	ldr	r3, [pc, #328]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	4b52      	ldr	r3, [pc, #328]	@ (8007cd4 <HAL_RCC_OscConfig+0x61c>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6a11      	ldr	r1, [r2, #32]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b94:	3a01      	subs	r2, #1
 8007b96:	0112      	lsls	r2, r2, #4
 8007b98:	4311      	orrs	r1, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007b9e:	0212      	lsls	r2, r2, #8
 8007ba0:	4311      	orrs	r1, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007ba6:	0852      	lsrs	r2, r2, #1
 8007ba8:	3a01      	subs	r2, #1
 8007baa:	0552      	lsls	r2, r2, #21
 8007bac:	4311      	orrs	r1, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007bb2:	0852      	lsrs	r2, r2, #1
 8007bb4:	3a01      	subs	r2, #1
 8007bb6:	0652      	lsls	r2, r2, #25
 8007bb8:	4311      	orrs	r1, r2
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007bbe:	06d2      	lsls	r2, r2, #27
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	4943      	ldr	r1, [pc, #268]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bc8:	4b41      	ldr	r3, [pc, #260]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a40      	ldr	r2, [pc, #256]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be0:	f7fb f97a 	bl	8002ed8 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007be8:	f7fb f976 	bl	8002ed8 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e066      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bfa:	4b35      	ldr	r3, [pc, #212]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0x530>
 8007c06:	e05e      	b.n	8007cc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c08:	4b31      	ldr	r3, [pc, #196]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a30      	ldr	r2, [pc, #192]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c14:	f7fb f960 	bl	8002ed8 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c1c:	f7fb f95c 	bl	8002ed8 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e04c      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c2e:	4b28      	ldr	r3, [pc, #160]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f0      	bne.n	8007c1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007c3a:	4b25      	ldr	r3, [pc, #148]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	4924      	ldr	r1, [pc, #144]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007c40:	4b25      	ldr	r3, [pc, #148]	@ (8007cd8 <HAL_RCC_OscConfig+0x620>)
 8007c42:	4013      	ands	r3, r2
 8007c44:	60cb      	str	r3, [r1, #12]
 8007c46:	e03e      	b.n	8007cc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e039      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007c54:	4b1e      	ldr	r3, [pc, #120]	@ (8007cd0 <HAL_RCC_OscConfig+0x618>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f003 0203 	and.w	r2, r3, #3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d12c      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c72:	3b01      	subs	r3, #1
 8007c74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d123      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d11b      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d113      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca4:	085b      	lsrs	r3, r3, #1
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d109      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb8:	085b      	lsrs	r3, r3, #1
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d001      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3720      	adds	r7, #32
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	40021000 	.word	0x40021000
 8007cd4:	019f800c 	.word	0x019f800c
 8007cd8:	feeefffc 	.word	0xfeeefffc

08007cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e11e      	b.n	8007f32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cf4:	4b91      	ldr	r3, [pc, #580]	@ (8007f3c <HAL_RCC_ClockConfig+0x260>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d910      	bls.n	8007d24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d02:	4b8e      	ldr	r3, [pc, #568]	@ (8007f3c <HAL_RCC_ClockConfig+0x260>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f023 020f 	bic.w	r2, r3, #15
 8007d0a:	498c      	ldr	r1, [pc, #560]	@ (8007f3c <HAL_RCC_ClockConfig+0x260>)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d12:	4b8a      	ldr	r3, [pc, #552]	@ (8007f3c <HAL_RCC_ClockConfig+0x260>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d001      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e106      	b.n	8007f32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d073      	beq.n	8007e18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d129      	bne.n	8007d8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d38:	4b81      	ldr	r3, [pc, #516]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e0f4      	b.n	8007f32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007d48:	f000 f9d0 	bl	80080ec <RCC_GetSysClockFreqFromPLLSource>
 8007d4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	4a7c      	ldr	r2, [pc, #496]	@ (8007f44 <HAL_RCC_ClockConfig+0x268>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d93f      	bls.n	8007dd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d56:	4b7a      	ldr	r3, [pc, #488]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d033      	beq.n	8007dd6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d12f      	bne.n	8007dd6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d76:	4b72      	ldr	r3, [pc, #456]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d7e:	4a70      	ldr	r2, [pc, #448]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007d86:	2380      	movs	r3, #128	@ 0x80
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	e024      	b.n	8007dd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d107      	bne.n	8007da4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d94:	4b6a      	ldr	r3, [pc, #424]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e0c6      	b.n	8007f32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007da4:	4b66      	ldr	r3, [pc, #408]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0be      	b.n	8007f32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007db4:	f000 f8ce 	bl	8007f54 <HAL_RCC_GetSysClockFreq>
 8007db8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4a61      	ldr	r2, [pc, #388]	@ (8007f44 <HAL_RCC_ClockConfig+0x268>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d909      	bls.n	8007dd6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dca:	4a5d      	ldr	r2, [pc, #372]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007dd2:	2380      	movs	r3, #128	@ 0x80
 8007dd4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dd6:	4b5a      	ldr	r3, [pc, #360]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f023 0203 	bic.w	r2, r3, #3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	4957      	ldr	r1, [pc, #348]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007de8:	f7fb f876 	bl	8002ed8 <HAL_GetTick>
 8007dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dee:	e00a      	b.n	8007e06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007df0:	f7fb f872 	bl	8002ed8 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e095      	b.n	8007f32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e06:	4b4e      	ldr	r3, [pc, #312]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 020c 	and.w	r2, r3, #12
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d1eb      	bne.n	8007df0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d023      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e30:	4b43      	ldr	r3, [pc, #268]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	4a42      	ldr	r2, [pc, #264]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007e36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007e3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007e48:	4b3d      	ldr	r3, [pc, #244]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e50:	4a3b      	ldr	r2, [pc, #236]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007e52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007e56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e58:	4b39      	ldr	r3, [pc, #228]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	4936      	ldr	r1, [pc, #216]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	608b      	str	r3, [r1, #8]
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b80      	cmp	r3, #128	@ 0x80
 8007e70:	d105      	bne.n	8007e7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007e72:	4b33      	ldr	r3, [pc, #204]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	4a32      	ldr	r2, [pc, #200]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007e78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f3c <HAL_RCC_ClockConfig+0x260>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d21d      	bcs.n	8007ec8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8007f3c <HAL_RCC_ClockConfig+0x260>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f023 020f 	bic.w	r2, r3, #15
 8007e94:	4929      	ldr	r1, [pc, #164]	@ (8007f3c <HAL_RCC_ClockConfig+0x260>)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007e9c:	f7fb f81c 	bl	8002ed8 <HAL_GetTick>
 8007ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ea2:	e00a      	b.n	8007eba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ea4:	f7fb f818 	bl	8002ed8 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e03b      	b.n	8007f32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eba:	4b20      	ldr	r3, [pc, #128]	@ (8007f3c <HAL_RCC_ClockConfig+0x260>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d1ed      	bne.n	8007ea4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d008      	beq.n	8007ee6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	4917      	ldr	r1, [pc, #92]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ef2:	4b13      	ldr	r3, [pc, #76]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	490f      	ldr	r1, [pc, #60]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f06:	f000 f825 	bl	8007f54 <HAL_RCC_GetSysClockFreq>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f40 <HAL_RCC_ClockConfig+0x264>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	091b      	lsrs	r3, r3, #4
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	490c      	ldr	r1, [pc, #48]	@ (8007f48 <HAL_RCC_ClockConfig+0x26c>)
 8007f18:	5ccb      	ldrb	r3, [r1, r3]
 8007f1a:	f003 031f 	and.w	r3, r3, #31
 8007f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f22:	4a0a      	ldr	r2, [pc, #40]	@ (8007f4c <HAL_RCC_ClockConfig+0x270>)
 8007f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007f26:	4b0a      	ldr	r3, [pc, #40]	@ (8007f50 <HAL_RCC_ClockConfig+0x274>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f9 fd34 	bl	8001998 <HAL_InitTick>
 8007f30:	4603      	mov	r3, r0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40022000 	.word	0x40022000
 8007f40:	40021000 	.word	0x40021000
 8007f44:	04c4b400 	.word	0x04c4b400
 8007f48:	0800cba0 	.word	0x0800cba0
 8007f4c:	20000000 	.word	0x20000000
 8007f50:	20000184 	.word	0x20000184

08007f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800800c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 030c 	and.w	r3, r3, #12
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d102      	bne.n	8007f6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f66:	4b2a      	ldr	r3, [pc, #168]	@ (8008010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f68:	613b      	str	r3, [r7, #16]
 8007f6a:	e047      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007f6c:	4b27      	ldr	r3, [pc, #156]	@ (800800c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f003 030c 	and.w	r3, r3, #12
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d102      	bne.n	8007f7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f78:	4b26      	ldr	r3, [pc, #152]	@ (8008014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f7a:	613b      	str	r3, [r7, #16]
 8007f7c:	e03e      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007f7e:	4b23      	ldr	r3, [pc, #140]	@ (800800c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 030c 	and.w	r3, r3, #12
 8007f86:	2b0c      	cmp	r3, #12
 8007f88:	d136      	bne.n	8007ff8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f8a:	4b20      	ldr	r3, [pc, #128]	@ (800800c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f94:	4b1d      	ldr	r3, [pc, #116]	@ (800800c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	091b      	lsrs	r3, r3, #4
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d10c      	bne.n	8007fc2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8008014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb0:	4a16      	ldr	r2, [pc, #88]	@ (800800c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fb2:	68d2      	ldr	r2, [r2, #12]
 8007fb4:	0a12      	lsrs	r2, r2, #8
 8007fb6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007fba:	fb02 f303 	mul.w	r3, r2, r3
 8007fbe:	617b      	str	r3, [r7, #20]
      break;
 8007fc0:	e00c      	b.n	8007fdc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007fc2:	4a13      	ldr	r2, [pc, #76]	@ (8008010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fca:	4a10      	ldr	r2, [pc, #64]	@ (800800c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fcc:	68d2      	ldr	r2, [r2, #12]
 8007fce:	0a12      	lsrs	r2, r2, #8
 8007fd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007fd4:	fb02 f303 	mul.w	r3, r2, r3
 8007fd8:	617b      	str	r3, [r7, #20]
      break;
 8007fda:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800800c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	0e5b      	lsrs	r3, r3, #25
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff4:	613b      	str	r3, [r7, #16]
 8007ff6:	e001      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007ffc:	693b      	ldr	r3, [r7, #16]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40021000 	.word	0x40021000
 8008010:	00f42400 	.word	0x00f42400
 8008014:	016e3600 	.word	0x016e3600

08008018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800801c:	4b03      	ldr	r3, [pc, #12]	@ (800802c <HAL_RCC_GetHCLKFreq+0x14>)
 800801e:	681b      	ldr	r3, [r3, #0]
}
 8008020:	4618      	mov	r0, r3
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	20000000 	.word	0x20000000

08008030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008034:	f7ff fff0 	bl	8008018 <HAL_RCC_GetHCLKFreq>
 8008038:	4602      	mov	r2, r0
 800803a:	4b06      	ldr	r3, [pc, #24]	@ (8008054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	0a1b      	lsrs	r3, r3, #8
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	4904      	ldr	r1, [pc, #16]	@ (8008058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008046:	5ccb      	ldrb	r3, [r1, r3]
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008050:	4618      	mov	r0, r3
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40021000 	.word	0x40021000
 8008058:	0800cbb0 	.word	0x0800cbb0

0800805c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008060:	f7ff ffda 	bl	8008018 <HAL_RCC_GetHCLKFreq>
 8008064:	4602      	mov	r2, r0
 8008066:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	0adb      	lsrs	r3, r3, #11
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	4904      	ldr	r1, [pc, #16]	@ (8008084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008072:	5ccb      	ldrb	r3, [r1, r3]
 8008074:	f003 031f 	and.w	r3, r3, #31
 8008078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800807c:	4618      	mov	r0, r3
 800807e:	bd80      	pop	{r7, pc}
 8008080:	40021000 	.word	0x40021000
 8008084:	0800cbb0 	.word	0x0800cbb0

08008088 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	220f      	movs	r2, #15
 8008096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008098:	4b12      	ldr	r3, [pc, #72]	@ (80080e4 <HAL_RCC_GetClockConfig+0x5c>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f003 0203 	and.w	r2, r3, #3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80080a4:	4b0f      	ldr	r3, [pc, #60]	@ (80080e4 <HAL_RCC_GetClockConfig+0x5c>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80080b0:	4b0c      	ldr	r3, [pc, #48]	@ (80080e4 <HAL_RCC_GetClockConfig+0x5c>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80080bc:	4b09      	ldr	r3, [pc, #36]	@ (80080e4 <HAL_RCC_GetClockConfig+0x5c>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	08db      	lsrs	r3, r3, #3
 80080c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80080ca:	4b07      	ldr	r3, [pc, #28]	@ (80080e8 <HAL_RCC_GetClockConfig+0x60>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 020f 	and.w	r2, r3, #15
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	601a      	str	r2, [r3, #0]
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	40021000 	.word	0x40021000
 80080e8:	40022000 	.word	0x40022000

080080ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080f2:	4b1e      	ldr	r3, [pc, #120]	@ (800816c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080fc:	4b1b      	ldr	r3, [pc, #108]	@ (800816c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	091b      	lsrs	r3, r3, #4
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	3301      	adds	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b03      	cmp	r3, #3
 800810e:	d10c      	bne.n	800812a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008110:	4a17      	ldr	r2, [pc, #92]	@ (8008170 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	fbb2 f3f3 	udiv	r3, r2, r3
 8008118:	4a14      	ldr	r2, [pc, #80]	@ (800816c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800811a:	68d2      	ldr	r2, [r2, #12]
 800811c:	0a12      	lsrs	r2, r2, #8
 800811e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008122:	fb02 f303 	mul.w	r3, r2, r3
 8008126:	617b      	str	r3, [r7, #20]
    break;
 8008128:	e00c      	b.n	8008144 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800812a:	4a12      	ldr	r2, [pc, #72]	@ (8008174 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008132:	4a0e      	ldr	r2, [pc, #56]	@ (800816c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008134:	68d2      	ldr	r2, [r2, #12]
 8008136:	0a12      	lsrs	r2, r2, #8
 8008138:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800813c:	fb02 f303 	mul.w	r3, r2, r3
 8008140:	617b      	str	r3, [r7, #20]
    break;
 8008142:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008144:	4b09      	ldr	r3, [pc, #36]	@ (800816c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	0e5b      	lsrs	r3, r3, #25
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	3301      	adds	r3, #1
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	fbb2 f3f3 	udiv	r3, r2, r3
 800815c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800815e:	687b      	ldr	r3, [r7, #4]
}
 8008160:	4618      	mov	r0, r3
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	40021000 	.word	0x40021000
 8008170:	016e3600 	.word	0x016e3600
 8008174:	00f42400 	.word	0x00f42400

08008178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008180:	2300      	movs	r3, #0
 8008182:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008184:	2300      	movs	r3, #0
 8008186:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 8098 	beq.w	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008196:	2300      	movs	r3, #0
 8008198:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800819a:	4b43      	ldr	r3, [pc, #268]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800819c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800819e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10d      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081a6:	4b40      	ldr	r3, [pc, #256]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081aa:	4a3f      	ldr	r2, [pc, #252]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80081b2:	4b3d      	ldr	r3, [pc, #244]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081ba:	60bb      	str	r3, [r7, #8]
 80081bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081be:	2301      	movs	r3, #1
 80081c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081c2:	4b3a      	ldr	r3, [pc, #232]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a39      	ldr	r2, [pc, #228]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081ce:	f7fa fe83 	bl	8002ed8 <HAL_GetTick>
 80081d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081d4:	e009      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081d6:	f7fa fe7f 	bl	8002ed8 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d902      	bls.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	74fb      	strb	r3, [r7, #19]
        break;
 80081e8:	e005      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ea:	4b30      	ldr	r3, [pc, #192]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0ef      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80081f6:	7cfb      	ldrb	r3, [r7, #19]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d159      	bne.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80081fc:	4b2a      	ldr	r3, [pc, #168]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008206:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d01e      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	429a      	cmp	r2, r3
 8008216:	d019      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008218:	4b23      	ldr	r3, [pc, #140]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800821a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800821e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008222:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008224:	4b20      	ldr	r3, [pc, #128]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800822a:	4a1f      	ldr	r2, [pc, #124]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800822c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008234:	4b1c      	ldr	r3, [pc, #112]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800823a:	4a1b      	ldr	r2, [pc, #108]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800823c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008244:	4a18      	ldr	r2, [pc, #96]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d016      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008256:	f7fa fe3f 	bl	8002ed8 <HAL_GetTick>
 800825a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800825c:	e00b      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800825e:	f7fa fe3b 	bl	8002ed8 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800826c:	4293      	cmp	r3, r2
 800826e:	d902      	bls.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	74fb      	strb	r3, [r7, #19]
            break;
 8008274:	e006      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008276:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0ec      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008284:	7cfb      	ldrb	r3, [r7, #19]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10b      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800828a:	4b07      	ldr	r3, [pc, #28]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008290:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008298:	4903      	ldr	r1, [pc, #12]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80082a0:	e008      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082a2:	7cfb      	ldrb	r3, [r7, #19]
 80082a4:	74bb      	strb	r3, [r7, #18]
 80082a6:	e005      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80082a8:	40021000 	.word	0x40021000
 80082ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b0:	7cfb      	ldrb	r3, [r7, #19]
 80082b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082b4:	7c7b      	ldrb	r3, [r7, #17]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d105      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082ba:	4ba7      	ldr	r3, [pc, #668]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082be:	4aa6      	ldr	r2, [pc, #664]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082d2:	4ba1      	ldr	r3, [pc, #644]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d8:	f023 0203 	bic.w	r2, r3, #3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	499d      	ldr	r1, [pc, #628]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00a      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082f4:	4b98      	ldr	r3, [pc, #608]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082fa:	f023 020c 	bic.w	r2, r3, #12
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	4995      	ldr	r1, [pc, #596]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008304:	4313      	orrs	r3, r2
 8008306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008316:	4b90      	ldr	r3, [pc, #576]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800831c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	498c      	ldr	r1, [pc, #560]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0308 	and.w	r3, r3, #8
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008338:	4b87      	ldr	r3, [pc, #540]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800833a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800833e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	4984      	ldr	r1, [pc, #528]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008348:	4313      	orrs	r3, r2
 800834a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0310 	and.w	r3, r3, #16
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800835a:	4b7f      	ldr	r3, [pc, #508]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	497b      	ldr	r1, [pc, #492]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800836a:	4313      	orrs	r3, r2
 800836c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800837c:	4b76      	ldr	r3, [pc, #472]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008382:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	4973      	ldr	r1, [pc, #460]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800839e:	4b6e      	ldr	r3, [pc, #440]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	496a      	ldr	r1, [pc, #424]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80083c0:	4b65      	ldr	r3, [pc, #404]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	4962      	ldr	r1, [pc, #392]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80083e2:	4b5d      	ldr	r3, [pc, #372]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	4959      	ldr	r1, [pc, #356]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00a      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008404:	4b54      	ldr	r3, [pc, #336]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800840a:	f023 0203 	bic.w	r2, r3, #3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008412:	4951      	ldr	r1, [pc, #324]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008426:	4b4c      	ldr	r3, [pc, #304]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800842c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008434:	4948      	ldr	r1, [pc, #288]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008436:	4313      	orrs	r3, r2
 8008438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008444:	2b00      	cmp	r3, #0
 8008446:	d015      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008448:	4b43      	ldr	r3, [pc, #268]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800844a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800844e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008456:	4940      	ldr	r1, [pc, #256]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008458:	4313      	orrs	r3, r2
 800845a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008466:	d105      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008468:	4b3b      	ldr	r3, [pc, #236]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a3a      	ldr	r2, [pc, #232]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800846e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008472:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800847c:	2b00      	cmp	r3, #0
 800847e:	d015      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008480:	4b35      	ldr	r3, [pc, #212]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008486:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800848e:	4932      	ldr	r1, [pc, #200]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008490:	4313      	orrs	r3, r2
 8008492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800849a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800849e:	d105      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	4a2c      	ldr	r2, [pc, #176]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d015      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084b8:	4b27      	ldr	r3, [pc, #156]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c6:	4924      	ldr	r1, [pc, #144]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084d6:	d105      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	4a1e      	ldr	r2, [pc, #120]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d015      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084f0:	4b19      	ldr	r3, [pc, #100]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084fe:	4916      	ldr	r1, [pc, #88]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008500:	4313      	orrs	r3, r2
 8008502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800850e:	d105      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008510:	4b11      	ldr	r3, [pc, #68]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	4a10      	ldr	r2, [pc, #64]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800851a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d019      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008528:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800852a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800852e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008536:	4908      	ldr	r1, [pc, #32]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008538:	4313      	orrs	r3, r2
 800853a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008546:	d109      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008548:	4b03      	ldr	r3, [pc, #12]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	4a02      	ldr	r2, [pc, #8]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800854e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008552:	60d3      	str	r3, [r2, #12]
 8008554:	e002      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008556:	bf00      	nop
 8008558:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d015      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008568:	4b29      	ldr	r3, [pc, #164]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800856a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008576:	4926      	ldr	r1, [pc, #152]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008578:	4313      	orrs	r3, r2
 800857a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008586:	d105      	bne.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008588:	4b21      	ldr	r3, [pc, #132]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	4a20      	ldr	r2, [pc, #128]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800858e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008592:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d015      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80085a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ae:	4918      	ldr	r1, [pc, #96]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085be:	d105      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80085c0:	4b13      	ldr	r3, [pc, #76]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	4a12      	ldr	r2, [pc, #72]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d015      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80085d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085e6:	490a      	ldr	r1, [pc, #40]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085f6:	d105      	bne.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085f8:	4b05      	ldr	r3, [pc, #20]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	4a04      	ldr	r2, [pc, #16]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008602:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008604:	7cbb      	ldrb	r3, [r7, #18]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40021000 	.word	0x40021000

08008614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e09d      	b.n	8008762 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	d108      	bne.n	8008640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008636:	d009      	beq.n	800864c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	61da      	str	r2, [r3, #28]
 800863e:	e005      	b.n	800864c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7f9 f92a 	bl	80018c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008682:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800868c:	d902      	bls.n	8008694 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e002      	b.n	800869a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008698:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80086a2:	d007      	beq.n	80086b4 <HAL_SPI_Init+0xa0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086ac:	d002      	beq.n	80086b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	431a      	orrs	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f6:	ea42 0103 	orr.w	r1, r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	0c1b      	lsrs	r3, r3, #16
 8008710:	f003 0204 	and.w	r2, r3, #4
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	431a      	orrs	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008722:	f003 0308 	and.w	r3, r3, #8
 8008726:	431a      	orrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008730:	ea42 0103 	orr.w	r1, r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008750:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e049      	b.n	8008810 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d106      	bne.n	8008796 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7f9 fbbf 	bl	8001f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2202      	movs	r2, #2
 800879a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3304      	adds	r3, #4
 80087a6:	4619      	mov	r1, r3
 80087a8:	4610      	mov	r0, r2
 80087aa:	f000 fdb9 	bl	8009320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b01      	cmp	r3, #1
 800882a:	d001      	beq.n	8008830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e054      	b.n	80088da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0201 	orr.w	r2, r2, #1
 8008846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a26      	ldr	r2, [pc, #152]	@ (80088e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d022      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800885a:	d01d      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a22      	ldr	r2, [pc, #136]	@ (80088ec <HAL_TIM_Base_Start_IT+0xd4>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d018      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a21      	ldr	r2, [pc, #132]	@ (80088f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d013      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a1f      	ldr	r2, [pc, #124]	@ (80088f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00e      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a1e      	ldr	r2, [pc, #120]	@ (80088f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d009      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a1c      	ldr	r2, [pc, #112]	@ (80088fc <HAL_TIM_Base_Start_IT+0xe4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1b      	ldr	r2, [pc, #108]	@ (8008900 <HAL_TIM_Base_Start_IT+0xe8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d115      	bne.n	80088c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	4b19      	ldr	r3, [pc, #100]	@ (8008904 <HAL_TIM_Base_Start_IT+0xec>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b06      	cmp	r3, #6
 80088a8:	d015      	beq.n	80088d6 <HAL_TIM_Base_Start_IT+0xbe>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b0:	d011      	beq.n	80088d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0201 	orr.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c2:	e008      	b.n	80088d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e000      	b.n	80088d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	40012c00 	.word	0x40012c00
 80088ec:	40000400 	.word	0x40000400
 80088f0:	40000800 	.word	0x40000800
 80088f4:	40000c00 	.word	0x40000c00
 80088f8:	40013400 	.word	0x40013400
 80088fc:	40014000 	.word	0x40014000
 8008900:	40015000 	.word	0x40015000
 8008904:	00010007 	.word	0x00010007

08008908 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e049      	b.n	80089ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7f9 faa6 	bl	8001e80 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3304      	adds	r3, #4
 8008944:	4619      	mov	r1, r3
 8008946:	4610      	mov	r0, r2
 8008948:	f000 fcea 	bl	8009320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d104      	bne.n	80089d6 <HAL_TIM_IC_Start_IT+0x1e>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	e023      	b.n	8008a1e <HAL_TIM_IC_Start_IT+0x66>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b04      	cmp	r3, #4
 80089da:	d104      	bne.n	80089e6 <HAL_TIM_IC_Start_IT+0x2e>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	e01b      	b.n	8008a1e <HAL_TIM_IC_Start_IT+0x66>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d104      	bne.n	80089f6 <HAL_TIM_IC_Start_IT+0x3e>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	e013      	b.n	8008a1e <HAL_TIM_IC_Start_IT+0x66>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b0c      	cmp	r3, #12
 80089fa:	d104      	bne.n	8008a06 <HAL_TIM_IC_Start_IT+0x4e>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	e00b      	b.n	8008a1e <HAL_TIM_IC_Start_IT+0x66>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d104      	bne.n	8008a16 <HAL_TIM_IC_Start_IT+0x5e>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	e003      	b.n	8008a1e <HAL_TIM_IC_Start_IT+0x66>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d104      	bne.n	8008a30 <HAL_TIM_IC_Start_IT+0x78>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	e013      	b.n	8008a58 <HAL_TIM_IC_Start_IT+0xa0>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d104      	bne.n	8008a40 <HAL_TIM_IC_Start_IT+0x88>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	e00b      	b.n	8008a58 <HAL_TIM_IC_Start_IT+0xa0>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b08      	cmp	r3, #8
 8008a44:	d104      	bne.n	8008a50 <HAL_TIM_IC_Start_IT+0x98>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	e003      	b.n	8008a58 <HAL_TIM_IC_Start_IT+0xa0>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d102      	bne.n	8008a66 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a60:	7b7b      	ldrb	r3, [r7, #13]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d001      	beq.n	8008a6a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e0e2      	b.n	8008c30 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d104      	bne.n	8008a7a <HAL_TIM_IC_Start_IT+0xc2>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a78:	e023      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x10a>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIM_IC_Start_IT+0xd2>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a88:	e01b      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x10a>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b08      	cmp	r3, #8
 8008a8e:	d104      	bne.n	8008a9a <HAL_TIM_IC_Start_IT+0xe2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a98:	e013      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x10a>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b0c      	cmp	r3, #12
 8008a9e:	d104      	bne.n	8008aaa <HAL_TIM_IC_Start_IT+0xf2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008aa8:	e00b      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x10a>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b10      	cmp	r3, #16
 8008aae:	d104      	bne.n	8008aba <HAL_TIM_IC_Start_IT+0x102>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ab8:	e003      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x10a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2202      	movs	r2, #2
 8008abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <HAL_TIM_IC_Start_IT+0x11a>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ad0:	e013      	b.n	8008afa <HAL_TIM_IC_Start_IT+0x142>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d104      	bne.n	8008ae2 <HAL_TIM_IC_Start_IT+0x12a>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ae0:	e00b      	b.n	8008afa <HAL_TIM_IC_Start_IT+0x142>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d104      	bne.n	8008af2 <HAL_TIM_IC_Start_IT+0x13a>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008af0:	e003      	b.n	8008afa <HAL_TIM_IC_Start_IT+0x142>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2202      	movs	r2, #2
 8008af6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b0c      	cmp	r3, #12
 8008afe:	d841      	bhi.n	8008b84 <HAL_TIM_IC_Start_IT+0x1cc>
 8008b00:	a201      	add	r2, pc, #4	@ (adr r2, 8008b08 <HAL_TIM_IC_Start_IT+0x150>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008b3d 	.word	0x08008b3d
 8008b0c:	08008b85 	.word	0x08008b85
 8008b10:	08008b85 	.word	0x08008b85
 8008b14:	08008b85 	.word	0x08008b85
 8008b18:	08008b4f 	.word	0x08008b4f
 8008b1c:	08008b85 	.word	0x08008b85
 8008b20:	08008b85 	.word	0x08008b85
 8008b24:	08008b85 	.word	0x08008b85
 8008b28:	08008b61 	.word	0x08008b61
 8008b2c:	08008b85 	.word	0x08008b85
 8008b30:	08008b85 	.word	0x08008b85
 8008b34:	08008b85 	.word	0x08008b85
 8008b38:	08008b73 	.word	0x08008b73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0202 	orr.w	r2, r2, #2
 8008b4a:	60da      	str	r2, [r3, #12]
      break;
 8008b4c:	e01d      	b.n	8008b8a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0204 	orr.w	r2, r2, #4
 8008b5c:	60da      	str	r2, [r3, #12]
      break;
 8008b5e:	e014      	b.n	8008b8a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68da      	ldr	r2, [r3, #12]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0208 	orr.w	r2, r2, #8
 8008b6e:	60da      	str	r2, [r3, #12]
      break;
 8008b70:	e00b      	b.n	8008b8a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0210 	orr.w	r2, r2, #16
 8008b80:	60da      	str	r2, [r3, #12]
      break;
 8008b82:	e002      	b.n	8008b8a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]
      break;
 8008b88:	bf00      	nop
  }

  if (status == HAL_OK)
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d14e      	bne.n	8008c2e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2201      	movs	r2, #1
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 fe3b 	bl	8009814 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a25      	ldr	r2, [pc, #148]	@ (8008c38 <HAL_TIM_IC_Start_IT+0x280>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d022      	beq.n	8008bee <HAL_TIM_IC_Start_IT+0x236>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bb0:	d01d      	beq.n	8008bee <HAL_TIM_IC_Start_IT+0x236>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a21      	ldr	r2, [pc, #132]	@ (8008c3c <HAL_TIM_IC_Start_IT+0x284>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d018      	beq.n	8008bee <HAL_TIM_IC_Start_IT+0x236>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8008c40 <HAL_TIM_IC_Start_IT+0x288>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d013      	beq.n	8008bee <HAL_TIM_IC_Start_IT+0x236>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a1e      	ldr	r2, [pc, #120]	@ (8008c44 <HAL_TIM_IC_Start_IT+0x28c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d00e      	beq.n	8008bee <HAL_TIM_IC_Start_IT+0x236>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c48 <HAL_TIM_IC_Start_IT+0x290>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d009      	beq.n	8008bee <HAL_TIM_IC_Start_IT+0x236>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a1b      	ldr	r2, [pc, #108]	@ (8008c4c <HAL_TIM_IC_Start_IT+0x294>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d004      	beq.n	8008bee <HAL_TIM_IC_Start_IT+0x236>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a19      	ldr	r2, [pc, #100]	@ (8008c50 <HAL_TIM_IC_Start_IT+0x298>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d115      	bne.n	8008c1a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	4b17      	ldr	r3, [pc, #92]	@ (8008c54 <HAL_TIM_IC_Start_IT+0x29c>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b06      	cmp	r3, #6
 8008bfe:	d015      	beq.n	8008c2c <HAL_TIM_IC_Start_IT+0x274>
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c06:	d011      	beq.n	8008c2c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0201 	orr.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c18:	e008      	b.n	8008c2c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f042 0201 	orr.w	r2, r2, #1
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	e000      	b.n	8008c2e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c2c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	40012c00 	.word	0x40012c00
 8008c3c:	40000400 	.word	0x40000400
 8008c40:	40000800 	.word	0x40000800
 8008c44:	40000c00 	.word	0x40000c00
 8008c48:	40013400 	.word	0x40013400
 8008c4c:	40014000 	.word	0x40014000
 8008c50:	40015000 	.word	0x40015000
 8008c54:	00010007 	.word	0x00010007

08008c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d020      	beq.n	8008cbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d01b      	beq.n	8008cbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f06f 0202 	mvn.w	r2, #2
 8008c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7f9 fff4 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8008ca8:	e005      	b.n	8008cb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fb1a 	bl	80092e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fb21 	bl	80092f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d020      	beq.n	8008d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01b      	beq.n	8008d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f06f 0204 	mvn.w	r2, #4
 8008cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2202      	movs	r2, #2
 8008cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7f9 ffce 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8008cf4:	e005      	b.n	8008d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 faf4 	bl	80092e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fafb 	bl	80092f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d020      	beq.n	8008d54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f003 0308 	and.w	r3, r3, #8
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01b      	beq.n	8008d54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f06f 0208 	mvn.w	r2, #8
 8008d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2204      	movs	r2, #4
 8008d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7f9 ffa8 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8008d40:	e005      	b.n	8008d4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 face 	bl	80092e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fad5 	bl	80092f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f003 0310 	and.w	r3, r3, #16
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d020      	beq.n	8008da0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01b      	beq.n	8008da0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f06f 0210 	mvn.w	r2, #16
 8008d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2208      	movs	r2, #8
 8008d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7f9 ff82 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8008d8c:	e005      	b.n	8008d9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 faa8 	bl	80092e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 faaf 	bl	80092f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00c      	beq.n	8008dc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f06f 0201 	mvn.w	r2, #1
 8008dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7f8 fd28 	bl	8001814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00c      	beq.n	8008df2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d007      	beq.n	8008df2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fdd7 	bl	80099a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00c      	beq.n	8008e16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d007      	beq.n	8008e16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fdcf 	bl	80099b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00c      	beq.n	8008e3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d007      	beq.n	8008e3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fa69 	bl	800930c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f003 0320 	and.w	r3, r3, #32
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00c      	beq.n	8008e5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d007      	beq.n	8008e5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f06f 0220 	mvn.w	r2, #32
 8008e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fd97 	bl	800998c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00c      	beq.n	8008e82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d007      	beq.n	8008e82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fda3 	bl	80099c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00c      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d007      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fd9b 	bl	80099dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00c      	beq.n	8008eca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d007      	beq.n	8008eca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fd93 	bl	80099f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00c      	beq.n	8008eee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d007      	beq.n	8008eee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fd8b 	bl	8009a04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008eee:	bf00      	nop
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b086      	sub	sp, #24
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e088      	b.n	8009026 <HAL_TIM_IC_ConfigChannel+0x130>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d11b      	bne.n	8008f5a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008f32:	f000 faa9 	bl	8009488 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	699a      	ldr	r2, [r3, #24]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 020c 	bic.w	r2, r2, #12
 8008f44:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6999      	ldr	r1, [r3, #24]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	619a      	str	r2, [r3, #24]
 8008f58:	e060      	b.n	800901c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d11c      	bne.n	8008f9a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008f70:	f000 fb2d 	bl	80095ce <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699a      	ldr	r2, [r3, #24]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008f82:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6999      	ldr	r1, [r3, #24]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	021a      	lsls	r2, r3, #8
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	619a      	str	r2, [r3, #24]
 8008f98:	e040      	b.n	800901c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b08      	cmp	r3, #8
 8008f9e:	d11b      	bne.n	8008fd8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008fb0:	f000 fb7a 	bl	80096a8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69da      	ldr	r2, [r3, #28]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 020c 	bic.w	r2, r2, #12
 8008fc2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	69d9      	ldr	r1, [r3, #28]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	689a      	ldr	r2, [r3, #8]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	61da      	str	r2, [r3, #28]
 8008fd6:	e021      	b.n	800901c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b0c      	cmp	r3, #12
 8008fdc:	d11c      	bne.n	8009018 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008fee:	f000 fb97 	bl	8009720 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69da      	ldr	r2, [r3, #28]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009000:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69d9      	ldr	r1, [r3, #28]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	021a      	lsls	r2, r3, #8
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	61da      	str	r2, [r3, #28]
 8009016:	e001      	b.n	800901c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009024:	7dfb      	ldrb	r3, [r7, #23]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009044:	2b01      	cmp	r3, #1
 8009046:	d101      	bne.n	800904c <HAL_TIM_ConfigClockSource+0x1c>
 8009048:	2302      	movs	r3, #2
 800904a:	e0f6      	b.n	800923a <HAL_TIM_ConfigClockSource+0x20a>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800906a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800906e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a6f      	ldr	r2, [pc, #444]	@ (8009244 <HAL_TIM_ConfigClockSource+0x214>)
 8009086:	4293      	cmp	r3, r2
 8009088:	f000 80c1 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x1de>
 800908c:	4a6d      	ldr	r2, [pc, #436]	@ (8009244 <HAL_TIM_ConfigClockSource+0x214>)
 800908e:	4293      	cmp	r3, r2
 8009090:	f200 80c6 	bhi.w	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009094:	4a6c      	ldr	r2, [pc, #432]	@ (8009248 <HAL_TIM_ConfigClockSource+0x218>)
 8009096:	4293      	cmp	r3, r2
 8009098:	f000 80b9 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x1de>
 800909c:	4a6a      	ldr	r2, [pc, #424]	@ (8009248 <HAL_TIM_ConfigClockSource+0x218>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	f200 80be 	bhi.w	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 80090a4:	4a69      	ldr	r2, [pc, #420]	@ (800924c <HAL_TIM_ConfigClockSource+0x21c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	f000 80b1 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x1de>
 80090ac:	4a67      	ldr	r2, [pc, #412]	@ (800924c <HAL_TIM_ConfigClockSource+0x21c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	f200 80b6 	bhi.w	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 80090b4:	4a66      	ldr	r2, [pc, #408]	@ (8009250 <HAL_TIM_ConfigClockSource+0x220>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	f000 80a9 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x1de>
 80090bc:	4a64      	ldr	r2, [pc, #400]	@ (8009250 <HAL_TIM_ConfigClockSource+0x220>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	f200 80ae 	bhi.w	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 80090c4:	4a63      	ldr	r2, [pc, #396]	@ (8009254 <HAL_TIM_ConfigClockSource+0x224>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	f000 80a1 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x1de>
 80090cc:	4a61      	ldr	r2, [pc, #388]	@ (8009254 <HAL_TIM_ConfigClockSource+0x224>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	f200 80a6 	bhi.w	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 80090d4:	4a60      	ldr	r2, [pc, #384]	@ (8009258 <HAL_TIM_ConfigClockSource+0x228>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	f000 8099 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x1de>
 80090dc:	4a5e      	ldr	r2, [pc, #376]	@ (8009258 <HAL_TIM_ConfigClockSource+0x228>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	f200 809e 	bhi.w	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 80090e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80090e8:	f000 8091 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x1de>
 80090ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80090f0:	f200 8096 	bhi.w	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 80090f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090f8:	f000 8089 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x1de>
 80090fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009100:	f200 808e 	bhi.w	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009108:	d03e      	beq.n	8009188 <HAL_TIM_ConfigClockSource+0x158>
 800910a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800910e:	f200 8087 	bhi.w	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009116:	f000 8086 	beq.w	8009226 <HAL_TIM_ConfigClockSource+0x1f6>
 800911a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800911e:	d87f      	bhi.n	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009120:	2b70      	cmp	r3, #112	@ 0x70
 8009122:	d01a      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x12a>
 8009124:	2b70      	cmp	r3, #112	@ 0x70
 8009126:	d87b      	bhi.n	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009128:	2b60      	cmp	r3, #96	@ 0x60
 800912a:	d050      	beq.n	80091ce <HAL_TIM_ConfigClockSource+0x19e>
 800912c:	2b60      	cmp	r3, #96	@ 0x60
 800912e:	d877      	bhi.n	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009130:	2b50      	cmp	r3, #80	@ 0x50
 8009132:	d03c      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x17e>
 8009134:	2b50      	cmp	r3, #80	@ 0x50
 8009136:	d873      	bhi.n	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009138:	2b40      	cmp	r3, #64	@ 0x40
 800913a:	d058      	beq.n	80091ee <HAL_TIM_ConfigClockSource+0x1be>
 800913c:	2b40      	cmp	r3, #64	@ 0x40
 800913e:	d86f      	bhi.n	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009140:	2b30      	cmp	r3, #48	@ 0x30
 8009142:	d064      	beq.n	800920e <HAL_TIM_ConfigClockSource+0x1de>
 8009144:	2b30      	cmp	r3, #48	@ 0x30
 8009146:	d86b      	bhi.n	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009148:	2b20      	cmp	r3, #32
 800914a:	d060      	beq.n	800920e <HAL_TIM_ConfigClockSource+0x1de>
 800914c:	2b20      	cmp	r3, #32
 800914e:	d867      	bhi.n	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
 8009150:	2b00      	cmp	r3, #0
 8009152:	d05c      	beq.n	800920e <HAL_TIM_ConfigClockSource+0x1de>
 8009154:	2b10      	cmp	r3, #16
 8009156:	d05a      	beq.n	800920e <HAL_TIM_ConfigClockSource+0x1de>
 8009158:	e062      	b.n	8009220 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800916a:	f000 fb33 	bl	80097d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800917c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	609a      	str	r2, [r3, #8]
      break;
 8009186:	e04f      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009198:	f000 fb1c 	bl	80097d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091aa:	609a      	str	r2, [r3, #8]
      break;
 80091ac:	e03c      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ba:	461a      	mov	r2, r3
 80091bc:	f000 f9d8 	bl	8009570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2150      	movs	r1, #80	@ 0x50
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fae7 	bl	800979a <TIM_ITRx_SetConfig>
      break;
 80091cc:	e02c      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091da:	461a      	mov	r2, r3
 80091dc:	f000 fa34 	bl	8009648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2160      	movs	r1, #96	@ 0x60
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fad7 	bl	800979a <TIM_ITRx_SetConfig>
      break;
 80091ec:	e01c      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091fa:	461a      	mov	r2, r3
 80091fc:	f000 f9b8 	bl	8009570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2140      	movs	r1, #64	@ 0x40
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fac7 	bl	800979a <TIM_ITRx_SetConfig>
      break;
 800920c:	e00c      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4619      	mov	r1, r3
 8009218:	4610      	mov	r0, r2
 800921a:	f000 fabe 	bl	800979a <TIM_ITRx_SetConfig>
      break;
 800921e:	e003      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	73fb      	strb	r3, [r7, #15]
      break;
 8009224:	e000      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009238:	7bfb      	ldrb	r3, [r7, #15]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	00100070 	.word	0x00100070
 8009248:	00100060 	.word	0x00100060
 800924c:	00100050 	.word	0x00100050
 8009250:	00100040 	.word	0x00100040
 8009254:	00100030 	.word	0x00100030
 8009258:	00100020 	.word	0x00100020

0800925c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b0c      	cmp	r3, #12
 800926e:	d831      	bhi.n	80092d4 <HAL_TIM_ReadCapturedValue+0x78>
 8009270:	a201      	add	r2, pc, #4	@ (adr r2, 8009278 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	080092ad 	.word	0x080092ad
 800927c:	080092d5 	.word	0x080092d5
 8009280:	080092d5 	.word	0x080092d5
 8009284:	080092d5 	.word	0x080092d5
 8009288:	080092b7 	.word	0x080092b7
 800928c:	080092d5 	.word	0x080092d5
 8009290:	080092d5 	.word	0x080092d5
 8009294:	080092d5 	.word	0x080092d5
 8009298:	080092c1 	.word	0x080092c1
 800929c:	080092d5 	.word	0x080092d5
 80092a0:	080092d5 	.word	0x080092d5
 80092a4:	080092d5 	.word	0x080092d5
 80092a8:	080092cb 	.word	0x080092cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b2:	60fb      	str	r3, [r7, #12]

      break;
 80092b4:	e00f      	b.n	80092d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092bc:	60fb      	str	r3, [r7, #12]

      break;
 80092be:	e00a      	b.n	80092d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c6:	60fb      	str	r3, [r7, #12]

      break;
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d0:	60fb      	str	r3, [r7, #12]

      break;
 80092d2:	e000      	b.n	80092d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80092d4:	bf00      	nop
  }

  return tmpreg;
 80092d6:	68fb      	ldr	r3, [r7, #12]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a4c      	ldr	r2, [pc, #304]	@ (8009464 <TIM_Base_SetConfig+0x144>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d017      	beq.n	8009368 <TIM_Base_SetConfig+0x48>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800933e:	d013      	beq.n	8009368 <TIM_Base_SetConfig+0x48>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a49      	ldr	r2, [pc, #292]	@ (8009468 <TIM_Base_SetConfig+0x148>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00f      	beq.n	8009368 <TIM_Base_SetConfig+0x48>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a48      	ldr	r2, [pc, #288]	@ (800946c <TIM_Base_SetConfig+0x14c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00b      	beq.n	8009368 <TIM_Base_SetConfig+0x48>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a47      	ldr	r2, [pc, #284]	@ (8009470 <TIM_Base_SetConfig+0x150>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d007      	beq.n	8009368 <TIM_Base_SetConfig+0x48>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a46      	ldr	r2, [pc, #280]	@ (8009474 <TIM_Base_SetConfig+0x154>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d003      	beq.n	8009368 <TIM_Base_SetConfig+0x48>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a45      	ldr	r2, [pc, #276]	@ (8009478 <TIM_Base_SetConfig+0x158>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d108      	bne.n	800937a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800936e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	4313      	orrs	r3, r2
 8009378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a39      	ldr	r2, [pc, #228]	@ (8009464 <TIM_Base_SetConfig+0x144>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d023      	beq.n	80093ca <TIM_Base_SetConfig+0xaa>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009388:	d01f      	beq.n	80093ca <TIM_Base_SetConfig+0xaa>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a36      	ldr	r2, [pc, #216]	@ (8009468 <TIM_Base_SetConfig+0x148>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d01b      	beq.n	80093ca <TIM_Base_SetConfig+0xaa>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a35      	ldr	r2, [pc, #212]	@ (800946c <TIM_Base_SetConfig+0x14c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d017      	beq.n	80093ca <TIM_Base_SetConfig+0xaa>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a34      	ldr	r2, [pc, #208]	@ (8009470 <TIM_Base_SetConfig+0x150>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d013      	beq.n	80093ca <TIM_Base_SetConfig+0xaa>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a33      	ldr	r2, [pc, #204]	@ (8009474 <TIM_Base_SetConfig+0x154>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00f      	beq.n	80093ca <TIM_Base_SetConfig+0xaa>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a33      	ldr	r2, [pc, #204]	@ (800947c <TIM_Base_SetConfig+0x15c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00b      	beq.n	80093ca <TIM_Base_SetConfig+0xaa>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a32      	ldr	r2, [pc, #200]	@ (8009480 <TIM_Base_SetConfig+0x160>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d007      	beq.n	80093ca <TIM_Base_SetConfig+0xaa>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a31      	ldr	r2, [pc, #196]	@ (8009484 <TIM_Base_SetConfig+0x164>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d003      	beq.n	80093ca <TIM_Base_SetConfig+0xaa>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a2c      	ldr	r2, [pc, #176]	@ (8009478 <TIM_Base_SetConfig+0x158>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d108      	bne.n	80093dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a18      	ldr	r2, [pc, #96]	@ (8009464 <TIM_Base_SetConfig+0x144>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d013      	beq.n	8009430 <TIM_Base_SetConfig+0x110>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a1a      	ldr	r2, [pc, #104]	@ (8009474 <TIM_Base_SetConfig+0x154>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d00f      	beq.n	8009430 <TIM_Base_SetConfig+0x110>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a1a      	ldr	r2, [pc, #104]	@ (800947c <TIM_Base_SetConfig+0x15c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00b      	beq.n	8009430 <TIM_Base_SetConfig+0x110>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a19      	ldr	r2, [pc, #100]	@ (8009480 <TIM_Base_SetConfig+0x160>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d007      	beq.n	8009430 <TIM_Base_SetConfig+0x110>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a18      	ldr	r2, [pc, #96]	@ (8009484 <TIM_Base_SetConfig+0x164>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d003      	beq.n	8009430 <TIM_Base_SetConfig+0x110>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a13      	ldr	r2, [pc, #76]	@ (8009478 <TIM_Base_SetConfig+0x158>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d103      	bne.n	8009438 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b01      	cmp	r3, #1
 8009448:	d105      	bne.n	8009456 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f023 0201 	bic.w	r2, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	611a      	str	r2, [r3, #16]
  }
}
 8009456:	bf00      	nop
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	40012c00 	.word	0x40012c00
 8009468:	40000400 	.word	0x40000400
 800946c:	40000800 	.word	0x40000800
 8009470:	40000c00 	.word	0x40000c00
 8009474:	40013400 	.word	0x40013400
 8009478:	40015000 	.word	0x40015000
 800947c:	40014000 	.word	0x40014000
 8009480:	40014400 	.word	0x40014400
 8009484:	40014800 	.word	0x40014800

08009488 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	f023 0201 	bic.w	r2, r3, #1
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4a28      	ldr	r2, [pc, #160]	@ (8009554 <TIM_TI1_SetConfig+0xcc>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d01b      	beq.n	80094ee <TIM_TI1_SetConfig+0x66>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094bc:	d017      	beq.n	80094ee <TIM_TI1_SetConfig+0x66>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4a25      	ldr	r2, [pc, #148]	@ (8009558 <TIM_TI1_SetConfig+0xd0>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d013      	beq.n	80094ee <TIM_TI1_SetConfig+0x66>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4a24      	ldr	r2, [pc, #144]	@ (800955c <TIM_TI1_SetConfig+0xd4>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d00f      	beq.n	80094ee <TIM_TI1_SetConfig+0x66>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4a23      	ldr	r2, [pc, #140]	@ (8009560 <TIM_TI1_SetConfig+0xd8>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00b      	beq.n	80094ee <TIM_TI1_SetConfig+0x66>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4a22      	ldr	r2, [pc, #136]	@ (8009564 <TIM_TI1_SetConfig+0xdc>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d007      	beq.n	80094ee <TIM_TI1_SetConfig+0x66>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4a21      	ldr	r2, [pc, #132]	@ (8009568 <TIM_TI1_SetConfig+0xe0>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d003      	beq.n	80094ee <TIM_TI1_SetConfig+0x66>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4a20      	ldr	r2, [pc, #128]	@ (800956c <TIM_TI1_SetConfig+0xe4>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d101      	bne.n	80094f2 <TIM_TI1_SetConfig+0x6a>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e000      	b.n	80094f4 <TIM_TI1_SetConfig+0x6c>
 80094f2:	2300      	movs	r3, #0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d008      	beq.n	800950a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f023 0303 	bic.w	r3, r3, #3
 80094fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4313      	orrs	r3, r2
 8009506:	617b      	str	r3, [r7, #20]
 8009508:	e003      	b.n	8009512 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f043 0301 	orr.w	r3, r3, #1
 8009510:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	b2db      	uxtb	r3, r3
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	4313      	orrs	r3, r2
 8009524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f023 030a 	bic.w	r3, r3, #10
 800952c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f003 030a 	and.w	r3, r3, #10
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	4313      	orrs	r3, r2
 8009538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	621a      	str	r2, [r3, #32]
}
 8009546:	bf00      	nop
 8009548:	371c      	adds	r7, #28
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	40012c00 	.word	0x40012c00
 8009558:	40000400 	.word	0x40000400
 800955c:	40000800 	.word	0x40000800
 8009560:	40000c00 	.word	0x40000c00
 8009564:	40013400 	.word	0x40013400
 8009568:	40014000 	.word	0x40014000
 800956c:	40015000 	.word	0x40015000

08009570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	f023 0201 	bic.w	r2, r3, #1
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800959a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	011b      	lsls	r3, r3, #4
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f023 030a 	bic.w	r3, r3, #10
 80095ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	621a      	str	r2, [r3, #32]
}
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b087      	sub	sp, #28
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	607a      	str	r2, [r7, #4]
 80095da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	f023 0210 	bic.w	r2, r3, #16
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	021b      	lsls	r3, r3, #8
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800960c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	031b      	lsls	r3, r3, #12
 8009612:	b29b      	uxth	r3, r3
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	4313      	orrs	r3, r2
 8009618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009620:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	011b      	lsls	r3, r3, #4
 8009626:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	4313      	orrs	r3, r2
 800962e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	621a      	str	r2, [r3, #32]
}
 800963c:	bf00      	nop
 800963e:	371c      	adds	r7, #28
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	f023 0210 	bic.w	r2, r3, #16
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	031b      	lsls	r3, r3, #12
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	4313      	orrs	r3, r2
 800967c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009684:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	011b      	lsls	r3, r3, #4
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	4313      	orrs	r3, r2
 800968e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	621a      	str	r2, [r3, #32]
}
 800969c:	bf00      	nop
 800969e:	371c      	adds	r7, #28
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	f023 0303 	bic.w	r3, r3, #3
 80096d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4313      	orrs	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80096f8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	4313      	orrs	r3, r2
 8009706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	621a      	str	r2, [r3, #32]
}
 8009714:	bf00      	nop
 8009716:	371c      	adds	r7, #28
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800974c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	4313      	orrs	r3, r2
 8009756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800975e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	031b      	lsls	r3, r3, #12
 8009764:	b29b      	uxth	r3, r3
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	4313      	orrs	r3, r2
 800976a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009772:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	031b      	lsls	r3, r3, #12
 8009778:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	4313      	orrs	r3, r2
 8009780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	621a      	str	r2, [r3, #32]
}
 800978e:	bf00      	nop
 8009790:	371c      	adds	r7, #28
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800979a:	b480      	push	{r7}
 800979c:	b085      	sub	sp, #20
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80097b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	f043 0307 	orr.w	r3, r3, #7
 80097c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	609a      	str	r2, [r3, #8]
}
 80097c8:	bf00      	nop
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	021a      	lsls	r2, r3, #8
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	609a      	str	r2, [r3, #8]
}
 8009808:	bf00      	nop
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f003 031f 	and.w	r3, r3, #31
 8009826:	2201      	movs	r2, #1
 8009828:	fa02 f303 	lsl.w	r3, r2, r3
 800982c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1a      	ldr	r2, [r3, #32]
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	43db      	mvns	r3, r3
 8009836:	401a      	ands	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a1a      	ldr	r2, [r3, #32]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	fa01 f303 	lsl.w	r3, r1, r3
 800984c:	431a      	orrs	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	621a      	str	r2, [r3, #32]
}
 8009852:	bf00      	nop
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
	...

08009860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009870:	2b01      	cmp	r3, #1
 8009872:	d101      	bne.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009874:	2302      	movs	r3, #2
 8009876:	e074      	b.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2202      	movs	r2, #2
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a34      	ldr	r2, [pc, #208]	@ (8009970 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d009      	beq.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a33      	ldr	r2, [pc, #204]	@ (8009974 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d004      	beq.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a31      	ldr	r2, [pc, #196]	@ (8009978 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d108      	bne.n	80098c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80098bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80098ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4313      	orrs	r3, r2
 80098dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a21      	ldr	r2, [pc, #132]	@ (8009970 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d022      	beq.n	8009936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098f8:	d01d      	beq.n	8009936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a1f      	ldr	r2, [pc, #124]	@ (800997c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d018      	beq.n	8009936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a1d      	ldr	r2, [pc, #116]	@ (8009980 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d013      	beq.n	8009936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a1c      	ldr	r2, [pc, #112]	@ (8009984 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00e      	beq.n	8009936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a15      	ldr	r2, [pc, #84]	@ (8009974 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d009      	beq.n	8009936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a18      	ldr	r2, [pc, #96]	@ (8009988 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d004      	beq.n	8009936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a11      	ldr	r2, [pc, #68]	@ (8009978 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d10c      	bne.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800993c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	4313      	orrs	r3, r2
 8009946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	40012c00 	.word	0x40012c00
 8009974:	40013400 	.word	0x40013400
 8009978:	40015000 	.word	0x40015000
 800997c:	40000400 	.word	0x40000400
 8009980:	40000800 	.word	0x40000800
 8009984:	40000c00 	.word	0x40000c00
 8009988:	40014000 	.word	0x40014000

0800998c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d101      	bne.n	8009a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e042      	b.n	8009ab0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d106      	bne.n	8009a42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7f8 fb2d 	bl	800209c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2224      	movs	r2, #36	@ 0x24
 8009a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0201 	bic.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fb24 	bl	800a0b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f825 	bl	8009ab8 <UART_SetConfig>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d101      	bne.n	8009a78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e01b      	b.n	8009ab0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f042 0201 	orr.w	r2, r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fba3 	bl	800a1f4 <UART_CheckIdleState>
 8009aae:	4603      	mov	r3, r0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009abc:	b08c      	sub	sp, #48	@ 0x30
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	4baa      	ldr	r3, [pc, #680]	@ (8009d90 <UART_SetConfig+0x2d8>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	6812      	ldr	r2, [r2, #0]
 8009aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009af0:	430b      	orrs	r3, r1
 8009af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	68da      	ldr	r2, [r3, #12]
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a9f      	ldr	r2, [pc, #636]	@ (8009d94 <UART_SetConfig+0x2dc>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d004      	beq.n	8009b24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b20:	4313      	orrs	r3, r2
 8009b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009b2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	6812      	ldr	r2, [r2, #0]
 8009b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b38:	430b      	orrs	r3, r1
 8009b3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b42:	f023 010f 	bic.w	r1, r3, #15
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a90      	ldr	r2, [pc, #576]	@ (8009d98 <UART_SetConfig+0x2e0>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d125      	bne.n	8009ba8 <UART_SetConfig+0xf0>
 8009b5c:	4b8f      	ldr	r3, [pc, #572]	@ (8009d9c <UART_SetConfig+0x2e4>)
 8009b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d81a      	bhi.n	8009ba0 <UART_SetConfig+0xe8>
 8009b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <UART_SetConfig+0xb8>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b81 	.word	0x08009b81
 8009b74:	08009b91 	.word	0x08009b91
 8009b78:	08009b89 	.word	0x08009b89
 8009b7c:	08009b99 	.word	0x08009b99
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b86:	e116      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b8e:	e112      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b96:	e10e      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b9e:	e10a      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ba6:	e106      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a7c      	ldr	r2, [pc, #496]	@ (8009da0 <UART_SetConfig+0x2e8>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d138      	bne.n	8009c24 <UART_SetConfig+0x16c>
 8009bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8009d9c <UART_SetConfig+0x2e4>)
 8009bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb8:	f003 030c 	and.w	r3, r3, #12
 8009bbc:	2b0c      	cmp	r3, #12
 8009bbe:	d82d      	bhi.n	8009c1c <UART_SetConfig+0x164>
 8009bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <UART_SetConfig+0x110>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009bfd 	.word	0x08009bfd
 8009bcc:	08009c1d 	.word	0x08009c1d
 8009bd0:	08009c1d 	.word	0x08009c1d
 8009bd4:	08009c1d 	.word	0x08009c1d
 8009bd8:	08009c0d 	.word	0x08009c0d
 8009bdc:	08009c1d 	.word	0x08009c1d
 8009be0:	08009c1d 	.word	0x08009c1d
 8009be4:	08009c1d 	.word	0x08009c1d
 8009be8:	08009c05 	.word	0x08009c05
 8009bec:	08009c1d 	.word	0x08009c1d
 8009bf0:	08009c1d 	.word	0x08009c1d
 8009bf4:	08009c1d 	.word	0x08009c1d
 8009bf8:	08009c15 	.word	0x08009c15
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c02:	e0d8      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c04:	2302      	movs	r3, #2
 8009c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c0a:	e0d4      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c0c:	2304      	movs	r3, #4
 8009c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c12:	e0d0      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c14:	2308      	movs	r3, #8
 8009c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c1a:	e0cc      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c1c:	2310      	movs	r3, #16
 8009c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c22:	e0c8      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a5e      	ldr	r2, [pc, #376]	@ (8009da4 <UART_SetConfig+0x2ec>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d125      	bne.n	8009c7a <UART_SetConfig+0x1c2>
 8009c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8009d9c <UART_SetConfig+0x2e4>)
 8009c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009c38:	2b30      	cmp	r3, #48	@ 0x30
 8009c3a:	d016      	beq.n	8009c6a <UART_SetConfig+0x1b2>
 8009c3c:	2b30      	cmp	r3, #48	@ 0x30
 8009c3e:	d818      	bhi.n	8009c72 <UART_SetConfig+0x1ba>
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d00a      	beq.n	8009c5a <UART_SetConfig+0x1a2>
 8009c44:	2b20      	cmp	r3, #32
 8009c46:	d814      	bhi.n	8009c72 <UART_SetConfig+0x1ba>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <UART_SetConfig+0x19a>
 8009c4c:	2b10      	cmp	r3, #16
 8009c4e:	d008      	beq.n	8009c62 <UART_SetConfig+0x1aa>
 8009c50:	e00f      	b.n	8009c72 <UART_SetConfig+0x1ba>
 8009c52:	2300      	movs	r3, #0
 8009c54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c58:	e0ad      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c60:	e0a9      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c62:	2304      	movs	r3, #4
 8009c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c68:	e0a5      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c6a:	2308      	movs	r3, #8
 8009c6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c70:	e0a1      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c72:	2310      	movs	r3, #16
 8009c74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c78:	e09d      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8009da8 <UART_SetConfig+0x2f0>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d125      	bne.n	8009cd0 <UART_SetConfig+0x218>
 8009c84:	4b45      	ldr	r3, [pc, #276]	@ (8009d9c <UART_SetConfig+0x2e4>)
 8009c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c90:	d016      	beq.n	8009cc0 <UART_SetConfig+0x208>
 8009c92:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c94:	d818      	bhi.n	8009cc8 <UART_SetConfig+0x210>
 8009c96:	2b80      	cmp	r3, #128	@ 0x80
 8009c98:	d00a      	beq.n	8009cb0 <UART_SetConfig+0x1f8>
 8009c9a:	2b80      	cmp	r3, #128	@ 0x80
 8009c9c:	d814      	bhi.n	8009cc8 <UART_SetConfig+0x210>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <UART_SetConfig+0x1f0>
 8009ca2:	2b40      	cmp	r3, #64	@ 0x40
 8009ca4:	d008      	beq.n	8009cb8 <UART_SetConfig+0x200>
 8009ca6:	e00f      	b.n	8009cc8 <UART_SetConfig+0x210>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cae:	e082      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cb6:	e07e      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009cb8:	2304      	movs	r3, #4
 8009cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cbe:	e07a      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cc6:	e076      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cce:	e072      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a35      	ldr	r2, [pc, #212]	@ (8009dac <UART_SetConfig+0x2f4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d12a      	bne.n	8009d30 <UART_SetConfig+0x278>
 8009cda:	4b30      	ldr	r3, [pc, #192]	@ (8009d9c <UART_SetConfig+0x2e4>)
 8009cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ce0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ce4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ce8:	d01a      	beq.n	8009d20 <UART_SetConfig+0x268>
 8009cea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cee:	d81b      	bhi.n	8009d28 <UART_SetConfig+0x270>
 8009cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf4:	d00c      	beq.n	8009d10 <UART_SetConfig+0x258>
 8009cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfa:	d815      	bhi.n	8009d28 <UART_SetConfig+0x270>
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <UART_SetConfig+0x250>
 8009d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d04:	d008      	beq.n	8009d18 <UART_SetConfig+0x260>
 8009d06:	e00f      	b.n	8009d28 <UART_SetConfig+0x270>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d0e:	e052      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d10:	2302      	movs	r3, #2
 8009d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d16:	e04e      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d18:	2304      	movs	r3, #4
 8009d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d1e:	e04a      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d20:	2308      	movs	r3, #8
 8009d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d26:	e046      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d28:	2310      	movs	r3, #16
 8009d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d2e:	e042      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a17      	ldr	r2, [pc, #92]	@ (8009d94 <UART_SetConfig+0x2dc>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d13a      	bne.n	8009db0 <UART_SetConfig+0x2f8>
 8009d3a:	4b18      	ldr	r3, [pc, #96]	@ (8009d9c <UART_SetConfig+0x2e4>)
 8009d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009d44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d48:	d01a      	beq.n	8009d80 <UART_SetConfig+0x2c8>
 8009d4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d4e:	d81b      	bhi.n	8009d88 <UART_SetConfig+0x2d0>
 8009d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d54:	d00c      	beq.n	8009d70 <UART_SetConfig+0x2b8>
 8009d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d5a:	d815      	bhi.n	8009d88 <UART_SetConfig+0x2d0>
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <UART_SetConfig+0x2b0>
 8009d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d64:	d008      	beq.n	8009d78 <UART_SetConfig+0x2c0>
 8009d66:	e00f      	b.n	8009d88 <UART_SetConfig+0x2d0>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d6e:	e022      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d70:	2302      	movs	r3, #2
 8009d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d76:	e01e      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d78:	2304      	movs	r3, #4
 8009d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d7e:	e01a      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d80:	2308      	movs	r3, #8
 8009d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d86:	e016      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d88:	2310      	movs	r3, #16
 8009d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d8e:	e012      	b.n	8009db6 <UART_SetConfig+0x2fe>
 8009d90:	cfff69f3 	.word	0xcfff69f3
 8009d94:	40008000 	.word	0x40008000
 8009d98:	40013800 	.word	0x40013800
 8009d9c:	40021000 	.word	0x40021000
 8009da0:	40004400 	.word	0x40004400
 8009da4:	40004800 	.word	0x40004800
 8009da8:	40004c00 	.word	0x40004c00
 8009dac:	40005000 	.word	0x40005000
 8009db0:	2310      	movs	r3, #16
 8009db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4aae      	ldr	r2, [pc, #696]	@ (800a074 <UART_SetConfig+0x5bc>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	f040 8097 	bne.w	8009ef0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	d823      	bhi.n	8009e12 <UART_SetConfig+0x35a>
 8009dca:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd0 <UART_SetConfig+0x318>)
 8009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd0:	08009df5 	.word	0x08009df5
 8009dd4:	08009e13 	.word	0x08009e13
 8009dd8:	08009dfd 	.word	0x08009dfd
 8009ddc:	08009e13 	.word	0x08009e13
 8009de0:	08009e03 	.word	0x08009e03
 8009de4:	08009e13 	.word	0x08009e13
 8009de8:	08009e13 	.word	0x08009e13
 8009dec:	08009e13 	.word	0x08009e13
 8009df0:	08009e0b 	.word	0x08009e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009df4:	f7fe f91c 	bl	8008030 <HAL_RCC_GetPCLK1Freq>
 8009df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dfa:	e010      	b.n	8009e1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dfc:	4b9e      	ldr	r3, [pc, #632]	@ (800a078 <UART_SetConfig+0x5c0>)
 8009dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e00:	e00d      	b.n	8009e1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e02:	f7fe f8a7 	bl	8007f54 <HAL_RCC_GetSysClockFreq>
 8009e06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e08:	e009      	b.n	8009e1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e10:	e005      	b.n	8009e1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009e12:	2300      	movs	r3, #0
 8009e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 8130 	beq.w	800a086 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2a:	4a94      	ldr	r2, [pc, #592]	@ (800a07c <UART_SetConfig+0x5c4>)
 8009e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e30:	461a      	mov	r2, r3
 8009e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	4413      	add	r3, r2
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d305      	bcc.n	8009e56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d903      	bls.n	8009e5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e5c:	e113      	b.n	800a086 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e60:	2200      	movs	r2, #0
 8009e62:	60bb      	str	r3, [r7, #8]
 8009e64:	60fa      	str	r2, [r7, #12]
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6a:	4a84      	ldr	r2, [pc, #528]	@ (800a07c <UART_SetConfig+0x5c4>)
 8009e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	2200      	movs	r2, #0
 8009e74:	603b      	str	r3, [r7, #0]
 8009e76:	607a      	str	r2, [r7, #4]
 8009e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e80:	f7f6 fcc6 	bl	8000810 <__aeabi_uldivmod>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	f04f 0300 	mov.w	r3, #0
 8009e94:	020b      	lsls	r3, r1, #8
 8009e96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e9a:	0202      	lsls	r2, r0, #8
 8009e9c:	6979      	ldr	r1, [r7, #20]
 8009e9e:	6849      	ldr	r1, [r1, #4]
 8009ea0:	0849      	lsrs	r1, r1, #1
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	eb12 0804 	adds.w	r8, r2, r4
 8009eac:	eb43 0905 	adc.w	r9, r3, r5
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	469a      	mov	sl, r3
 8009eb8:	4693      	mov	fp, r2
 8009eba:	4652      	mov	r2, sl
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	f7f6 fca5 	bl	8000810 <__aeabi_uldivmod>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4613      	mov	r3, r2
 8009ecc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ed4:	d308      	bcc.n	8009ee8 <UART_SetConfig+0x430>
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009edc:	d204      	bcs.n	8009ee8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6a3a      	ldr	r2, [r7, #32]
 8009ee4:	60da      	str	r2, [r3, #12]
 8009ee6:	e0ce      	b.n	800a086 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009eee:	e0ca      	b.n	800a086 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ef8:	d166      	bne.n	8009fc8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009efa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009efe:	2b08      	cmp	r3, #8
 8009f00:	d827      	bhi.n	8009f52 <UART_SetConfig+0x49a>
 8009f02:	a201      	add	r2, pc, #4	@ (adr r2, 8009f08 <UART_SetConfig+0x450>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f2d 	.word	0x08009f2d
 8009f0c:	08009f35 	.word	0x08009f35
 8009f10:	08009f3d 	.word	0x08009f3d
 8009f14:	08009f53 	.word	0x08009f53
 8009f18:	08009f43 	.word	0x08009f43
 8009f1c:	08009f53 	.word	0x08009f53
 8009f20:	08009f53 	.word	0x08009f53
 8009f24:	08009f53 	.word	0x08009f53
 8009f28:	08009f4b 	.word	0x08009f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f2c:	f7fe f880 	bl	8008030 <HAL_RCC_GetPCLK1Freq>
 8009f30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f32:	e014      	b.n	8009f5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f34:	f7fe f892 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 8009f38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f3a:	e010      	b.n	8009f5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f3c:	4b4e      	ldr	r3, [pc, #312]	@ (800a078 <UART_SetConfig+0x5c0>)
 8009f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f40:	e00d      	b.n	8009f5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f42:	f7fe f807 	bl	8007f54 <HAL_RCC_GetSysClockFreq>
 8009f46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f48:	e009      	b.n	8009f5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f50:	e005      	b.n	8009f5e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 8090 	beq.w	800a086 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6a:	4a44      	ldr	r2, [pc, #272]	@ (800a07c <UART_SetConfig+0x5c4>)
 8009f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f78:	005a      	lsls	r2, r3, #1
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	085b      	lsrs	r3, r3, #1
 8009f80:	441a      	add	r2, r3
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	2b0f      	cmp	r3, #15
 8009f90:	d916      	bls.n	8009fc0 <UART_SetConfig+0x508>
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f98:	d212      	bcs.n	8009fc0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f023 030f 	bic.w	r3, r3, #15
 8009fa2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	085b      	lsrs	r3, r3, #1
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	f003 0307 	and.w	r3, r3, #7
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	8bfb      	ldrh	r3, [r7, #30]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	8bfa      	ldrh	r2, [r7, #30]
 8009fbc:	60da      	str	r2, [r3, #12]
 8009fbe:	e062      	b.n	800a086 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fc6:	e05e      	b.n	800a086 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fc8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fcc:	2b08      	cmp	r3, #8
 8009fce:	d828      	bhi.n	800a022 <UART_SetConfig+0x56a>
 8009fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd8 <UART_SetConfig+0x520>)
 8009fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd6:	bf00      	nop
 8009fd8:	08009ffd 	.word	0x08009ffd
 8009fdc:	0800a005 	.word	0x0800a005
 8009fe0:	0800a00d 	.word	0x0800a00d
 8009fe4:	0800a023 	.word	0x0800a023
 8009fe8:	0800a013 	.word	0x0800a013
 8009fec:	0800a023 	.word	0x0800a023
 8009ff0:	0800a023 	.word	0x0800a023
 8009ff4:	0800a023 	.word	0x0800a023
 8009ff8:	0800a01b 	.word	0x0800a01b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ffc:	f7fe f818 	bl	8008030 <HAL_RCC_GetPCLK1Freq>
 800a000:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a002:	e014      	b.n	800a02e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a004:	f7fe f82a 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 800a008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a00a:	e010      	b.n	800a02e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a00c:	4b1a      	ldr	r3, [pc, #104]	@ (800a078 <UART_SetConfig+0x5c0>)
 800a00e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a010:	e00d      	b.n	800a02e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a012:	f7fd ff9f 	bl	8007f54 <HAL_RCC_GetSysClockFreq>
 800a016:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a018:	e009      	b.n	800a02e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a01a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a01e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a020:	e005      	b.n	800a02e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a022:	2300      	movs	r3, #0
 800a024:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a02c:	bf00      	nop
    }

    if (pclk != 0U)
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d028      	beq.n	800a086 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a038:	4a10      	ldr	r2, [pc, #64]	@ (800a07c <UART_SetConfig+0x5c4>)
 800a03a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a03e:	461a      	mov	r2, r3
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	fbb3 f2f2 	udiv	r2, r3, r2
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	441a      	add	r2, r3
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	fbb2 f3f3 	udiv	r3, r2, r3
 800a056:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	2b0f      	cmp	r3, #15
 800a05c:	d910      	bls.n	800a080 <UART_SetConfig+0x5c8>
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a064:	d20c      	bcs.n	800a080 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	b29a      	uxth	r2, r3
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	60da      	str	r2, [r3, #12]
 800a070:	e009      	b.n	800a086 <UART_SetConfig+0x5ce>
 800a072:	bf00      	nop
 800a074:	40008000 	.word	0x40008000
 800a078:	00f42400 	.word	0x00f42400
 800a07c:	0800cbd0 	.word	0x0800cbd0
      }
      else
      {
        ret = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2201      	movs	r2, #1
 800a08a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2201      	movs	r2, #1
 800a092:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2200      	movs	r2, #0
 800a09a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a0a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3730      	adds	r7, #48	@ 0x30
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a0b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0bc:	f003 0308 	and.w	r3, r3, #8
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00a      	beq.n	800a0da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00a      	beq.n	800a0fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a100:	f003 0302 	and.w	r3, r3, #2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00a      	beq.n	800a11e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00a      	beq.n	800a140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	430a      	orrs	r2, r1
 800a13e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a144:	f003 0310 	and.w	r3, r3, #16
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00a      	beq.n	800a162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	430a      	orrs	r2, r1
 800a160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a166:	f003 0320 	and.w	r3, r3, #32
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d01a      	beq.n	800a1c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1ae:	d10a      	bne.n	800a1c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	605a      	str	r2, [r3, #4]
  }
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b098      	sub	sp, #96	@ 0x60
 800a1f8:	af02      	add	r7, sp, #8
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a204:	f7f8 fe68 	bl	8002ed8 <HAL_GetTick>
 800a208:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	2b08      	cmp	r3, #8
 800a216:	d12f      	bne.n	800a278 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a218:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a220:	2200      	movs	r2, #0
 800a222:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f88e 	bl	800a348 <UART_WaitOnFlagUntilTimeout>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d022      	beq.n	800a278 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23a:	e853 3f00 	ldrex	r3, [r3]
 800a23e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a246:	653b      	str	r3, [r7, #80]	@ 0x50
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a250:	647b      	str	r3, [r7, #68]	@ 0x44
 800a252:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a254:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a258:	e841 2300 	strex	r3, r2, [r1]
 800a25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a25e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e6      	bne.n	800a232 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e063      	b.n	800a340 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0304 	and.w	r3, r3, #4
 800a282:	2b04      	cmp	r3, #4
 800a284:	d149      	bne.n	800a31a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a286:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a28e:	2200      	movs	r2, #0
 800a290:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f857 	bl	800a348 <UART_WaitOnFlagUntilTimeout>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d03c      	beq.n	800a31a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2be:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2c6:	e841 2300 	strex	r3, r2, [r1]
 800a2ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e6      	bne.n	800a2a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f023 0301 	bic.w	r3, r3, #1
 800a2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2f2:	61fa      	str	r2, [r7, #28]
 800a2f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	69b9      	ldr	r1, [r7, #24]
 800a2f8:	69fa      	ldr	r2, [r7, #28]
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	617b      	str	r3, [r7, #20]
   return(result);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1e5      	bne.n	800a2d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2220      	movs	r2, #32
 800a30a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	e012      	b.n	800a340 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2220      	movs	r2, #32
 800a326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3758      	adds	r7, #88	@ 0x58
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	603b      	str	r3, [r7, #0]
 800a354:	4613      	mov	r3, r2
 800a356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a358:	e04f      	b.n	800a3fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a360:	d04b      	beq.n	800a3fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a362:	f7f8 fdb9 	bl	8002ed8 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d302      	bcc.n	800a378 <UART_WaitOnFlagUntilTimeout+0x30>
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d101      	bne.n	800a37c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e04e      	b.n	800a41a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	2b00      	cmp	r3, #0
 800a388:	d037      	beq.n	800a3fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b80      	cmp	r3, #128	@ 0x80
 800a38e:	d034      	beq.n	800a3fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2b40      	cmp	r3, #64	@ 0x40
 800a394:	d031      	beq.n	800a3fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	f003 0308 	and.w	r3, r3, #8
 800a3a0:	2b08      	cmp	r3, #8
 800a3a2:	d110      	bne.n	800a3c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2208      	movs	r2, #8
 800a3aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 f838 	bl	800a422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2208      	movs	r2, #8
 800a3b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e029      	b.n	800a41a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3d4:	d111      	bne.n	800a3fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f000 f81e 	bl	800a422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e00f      	b.n	800a41a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69da      	ldr	r2, [r3, #28]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	4013      	ands	r3, r2
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	429a      	cmp	r2, r3
 800a408:	bf0c      	ite	eq
 800a40a:	2301      	moveq	r3, #1
 800a40c:	2300      	movne	r3, #0
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	461a      	mov	r2, r3
 800a412:	79fb      	ldrb	r3, [r7, #7]
 800a414:	429a      	cmp	r2, r3
 800a416:	d0a0      	beq.n	800a35a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a422:	b480      	push	{r7}
 800a424:	b095      	sub	sp, #84	@ 0x54
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a432:	e853 3f00 	ldrex	r3, [r3]
 800a436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a43e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	461a      	mov	r2, r3
 800a446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a448:	643b      	str	r3, [r7, #64]	@ 0x40
 800a44a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a44e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a450:	e841 2300 	strex	r3, r2, [r1]
 800a454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1e6      	bne.n	800a42a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3308      	adds	r3, #8
 800a462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	e853 3f00 	ldrex	r3, [r3]
 800a46a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a472:	f023 0301 	bic.w	r3, r3, #1
 800a476:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3308      	adds	r3, #8
 800a47e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a480:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a482:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a488:	e841 2300 	strex	r3, r2, [r1]
 800a48c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1e3      	bne.n	800a45c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d118      	bne.n	800a4ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f023 0310 	bic.w	r3, r3, #16
 800a4b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ba:	61bb      	str	r3, [r7, #24]
 800a4bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	6979      	ldr	r1, [r7, #20]
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e6      	bne.n	800a49c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4e2:	bf00      	nop
 800a4e4:	3754      	adds	r7, #84	@ 0x54
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b085      	sub	sp, #20
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d101      	bne.n	800a504 <HAL_UARTEx_DisableFifoMode+0x16>
 800a500:	2302      	movs	r3, #2
 800a502:	e027      	b.n	800a554 <HAL_UARTEx_DisableFifoMode+0x66>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2224      	movs	r2, #36	@ 0x24
 800a510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f022 0201 	bic.w	r2, r2, #1
 800a52a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a532:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2220      	movs	r2, #32
 800a546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a570:	2b01      	cmp	r3, #1
 800a572:	d101      	bne.n	800a578 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a574:	2302      	movs	r3, #2
 800a576:	e02d      	b.n	800a5d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2224      	movs	r2, #36	@ 0x24
 800a584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f022 0201 	bic.w	r2, r2, #1
 800a59e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f84f 	bl	800a658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2220      	movs	r2, #32
 800a5c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d101      	bne.n	800a5f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e02d      	b.n	800a650 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2224      	movs	r2, #36	@ 0x24
 800a600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 0201 	bic.w	r2, r2, #1
 800a61a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f811 	bl	800a658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2220      	movs	r2, #32
 800a642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a664:	2b00      	cmp	r3, #0
 800a666:	d108      	bne.n	800a67a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a678:	e031      	b.n	800a6de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a67a:	2308      	movs	r3, #8
 800a67c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a67e:	2308      	movs	r3, #8
 800a680:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	0e5b      	lsrs	r3, r3, #25
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	0f5b      	lsrs	r3, r3, #29
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	7b3a      	ldrb	r2, [r7, #12]
 800a6a6:	4911      	ldr	r1, [pc, #68]	@ (800a6ec <UARTEx_SetNbDataToProcess+0x94>)
 800a6a8:	5c8a      	ldrb	r2, [r1, r2]
 800a6aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6ae:	7b3a      	ldrb	r2, [r7, #12]
 800a6b0:	490f      	ldr	r1, [pc, #60]	@ (800a6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a6b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	7b7a      	ldrb	r2, [r7, #13]
 800a6c4:	4909      	ldr	r1, [pc, #36]	@ (800a6ec <UARTEx_SetNbDataToProcess+0x94>)
 800a6c6:	5c8a      	ldrb	r2, [r1, r2]
 800a6c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6cc:	7b7a      	ldrb	r2, [r7, #13]
 800a6ce:	4908      	ldr	r1, [pc, #32]	@ (800a6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a6d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6de:	bf00      	nop
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	0800cbe8 	.word	0x0800cbe8
 800a6f0:	0800cbf0 	.word	0x0800cbf0

0800a6f4 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b096      	sub	sp, #88	@ 0x58
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3303      	adds	r3, #3
 800a706:	f023 0303 	bic.w	r3, r3, #3
 800a70a:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a70c:	f3ef 8310 	mrs	r3, PRIMASK
 800a710:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800a712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800a714:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800a716:	b672      	cpsid	i
#endif
    return(int_posture);
 800a718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800a71a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a71c:	4b55      	ldr	r3, [pc, #340]	@ (800a874 <_tx_byte_allocate+0x180>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800a722:	2300      	movs	r3, #0
 800a724:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a72a:	621a      	str	r2, [r3, #32]
 800a72c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a72e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a732:	f383 8810 	msr	PRIMASK, r3
}
 800a736:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800a738:	6879      	ldr	r1, [r7, #4]
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 f9b2 	bl	800aaa4 <_tx_byte_pool_search>
 800a740:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a742:	f3ef 8310 	mrs	r3, PRIMASK
 800a746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a74a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a74c:	b672      	cpsid	i
    return(int_posture);
 800a74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800a750:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800a752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800a758:	2301      	movs	r3, #1
 800a75a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a75c:	e006      	b.n	800a76c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a764:	429a      	cmp	r2, r3
 800a766:	d101      	bne.n	800a76c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800a768:	2301      	movs	r3, #1
 800a76a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800a76c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0d9      	beq.n	800a726 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a776:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800a778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d008      	beq.n	800a790 <_tx_byte_allocate+0x9c>
 800a77e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a780:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	f383 8810 	msr	PRIMASK, r3
}
 800a788:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800a78a:	2300      	movs	r3, #0
 800a78c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a78e:	e06c      	b.n	800a86a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d061      	beq.n	800a85a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800a796:	4b38      	ldr	r3, [pc, #224]	@ (800a878 <_tx_byte_allocate+0x184>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d007      	beq.n	800a7ae <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800a79e:	2310      	movs	r3, #16
 800a7a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7a4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	f383 8810 	msr	PRIMASK, r3
}
 800a7ac:	e05d      	b.n	800a86a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800a7ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7b0:	4a32      	ldr	r2, [pc, #200]	@ (800a87c <_tx_byte_allocate+0x188>)
 800a7b2:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800a7b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800a7ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800a7c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800a7c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7d0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7de:	1c5a      	adds	r2, r3, #1
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800a7e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d109      	bne.n	800a7fe <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7ee:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800a7f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7f4:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800a7f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7fa:	675a      	str	r2, [r3, #116]	@ 0x74
 800a7fc:	e011      	b.n	800a822 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a806:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a808:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a80a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a80c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a80e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a812:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a814:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a81a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a81c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a81e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a820:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800a822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a824:	2209      	movs	r2, #9
 800a826:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a82a:	2201      	movs	r2, #1
 800a82c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a82e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800a834:	4b10      	ldr	r3, [pc, #64]	@ (800a878 <_tx_byte_allocate+0x184>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3301      	adds	r3, #1
 800a83a:	4a0f      	ldr	r2, [pc, #60]	@ (800a878 <_tx_byte_allocate+0x184>)
 800a83c:	6013      	str	r3, [r2, #0]
 800a83e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a840:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	f383 8810 	msr	PRIMASK, r3
}
 800a848:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a84a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a84c:	f000 ff96 	bl	800b77c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800a850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a856:	653b      	str	r3, [r7, #80]	@ 0x50
 800a858:	e007      	b.n	800a86a <_tx_byte_allocate+0x176>
 800a85a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a85c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f383 8810 	msr	PRIMASK, r3
}
 800a864:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800a866:	2310      	movs	r3, #16
 800a868:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800a86a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3758      	adds	r7, #88	@ 0x58
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000e9c 	.word	0x20000e9c
 800a878:	20000f34 	.word	0x20000f34
 800a87c:	0800a881 	.word	0x0800a881

0800a880 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08e      	sub	sp, #56	@ 0x38
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a88a:	f3ef 8310 	mrs	r3, PRIMASK
 800a88e:	623b      	str	r3, [r7, #32]
    return(posture);
 800a890:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a892:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a894:	b672      	cpsid	i
    return(int_posture);
 800a896:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800a898:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a89e:	4a33      	ldr	r2, [pc, #204]	@ (800a96c <_tx_byte_pool_cleanup+0xec>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d158      	bne.n	800a956 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d152      	bne.n	800a956 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8b4:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d04c      	beq.n	800a956 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a2b      	ldr	r2, [pc, #172]	@ (800a970 <_tx_byte_pool_cleanup+0xf0>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d147      	bne.n	800a956 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d043      	beq.n	800a956 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d8:	1e5a      	subs	r2, r3, #1
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d103      	bne.n	800a8f2 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	625a      	str	r2, [r3, #36]	@ 0x24
 800a8f0:	e013      	b.n	800a91a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8f6:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8fc:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a902:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a908:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800a90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	429a      	cmp	r2, r3
 800a912:	d102      	bne.n	800a91a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800a914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a918:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a91e:	2b09      	cmp	r3, #9
 800a920:	d119      	bne.n	800a956 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2210      	movs	r2, #16
 800a926:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a92a:	4b12      	ldr	r3, [pc, #72]	@ (800a974 <_tx_byte_pool_cleanup+0xf4>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3301      	adds	r3, #1
 800a930:	4a10      	ldr	r2, [pc, #64]	@ (800a974 <_tx_byte_pool_cleanup+0xf4>)
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a936:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	f383 8810 	msr	PRIMASK, r3
}
 800a93e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fe1b 	bl	800b57c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a946:	f3ef 8310 	mrs	r3, PRIMASK
 800a94a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a94c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a94e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a950:	b672      	cpsid	i
    return(int_posture);
 800a952:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a954:	637b      	str	r3, [r7, #52]	@ 0x34
 800a956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a958:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f383 8810 	msr	PRIMASK, r3
}
 800a960:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a962:	bf00      	nop
 800a964:	3738      	adds	r7, #56	@ 0x38
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	0800a881 	.word	0x0800a881
 800a970:	42595445 	.word	0x42595445
 800a974:	20000f34 	.word	0x20000f34

0800a978 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08e      	sub	sp, #56	@ 0x38
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800a986:	2234      	movs	r2, #52	@ 0x34
 800a988:	2100      	movs	r1, #0
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f002 f84c 	bl	800ca28 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	f023 0303 	bic.w	r3, r3, #3
 800a996:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	f1a3 0208 	sub.w	r2, r3, #8
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800a9ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d4:	3b04      	subs	r3, #4
 800a9d6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800a9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9e4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800a9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800a9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa02:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800aa08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800aa0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa10:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800aa12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa14:	4a1f      	ldr	r2, [pc, #124]	@ (800aa94 <_tx_byte_pool_create+0x11c>)
 800aa16:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa1e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa22:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aa24:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aa26:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa28:	b672      	cpsid	i
    return(int_posture);
 800aa2a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800aa2c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4a19      	ldr	r2, [pc, #100]	@ (800aa98 <_tx_byte_pool_create+0x120>)
 800aa32:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800aa34:	4b19      	ldr	r3, [pc, #100]	@ (800aa9c <_tx_byte_pool_create+0x124>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d109      	bne.n	800aa50 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800aa3c:	4a18      	ldr	r2, [pc, #96]	@ (800aaa0 <_tx_byte_pool_create+0x128>)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa4e:	e011      	b.n	800aa74 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800aa50:	4b13      	ldr	r3, [pc, #76]	@ (800aaa0 <_tx_byte_pool_create+0x128>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	69fa      	ldr	r2, [r7, #28]
 800aa6c:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6a3a      	ldr	r2, [r7, #32]
 800aa72:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800aa74:	4b09      	ldr	r3, [pc, #36]	@ (800aa9c <_tx_byte_pool_create+0x124>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	4a08      	ldr	r2, [pc, #32]	@ (800aa9c <_tx_byte_pool_create+0x124>)
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa80:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	f383 8810 	msr	PRIMASK, r3
}
 800aa88:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3738      	adds	r7, #56	@ 0x38
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	ffffeeee 	.word	0xffffeeee
 800aa98:	42595445 	.word	0x42595445
 800aa9c:	20000e90 	.word	0x20000e90
 800aaa0:	20000e8c 	.word	0x20000e8c

0800aaa4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b097      	sub	sp, #92	@ 0x5c
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800aaae:	2300      	movs	r3, #0
 800aab0:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aab2:	f3ef 8310 	mrs	r3, PRIMASK
 800aab6:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800aaba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aabc:	b672      	cpsid	i
    return(int_posture);
 800aabe:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800aac0:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	3b02      	subs	r3, #2
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	4413      	add	r3, r2
 800aad0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d308      	bcc.n	800aaec <_tx_byte_pool_search+0x48>
 800aada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aadc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	f383 8810 	msr	PRIMASK, r3
}
 800aae4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800aae6:	2300      	movs	r3, #0
 800aae8:	653b      	str	r3, [r7, #80]	@ 0x50
 800aaea:	e0dd      	b.n	800aca8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800aaec:	4b72      	ldr	r3, [pc, #456]	@ (800acb8 <_tx_byte_pool_search+0x214>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aaf6:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	3301      	adds	r3, #1
 800ab04:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800ab06:	2300      	movs	r3, #0
 800ab08:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ab0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ab14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a68      	ldr	r2, [pc, #416]	@ (800acbc <_tx_byte_pool_search+0x218>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d143      	bne.n	800aba6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800ab1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d104      	bne.n	800ab2e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab28:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ab2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab30:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800ab32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800ab38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ab40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab42:	3b08      	subs	r3, #8
 800ab44:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800ab46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d257      	bcs.n	800abfe <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800ab4e:	2300      	movs	r3, #0
 800ab50:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ab52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab54:	3304      	adds	r3, #4
 800ab56:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ab58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5a:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a56      	ldr	r2, [pc, #344]	@ (800acbc <_tx_byte_pool_search+0x218>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d113      	bne.n	800ab8e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ab66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab68:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800ab6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab70:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	1e5a      	subs	r2, r3, #1
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d114      	bne.n	800abb0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab8a:	615a      	str	r2, [r3, #20]
 800ab8c:	e010      	b.n	800abb0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ab8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab90:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800ab92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800ab98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d008      	beq.n	800abb0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800ab9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aba0:	3b01      	subs	r3, #1
 800aba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aba4:	e004      	b.n	800abb0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800aba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aba8:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800abaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800abb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800abb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abb8:	3b01      	subs	r3, #1
 800abba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abbe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	f383 8810 	msr	PRIMASK, r3
}
 800abc6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800abc8:	f3ef 8310 	mrs	r3, PRIMASK
 800abcc:	61bb      	str	r3, [r7, #24]
    return(posture);
 800abce:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800abd0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800abd2:	b672      	cpsid	i
    return(int_posture);
 800abd4:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800abd6:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800abde:	429a      	cmp	r2, r3
 800abe0:	d009      	beq.n	800abf6 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	3301      	adds	r3, #1
 800abee:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800abf4:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800abf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d186      	bne.n	800ab0a <_tx_byte_pool_search+0x66>
 800abfc:	e000      	b.n	800ac00 <_tx_byte_pool_search+0x15c>
                    break;
 800abfe:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800ac00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d048      	beq.n	800ac98 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800ac06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	2b13      	cmp	r3, #19
 800ac0e:	d91e      	bls.n	800ac4e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	3308      	adds	r3, #8
 800ac14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac16:	4413      	add	r3, r2
 800ac18:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ac1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1c:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ac1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac20:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac28:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ac2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ac30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac32:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800ac34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac36:	4a21      	ldr	r2, [pc, #132]	@ (800acbc <_tx_byte_pool_search+0x218>)
 800ac38:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800ac44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac48:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ac4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac50:	3304      	adds	r3, #4
 800ac52:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800ac54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac56:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ac58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	689a      	ldr	r2, [r3, #8]
 800ac62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	f1a3 0208 	sub.w	r2, r3, #8
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d105      	bne.n	800ac84 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ac78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac7a:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	615a      	str	r2, [r3, #20]
 800ac84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac86:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f383 8810 	msr	PRIMASK, r3
}
 800ac8e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ac90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac92:	3308      	adds	r3, #8
 800ac94:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac96:	e007      	b.n	800aca8 <_tx_byte_pool_search+0x204>
 800ac98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac9a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	f383 8810 	msr	PRIMASK, r3
}
 800aca2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800aca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800acaa:	4618      	mov	r0, r3
 800acac:	375c      	adds	r7, #92	@ 0x5c
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	20000e9c 	.word	0x20000e9c
 800acbc:	ffffeeee 	.word	0xffffeeee

0800acc0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800acc4:	f000 fb18 	bl	800b2f8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800acc8:	f001 f880 	bl	800bdcc <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800accc:	4b12      	ldr	r3, [pc, #72]	@ (800ad18 <_tx_initialize_high_level+0x58>)
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	4b12      	ldr	r3, [pc, #72]	@ (800ad1c <_tx_initialize_high_level+0x5c>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800acd8:	4b11      	ldr	r3, [pc, #68]	@ (800ad20 <_tx_initialize_high_level+0x60>)
 800acda:	2200      	movs	r2, #0
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	4b11      	ldr	r3, [pc, #68]	@ (800ad24 <_tx_initialize_high_level+0x64>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800ace4:	4b10      	ldr	r3, [pc, #64]	@ (800ad28 <_tx_initialize_high_level+0x68>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]
 800acea:	4b10      	ldr	r3, [pc, #64]	@ (800ad2c <_tx_initialize_high_level+0x6c>)
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800acf0:	4b0f      	ldr	r3, [pc, #60]	@ (800ad30 <_tx_initialize_high_level+0x70>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ad34 <_tx_initialize_high_level+0x74>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800acfc:	4b0e      	ldr	r3, [pc, #56]	@ (800ad38 <_tx_initialize_high_level+0x78>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	4b0e      	ldr	r3, [pc, #56]	@ (800ad3c <_tx_initialize_high_level+0x7c>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800ad08:	4b0d      	ldr	r3, [pc, #52]	@ (800ad40 <_tx_initialize_high_level+0x80>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad44 <_tx_initialize_high_level+0x84>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
#endif
}
 800ad14:	bf00      	nop
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	20000e64 	.word	0x20000e64
 800ad1c:	20000e68 	.word	0x20000e68
 800ad20:	20000e6c 	.word	0x20000e6c
 800ad24:	20000e70 	.word	0x20000e70
 800ad28:	20000e74 	.word	0x20000e74
 800ad2c:	20000e78 	.word	0x20000e78
 800ad30:	20000e84 	.word	0x20000e84
 800ad34:	20000e88 	.word	0x20000e88
 800ad38:	20000e8c 	.word	0x20000e8c
 800ad3c:	20000e90 	.word	0x20000e90
 800ad40:	20000e7c 	.word	0x20000e7c
 800ad44:	20000e80 	.word	0x20000e80

0800ad48 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800ad4c:	4b10      	ldr	r3, [pc, #64]	@ (800ad90 <_tx_initialize_kernel_enter+0x48>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800ad54:	d00c      	beq.n	800ad70 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ad56:	4b0e      	ldr	r3, [pc, #56]	@ (800ad90 <_tx_initialize_kernel_enter+0x48>)
 800ad58:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800ad5c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800ad5e:	f7f5 fa5f 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800ad62:	f7ff ffad 	bl	800acc0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800ad66:	4b0b      	ldr	r3, [pc, #44]	@ (800ad94 <_tx_initialize_kernel_enter+0x4c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	4a09      	ldr	r2, [pc, #36]	@ (800ad94 <_tx_initialize_kernel_enter+0x4c>)
 800ad6e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ad70:	4b07      	ldr	r3, [pc, #28]	@ (800ad90 <_tx_initialize_kernel_enter+0x48>)
 800ad72:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800ad76:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800ad78:	4b07      	ldr	r3, [pc, #28]	@ (800ad98 <_tx_initialize_kernel_enter+0x50>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7f5 febf 	bl	8000b00 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800ad82:	4b03      	ldr	r3, [pc, #12]	@ (800ad90 <_tx_initialize_kernel_enter+0x48>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800ad88:	f7f5 fa8a 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ad8c:	bf00      	nop
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	2000018c 	.word	0x2000018c
 800ad94:	20000f34 	.word	0x20000f34
 800ad98:	20000e94 	.word	0x20000e94

0800ad9c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08e      	sub	sp, #56	@ 0x38
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ada6:	f3ef 8310 	mrs	r3, PRIMASK
 800adaa:	623b      	str	r3, [r7, #32]
    return(posture);
 800adac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800adae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800adb0:	b672      	cpsid	i
    return(int_posture);
 800adb2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800adb4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adba:	4a33      	ldr	r2, [pc, #204]	@ (800ae88 <_tx_semaphore_cleanup+0xec>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d158      	bne.n	800ae72 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d152      	bne.n	800ae72 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800add0:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	2b00      	cmp	r3, #0
 800add6:	d04c      	beq.n	800ae72 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800add8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a2b      	ldr	r2, [pc, #172]	@ (800ae8c <_tx_semaphore_cleanup+0xf0>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d147      	bne.n	800ae72 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d043      	beq.n	800ae72 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800adf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	1e5a      	subs	r2, r3, #1
 800adf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf8:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800adfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800ae00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d103      	bne.n	800ae0e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800ae06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae08:	2200      	movs	r2, #0
 800ae0a:	60da      	str	r2, [r3, #12]
 800ae0c:	e013      	b.n	800ae36 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae12:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae18:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800ae1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae1e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ae20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae24:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800ae26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d102      	bne.n	800ae36 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800ae30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae34:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3a:	2b06      	cmp	r3, #6
 800ae3c:	d119      	bne.n	800ae72 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	220d      	movs	r2, #13
 800ae42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ae46:	4b12      	ldr	r3, [pc, #72]	@ (800ae90 <_tx_semaphore_cleanup+0xf4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	4a10      	ldr	r2, [pc, #64]	@ (800ae90 <_tx_semaphore_cleanup+0xf4>)
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f383 8810 	msr	PRIMASK, r3
}
 800ae5a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fb8d 	bl	800b57c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae62:	f3ef 8310 	mrs	r3, PRIMASK
 800ae66:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ae68:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ae6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae6c:	b672      	cpsid	i
    return(int_posture);
 800ae6e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ae70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae74:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f383 8810 	msr	PRIMASK, r3
}
 800ae7c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ae7e:	bf00      	nop
 800ae80:	3738      	adds	r7, #56	@ 0x38
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	0800ad9d 	.word	0x0800ad9d
 800ae8c:	53454d41 	.word	0x53454d41
 800ae90:	20000f34 	.word	0x20000f34

0800ae94 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08a      	sub	sp, #40	@ 0x28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800aea0:	221c      	movs	r2, #28
 800aea2:	2100      	movs	r1, #0
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f001 fdbf 	bl	800ca28 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aeb6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeba:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aebc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aebe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aec0:	b672      	cpsid	i
    return(int_posture);
 800aec2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800aec4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	4a18      	ldr	r2, [pc, #96]	@ (800af2c <_tx_semaphore_create+0x98>)
 800aeca:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800aecc:	4b18      	ldr	r3, [pc, #96]	@ (800af30 <_tx_semaphore_create+0x9c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d109      	bne.n	800aee8 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800aed4:	4a17      	ldr	r2, [pc, #92]	@ (800af34 <_tx_semaphore_create+0xa0>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	619a      	str	r2, [r3, #24]
 800aee6:	e011      	b.n	800af0c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800aee8:	4b12      	ldr	r3, [pc, #72]	@ (800af34 <_tx_semaphore_create+0xa0>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800aeee:	6a3b      	ldr	r3, [r7, #32]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	69fa      	ldr	r2, [r7, #28]
 800af04:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a3a      	ldr	r2, [r7, #32]
 800af0a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800af0c:	4b08      	ldr	r3, [pc, #32]	@ (800af30 <_tx_semaphore_create+0x9c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	4a07      	ldr	r2, [pc, #28]	@ (800af30 <_tx_semaphore_create+0x9c>)
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	f383 8810 	msr	PRIMASK, r3
}
 800af20:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3728      	adds	r7, #40	@ 0x28
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	53454d41 	.word	0x53454d41
 800af30:	20000e68 	.word	0x20000e68
 800af34:	20000e64 	.word	0x20000e64

0800af38 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08e      	sub	sp, #56	@ 0x38
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800af42:	2300      	movs	r3, #0
 800af44:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af46:	f3ef 8310 	mrs	r3, PRIMASK
 800af4a:	623b      	str	r3, [r7, #32]
    return(posture);
 800af4c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800af4e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800af50:	b672      	cpsid	i
    return(int_posture);
 800af52:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800af54:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00a      	beq.n	800af74 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	1e5a      	subs	r2, r3, #1
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	609a      	str	r2, [r3, #8]
 800af68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	f383 8810 	msr	PRIMASK, r3
}
 800af72:	e068      	b.n	800b046 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d05d      	beq.n	800b036 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800af7a:	4b35      	ldr	r3, [pc, #212]	@ (800b050 <_tx_semaphore_get+0x118>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d008      	beq.n	800af94 <_tx_semaphore_get+0x5c>
 800af82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af84:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f383 8810 	msr	PRIMASK, r3
}
 800af8c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800af8e:	230d      	movs	r3, #13
 800af90:	637b      	str	r3, [r7, #52]	@ 0x34
 800af92:	e058      	b.n	800b046 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800af94:	4b2f      	ldr	r3, [pc, #188]	@ (800b054 <_tx_semaphore_get+0x11c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800af9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9c:	4a2e      	ldr	r2, [pc, #184]	@ (800b058 <_tx_semaphore_get+0x120>)
 800af9e:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800afa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800afa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800afac:	1c5a      	adds	r2, r3, #1
 800afae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d109      	bne.n	800afd0 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afc0:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800afc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afc6:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800afc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afcc:	675a      	str	r2, [r3, #116]	@ 0x74
 800afce:	e011      	b.n	800aff4 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800afd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afda:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800afdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afe0:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800afe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe6:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800afe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afec:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800afee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aff2:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	1c5a      	adds	r2, r3, #1
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800affe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b000:	2206      	movs	r2, #6
 800b002:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b006:	2201      	movs	r2, #1
 800b008:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b010:	4b0f      	ldr	r3, [pc, #60]	@ (800b050 <_tx_semaphore_get+0x118>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3301      	adds	r3, #1
 800b016:	4a0e      	ldr	r2, [pc, #56]	@ (800b050 <_tx_semaphore_get+0x118>)
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f383 8810 	msr	PRIMASK, r3
}
 800b024:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b026:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b028:	f000 fba8 	bl	800b77c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b032:	637b      	str	r3, [r7, #52]	@ 0x34
 800b034:	e007      	b.n	800b046 <_tx_semaphore_get+0x10e>
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f383 8810 	msr	PRIMASK, r3
}
 800b040:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800b042:	230d      	movs	r3, #13
 800b044:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800b046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3738      	adds	r7, #56	@ 0x38
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	20000f34 	.word	0x20000f34
 800b054:	20000e9c 	.word	0x20000e9c
 800b058:	0800ad9d 	.word	0x0800ad9d

0800b05c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08c      	sub	sp, #48	@ 0x30
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b064:	f3ef 8310 	mrs	r3, PRIMASK
 800b068:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b06a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b06c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b06e:	b672      	cpsid	i
    return(int_posture);
 800b070:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800b072:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800b07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10a      	bne.n	800b096 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	609a      	str	r2, [r3, #8]
 800b08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	f383 8810 	msr	PRIMASK, r3
}
 800b094:	e033      	b.n	800b0fe <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800b09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d103      	bne.n	800b0b0 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	60da      	str	r2, [r3, #12]
 800b0ae:	e00e      	b.n	800b0ce <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0b4:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a3a      	ldr	r2, [r7, #32]
 800b0ba:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0c0:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	6a3a      	ldr	r2, [r7, #32]
 800b0cc:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0d2:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800b0e2:	4b09      	ldr	r3, [pc, #36]	@ (800b108 <_tx_semaphore_put+0xac>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	4a07      	ldr	r2, [pc, #28]	@ (800b108 <_tx_semaphore_put+0xac>)
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f383 8810 	msr	PRIMASK, r3
}
 800b0f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b0f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0fa:	f000 fa3f 	bl	800b57c <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3730      	adds	r7, #48	@ 0x30
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20000f34 	.word	0x20000f34

0800b10c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b092      	sub	sp, #72	@ 0x48
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800b11a:	2300      	movs	r3, #0
 800b11c:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800b11e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b120:	21ef      	movs	r1, #239	@ 0xef
 800b122:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800b124:	f001 fc80 	bl	800ca28 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800b128:	22b0      	movs	r2, #176	@ 0xb0
 800b12a:	2100      	movs	r1, #0
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f001 fc7b 	bl	800ca28 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b148:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b14e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b154:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b15a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b162:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b168:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2220      	movs	r2, #32
 800b16e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800b172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b174:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800b176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b178:	3b01      	subs	r3, #1
 800b17a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b17c:	4413      	add	r3, r2
 800b17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b184:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800b186:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d007      	beq.n	800b19e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800b19c:	e006      	b.n	800b1ac <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1a2:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2203      	movs	r2, #3
 800b1b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	4a48      	ldr	r2, [pc, #288]	@ (800b2d8 <_tx_thread_create+0x1cc>)
 800b1b6:	655a      	str	r2, [r3, #84]	@ 0x54
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800b1be:	4947      	ldr	r1, [pc, #284]	@ (800b2dc <_tx_thread_create+0x1d0>)
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7f5 f8cd 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1d0:	b672      	cpsid	i
    return(int_posture);
 800b1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800b1d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	4a41      	ldr	r2, [pc, #260]	@ (800b2e0 <_tx_thread_create+0x1d4>)
 800b1da:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800b1dc:	4b41      	ldr	r3, [pc, #260]	@ (800b2e4 <_tx_thread_create+0x1d8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10b      	bne.n	800b1fc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800b1e4:	4a40      	ldr	r2, [pc, #256]	@ (800b2e8 <_tx_thread_create+0x1dc>)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800b1fa:	e016      	b.n	800b22a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800b1fc:	4b3a      	ldr	r3, [pc, #232]	@ (800b2e8 <_tx_thread_create+0x1dc>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800b202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b208:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800b20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800b212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b21e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800b22a:	4b2e      	ldr	r3, [pc, #184]	@ (800b2e4 <_tx_thread_create+0x1d8>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3301      	adds	r3, #1
 800b230:	4a2c      	ldr	r2, [pc, #176]	@ (800b2e4 <_tx_thread_create+0x1d8>)
 800b232:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b234:	4b2d      	ldr	r3, [pc, #180]	@ (800b2ec <_tx_thread_create+0x1e0>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3301      	adds	r3, #1
 800b23a:	4a2c      	ldr	r2, [pc, #176]	@ (800b2ec <_tx_thread_create+0x1e0>)
 800b23c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800b23e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b240:	2b01      	cmp	r3, #1
 800b242:	d129      	bne.n	800b298 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b244:	f3ef 8305 	mrs	r3, IPSR
 800b248:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800b24a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800b24c:	4b28      	ldr	r3, [pc, #160]	@ (800b2f0 <_tx_thread_create+0x1e4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4313      	orrs	r3, r2
 800b252:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b256:	d30d      	bcc.n	800b274 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800b258:	4b26      	ldr	r3, [pc, #152]	@ (800b2f4 <_tx_thread_create+0x1e8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800b25e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b260:	2b00      	cmp	r3, #0
 800b262:	d009      	beq.n	800b278 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800b264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b268:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800b26a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b26e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b270:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b272:	e001      	b.n	800b278 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800b274:	2300      	movs	r3, #0
 800b276:	647b      	str	r3, [r7, #68]	@ 0x44
 800b278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	f383 8810 	msr	PRIMASK, r3
}
 800b282:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f000 f979 	bl	800b57c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800b28a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d01e      	beq.n	800b2ce <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800b290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b292:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b294:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b296:	e01a      	b.n	800b2ce <_tx_thread_create+0x1c2>
 800b298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f383 8810 	msr	PRIMASK, r3
}
 800b2a2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2a8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b2aa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b2ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b2ae:	b672      	cpsid	i
    return(int_posture);
 800b2b0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800b2b2:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ec <_tx_thread_create+0x1e0>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	4a0c      	ldr	r2, [pc, #48]	@ (800b2ec <_tx_thread_create+0x1e0>)
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	f383 8810 	msr	PRIMASK, r3
}
 800b2c8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b2ca:	f000 f91d 	bl	800b508 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3748      	adds	r7, #72	@ 0x48
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	0800ba51 	.word	0x0800ba51
 800b2dc:	0800b371 	.word	0x0800b371
 800b2e0:	54485244 	.word	0x54485244
 800b2e4:	20000ea8 	.word	0x20000ea8
 800b2e8:	20000ea4 	.word	0x20000ea4
 800b2ec:	20000f34 	.word	0x20000f34
 800b2f0:	2000018c 	.word	0x2000018c
 800b2f4:	20000ea0 	.word	0x20000ea0

0800b2f8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800b2fc:	4b12      	ldr	r3, [pc, #72]	@ (800b348 <_tx_thread_initialize+0x50>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800b302:	4b12      	ldr	r3, [pc, #72]	@ (800b34c <_tx_thread_initialize+0x54>)
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800b308:	4b11      	ldr	r3, [pc, #68]	@ (800b350 <_tx_thread_initialize+0x58>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b30e:	4b11      	ldr	r3, [pc, #68]	@ (800b354 <_tx_thread_initialize+0x5c>)
 800b310:	2220      	movs	r2, #32
 800b312:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800b314:	2280      	movs	r2, #128	@ 0x80
 800b316:	2100      	movs	r1, #0
 800b318:	480f      	ldr	r0, [pc, #60]	@ (800b358 <_tx_thread_initialize+0x60>)
 800b31a:	f001 fb85 	bl	800ca28 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800b31e:	4b0f      	ldr	r3, [pc, #60]	@ (800b35c <_tx_thread_initialize+0x64>)
 800b320:	2200      	movs	r2, #0
 800b322:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800b324:	4b0e      	ldr	r3, [pc, #56]	@ (800b360 <_tx_thread_initialize+0x68>)
 800b326:	2200      	movs	r2, #0
 800b328:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800b32a:	4b0e      	ldr	r3, [pc, #56]	@ (800b364 <_tx_thread_initialize+0x6c>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800b330:	4b0d      	ldr	r3, [pc, #52]	@ (800b368 <_tx_thread_initialize+0x70>)
 800b332:	2200      	movs	r2, #0
 800b334:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800b336:	4b0d      	ldr	r3, [pc, #52]	@ (800b36c <_tx_thread_initialize+0x74>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800b33e:	4a0b      	ldr	r2, [pc, #44]	@ (800b36c <_tx_thread_initialize+0x74>)
 800b340:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800b342:	bf00      	nop
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20000e9c 	.word	0x20000e9c
 800b34c:	20000ea0 	.word	0x20000ea0
 800b350:	20000eac 	.word	0x20000eac
 800b354:	20000eb0 	.word	0x20000eb0
 800b358:	20000eb4 	.word	0x20000eb4
 800b35c:	20000ea4 	.word	0x20000ea4
 800b360:	20000ea8 	.word	0x20000ea8
 800b364:	20000f34 	.word	0x20000f34
 800b368:	20000f38 	.word	0x20000f38
 800b36c:	20000f3c 	.word	0x20000f3c

0800b370 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b376:	4b21      	ldr	r3, [pc, #132]	@ (800b3fc <_tx_thread_shell_entry+0x8c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b380:	69fa      	ldr	r2, [r7, #28]
 800b382:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b384:	4610      	mov	r0, r2
 800b386:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800b388:	4b1d      	ldr	r3, [pc, #116]	@ (800b400 <_tx_thread_shell_entry+0x90>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800b390:	4b1b      	ldr	r3, [pc, #108]	@ (800b400 <_tx_thread_shell_entry+0x90>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	69f8      	ldr	r0, [r7, #28]
 800b396:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b398:	f3ef 8310 	mrs	r3, PRIMASK
 800b39c:	607b      	str	r3, [r7, #4]
    return(posture);
 800b39e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b3a0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3a2:	b672      	cpsid	i
    return(int_posture);
 800b3a4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800b3a6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b3ba:	4b12      	ldr	r3, [pc, #72]	@ (800b404 <_tx_thread_shell_entry+0x94>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	4a10      	ldr	r2, [pc, #64]	@ (800b404 <_tx_thread_shell_entry+0x94>)
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	f383 8810 	msr	PRIMASK, r3
}
 800b3ce:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b3d0:	f3ef 8314 	mrs	r3, CONTROL
 800b3d4:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800b3d6:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f023 0304 	bic.w	r3, r3, #4
 800b3e0:	617b      	str	r3, [r7, #20]
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f383 8814 	msr	CONTROL, r3
}
 800b3ec:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800b3ee:	69f8      	ldr	r0, [r7, #28]
 800b3f0:	f000 f9c4 	bl	800b77c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b3f4:	bf00      	nop
 800b3f6:	3720      	adds	r7, #32
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	20000e9c 	.word	0x20000e9c
 800b400:	20000f38 	.word	0x20000f38
 800b404:	20000f34 	.word	0x20000f34

0800b408 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08e      	sub	sp, #56	@ 0x38
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b410:	f3ef 8310 	mrs	r3, PRIMASK
 800b414:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800b418:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b41a:	b672      	cpsid	i
    return(int_posture);
 800b41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b41e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b420:	4b35      	ldr	r3, [pc, #212]	@ (800b4f8 <_tx_thread_sleep+0xf0>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800b426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d108      	bne.n	800b43e <_tx_thread_sleep+0x36>
 800b42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	f383 8810 	msr	PRIMASK, r3
}
 800b436:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b438:	2313      	movs	r3, #19
 800b43a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b43c:	e056      	b.n	800b4ec <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b43e:	f3ef 8305 	mrs	r3, IPSR
 800b442:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b444:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b446:	4b2d      	ldr	r3, [pc, #180]	@ (800b4fc <_tx_thread_sleep+0xf4>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d008      	beq.n	800b462 <_tx_thread_sleep+0x5a>
 800b450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b452:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	f383 8810 	msr	PRIMASK, r3
}
 800b45a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b45c:	2313      	movs	r3, #19
 800b45e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b460:	e044      	b.n	800b4ec <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800b462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b464:	4a26      	ldr	r2, [pc, #152]	@ (800b500 <_tx_thread_sleep+0xf8>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d108      	bne.n	800b47c <_tx_thread_sleep+0x74>
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f383 8810 	msr	PRIMASK, r3
}
 800b474:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b476:	2313      	movs	r3, #19
 800b478:	637b      	str	r3, [r7, #52]	@ 0x34
 800b47a:	e037      	b.n	800b4ec <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d108      	bne.n	800b494 <_tx_thread_sleep+0x8c>
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f383 8810 	msr	PRIMASK, r3
}
 800b48c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800b48e:	2300      	movs	r3, #0
 800b490:	637b      	str	r3, [r7, #52]	@ 0x34
 800b492:	e02b      	b.n	800b4ec <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b494:	4b1b      	ldr	r3, [pc, #108]	@ (800b504 <_tx_thread_sleep+0xfc>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d008      	beq.n	800b4ae <_tx_thread_sleep+0xa6>
 800b49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f383 8810 	msr	PRIMASK, r3
}
 800b4a6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800b4a8:	2313      	movs	r3, #19
 800b4aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ac:	e01e      	b.n	800b4ec <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800b4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b0:	2204      	movs	r2, #4
 800b4b2:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800b4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800b504 <_tx_thread_sleep+0xfc>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	4a0d      	ldr	r2, [pc, #52]	@ (800b504 <_tx_thread_sleep+0xfc>)
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	f383 8810 	msr	PRIMASK, r3
}
 800b4dc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b4de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b4e0:	f000 f94c 	bl	800b77c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800b4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3738      	adds	r7, #56	@ 0x38
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000e9c 	.word	0x20000e9c
 800b4fc:	2000018c 	.word	0x2000018c
 800b500:	20000fe4 	.word	0x20000fe4
 800b504:	20000f34 	.word	0x20000f34

0800b508 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800b508:	b480      	push	{r7}
 800b50a:	b089      	sub	sp, #36	@ 0x24
 800b50c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b50e:	4b17      	ldr	r3, [pc, #92]	@ (800b56c <_tx_thread_system_preempt_check+0x64>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d121      	bne.n	800b55e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800b51a:	4b15      	ldr	r3, [pc, #84]	@ (800b570 <_tx_thread_system_preempt_check+0x68>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800b520:	4b14      	ldr	r3, [pc, #80]	@ (800b574 <_tx_thread_system_preempt_check+0x6c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800b526:	69ba      	ldr	r2, [r7, #24]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d017      	beq.n	800b55e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b52e:	4b12      	ldr	r3, [pc, #72]	@ (800b578 <_tx_thread_system_preempt_check+0x70>)
 800b530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b534:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b536:	f3ef 8305 	mrs	r3, IPSR
 800b53a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b53c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10c      	bne.n	800b55c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b542:	f3ef 8310 	mrs	r3, PRIMASK
 800b546:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b548:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800b54a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b54c:	b662      	cpsie	i
}
 800b54e:	bf00      	nop
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f383 8810 	msr	PRIMASK, r3
}
 800b55a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800b55c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800b55e:	bf00      	nop
 800b560:	3724      	adds	r7, #36	@ 0x24
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	20000f34 	.word	0x20000f34
 800b570:	20000e9c 	.word	0x20000e9c
 800b574:	20000ea0 	.word	0x20000ea0
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b096      	sub	sp, #88	@ 0x58
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b584:	f3ef 8310 	mrs	r3, PRIMASK
 800b588:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800b58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800b58c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b58e:	b672      	cpsid	i
    return(int_posture);
 800b590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b592:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d005      	beq.n	800b5a8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	334c      	adds	r3, #76	@ 0x4c
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f000 fcf1 	bl	800bf88 <_tx_timer_system_deactivate>
 800b5a6:	e002      	b.n	800b5ae <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b5ae:	4b6c      	ldr	r3, [pc, #432]	@ (800b760 <_tx_thread_system_resume+0x1e4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	4a6a      	ldr	r2, [pc, #424]	@ (800b760 <_tx_thread_system_resume+0x1e4>)
 800b5b6:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f040 8083 	bne.w	800b6c8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f000 8097 	beq.w	800b6fa <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d172      	bne.n	800b6ba <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5de:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800b5e0:	4a60      	ldr	r2, [pc, #384]	@ (800b764 <_tx_thread_system_resume+0x1e8>)
 800b5e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800b5ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d154      	bne.n	800b69a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800b5f0:	495c      	ldr	r1, [pc, #368]	@ (800b764 <_tx_thread_system_resume+0x1e8>)
 800b5f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800b606:	2201      	movs	r2, #1
 800b608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b60a:	fa02 f303 	lsl.w	r3, r2, r3
 800b60e:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800b610:	4b55      	ldr	r3, [pc, #340]	@ (800b768 <_tx_thread_system_resume+0x1ec>)
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b616:	4313      	orrs	r3, r2
 800b618:	4a53      	ldr	r2, [pc, #332]	@ (800b768 <_tx_thread_system_resume+0x1ec>)
 800b61a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800b61c:	4b53      	ldr	r3, [pc, #332]	@ (800b76c <_tx_thread_system_resume+0x1f0>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b622:	429a      	cmp	r2, r3
 800b624:	d269      	bcs.n	800b6fa <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800b626:	4a51      	ldr	r2, [pc, #324]	@ (800b76c <_tx_thread_system_resume+0x1f0>)
 800b628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b62a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800b62c:	4b50      	ldr	r3, [pc, #320]	@ (800b770 <_tx_thread_system_resume+0x1f4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800b632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b634:	2b00      	cmp	r3, #0
 800b636:	d103      	bne.n	800b640 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800b638:	4a4d      	ldr	r2, [pc, #308]	@ (800b770 <_tx_thread_system_resume+0x1f4>)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	e05c      	b.n	800b6fa <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800b640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b644:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b646:	429a      	cmp	r2, r3
 800b648:	d257      	bcs.n	800b6fa <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800b64a:	4a49      	ldr	r2, [pc, #292]	@ (800b770 <_tx_thread_system_resume+0x1f4>)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b656:	f383 8810 	msr	PRIMASK, r3
}
 800b65a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b65c:	4b40      	ldr	r3, [pc, #256]	@ (800b760 <_tx_thread_system_resume+0x1e4>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800b662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b664:	2b00      	cmp	r3, #0
 800b666:	d174      	bne.n	800b752 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b668:	4b42      	ldr	r3, [pc, #264]	@ (800b774 <_tx_thread_system_resume+0x1f8>)
 800b66a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b66e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b670:	f3ef 8305 	mrs	r3, IPSR
 800b674:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800b676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10c      	bne.n	800b696 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b67c:	f3ef 8310 	mrs	r3, PRIMASK
 800b680:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800b684:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b686:	b662      	cpsie	i
}
 800b688:	bf00      	nop
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	f383 8810 	msr	PRIMASK, r3
}
 800b694:	bf00      	nop
}
 800b696:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800b698:	e05b      	b.n	800b752 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800b69a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b69e:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800b6a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800b6a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6b0:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b6b6:	621a      	str	r2, [r3, #32]
 800b6b8:	e01f      	b.n	800b6fa <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2203      	movs	r2, #3
 800b6c4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b6c6:	e018      	b.n	800b6fa <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d014      	beq.n	800b6fa <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	d010      	beq.n	800b6fa <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d106      	bne.n	800b6ee <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	631a      	str	r2, [r3, #48]	@ 0x30
 800b6ec:	e005      	b.n	800b6fa <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2203      	movs	r2, #3
 800b6f8:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b6fa:	4b1f      	ldr	r3, [pc, #124]	@ (800b778 <_tx_thread_system_resume+0x1fc>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b702:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	f383 8810 	msr	PRIMASK, r3
}
 800b70a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b70c:	4b18      	ldr	r3, [pc, #96]	@ (800b770 <_tx_thread_system_resume+0x1f4>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b712:	429a      	cmp	r2, r3
 800b714:	d020      	beq.n	800b758 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b716:	4b12      	ldr	r3, [pc, #72]	@ (800b760 <_tx_thread_system_resume+0x1e4>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800b71c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d11a      	bne.n	800b758 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b722:	4b14      	ldr	r3, [pc, #80]	@ (800b774 <_tx_thread_system_resume+0x1f8>)
 800b724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b728:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b72a:	f3ef 8305 	mrs	r3, IPSR
 800b72e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b730:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10f      	bne.n	800b756 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b736:	f3ef 8310 	mrs	r3, PRIMASK
 800b73a:	613b      	str	r3, [r7, #16]
    return(posture);
 800b73c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800b73e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b740:	b662      	cpsie	i
}
 800b742:	bf00      	nop
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f383 8810 	msr	PRIMASK, r3
}
 800b74e:	bf00      	nop
}
 800b750:	e001      	b.n	800b756 <_tx_thread_system_resume+0x1da>
                                return;
 800b752:	bf00      	nop
 800b754:	e000      	b.n	800b758 <_tx_thread_system_resume+0x1dc>
 800b756:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800b758:	3758      	adds	r7, #88	@ 0x58
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20000f34 	.word	0x20000f34
 800b764:	20000eb4 	.word	0x20000eb4
 800b768:	20000eac 	.word	0x20000eac
 800b76c:	20000eb0 	.word	0x20000eb0
 800b770:	20000ea0 	.word	0x20000ea0
 800b774:	e000ed04 	.word	0xe000ed04
 800b778:	20000e9c 	.word	0x20000e9c

0800b77c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b09e      	sub	sp, #120	@ 0x78
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b784:	4b81      	ldr	r3, [pc, #516]	@ (800b98c <_tx_thread_system_suspend+0x210>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b78a:	f3ef 8310 	mrs	r3, PRIMASK
 800b78e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800b790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800b792:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b794:	b672      	cpsid	i
    return(int_posture);
 800b796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b798:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d112      	bne.n	800b7c8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800b7a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d008      	beq.n	800b7c0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800b7ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b4:	d004      	beq.n	800b7c0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	334c      	adds	r3, #76	@ 0x4c
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 fb82 	bl	800bec4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	69db      	ldr	r3, [r3, #28]
 800b7c4:	4a72      	ldr	r2, [pc, #456]	@ (800b990 <_tx_thread_system_suspend+0x214>)
 800b7c6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b7c8:	4b72      	ldr	r3, [pc, #456]	@ (800b994 <_tx_thread_system_suspend+0x218>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	4a71      	ldr	r2, [pc, #452]	@ (800b994 <_tx_thread_system_suspend+0x218>)
 800b7d0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	f040 80a6 	bne.w	800b928 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e6:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800b7ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d015      	beq.n	800b822 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7fa:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800b7fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b800:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800b802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b804:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b806:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800b808:	4a63      	ldr	r2, [pc, #396]	@ (800b998 <_tx_thread_system_suspend+0x21c>)
 800b80a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	429a      	cmp	r2, r3
 800b814:	d157      	bne.n	800b8c6 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800b816:	4960      	ldr	r1, [pc, #384]	@ (800b998 <_tx_thread_system_suspend+0x21c>)
 800b818:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b81a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b81c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b820:	e051      	b.n	800b8c6 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800b822:	4a5d      	ldr	r2, [pc, #372]	@ (800b998 <_tx_thread_system_suspend+0x21c>)
 800b824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b826:	2100      	movs	r1, #0
 800b828:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800b82c:	2201      	movs	r2, #1
 800b82e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b830:	fa02 f303 	lsl.w	r3, r2, r3
 800b834:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800b836:	4b59      	ldr	r3, [pc, #356]	@ (800b99c <_tx_thread_system_suspend+0x220>)
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b83c:	43db      	mvns	r3, r3
 800b83e:	4013      	ands	r3, r2
 800b840:	4a56      	ldr	r2, [pc, #344]	@ (800b99c <_tx_thread_system_suspend+0x220>)
 800b842:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800b844:	2300      	movs	r3, #0
 800b846:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800b848:	4b54      	ldr	r3, [pc, #336]	@ (800b99c <_tx_thread_system_suspend+0x220>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800b84e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b850:	2b00      	cmp	r3, #0
 800b852:	d12b      	bne.n	800b8ac <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b854:	4b52      	ldr	r3, [pc, #328]	@ (800b9a0 <_tx_thread_system_suspend+0x224>)
 800b856:	2220      	movs	r2, #32
 800b858:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800b85a:	4b52      	ldr	r3, [pc, #328]	@ (800b9a4 <_tx_thread_system_suspend+0x228>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b862:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b866:	f383 8810 	msr	PRIMASK, r3
}
 800b86a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b86c:	4b49      	ldr	r3, [pc, #292]	@ (800b994 <_tx_thread_system_suspend+0x218>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800b872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b874:	2b00      	cmp	r3, #0
 800b876:	f040 8081 	bne.w	800b97c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b87a:	4b4b      	ldr	r3, [pc, #300]	@ (800b9a8 <_tx_thread_system_suspend+0x22c>)
 800b87c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b880:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b882:	f3ef 8305 	mrs	r3, IPSR
 800b886:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800b888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10c      	bne.n	800b8a8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b88e:	f3ef 8310 	mrs	r3, PRIMASK
 800b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800b894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800b896:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b898:	b662      	cpsie	i
}
 800b89a:	bf00      	nop
 800b89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89e:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8a2:	f383 8810 	msr	PRIMASK, r3
}
 800b8a6:	bf00      	nop
}
 800b8a8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800b8aa:	e067      	b.n	800b97c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800b8ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8ae:	fa93 f3a3 	rbit	r3, r3
 800b8b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8b6:	fab3 f383 	clz	r3, r3
 800b8ba:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800b8bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b8be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8c0:	4413      	add	r3, r2
 800b8c2:	4a37      	ldr	r2, [pc, #220]	@ (800b9a0 <_tx_thread_system_suspend+0x224>)
 800b8c4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800b8c6:	4b37      	ldr	r3, [pc, #220]	@ (800b9a4 <_tx_thread_system_suspend+0x228>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d12b      	bne.n	800b928 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b8d0:	4b33      	ldr	r3, [pc, #204]	@ (800b9a0 <_tx_thread_system_suspend+0x224>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a30      	ldr	r2, [pc, #192]	@ (800b998 <_tx_thread_system_suspend+0x21c>)
 800b8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8da:	4a32      	ldr	r2, [pc, #200]	@ (800b9a4 <_tx_thread_system_suspend+0x228>)
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8e0:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e4:	f383 8810 	msr	PRIMASK, r3
}
 800b8e8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b8ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b994 <_tx_thread_system_suspend+0x218>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800b8f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d144      	bne.n	800b980 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b8f6:	4b2c      	ldr	r3, [pc, #176]	@ (800b9a8 <_tx_thread_system_suspend+0x22c>)
 800b8f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8fc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b8fe:	f3ef 8305 	mrs	r3, IPSR
 800b902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800b904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10c      	bne.n	800b924 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b90a:	f3ef 8310 	mrs	r3, PRIMASK
 800b90e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800b912:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b914:	b662      	cpsie	i
}
 800b916:	bf00      	nop
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	f383 8810 	msr	PRIMASK, r3
}
 800b922:	bf00      	nop
}
 800b924:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800b926:	e02b      	b.n	800b980 <_tx_thread_system_suspend+0x204>
 800b928:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b92a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	f383 8810 	msr	PRIMASK, r3
}
 800b932:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b934:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a4 <_tx_thread_system_suspend+0x228>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d022      	beq.n	800b984 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b93e:	4b15      	ldr	r3, [pc, #84]	@ (800b994 <_tx_thread_system_suspend+0x218>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800b944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b946:	2b00      	cmp	r3, #0
 800b948:	d11c      	bne.n	800b984 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b94a:	4b17      	ldr	r3, [pc, #92]	@ (800b9a8 <_tx_thread_system_suspend+0x22c>)
 800b94c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b950:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b952:	f3ef 8305 	mrs	r3, IPSR
 800b956:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b958:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10c      	bne.n	800b978 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b95e:	f3ef 8310 	mrs	r3, PRIMASK
 800b962:	617b      	str	r3, [r7, #20]
    return(posture);
 800b964:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800b966:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b968:	b662      	cpsie	i
}
 800b96a:	bf00      	nop
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f383 8810 	msr	PRIMASK, r3
}
 800b976:	bf00      	nop
}
 800b978:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800b97a:	e003      	b.n	800b984 <_tx_thread_system_suspend+0x208>
                return;
 800b97c:	bf00      	nop
 800b97e:	e002      	b.n	800b986 <_tx_thread_system_suspend+0x20a>
            return;
 800b980:	bf00      	nop
 800b982:	e000      	b.n	800b986 <_tx_thread_system_suspend+0x20a>
    return;
 800b984:	bf00      	nop
}
 800b986:	3778      	adds	r7, #120	@ 0x78
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20000e9c 	.word	0x20000e9c
 800b990:	200014a0 	.word	0x200014a0
 800b994:	20000f34 	.word	0x20000f34
 800b998:	20000eb4 	.word	0x20000eb4
 800b99c:	20000eac 	.word	0x20000eac
 800b9a0:	20000eb0 	.word	0x20000eb0
 800b9a4:	20000ea0 	.word	0x20000ea0
 800b9a8:	e000ed04 	.word	0xe000ed04

0800b9ac <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b9b2:	4b21      	ldr	r3, [pc, #132]	@ (800ba38 <_tx_thread_time_slice+0x8c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b9bc:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b9be:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b9c0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9c2:	b672      	cpsid	i
    return(int_posture);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800b9c6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b9c8:	4b1c      	ldr	r3, [pc, #112]	@ (800ba3c <_tx_thread_time_slice+0x90>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d024      	beq.n	800ba1e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d120      	bne.n	800ba1e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	69da      	ldr	r2, [r3, #28]
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	4a15      	ldr	r2, [pc, #84]	@ (800ba40 <_tx_thread_time_slice+0x94>)
 800b9ea:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	6a1b      	ldr	r3, [r3, #32]
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d013      	beq.n	800ba1e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d10d      	bne.n	800ba1e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	6a12      	ldr	r2, [r2, #32]
 800ba0a:	490e      	ldr	r1, [pc, #56]	@ (800ba44 <_tx_thread_time_slice+0x98>)
 800ba0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ba10:	4b0d      	ldr	r3, [pc, #52]	@ (800ba48 <_tx_thread_time_slice+0x9c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a0b      	ldr	r2, [pc, #44]	@ (800ba44 <_tx_thread_time_slice+0x98>)
 800ba16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba4c <_tx_thread_time_slice+0xa0>)
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f383 8810 	msr	PRIMASK, r3
}
 800ba28:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800ba2a:	bf00      	nop
 800ba2c:	371c      	adds	r7, #28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	20000e9c 	.word	0x20000e9c
 800ba3c:	20000f44 	.word	0x20000f44
 800ba40:	200014a0 	.word	0x200014a0
 800ba44:	20000eb4 	.word	0x20000eb4
 800ba48:	20000eb0 	.word	0x20000eb0
 800ba4c:	20000ea0 	.word	0x20000ea0

0800ba50 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08a      	sub	sp, #40	@ 0x28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba60:	617b      	str	r3, [r7, #20]
    return(posture);
 800ba62:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ba64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba66:	b672      	cpsid	i
    return(int_posture);
 800ba68:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800ba6a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	d10e      	bne.n	800ba92 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800ba74:	4b13      	ldr	r3, [pc, #76]	@ (800bac4 <_tx_thread_timeout+0x74>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	4a12      	ldr	r2, [pc, #72]	@ (800bac4 <_tx_thread_timeout+0x74>)
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	6a3b      	ldr	r3, [r7, #32]
 800ba80:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f383 8810 	msr	PRIMASK, r3
}
 800ba88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ba8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba8c:	f7ff fd76 	bl	800b57c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800ba90:	e013      	b.n	800baba <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800ba92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba96:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ba9e:	61bb      	str	r3, [r7, #24]
 800baa0:	6a3b      	ldr	r3, [r7, #32]
 800baa2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f383 8810 	msr	PRIMASK, r3
}
 800baaa:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	69b9      	ldr	r1, [r7, #24]
 800bab6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bab8:	4798      	blx	r3
}
 800baba:	bf00      	nop
 800babc:	3728      	adds	r7, #40	@ 0x28
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20000f34 	.word	0x20000f34

0800bac8 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b088      	sub	sp, #32
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bad0:	f3ef 8310 	mrs	r3, PRIMASK
 800bad4:	617b      	str	r3, [r7, #20]
    return(posture);
 800bad6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bad8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bada:	b672      	cpsid	i
    return(int_posture);
 800badc:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800bade:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a1b      	ldr	r3, [r3, #32]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800bae8:	2317      	movs	r3, #23
 800baea:	61fb      	str	r3, [r7, #28]
 800baec:	e00d      	b.n	800bb0a <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d102      	bne.n	800bafc <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800baf6:	2317      	movs	r3, #23
 800baf8:	61fb      	str	r3, [r7, #28]
 800bafa:	e006      	b.n	800bb0a <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3308      	adds	r3, #8
 800bb00:	4618      	mov	r0, r3
 800bb02:	f000 f9df 	bl	800bec4 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800bb06:	2300      	movs	r3, #0
 800bb08:	61fb      	str	r3, [r7, #28]
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f383 8810 	msr	PRIMASK, r3
}
 800bb14:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800bb16:	69fb      	ldr	r3, [r7, #28]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3720      	adds	r7, #32
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b089      	sub	sp, #36	@ 0x24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb2c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb30:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bb32:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bb34:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb36:	b672      	cpsid	i
    return(int_posture);
 800bb38:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800bb3a:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6a1b      	ldr	r3, [r3, #32]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d105      	bne.n	800bb50 <_tx_timer_change+0x30>
    {

        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	60da      	str	r2, [r3, #12]
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	f383 8810 	msr	PRIMASK, r3
}
 800bb5a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3724      	adds	r7, #36	@ 0x24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
	...

0800bb6c <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b08a      	sub	sp, #40	@ 0x28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
 800bb78:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800bb7a:	222c      	movs	r2, #44	@ 0x2c
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 ff52 	bl	800ca28 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb8e:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb94:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bba2:	f3ef 8310 	mrs	r3, PRIMASK
 800bba6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bba8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bbaa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbac:	b672      	cpsid	i
    return(int_posture);
 800bbae:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800bbb0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	4a1c      	ldr	r2, [pc, #112]	@ (800bc28 <_tx_timer_create+0xbc>)
 800bbb6:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800bbb8:	4b1c      	ldr	r3, [pc, #112]	@ (800bc2c <_tx_timer_create+0xc0>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d109      	bne.n	800bbd4 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800bbc0:	4a1b      	ldr	r2, [pc, #108]	@ (800bc30 <_tx_timer_create+0xc4>)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	625a      	str	r2, [r3, #36]	@ 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	629a      	str	r2, [r3, #40]	@ 0x28
 800bbd2:	e011      	b.n	800bbf8 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800bbd4:	4b16      	ldr	r3, [pc, #88]	@ (800bc30 <_tx_timer_create+0xc4>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbde:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	69fa      	ldr	r2, [r7, #28]
 800bbf0:	629a      	str	r2, [r3, #40]	@ 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6a3a      	ldr	r2, [r7, #32]
 800bbf6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800bbf8:	4b0c      	ldr	r3, [pc, #48]	@ (800bc2c <_tx_timer_create+0xc0>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	4a0b      	ldr	r2, [pc, #44]	@ (800bc2c <_tx_timer_create+0xc0>)
 800bc00:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800bc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d104      	bne.n	800bc12 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 f959 	bl	800bec4 <_tx_timer_system_activate>
 800bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc14:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f383 8810 	msr	PRIMASK, r3
}
 800bc1c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3728      	adds	r7, #40	@ 0x28
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	4154494d 	.word	0x4154494d
 800bc2c:	20000fdc 	.word	0x20000fdc
 800bc30:	20000fd8 	.word	0x20000fd8

0800bc34 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b08d      	sub	sp, #52	@ 0x34
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc42:	f3ef 8310 	mrs	r3, PRIMASK
 800bc46:	613b      	str	r3, [r7, #16]
    return(posture);
 800bc48:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800bc4a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc4c:	b672      	cpsid	i
    return(int_posture);
 800bc4e:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 800bc50:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 800bc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d07f      	beq.n	800bd5e <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 800bc62:	4b45      	ldr	r3, [pc, #276]	@ (800bd78 <_tx_timer_deactivate+0x144>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	69fa      	ldr	r2, [r7, #28]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d306      	bcc.n	800bc7a <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800bc6c:	4b43      	ldr	r3, [pc, #268]	@ (800bd7c <_tx_timer_deactivate+0x148>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	69fa      	ldr	r2, [r7, #28]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d201      	bcs.n	800bc7a <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 800bc76:	2301      	movs	r3, #1
 800bc78:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800bc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d12e      	bne.n	800bcde <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 800bc80:	4b3f      	ldr	r3, [pc, #252]	@ (800bd80 <_tx_timer_deactivate+0x14c>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	69fa      	ldr	r2, [r7, #28]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d307      	bcc.n	800bc9a <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800bc8a:	4b3d      	ldr	r3, [pc, #244]	@ (800bd80 <_tx_timer_deactivate+0x14c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	69fa      	ldr	r2, [r7, #28]
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	109b      	asrs	r3, r3, #2
 800bc94:	3301      	adds	r3, #1
 800bc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc98:	e010      	b.n	800bcbc <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800bc9a:	4b37      	ldr	r3, [pc, #220]	@ (800bd78 <_tx_timer_deactivate+0x144>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	69fa      	ldr	r2, [r7, #28]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	109b      	asrs	r3, r3, #2
 800bca4:	62fb      	str	r3, [r7, #44]	@ 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800bca6:	4b35      	ldr	r3, [pc, #212]	@ (800bd7c <_tx_timer_deactivate+0x148>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	4b35      	ldr	r3, [pc, #212]	@ (800bd80 <_tx_timer_deactivate+0x14c>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	109b      	asrs	r3, r3, #2
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb6:	4413      	add	r3, r2
 800bcb8:	3301      	adds	r3, #1
 800bcba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b20      	cmp	r3, #32
 800bcc2:	d908      	bls.n	800bcd6 <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcca:	4413      	add	r3, r2
 800bccc:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 800bcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	e01c      	b.n	800bd10 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	e018      	b.n	800bd10 <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800bcde:	4b29      	ldr	r3, [pc, #164]	@ (800bd84 <_tx_timer_deactivate+0x150>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d00f      	beq.n	800bd08 <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800bce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b20      	cmp	r3, #32
 800bcee:	d906      	bls.n	800bcfe <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	e008      	b.n	800bd10 <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	e003      	b.n	800bd10 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800bd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 800bd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 800bd16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d108      	bne.n	800bd30 <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d117      	bne.n	800bd58 <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	e013      	b.n	800bd58 <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 800bd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	697a      	ldr	r2, [r7, #20]
 800bd3a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	69ba      	ldr	r2, [r7, #24]
 800bd40:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d105      	bne.n	800bd58 <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	69fa      	ldr	r2, [r7, #28]
 800bd50:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	69ba      	ldr	r2, [r7, #24]
 800bd56:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800bd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	619a      	str	r2, [r3, #24]
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	f383 8810 	msr	PRIMASK, r3
}
 800bd68:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3734      	adds	r7, #52	@ 0x34
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	20000fc8 	.word	0x20000fc8
 800bd7c:	20000fcc 	.word	0x20000fcc
 800bd80:	20000fd0 	.word	0x20000fd0
 800bd84:	20000fe0 	.word	0x20000fe0

0800bd88 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd8e:	f3ef 8310 	mrs	r3, PRIMASK
 800bd92:	607b      	str	r3, [r7, #4]
    return(posture);
 800bd94:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800bd96:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd98:	b672      	cpsid	i
    return(int_posture);
 800bd9a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800bd9c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800bd9e:	4b09      	ldr	r3, [pc, #36]	@ (800bdc4 <_tx_timer_expiration_process+0x3c>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3301      	adds	r3, #1
 800bda4:	4a07      	ldr	r2, [pc, #28]	@ (800bdc4 <_tx_timer_expiration_process+0x3c>)
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	f383 8810 	msr	PRIMASK, r3
}
 800bdb2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800bdb4:	4804      	ldr	r0, [pc, #16]	@ (800bdc8 <_tx_timer_expiration_process+0x40>)
 800bdb6:	f7ff fbe1 	bl	800b57c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800bdba:	bf00      	nop
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20000f34 	.word	0x20000f34
 800bdc8:	20000fe4 	.word	0x20000fe4

0800bdcc <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800bdcc:	b590      	push	{r4, r7, lr}
 800bdce:	b089      	sub	sp, #36	@ 0x24
 800bdd0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800bdd2:	4b28      	ldr	r3, [pc, #160]	@ (800be74 <_tx_timer_initialize+0xa8>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800bdd8:	4b27      	ldr	r3, [pc, #156]	@ (800be78 <_tx_timer_initialize+0xac>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800bdde:	4b27      	ldr	r3, [pc, #156]	@ (800be7c <_tx_timer_initialize+0xb0>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800bde4:	4b26      	ldr	r3, [pc, #152]	@ (800be80 <_tx_timer_initialize+0xb4>)
 800bde6:	2200      	movs	r2, #0
 800bde8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800bdea:	4b26      	ldr	r3, [pc, #152]	@ (800be84 <_tx_timer_initialize+0xb8>)
 800bdec:	2200      	movs	r2, #0
 800bdee:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800bdf0:	2280      	movs	r2, #128	@ 0x80
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	4824      	ldr	r0, [pc, #144]	@ (800be88 <_tx_timer_initialize+0xbc>)
 800bdf6:	f000 fe17 	bl	800ca28 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800bdfa:	4b24      	ldr	r3, [pc, #144]	@ (800be8c <_tx_timer_initialize+0xc0>)
 800bdfc:	4a22      	ldr	r2, [pc, #136]	@ (800be88 <_tx_timer_initialize+0xbc>)
 800bdfe:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800be00:	4b23      	ldr	r3, [pc, #140]	@ (800be90 <_tx_timer_initialize+0xc4>)
 800be02:	4a21      	ldr	r2, [pc, #132]	@ (800be88 <_tx_timer_initialize+0xbc>)
 800be04:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800be06:	4b23      	ldr	r3, [pc, #140]	@ (800be94 <_tx_timer_initialize+0xc8>)
 800be08:	4a23      	ldr	r2, [pc, #140]	@ (800be98 <_tx_timer_initialize+0xcc>)
 800be0a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800be0c:	4b21      	ldr	r3, [pc, #132]	@ (800be94 <_tx_timer_initialize+0xc8>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3304      	adds	r3, #4
 800be12:	4a20      	ldr	r2, [pc, #128]	@ (800be94 <_tx_timer_initialize+0xc8>)
 800be14:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800be16:	4b21      	ldr	r3, [pc, #132]	@ (800be9c <_tx_timer_initialize+0xd0>)
 800be18:	4a21      	ldr	r2, [pc, #132]	@ (800bea0 <_tx_timer_initialize+0xd4>)
 800be1a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800be1c:	4b21      	ldr	r3, [pc, #132]	@ (800bea4 <_tx_timer_initialize+0xd8>)
 800be1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800be22:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800be24:	4b20      	ldr	r3, [pc, #128]	@ (800bea8 <_tx_timer_initialize+0xdc>)
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800be2a:	4b1c      	ldr	r3, [pc, #112]	@ (800be9c <_tx_timer_initialize+0xd0>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a1d      	ldr	r2, [pc, #116]	@ (800bea4 <_tx_timer_initialize+0xd8>)
 800be30:	6812      	ldr	r2, [r2, #0]
 800be32:	491d      	ldr	r1, [pc, #116]	@ (800bea8 <_tx_timer_initialize+0xdc>)
 800be34:	6809      	ldr	r1, [r1, #0]
 800be36:	481c      	ldr	r0, [pc, #112]	@ (800bea8 <_tx_timer_initialize+0xdc>)
 800be38:	6800      	ldr	r0, [r0, #0]
 800be3a:	2400      	movs	r4, #0
 800be3c:	9405      	str	r4, [sp, #20]
 800be3e:	2400      	movs	r4, #0
 800be40:	9404      	str	r4, [sp, #16]
 800be42:	9003      	str	r0, [sp, #12]
 800be44:	9102      	str	r1, [sp, #8]
 800be46:	9201      	str	r2, [sp, #4]
 800be48:	9300      	str	r3, [sp, #0]
 800be4a:	4b18      	ldr	r3, [pc, #96]	@ (800beac <_tx_timer_initialize+0xe0>)
 800be4c:	4a18      	ldr	r2, [pc, #96]	@ (800beb0 <_tx_timer_initialize+0xe4>)
 800be4e:	4919      	ldr	r1, [pc, #100]	@ (800beb4 <_tx_timer_initialize+0xe8>)
 800be50:	4819      	ldr	r0, [pc, #100]	@ (800beb8 <_tx_timer_initialize+0xec>)
 800be52:	f7ff f95b 	bl	800b10c <_tx_thread_create>
 800be56:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1e5      	bne.n	800be2a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800be5e:	4b17      	ldr	r3, [pc, #92]	@ (800bebc <_tx_timer_initialize+0xf0>)
 800be60:	2200      	movs	r2, #0
 800be62:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800be64:	4b16      	ldr	r3, [pc, #88]	@ (800bec0 <_tx_timer_initialize+0xf4>)
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800be6a:	bf00      	nop
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd90      	pop	{r4, r7, pc}
 800be72:	bf00      	nop
 800be74:	20000f40 	.word	0x20000f40
 800be78:	200014a0 	.word	0x200014a0
 800be7c:	20000f44 	.word	0x20000f44
 800be80:	20000fd4 	.word	0x20000fd4
 800be84:	20000fe0 	.word	0x20000fe0
 800be88:	20000f48 	.word	0x20000f48
 800be8c:	20000fc8 	.word	0x20000fc8
 800be90:	20000fd0 	.word	0x20000fd0
 800be94:	20000fcc 	.word	0x20000fcc
 800be98:	20000fc4 	.word	0x20000fc4
 800be9c:	20001094 	.word	0x20001094
 800bea0:	200010a0 	.word	0x200010a0
 800bea4:	20001098 	.word	0x20001098
 800bea8:	2000109c 	.word	0x2000109c
 800beac:	4154494d 	.word	0x4154494d
 800beb0:	0800bff9 	.word	0x0800bff9
 800beb4:	0800cb8c 	.word	0x0800cb8c
 800beb8:	20000fe4 	.word	0x20000fe4
 800bebc:	20000fd8 	.word	0x20000fd8
 800bec0:	20000fdc 	.word	0x20000fdc

0800bec4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b089      	sub	sp, #36	@ 0x24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d04a      	beq.n	800bf6e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bede:	d046      	beq.n	800bf6e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d142      	bne.n	800bf6e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	2b20      	cmp	r3, #32
 800beec:	d902      	bls.n	800bef4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800beee:	231f      	movs	r3, #31
 800bef0:	61bb      	str	r3, [r7, #24]
 800bef2:	e002      	b.n	800befa <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	3b01      	subs	r3, #1
 800bef8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800befa:	4b20      	ldr	r3, [pc, #128]	@ (800bf7c <_tx_timer_system_activate+0xb8>)
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4413      	add	r3, r2
 800bf04:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800bf06:	4b1e      	ldr	r3, [pc, #120]	@ (800bf80 <_tx_timer_system_activate+0xbc>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	69fa      	ldr	r2, [r7, #28]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d30b      	bcc.n	800bf28 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800bf10:	4b1b      	ldr	r3, [pc, #108]	@ (800bf80 <_tx_timer_system_activate+0xbc>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	69fa      	ldr	r2, [r7, #28]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	109b      	asrs	r3, r3, #2
 800bf1a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800bf1c:	4b19      	ldr	r3, [pc, #100]	@ (800bf84 <_tx_timer_system_activate+0xc0>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d109      	bne.n	800bf44 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	e011      	b.n	800bf68 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	69fa      	ldr	r2, [r7, #28]
 800bf6c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800bf6e:	bf00      	nop
 800bf70:	3724      	adds	r7, #36	@ 0x24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	20000fd0 	.word	0x20000fd0
 800bf80:	20000fcc 	.word	0x20000fcc
 800bf84:	20000fc8 	.word	0x20000fc8

0800bf88 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b087      	sub	sp, #28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d026      	beq.n	800bfea <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d108      	bne.n	800bfbc <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d117      	bne.n	800bfe4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	601a      	str	r2, [r3, #0]
 800bfba:	e013      	b.n	800bfe4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d105      	bne.n	800bfe4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	619a      	str	r2, [r3, #24]
    }
}
 800bfea:	bf00      	nop
 800bfec:	371c      	adds	r7, #28
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
	...

0800bff8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b098      	sub	sp, #96	@ 0x60
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800c000:	2300      	movs	r3, #0
 800c002:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a73      	ldr	r2, [pc, #460]	@ (800c1d4 <_tx_timer_thread_entry+0x1dc>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	f040 80de 	bne.w	800c1ca <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c00e:	f3ef 8310 	mrs	r3, PRIMASK
 800c012:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800c014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800c016:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c018:	b672      	cpsid	i
    return(int_posture);
 800c01a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800c01c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800c01e:	4b6e      	ldr	r3, [pc, #440]	@ (800c1d8 <_tx_timer_thread_entry+0x1e0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d003      	beq.n	800c034 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f107 020c 	add.w	r2, r7, #12
 800c032:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800c034:	4b68      	ldr	r3, [pc, #416]	@ (800c1d8 <_tx_timer_thread_entry+0x1e0>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2200      	movs	r2, #0
 800c03a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800c03c:	4b66      	ldr	r3, [pc, #408]	@ (800c1d8 <_tx_timer_thread_entry+0x1e0>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	3304      	adds	r3, #4
 800c042:	4a65      	ldr	r2, [pc, #404]	@ (800c1d8 <_tx_timer_thread_entry+0x1e0>)
 800c044:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800c046:	4b64      	ldr	r3, [pc, #400]	@ (800c1d8 <_tx_timer_thread_entry+0x1e0>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	4b64      	ldr	r3, [pc, #400]	@ (800c1dc <_tx_timer_thread_entry+0x1e4>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d103      	bne.n	800c05a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800c052:	4b63      	ldr	r3, [pc, #396]	@ (800c1e0 <_tx_timer_thread_entry+0x1e8>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a60      	ldr	r2, [pc, #384]	@ (800c1d8 <_tx_timer_thread_entry+0x1e0>)
 800c058:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800c05a:	4b62      	ldr	r3, [pc, #392]	@ (800c1e4 <_tx_timer_thread_entry+0x1ec>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	601a      	str	r2, [r3, #0]
 800c060:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c062:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c066:	f383 8810 	msr	PRIMASK, r3
}
 800c06a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c06c:	f3ef 8310 	mrs	r3, PRIMASK
 800c070:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800c072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800c074:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c076:	b672      	cpsid	i
    return(int_posture);
 800c078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c07a:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800c07c:	e07f      	b.n	800c17e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800c088:	2300      	movs	r3, #0
 800c08a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800c08c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c08e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c090:	429a      	cmp	r2, r3
 800c092:	d102      	bne.n	800c09a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800c094:	2300      	movs	r3, #0
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	e00e      	b.n	800c0b8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800c09a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c0a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0a4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c0a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0aa:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800c0ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0ae:	f107 020c 	add.w	r2, r7, #12
 800c0b2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800c0b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0b6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c0b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b20      	cmp	r3, #32
 800c0be:	d911      	bls.n	800c0e4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c0c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800c0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ca:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c0d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0d2:	f107 0208 	add.w	r2, r7, #8
 800c0d6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800c0d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0dc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800c0de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0e0:	60bb      	str	r3, [r7, #8]
 800c0e2:	e01a      	b.n	800c11a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800c0e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800c0ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800c0f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0f6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800c0f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d009      	beq.n	800c114 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c102:	f107 0208 	add.w	r2, r7, #8
 800c106:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800c108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c10a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c10c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800c10e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c110:	60bb      	str	r3, [r7, #8]
 800c112:	e002      	b.n	800c11a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800c114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c116:	2200      	movs	r2, #0
 800c118:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800c11a:	4a33      	ldr	r2, [pc, #204]	@ (800c1e8 <_tx_timer_thread_entry+0x1f0>)
 800c11c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c126:	f383 8810 	msr	PRIMASK, r3
}
 800c12a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800c12c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d002      	beq.n	800c138 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800c132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c134:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c136:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c138:	f3ef 8310 	mrs	r3, PRIMASK
 800c13c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800c140:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c142:	b672      	cpsid	i
    return(int_posture);
 800c144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c146:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800c148:	4b27      	ldr	r3, [pc, #156]	@ (800c1e8 <_tx_timer_thread_entry+0x1f0>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c152:	429a      	cmp	r2, r3
 800c154:	d105      	bne.n	800c162 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800c156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c158:	2200      	movs	r2, #0
 800c15a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800c15c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c15e:	f7ff feb1 	bl	800bec4 <_tx_timer_system_activate>
 800c162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c164:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	f383 8810 	msr	PRIMASK, r3
}
 800c16c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c16e:	f3ef 8310 	mrs	r3, PRIMASK
 800c172:	623b      	str	r3, [r7, #32]
    return(posture);
 800c174:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c176:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c178:	b672      	cpsid	i
    return(int_posture);
 800c17a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c17c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	f47f af7c 	bne.w	800c07e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800c186:	4b17      	ldr	r3, [pc, #92]	@ (800c1e4 <_tx_timer_thread_entry+0x1ec>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d116      	bne.n	800c1bc <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800c18e:	4b17      	ldr	r3, [pc, #92]	@ (800c1ec <_tx_timer_thread_entry+0x1f4>)
 800c190:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c194:	2203      	movs	r2, #3
 800c196:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c19a:	2201      	movs	r2, #1
 800c19c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800c19e:	4b14      	ldr	r3, [pc, #80]	@ (800c1f0 <_tx_timer_thread_entry+0x1f8>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	4a12      	ldr	r2, [pc, #72]	@ (800c1f0 <_tx_timer_thread_entry+0x1f8>)
 800c1a6:	6013      	str	r3, [r2, #0]
 800c1a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f383 8810 	msr	PRIMASK, r3
}
 800c1b2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c1b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c1b6:	f7ff fae1 	bl	800b77c <_tx_thread_system_suspend>
 800c1ba:	e728      	b.n	800c00e <_tx_timer_thread_entry+0x16>
 800c1bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f383 8810 	msr	PRIMASK, r3
}
 800c1c6:	bf00      	nop
            TX_DISABLE
 800c1c8:	e721      	b.n	800c00e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800c1ca:	bf00      	nop
 800c1cc:	3760      	adds	r7, #96	@ 0x60
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	4154494d 	.word	0x4154494d
 800c1d8:	20000fd0 	.word	0x20000fd0
 800c1dc:	20000fcc 	.word	0x20000fcc
 800c1e0:	20000fc8 	.word	0x20000fc8
 800c1e4:	20000fd4 	.word	0x20000fd4
 800c1e8:	20000fe0 	.word	0x20000fe0
 800c1ec:	20000fe4 	.word	0x20000fe4
 800c1f0:	20000f34 	.word	0x20000f34

0800c1f4 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b08a      	sub	sp, #40	@ 0x28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c202:	2300      	movs	r3, #0
 800c204:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d102      	bne.n	800c212 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c20c:	2302      	movs	r3, #2
 800c20e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c210:	e029      	b.n	800c266 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a2d      	ldr	r2, [pc, #180]	@ (800c2cc <_txe_byte_allocate+0xd8>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d002      	beq.n	800c222 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c21c:	2302      	movs	r3, #2
 800c21e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c220:	e021      	b.n	800c266 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d102      	bne.n	800c22e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800c228:	2303      	movs	r3, #3
 800c22a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c22c:	e01b      	b.n	800c266 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d102      	bne.n	800c23a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800c234:	2305      	movs	r3, #5
 800c236:	627b      	str	r3, [r7, #36]	@ 0x24
 800c238:	e015      	b.n	800c266 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	429a      	cmp	r2, r3
 800c242:	d902      	bls.n	800c24a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800c244:	2305      	movs	r3, #5
 800c246:	627b      	str	r3, [r7, #36]	@ 0x24
 800c248:	e00d      	b.n	800c266 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00a      	beq.n	800c266 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c250:	f3ef 8305 	mrs	r3, IPSR
 800c254:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c256:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c258:	4b1d      	ldr	r3, [pc, #116]	@ (800c2d0 <_txe_byte_allocate+0xdc>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d001      	beq.n	800c266 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c262:	2304      	movs	r3, #4
 800c264:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800c266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d108      	bne.n	800c27e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c26c:	4b19      	ldr	r3, [pc, #100]	@ (800c2d4 <_txe_byte_allocate+0xe0>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c272:	6a3b      	ldr	r3, [r7, #32]
 800c274:	4a18      	ldr	r2, [pc, #96]	@ (800c2d8 <_txe_byte_allocate+0xe4>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d101      	bne.n	800c27e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c27a:	2313      	movs	r3, #19
 800c27c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800c27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c280:	2b00      	cmp	r3, #0
 800c282:	d114      	bne.n	800c2ae <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c284:	f3ef 8305 	mrs	r3, IPSR
 800c288:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c28a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c28c:	4b10      	ldr	r3, [pc, #64]	@ (800c2d0 <_txe_byte_allocate+0xdc>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4313      	orrs	r3, r2
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00b      	beq.n	800c2ae <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c296:	f3ef 8305 	mrs	r3, IPSR
 800c29a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c29c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c29e:	4b0c      	ldr	r3, [pc, #48]	@ (800c2d0 <_txe_byte_allocate+0xdc>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c2a8:	d201      	bcs.n	800c2ae <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c2aa:	2313      	movs	r3, #19
 800c2ac:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d106      	bne.n	800c2c2 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	68b9      	ldr	r1, [r7, #8]
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f7fe fa1a 	bl	800a6f4 <_tx_byte_allocate>
 800c2c0:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3728      	adds	r7, #40	@ 0x28
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	42595445 	.word	0x42595445
 800c2d0:	2000018c 	.word	0x2000018c
 800c2d4:	20000e9c 	.word	0x20000e9c
 800c2d8:	20000fe4 	.word	0x20000fe4

0800c2dc <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b092      	sub	sp, #72	@ 0x48
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
 800c2e8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d102      	bne.n	800c2fa <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2f8:	e075      	b.n	800c3e6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800c2fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2fc:	2b34      	cmp	r3, #52	@ 0x34
 800c2fe:	d002      	beq.n	800c306 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c300:	2302      	movs	r3, #2
 800c302:	647b      	str	r3, [r7, #68]	@ 0x44
 800c304:	e06f      	b.n	800c3e6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c306:	f3ef 8310 	mrs	r3, PRIMASK
 800c30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c30e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c310:	b672      	cpsid	i
    return(int_posture);
 800c312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c314:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c316:	4b3b      	ldr	r3, [pc, #236]	@ (800c404 <_txe_byte_pool_create+0x128>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	3301      	adds	r3, #1
 800c31c:	4a39      	ldr	r2, [pc, #228]	@ (800c404 <_txe_byte_pool_create+0x128>)
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c322:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c326:	f383 8810 	msr	PRIMASK, r3
}
 800c32a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800c32c:	4b36      	ldr	r3, [pc, #216]	@ (800c408 <_txe_byte_pool_create+0x12c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c332:	2300      	movs	r3, #0
 800c334:	643b      	str	r3, [r7, #64]	@ 0x40
 800c336:	e009      	b.n	800c34c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d00b      	beq.n	800c358 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800c340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c348:	3301      	adds	r3, #1
 800c34a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c34c:	4b2f      	ldr	r3, [pc, #188]	@ (800c40c <_txe_byte_pool_create+0x130>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c352:	429a      	cmp	r2, r3
 800c354:	d3f0      	bcc.n	800c338 <_txe_byte_pool_create+0x5c>
 800c356:	e000      	b.n	800c35a <_txe_byte_pool_create+0x7e>
                break;
 800c358:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c35a:	f3ef 8310 	mrs	r3, PRIMASK
 800c35e:	623b      	str	r3, [r7, #32]
    return(posture);
 800c360:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c362:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c364:	b672      	cpsid	i
    return(int_posture);
 800c366:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c368:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c36a:	4b26      	ldr	r3, [pc, #152]	@ (800c404 <_txe_byte_pool_create+0x128>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	3b01      	subs	r3, #1
 800c370:	4a24      	ldr	r2, [pc, #144]	@ (800c404 <_txe_byte_pool_create+0x128>)
 800c372:	6013      	str	r3, [r2, #0]
 800c374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c376:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37a:	f383 8810 	msr	PRIMASK, r3
}
 800c37e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c380:	f7ff f8c2 	bl	800b508 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c388:	429a      	cmp	r2, r3
 800c38a:	d102      	bne.n	800c392 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800c38c:	2302      	movs	r3, #2
 800c38e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c390:	e029      	b.n	800c3e6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800c398:	2303      	movs	r3, #3
 800c39a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c39c:	e023      	b.n	800c3e6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b63      	cmp	r3, #99	@ 0x63
 800c3a2:	d802      	bhi.n	800c3aa <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800c3a4:	2305      	movs	r3, #5
 800c3a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3a8:	e01d      	b.n	800c3e6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c3aa:	4b19      	ldr	r3, [pc, #100]	@ (800c410 <_txe_byte_pool_create+0x134>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3b2:	4a18      	ldr	r2, [pc, #96]	@ (800c414 <_txe_byte_pool_create+0x138>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d101      	bne.n	800c3bc <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c3b8:	2313      	movs	r3, #19
 800c3ba:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c3bc:	f3ef 8305 	mrs	r3, IPSR
 800c3c0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c3c2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c3c4:	4b14      	ldr	r3, [pc, #80]	@ (800c418 <_txe_byte_pool_create+0x13c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00b      	beq.n	800c3e6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c3ce:	f3ef 8305 	mrs	r3, IPSR
 800c3d2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c3d4:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c3d6:	4b10      	ldr	r3, [pc, #64]	@ (800c418 <_txe_byte_pool_create+0x13c>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c3e0:	d201      	bcs.n	800c3e6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c3e2:	2313      	movs	r3, #19
 800c3e4:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c3e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d106      	bne.n	800c3fa <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	68b9      	ldr	r1, [r7, #8]
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7fe fac0 	bl	800a978 <_tx_byte_pool_create>
 800c3f8:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800c3fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3748      	adds	r7, #72	@ 0x48
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	20000f34 	.word	0x20000f34
 800c408:	20000e8c 	.word	0x20000e8c
 800c40c:	20000e90 	.word	0x20000e90
 800c410:	20000e9c 	.word	0x20000e9c
 800c414:	20000fe4 	.word	0x20000fe4
 800c418:	2000018c 	.word	0x2000018c

0800c41c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b092      	sub	sp, #72	@ 0x48
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
 800c428:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c42a:	2300      	movs	r3, #0
 800c42c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d102      	bne.n	800c43a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c434:	230c      	movs	r3, #12
 800c436:	647b      	str	r3, [r7, #68]	@ 0x44
 800c438:	e054      	b.n	800c4e4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b1c      	cmp	r3, #28
 800c43e:	d002      	beq.n	800c446 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c440:	230c      	movs	r3, #12
 800c442:	647b      	str	r3, [r7, #68]	@ 0x44
 800c444:	e04e      	b.n	800c4e4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c446:	f3ef 8310 	mrs	r3, PRIMASK
 800c44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c44e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c450:	b672      	cpsid	i
    return(int_posture);
 800c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c454:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c456:	4b36      	ldr	r3, [pc, #216]	@ (800c530 <_txe_semaphore_create+0x114>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	3301      	adds	r3, #1
 800c45c:	4a34      	ldr	r2, [pc, #208]	@ (800c530 <_txe_semaphore_create+0x114>)
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c462:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c466:	f383 8810 	msr	PRIMASK, r3
}
 800c46a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800c46c:	4b31      	ldr	r3, [pc, #196]	@ (800c534 <_txe_semaphore_create+0x118>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c472:	2300      	movs	r3, #0
 800c474:	643b      	str	r3, [r7, #64]	@ 0x40
 800c476:	e009      	b.n	800c48c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d00b      	beq.n	800c498 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800c480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c488:	3301      	adds	r3, #1
 800c48a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c48c:	4b2a      	ldr	r3, [pc, #168]	@ (800c538 <_txe_semaphore_create+0x11c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c492:	429a      	cmp	r2, r3
 800c494:	d3f0      	bcc.n	800c478 <_txe_semaphore_create+0x5c>
 800c496:	e000      	b.n	800c49a <_txe_semaphore_create+0x7e>
                break;
 800c498:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c49a:	f3ef 8310 	mrs	r3, PRIMASK
 800c49e:	623b      	str	r3, [r7, #32]
    return(posture);
 800c4a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c4a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4a4:	b672      	cpsid	i
    return(int_posture);
 800c4a6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c4a8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c4aa:	4b21      	ldr	r3, [pc, #132]	@ (800c530 <_txe_semaphore_create+0x114>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	4a1f      	ldr	r2, [pc, #124]	@ (800c530 <_txe_semaphore_create+0x114>)
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ba:	f383 8810 	msr	PRIMASK, r3
}
 800c4be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c4c0:	f7ff f822 	bl	800b508 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d102      	bne.n	800c4d2 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800c4cc:	230c      	movs	r3, #12
 800c4ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4d0:	e008      	b.n	800c4e4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c4d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c53c <_txe_semaphore_create+0x120>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4da:	4a19      	ldr	r2, [pc, #100]	@ (800c540 <_txe_semaphore_create+0x124>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d101      	bne.n	800c4e4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c4e0:	2313      	movs	r3, #19
 800c4e2:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c4e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d114      	bne.n	800c514 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c4ea:	f3ef 8305 	mrs	r3, IPSR
 800c4ee:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c4f0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c4f2:	4b14      	ldr	r3, [pc, #80]	@ (800c544 <_txe_semaphore_create+0x128>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00b      	beq.n	800c514 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c4fc:	f3ef 8305 	mrs	r3, IPSR
 800c500:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c502:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c504:	4b0f      	ldr	r3, [pc, #60]	@ (800c544 <_txe_semaphore_create+0x128>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4313      	orrs	r3, r2
 800c50a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c50e:	d201      	bcs.n	800c514 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c510:	2313      	movs	r3, #19
 800c512:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c516:	2b00      	cmp	r3, #0
 800c518:	d105      	bne.n	800c526 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	68b9      	ldr	r1, [r7, #8]
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f7fe fcb8 	bl	800ae94 <_tx_semaphore_create>
 800c524:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800c526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3748      	adds	r7, #72	@ 0x48
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20000f34 	.word	0x20000f34
 800c534:	20000e64 	.word	0x20000e64
 800c538:	20000e68 	.word	0x20000e68
 800c53c:	20000e9c 	.word	0x20000e9c
 800c540:	20000fe4 	.word	0x20000fe4
 800c544:	2000018c 	.word	0x2000018c

0800c548 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c552:	2300      	movs	r3, #0
 800c554:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c55c:	230c      	movs	r3, #12
 800c55e:	617b      	str	r3, [r7, #20]
 800c560:	e01f      	b.n	800c5a2 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a15      	ldr	r2, [pc, #84]	@ (800c5bc <_txe_semaphore_get+0x74>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d002      	beq.n	800c572 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c56c:	230c      	movs	r3, #12
 800c56e:	617b      	str	r3, [r7, #20]
 800c570:	e017      	b.n	800c5a2 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d014      	beq.n	800c5a2 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c578:	f3ef 8305 	mrs	r3, IPSR
 800c57c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c57e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c580:	4b0f      	ldr	r3, [pc, #60]	@ (800c5c0 <_txe_semaphore_get+0x78>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4313      	orrs	r3, r2
 800c586:	2b00      	cmp	r3, #0
 800c588:	d002      	beq.n	800c590 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c58a:	2304      	movs	r3, #4
 800c58c:	617b      	str	r3, [r7, #20]
 800c58e:	e008      	b.n	800c5a2 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c590:	4b0c      	ldr	r3, [pc, #48]	@ (800c5c4 <_txe_semaphore_get+0x7c>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	4a0b      	ldr	r2, [pc, #44]	@ (800c5c8 <_txe_semaphore_get+0x80>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d101      	bne.n	800c5a2 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c59e:	2304      	movs	r3, #4
 800c5a0:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d104      	bne.n	800c5b2 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7fe fcc4 	bl	800af38 <_tx_semaphore_get>
 800c5b0:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c5b2:	697b      	ldr	r3, [r7, #20]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3718      	adds	r7, #24
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	53454d41 	.word	0x53454d41
 800c5c0:	2000018c 	.word	0x2000018c
 800c5c4:	20000e9c 	.word	0x20000e9c
 800c5c8:	20000fe4 	.word	0x20000fe4

0800c5cc <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d102      	bne.n	800c5e0 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c5da:	230c      	movs	r3, #12
 800c5dc:	60fb      	str	r3, [r7, #12]
 800c5de:	e00b      	b.n	800c5f8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a07      	ldr	r2, [pc, #28]	@ (800c604 <_txe_semaphore_put+0x38>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d002      	beq.n	800c5f0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c5ea:	230c      	movs	r3, #12
 800c5ec:	60fb      	str	r3, [r7, #12]
 800c5ee:	e003      	b.n	800c5f8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7fe fd33 	bl	800b05c <_tx_semaphore_put>
 800c5f6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	53454d41 	.word	0x53454d41

0800c608 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b09a      	sub	sp, #104	@ 0x68
 800c60c:	af06      	add	r7, sp, #24
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c616:	2300      	movs	r3, #0
 800c618:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d102      	bne.n	800c626 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c620:	230e      	movs	r3, #14
 800c622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c624:	e0bb      	b.n	800c79e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800c626:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c628:	2bb0      	cmp	r3, #176	@ 0xb0
 800c62a:	d002      	beq.n	800c632 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c62c:	230e      	movs	r3, #14
 800c62e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c630:	e0b5      	b.n	800c79e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c632:	f3ef 8310 	mrs	r3, PRIMASK
 800c636:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800c63a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c63c:	b672      	cpsid	i
    return(int_posture);
 800c63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c640:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c642:	4b64      	ldr	r3, [pc, #400]	@ (800c7d4 <_txe_thread_create+0x1cc>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3301      	adds	r3, #1
 800c648:	4a62      	ldr	r2, [pc, #392]	@ (800c7d4 <_txe_thread_create+0x1cc>)
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c652:	f383 8810 	msr	PRIMASK, r3
}
 800c656:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800c658:	2300      	movs	r3, #0
 800c65a:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800c65c:	4b5e      	ldr	r3, [pc, #376]	@ (800c7d8 <_txe_thread_create+0x1d0>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c662:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c664:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800c666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c668:	3b01      	subs	r3, #1
 800c66a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c66c:	4413      	add	r3, r2
 800c66e:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800c670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c672:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c674:	2300      	movs	r3, #0
 800c676:	647b      	str	r3, [r7, #68]	@ 0x44
 800c678:	e02b      	b.n	800c6d2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c67e:	429a      	cmp	r2, r3
 800c680:	d101      	bne.n	800c686 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800c682:	2301      	movs	r3, #1
 800c684:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800c686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d028      	beq.n	800c6de <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800c68c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c692:	429a      	cmp	r2, r3
 800c694:	d308      	bcc.n	800c6a8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800c696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d203      	bcs.n	800c6a8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800c6a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d308      	bcc.n	800c6c4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800c6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d203      	bcs.n	800c6c4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800c6c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6ca:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c6cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6d2:	4b42      	ldr	r3, [pc, #264]	@ (800c7dc <_txe_thread_create+0x1d4>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d3ce      	bcc.n	800c67a <_txe_thread_create+0x72>
 800c6dc:	e000      	b.n	800c6e0 <_txe_thread_create+0xd8>
                break;
 800c6de:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c6e4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c6e6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c6e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6ea:	b672      	cpsid	i
    return(int_posture);
 800c6ec:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c6f0:	4b38      	ldr	r3, [pc, #224]	@ (800c7d4 <_txe_thread_create+0x1cc>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	4a37      	ldr	r2, [pc, #220]	@ (800c7d4 <_txe_thread_create+0x1cc>)
 800c6f8:	6013      	str	r3, [r2, #0]
 800c6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	f383 8810 	msr	PRIMASK, r3
}
 800c704:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c706:	f7fe feff 	bl	800b508 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c70e:	429a      	cmp	r2, r3
 800c710:	d102      	bne.n	800c718 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800c712:	230e      	movs	r3, #14
 800c714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c716:	e042      	b.n	800c79e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800c718:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d102      	bne.n	800c724 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c71e:	2303      	movs	r3, #3
 800c720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c722:	e03c      	b.n	800c79e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d102      	bne.n	800c730 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c72a:	2303      	movs	r3, #3
 800c72c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c72e:	e036      	b.n	800c79e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800c730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c732:	2bc7      	cmp	r3, #199	@ 0xc7
 800c734:	d802      	bhi.n	800c73c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800c736:	2305      	movs	r3, #5
 800c738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c73a:	e030      	b.n	800c79e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800c73c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c73e:	2b1f      	cmp	r3, #31
 800c740:	d902      	bls.n	800c748 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800c742:	230f      	movs	r3, #15
 800c744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c746:	e02a      	b.n	800c79e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800c748:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c74a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d902      	bls.n	800c756 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800c750:	2318      	movs	r3, #24
 800c752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c754:	e023      	b.n	800c79e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800c756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d902      	bls.n	800c762 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800c75c:	2310      	movs	r3, #16
 800c75e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c760:	e01d      	b.n	800c79e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800c762:	4b1f      	ldr	r3, [pc, #124]	@ (800c7e0 <_txe_thread_create+0x1d8>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800c768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76a:	4a1e      	ldr	r2, [pc, #120]	@ (800c7e4 <_txe_thread_create+0x1dc>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d101      	bne.n	800c774 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c770:	2313      	movs	r3, #19
 800c772:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c774:	f3ef 8305 	mrs	r3, IPSR
 800c778:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c77a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c77c:	4b1a      	ldr	r3, [pc, #104]	@ (800c7e8 <_txe_thread_create+0x1e0>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4313      	orrs	r3, r2
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00b      	beq.n	800c79e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c786:	f3ef 8305 	mrs	r3, IPSR
 800c78a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c78c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c78e:	4b16      	ldr	r3, [pc, #88]	@ (800c7e8 <_txe_thread_create+0x1e0>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4313      	orrs	r3, r2
 800c794:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c798:	d201      	bcs.n	800c79e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c79a:	2313      	movs	r3, #19
 800c79c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c79e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d112      	bne.n	800c7ca <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800c7a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7a6:	9305      	str	r3, [sp, #20]
 800c7a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7aa:	9304      	str	r3, [sp, #16]
 800c7ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7ae:	9303      	str	r3, [sp, #12]
 800c7b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7b2:	9302      	str	r3, [sp, #8]
 800c7b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7b6:	9301      	str	r3, [sp, #4]
 800c7b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	68b9      	ldr	r1, [r7, #8]
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7fe fca2 	bl	800b10c <_tx_thread_create>
 800c7c8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800c7ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3750      	adds	r7, #80	@ 0x50
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	20000f34 	.word	0x20000f34
 800c7d8:	20000ea4 	.word	0x20000ea4
 800c7dc:	20000ea8 	.word	0x20000ea8
 800c7e0:	20000e9c 	.word	0x20000e9c
 800c7e4:	20000fe4 	.word	0x20000fe4
 800c7e8:	2000018c 	.word	0x2000018c

0800c7ec <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d102      	bne.n	800c800 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c7fa:	2315      	movs	r3, #21
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	e00b      	b.n	800c818 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a07      	ldr	r2, [pc, #28]	@ (800c824 <_txe_timer_activate+0x38>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d002      	beq.n	800c810 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c80a:	2315      	movs	r3, #21
 800c80c:	60fb      	str	r3, [r7, #12]
 800c80e:	e003      	b.n	800c818 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff f959 	bl	800bac8 <_tx_timer_activate>
 800c816:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c818:	68fb      	ldr	r3, [r7, #12]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	4154494d 	.word	0x4154494d

0800c828 <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d102      	bne.n	800c840 <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c83a:	2315      	movs	r3, #21
 800c83c:	617b      	str	r3, [r7, #20]
 800c83e:	e020      	b.n	800c882 <_txe_timer_change+0x5a>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a11      	ldr	r2, [pc, #68]	@ (800c88c <_txe_timer_change+0x64>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d002      	beq.n	800c850 <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c84a:	2315      	movs	r3, #21
 800c84c:	617b      	str	r3, [r7, #20]
 800c84e:	e018      	b.n	800c882 <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d102      	bne.n	800c85c <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 800c856:	2316      	movs	r3, #22
 800c858:	617b      	str	r3, [r7, #20]
 800c85a:	e012      	b.n	800c882 <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c85c:	f3ef 8305 	mrs	r3, IPSR
 800c860:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c862:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800c864:	4b0a      	ldr	r3, [pc, #40]	@ (800c890 <_txe_timer_change+0x68>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4313      	orrs	r3, r2
 800c86a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c86e:	d302      	bcc.n	800c876 <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c870:	2313      	movs	r3, #19
 800c872:	617b      	str	r3, [r7, #20]
 800c874:	e005      	b.n	800c882 <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f7ff f950 	bl	800bb20 <_tx_timer_change>
 800c880:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c882:	697b      	ldr	r3, [r7, #20]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3718      	adds	r7, #24
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	4154494d 	.word	0x4154494d
 800c890:	2000018c 	.word	0x2000018c

0800c894 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b096      	sub	sp, #88	@ 0x58
 800c898:	af04      	add	r7, sp, #16
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
 800c8a0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d102      	bne.n	800c8b2 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c8ac:	2315      	movs	r3, #21
 800c8ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8b0:	e059      	b.n	800c966 <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800c8b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8b4:	2b2c      	cmp	r3, #44	@ 0x2c
 800c8b6:	d002      	beq.n	800c8be <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c8b8:	2315      	movs	r3, #21
 800c8ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8bc:	e053      	b.n	800c966 <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8be:	f3ef 8310 	mrs	r3, PRIMASK
 800c8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8c8:	b672      	cpsid	i
    return(int_posture);
 800c8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c8cc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c8ce:	4b41      	ldr	r3, [pc, #260]	@ (800c9d4 <_txe_timer_create+0x140>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	4a3f      	ldr	r2, [pc, #252]	@ (800c9d4 <_txe_timer_create+0x140>)
 800c8d6:	6013      	str	r3, [r2, #0]
 800c8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8da:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8de:	f383 8810 	msr	PRIMASK, r3
}
 800c8e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800c8e4:	4b3c      	ldr	r3, [pc, #240]	@ (800c9d8 <_txe_timer_create+0x144>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8ee:	e009      	b.n	800c904 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d00b      	beq.n	800c910 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800c8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800c8fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c900:	3301      	adds	r3, #1
 800c902:	643b      	str	r3, [r7, #64]	@ 0x40
 800c904:	4b35      	ldr	r3, [pc, #212]	@ (800c9dc <_txe_timer_create+0x148>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d3f0      	bcc.n	800c8f0 <_txe_timer_create+0x5c>
 800c90e:	e000      	b.n	800c912 <_txe_timer_create+0x7e>
                break;
 800c910:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c912:	f3ef 8310 	mrs	r3, PRIMASK
 800c916:	623b      	str	r3, [r7, #32]
    return(posture);
 800c918:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c91a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c91c:	b672      	cpsid	i
    return(int_posture);
 800c91e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c920:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c922:	4b2c      	ldr	r3, [pc, #176]	@ (800c9d4 <_txe_timer_create+0x140>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3b01      	subs	r3, #1
 800c928:	4a2a      	ldr	r2, [pc, #168]	@ (800c9d4 <_txe_timer_create+0x140>)
 800c92a:	6013      	str	r3, [r2, #0]
 800c92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c932:	f383 8810 	msr	PRIMASK, r3
}
 800c936:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c938:	f7fe fde6 	bl	800b508 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c940:	429a      	cmp	r2, r3
 800c942:	d102      	bne.n	800c94a <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800c944:	2315      	movs	r3, #21
 800c946:	647b      	str	r3, [r7, #68]	@ 0x44
 800c948:	e00d      	b.n	800c966 <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800c94a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d102      	bne.n	800c956 <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800c950:	2316      	movs	r3, #22
 800c952:	647b      	str	r3, [r7, #68]	@ 0x44
 800c954:	e007      	b.n	800c966 <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800c956:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d004      	beq.n	800c966 <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800c95c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800c962:	2317      	movs	r3, #23
 800c964:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d11d      	bne.n	800c9a8 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c96c:	4b1c      	ldr	r3, [pc, #112]	@ (800c9e0 <_txe_timer_create+0x14c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c974:	4a1b      	ldr	r2, [pc, #108]	@ (800c9e4 <_txe_timer_create+0x150>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d101      	bne.n	800c97e <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c97a:	2313      	movs	r3, #19
 800c97c:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c97e:	f3ef 8305 	mrs	r3, IPSR
 800c982:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c984:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c986:	4b18      	ldr	r3, [pc, #96]	@ (800c9e8 <_txe_timer_create+0x154>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00b      	beq.n	800c9a8 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c990:	f3ef 8305 	mrs	r3, IPSR
 800c994:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c996:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c998:	4b13      	ldr	r3, [pc, #76]	@ (800c9e8 <_txe_timer_create+0x154>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c9a2:	d201      	bcs.n	800c9a8 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c9a4:	2313      	movs	r3, #19
 800c9a6:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c9a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10c      	bne.n	800c9c8 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800c9ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9b0:	9302      	str	r3, [sp, #8]
 800c9b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9b4:	9301      	str	r3, [sp, #4]
 800c9b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	68b9      	ldr	r1, [r7, #8]
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f7ff f8d3 	bl	800bb6c <_tx_timer_create>
 800c9c6:	6478      	str	r0, [r7, #68]	@ 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800c9c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3748      	adds	r7, #72	@ 0x48
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	20000f34 	.word	0x20000f34
 800c9d8:	20000fd8 	.word	0x20000fd8
 800c9dc:	20000fdc 	.word	0x20000fdc
 800c9e0:	20000e9c 	.word	0x20000e9c
 800c9e4:	20000fe4 	.word	0x20000fe4
 800c9e8:	2000018c 	.word	0x2000018c

0800c9ec <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d102      	bne.n	800ca00 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c9fa:	2315      	movs	r3, #21
 800c9fc:	60fb      	str	r3, [r7, #12]
 800c9fe:	e00b      	b.n	800ca18 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a07      	ldr	r2, [pc, #28]	@ (800ca24 <_txe_timer_deactivate+0x38>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d002      	beq.n	800ca10 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800ca0a:	2315      	movs	r3, #21
 800ca0c:	60fb      	str	r3, [r7, #12]
 800ca0e:	e003      	b.n	800ca18 <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f7ff f90f 	bl	800bc34 <_tx_timer_deactivate>
 800ca16:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800ca18:	68fb      	ldr	r3, [r7, #12]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	4154494d 	.word	0x4154494d

0800ca28 <memset>:
 800ca28:	4402      	add	r2, r0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d100      	bne.n	800ca32 <memset+0xa>
 800ca30:	4770      	bx	lr
 800ca32:	f803 1b01 	strb.w	r1, [r3], #1
 800ca36:	e7f9      	b.n	800ca2c <memset+0x4>

0800ca38 <__libc_init_array>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	4d0d      	ldr	r5, [pc, #52]	@ (800ca70 <__libc_init_array+0x38>)
 800ca3c:	4c0d      	ldr	r4, [pc, #52]	@ (800ca74 <__libc_init_array+0x3c>)
 800ca3e:	1b64      	subs	r4, r4, r5
 800ca40:	10a4      	asrs	r4, r4, #2
 800ca42:	2600      	movs	r6, #0
 800ca44:	42a6      	cmp	r6, r4
 800ca46:	d109      	bne.n	800ca5c <__libc_init_array+0x24>
 800ca48:	4d0b      	ldr	r5, [pc, #44]	@ (800ca78 <__libc_init_array+0x40>)
 800ca4a:	4c0c      	ldr	r4, [pc, #48]	@ (800ca7c <__libc_init_array+0x44>)
 800ca4c:	f000 f818 	bl	800ca80 <_init>
 800ca50:	1b64      	subs	r4, r4, r5
 800ca52:	10a4      	asrs	r4, r4, #2
 800ca54:	2600      	movs	r6, #0
 800ca56:	42a6      	cmp	r6, r4
 800ca58:	d105      	bne.n	800ca66 <__libc_init_array+0x2e>
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca60:	4798      	blx	r3
 800ca62:	3601      	adds	r6, #1
 800ca64:	e7ee      	b.n	800ca44 <__libc_init_array+0xc>
 800ca66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca6a:	4798      	blx	r3
 800ca6c:	3601      	adds	r6, #1
 800ca6e:	e7f2      	b.n	800ca56 <__libc_init_array+0x1e>
 800ca70:	0800cc00 	.word	0x0800cc00
 800ca74:	0800cc00 	.word	0x0800cc00
 800ca78:	0800cc00 	.word	0x0800cc00
 800ca7c:	0800cc04 	.word	0x0800cc04

0800ca80 <_init>:
 800ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca82:	bf00      	nop
 800ca84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca86:	bc08      	pop	{r3}
 800ca88:	469e      	mov	lr, r3
 800ca8a:	4770      	bx	lr

0800ca8c <_fini>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	bf00      	nop
 800ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca92:	bc08      	pop	{r3}
 800ca94:	469e      	mov	lr, r3
 800ca96:	4770      	bx	lr
